node_1|node_2|edge|chunk_id|description|node_3|node_4|node_5|node_6|node_7|node_8|data
script engine binaries|malware analysis|used for|8f9ffe4ca7a642a8b8b10de05bcebdb1||||||||
automatic reverse engineering|script api tracers|enables the creation of|8f9ffe4ca7a642a8b8b10de05bcebdb1||||||||
toshinori usui|ntt secure platform laboratories/institute of industrial science, the university of tokyo, japan|affiliation|8f9ffe4ca7a642a8b8b10de05bcebdb1||||||||
malware entity|script api tracer|Dynamic analysis of malware scripts using reverse engineering techniques to enhance the function of script API tracers.|a1365391633d4e13886e07744698bf0f||||||||
script engine binaries|malicious script|Target of dynamic analysis for identifying and tracing malicious scripts within script engines.|a1365391633d4e13886e07744698bf0f||||||||
reverse engineering|function enhancement|Process used to improve the capabilities of script API tracers by analyzing malware scripts in detail.|a1365391633d4e13886e07744698bf0f||||||||
digital threats|research and practice|Publication in Journal|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
t. usui et al.|authors|Contributors to Article 5|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
digital threats: research and practice|journal title|Document Reference|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
vol. 2, no. 1|issue information|Publication Volume and Issue Number|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
article 5|specific article reference|Designates the Fifth Article in the Journal|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
digital threats: research and practice vol. 2 no. 1 article 5|full document title and identifier|Unique Reference to the Entire Publication Context|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
creative commons attribution-share alike international 4.0 license|license type|Legal Framework for Sharing and Adapting Work|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
t. usui et al.|affiliation details|Institutional Affiliations of the Authors|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
ntt secure platform laboratories/institute of industrial science|organizational affiliation 1|Specific Research Lab and University Institute Mentioned|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
the university of tokyo|organizational affiliation 2|University Where the Research Institute is Located|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
meguro-ku, tokyo|location information|District in Tokyo where one of the Institutions is Based|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
komaba|specific location reference|Precise Area within Meguro-ku Mentioned for One Institution|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
m. iwamura|author's last name (first letter capitalized)|Individual Author Identification by Surname|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
j. miyoshi|author's last name (first letter capitalized)|Individual Author Identification by Surname|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
k. matsuura|author's full name|Complete Author's Name as it Appears in the Text|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
institute of industrial science, the university of tokyo|affiliation description|Detailed Affiliation Information for One Author|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
digital threats: research and practice vol. 2 no. 1 article 5|publication reference (repeated)|Recurring Full Publication Title and Identifier for Contextualization|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
january 2021|publication date|Month and Year of Article's Release|2b7ec023443342e0a0c17dd3e0b08c4a||||||||
system-level monitoring|efficiency in malware analysis|impacts on|5e6f11e3fa3b4ef5800b4dfac0ae454d||||||||
script api calls|system apis (e.g. string or object operations)|do not reach|5e6f11e3fa3b4ef5800b4dfac0ae454d||||||||
understanding of malicious scripts|semantic gap problem|results from lack of captures and leads to underestimation of threat|5e6f11e3fa3b4ef5800b4dfac0ae454d||||||||
specific language-focused analysis approach|script engine's internal architecture|requires knowledge of both for tool development|5e6f11e3fa3b4ef5800b4dfac0ae454d||||||||
proposed method|generation of script api tracers with minimal human intervention|aims to mitigate the gap between attackers and defenders by providing a universally applicable and fine-grained analysis tool for any script languages|5e6f11e3fa3b4ef5800b4dfac0ae454d||||||||
differential execution analysis|hook point detection method|Utilization of Technique in Methodology|b4d25e732aad43528091284ae782d9b8||||||||
script engine internals knowledge|manual script api tracer generation|Prerequisite for Analysis|b4d25e732aad43528091284ae782d9b8||||||||
test program (test script)|differential execution analysis output|Input for Methodology|b4d25e732aad43528091284ae782d9b8||||||||
script engine|execution trace logging|Target of Tracing and Hooking|b4d25e732aad43528091284ae782d9b8||||||||
hook point detection|tap point detection|Sequential Steps in Methodology|b4d25e732aad43528091284ae782d9b8||||||||
bravespeaking replacement strategy|script api specifications knowledge|Theoretical Foundation of Approach|b4d25e732aad43528091284ae782d9b8||||||||
script api|local function|potential correspondence inferred from branch trace differences|ecadde8e51cd41cf8485ad04e7bab5c7||||||||
smith-waterman algorithm|sequence alignment method|modified to find similar common subsequences in script API analysis|ecadde8e51cd41cf8485ad04e7bab5c7||||||||
stager|script analyzer generator|uses modified Smith-Waterman algorithm for finding local functions corresponding to target script APIs|ecadde8e51cd41cf8485ad04e7bab5c7||||||||
malicious script|obfuscated code|Contains|d5ffa0b39345496d8844b9a8f4376e93||||||||
manual analysis|deobfuscated script|Derives|d5ffa0b39345496d8844b9a8f4376e93||||||||
script engine process|system api calls|Emits|d5ffa0b39345496d8844b9a8f4376e93||||||||
api monitor [5]|system api trace log|Generates|d5ffa0b39345496d8844b9a8f4376e93||||||||
obfuscated malicious script|a related malware entity|potential_malicious_activity|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
script engine|irrelevant calls|unrelated_to_malice|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
remote procedure call (rpc)|component object model (com)|related_technique|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
windows management instrumentation (wmi)|relevant to rpcs|indicator_of_maliciousness|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
eval function|only handled in the script engine|not_an_IOC|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
script api tracer|essential for malicious script analysis|key_cybersecurity_tool|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
manual analysis log|log with similar semantics to automated logs|desired_output|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
system api tracer|not appropriate for analyzing malicious scripts|inadequate_cybersecurity_tool|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
script engine api calls|calls that appear in the script engine but not relevant to malice|unrelated_to_maliciousness|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
manual analysis|process by which analysts can comprehend malicious behavior through logs|current_best_practice|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
script api tracers|tools that are difficult to build but necessary for analyzing malicious scripts|desired_cybersecurity_capability|258dabd4dc6d4fd6bfb4e8794cb51af6||||||||
script analysis tool|universal applicability requirement|Satisfies|7b86863443354489bef0510d4330ab11||||||||
construction method for script analysis tools|various languages with diverse language specifications|Support|7b86863443354489bef0510d4330ab11||||||||
malicious scripts|script engine binaries reverse engineering|Necessary for Analysis|7b86863443354489bef0510d4330ab11||||||||
script api tracers|malicious scripts automated reverse engineering|Output of Process|7b86863443354489bef0510d4330ab11||||||||
script engine binaries|build script api tracers|construction method|823aa687607e48d59f3878057fe7afed||||||||
output logs|preserve script semantics|desirable output|823aa687607e48d59f3878057fe7afed||||||||
script analysis tools|proprietary software (script engines)|binary applicability|823aa687607e48d59f3878057fe7afed||||||||
createobject(wscript.shell)|script api tracer log|desired logged information|823aa687607e48d59f3878057fe7afed||||||||
system-level monitoring|script-level monitoring|Supersedes|53833c44ec5e4876ba07180bb5ccff3e||||||||
avalanche effect|semantic loss|Causes|53833c44ec5e4876ba07180bb5ccff3e||||||||
com layer|script engine layer|Analogous To|53833c44ec5e4876ba07180bb5ccff3e||||||||
writefile|document.cookie.set|Represents|53833c44ec5e4876ba07180bb5ccff3e||||||||
script level|proposed design|fulfills requirement for universal script execution|53888f3f075a41299445e9497ff2a6fb||||||||
system level|proposed design|requires a script engine to execute scripts|53888f3f075a41299445e9497ff2a6fb||||||||
script engine level|proposed design|fulfills requirement for semantics-aware scripting|53888f3f075a41299445e9497ff2a6fb||||||||
binary level|proposed design|requires binary compatibility with existing systems|53888f3f075a41299445e9497ff2a6fb||||||||
script engine|hooks/tap points|Interception Mechanism|0c6b9ed301eb4027a6fcac380fb3f95d||||||||
malware analysis|source code or reverse-engineered binaries|Understanding Requirement|0c6b9ed301eb4027a6fcac380fb3f95d||||||||
script engine monitoring|antimalware scan interface (amsi)|Limited Implementation Example|0c6b9ed301eb4027a6fcac380fb3f95d||||||||
open source script engines|source code analysis|Hook and Tap Point Discovery|0c6b9ed301eb4027a6fcac380fb3f95d||||||||
proprietary script engines|reverse-engineering|No Automatic Method|0c6b9ed301eb4027a6fcac380fb3f95d||||||||
manual analysis|skilled reverse-engineers|requires|ab80334ef82546bd87b084b72acbd6f4||||||||
binary applicability requirement|script engine level monitoring with automatic reverse-engineering of script engines|fulfills|ab80334ef82546bd87b084b72acbd6f4||||||||
system-level monitoring|improvement to fulfill requirements|difficult for improvement to fulfill all requirements|ab80334ef82546bd87b084b72acbd6f4||||||||
test scripts|language specifications of the target script|based on knowledge of|ab80334ef82546bd87b084b72acbd6f4||||||||
script engine level monitoring|no previous reverse-engineering required|assumes no prior knowledge of|ab80334ef82546bd87b084b72acbd6f4||||||||
script engine binary b|tuple (m, c)|is_modeled_as|ba18aaa9d2e54589bbfce594b149074e||||||||
memory blocks associated with e|set m|are_part_of|ba18aaa9d2e54589bbfce594b149074e||||||||
code blocks that implement b|set c|implementations_of|ba18aaa9d2e54589bbfce594b149074e||||||||
script apis of the observing targets|set a|are_defined_by|ba18aaa9d2e54589bbfce594b149074e||||||||
corresponding implementation i a |set i a ⊂ c|maps_to|ba18aaa9d2e54589bbfce594b149074e||||||||
arguments of the script apis r a |set r a ⊂ m|are_mapped_by|ba18aaa9d2e54589bbfce594b149074e||||||||
method f|map (m × c × a → i a × r a )|provides|ba18aaa9d2e54589bbfce594b149074e||||||||
execution trace logging|dynamic analysis|Monitors execution of test scripts in target script engine|3bfafc5253084e94aa81c63d5cad56ec||||||||
hook point detection|modified smith-waterman algorithm|Applies modified SW algorithm to extract hook point candidates from execution trace|3bfafc5253084e94aa81c63d5cad56ec||||||||
tap point detection|local function arguments|Identifies tap points as arguments of local functions where hooks are set|3bfafc5253084e94aa81c63d5cad56ec||||||||
hook and tap points verification|test scripts execution with inserted hooks|Tests detected hook and tap points to ensure accuracy and avoid false positives|3bfafc5253084e94aa81c63d5cad56ec||||||||
script api tracer generation|hooked script engine binary|Generates a Script API tracer by inserting hooks into the target script engine based on verified hook and tap points|3bfafc5253084e94aa81c63d5cad56ec||||||||
script engines|malware analysis|technical context|c5f7be306ff64407bc4e7a8bff8472b1||||||||
script api calls|local functions|implementation detail|c5f7be306ff64407bc4e7a8bff8472b1||||||||
arguments of script apis|hook points (h a0 , h a1 )|monitoring mechanism|c5f7be306ff64407bc4e7a8bff8472b1||||||||
tap points (ta0,0 , ta0,1)|script api arguments|indexed association|c5f7be306ff64407bc4e7a8bff8472b1||||||||
malicious binaries|unusual obfuscations (control-flow flattening and unreasonable function inlining)|anomaly detection|c5f7be306ff64407bc4e7a8bff8472b1||||||||
digital threats: research and practice|publication date (january 2021)|timeline reference|c5f7be306ff64407bc4e7a8bff8472b1||||||||
volume 2|issue no. 1|journal format|c5f7be306ff64407bc4e7a8bff8472b1||||||||
article 5|digital threats: research and practice|specific content reference|c5f7be306ff64407bc4e7a8bff8472b1||||||||
script engine|virtual machine (vm)|contains|2fc340c9fc0e4a53b625b7ec3939232d||||||||
vm instructions|bytecode|implements as VM instruction handlers|2fc340c9fc0e4a53b625b7ec3939232d||||||||
script apis|functions|are called by the instructions and are implemented as functions|2fc340c9fc0e4a53b625b7ec3939232d||||||||
hook points|entry of the hooked functions|are placed at|2fc340c9fc0e4a53b625b7ec3939232d||||||||
tap points|memory corresponding to arguments of hooked functions|are located at|2fc340c9fc0e4a53b625b7ec3939232d||||||||
test script|target script api|executes|73213ffe129e44deb048d8b79fad053e||||||||
test script (first)|target script api|calls once|73213ffe129e44deb048d8b79fad053e||||||||
test script (second)|target script api|calls N times|73213ffe129e44deb048d8b79fad053e||||||||
createobject|com method invocation|is essentially required for|73213ffe129e44deb048d8b79fad053e||||||||
script apis|execute the target script api with no error|must fulfill to be a test script|73213ffe129e44deb048d8b79fad053e||||||||
createobject (first call)|same argument|may copy existing object instead of creating new one|73213ffe129e44deb048d8b79fad053e||||||||
test script specifier|target script api analysis|defines the behavior for|73213ffe129e44deb048d8b79fad053e||||||||
createobject api|wscript.shell object|script_api_usage|82ec8196490c43d29a2b8c607f99b698||||||||
msxml.xmlhttp|adodb.stream|different_arguments|82ec8196490c43d29a2b8c607f99b698||||||||
vbscript language specification|test script preparation|language_knowledge_requirement|82ec8196490c43d29a2b8c607f99b698||||||||
script api analysis|target script api mapping|api_to_test_mapping|82ec8196490c43d29a2b8c607f99b698||||||||
script engine binary|execution traces|ProvidesMap|1e55aebd34b94892969f12f509f8d735||||||||
api hooks code|api trace logging|InsertedForLogOutput|1e55aebd34b94892969f12f509f8d735||||||||
instruction hooks code|branch trace logging (call, ret, indirect jmp)|InsertedForLogOutput|1e55aebd34b94892969f12f509f8d735||||||||
hook point detection|differential execution analysis|uses|63845799bcf64fab9f79ec72e8fc86e5||||||||
dynamic analysis technique|differential execution analysis|is|63845799bcf64fab9f79ec72e8fc86e5||||||||
execution trace acquisition|multiple executions with different conditions|involves|63845799bcf64fab9f79ec72e8fc86e5||||||||
analysis granularity|code block level|at|63845799bcf64fab9f79ec72e8fc86e5||||||||
script api call behavior observation|differential execution analysis|can be done by|63845799bcf64fab9f79ec72e8fc86e5||||||||
eval in vbscript|script api that does not call system apis|is an example of|63845799bcf64fab9f79ec72e8fc86e5||||||||
com method invocation script apis|script apis that do not call system apis|another example of|63845799bcf64fab9f79ec72e8fc86e5||||||||
system-level monitoring|using system api calls as clues|cannot observe behavior of script APIs without system API calls due to reliance on|63845799bcf64fab9f79ec72e8fc86e5||||||||
method used for script apis behavior observation|hook point detection by differential execution analysis|is effective even for script APIs that do not call system APIs because it is independent from|63845799bcf64fab9f79ec72e8fc86e5||||||||
smith-waterman algorithm|sequence alignment|Uses|7f03c1d8993e44908f3ac23dcf6878ff||||||||
modified smith-waterman algorithm|smith-waterman algorithm|Builds upon|7f03c1d8993e44908f3ac23dcf6878ff||||||||
dynamic programming table|dp table|Is called|7f03c1d8993e44908f3ac23dcf6878ff||||||||
local sequence alignment|sequence alignment|Uses|7f03c1d8993e44908f3ac23dcf6878ff||||||||
subsequence|common subsequence|Refers to|7f03c1d8993e44908f3ac23dcf6878ff||||||||
high similarity|highest similarity|Seeks for|7f03c1d8993e44908f3ac23dcf6878ff||||||||
sequence differentiation|finds common subsequences with high similarity from multiple branch traces.|Aims to achieve|7f03c1d8993e44908f3ac23dcf6878ff||||||||
dp table|smith-waterman algorithm|references implementation of|62c53a75e0e243cdb1736d2062783530||||||||
sequence a|gray box in figure 4|represents|62c53a75e0e243cdb1736d2062783530||||||||
letter s|start of execution trace|indicates|62c53a75e0e243cdb1736d2062783530||||||||
letter e|end of execution trace|represents|62c53a75e0e243cdb1736d2062783530||||||||
letter m|margin between gray boxes in figure 4|indicates|62c53a75e0e243cdb1736d2062783530||||||||
equation (1)|formula for calculating match score f(i, j)|describes|62c53a75e0e243cdb1736d2062783530||||||||
s(i,j)|score for a matched pair of characters (match or unmatch)|determined by|62c53a75e0e243cdb1736d2062783530||||||||
d|penalty score for an unmatched character (-1)|set to|62c53a75e0e243cdb1736d2062783530||||||||
smith-waterman algorithm|modified smith-waterman algorithm|algorithm modification for reverse engineering script engine binaries|144df9aaedf8446a9ccaab8b8f0c110e||||||||
original algorithm|modified algorithm|original vs. modified approach to finding subsequences of high similarity in rows|144df9aaedf8446a9ccaab8b8f0c110e||||||||
test scripts|target script api|scripts that call the target API once or twice|144df9aaedf8446a9ccaab8b8f0c110e||||||||
s a1|s an|set of test scripts calling the target API once vs. set of those calling it twice|144df9aaedf8446a9ccaab8b8f0c110e||||||||
predefined threshold|hook point candidates|threshold used to determine if subsequences are similar enough to be considered hook points|144df9aaedf8446a9ccaab8b8f0c110e||||||||
score 8 cell|highest similarity (s, a, b, and c)|cell with the maximum score in Figure 5 representing the highest similarity among S, A, B, and C|144df9aaedf8446a9ccaab8b8f0c110e||||||||
common subsequence|local maximum value from rows|subsequence extracted by backtracking from cells with high scores indicating local maxima in the row|144df9aaedf8446a9ccaab8b8f0c110e||||||||
k : e s a1 × e s an → h a|map of hook point candidates|function that maps elements of sequence spaces to a set of potential hook points based on similarity thresholds|144df9aaedf8446a9ccaab8b8f0c110e||||||||
tap point detection|selecting final hook points|precedes|f201ef11f94b4c648b6823b3097d690b||||||||
tap point detection|finding memory regions to dump|follows|f201ef11f94b4c648b6823b3097d690b||||||||
modified smith-waterman algorithm|dptable.fillcell()|uses|f201ef11f94b4c648b6823b3097d690b||||||||
modified smith-waterman algorithm|dptbl.searchnthmaxcell(i)|calls|f201ef11f94b4c648b6823b3097d690b||||||||
modified smith-waterman algorithm|dptbl.backtrackfrom(max_cell )|uses to construct result sequences|f201ef11f94b4c648b6823b3097d690b||||||||
result_seqs|append(max_seq)|is updated with|f201ef11f94b4c648b6823b3097d690b||||||||
dptbl.getsamerows(max_seq)|rows|returns as rows|f201ef11f94b4c648b6823b3097d690b||||||||
dptbl.searchnthmaxcellinrows(j, rows)|max_cell|finds and returns in max_cell|f201ef11f94b4c648b6823b3097d690b||||||||
calcsimilarity(seq1, seq2)|min_similarity|updates min_similarity based on similarity of sequences|f201ef11f94b4c648b6823b3097d690b||||||||
memory regions|script engine process|contains|4ac9373afd3146519007245f3d9a3951||||||||
argument values|test scripts|matches|4ac9373afd3146519007245f3d9a3951||||||||
hook point candidates|script apis|related to|4ac9373afd3146519007245f3d9a3951||||||||
execution trace|hooked functions|generated from|4ac9373afd3146519007245f3d9a3951||||||||
argument of a hook point candidate|memory location|refers to|4ac9373afd3146519007245f3d9a3951||||||||
primitive types|value arguments|assumed as|4ac9373afd3146519007245f3d9a3951||||||||
pointer values|dereferenced pointers|considered as|4ac9373afd3146519007245f3d9a3951||||||||
known structures|matched argument types|examined for|4ac9373afd3146519007245f3d9a3951||||||||
script engine binaries|script api tracers|automatic reverse engineering|61bb70dd1bf343db9db4de2fd4618855||||||||
digital threats research and practice journal|malware analysis|publication resource|61bb70dd1bf343db9db4de2fd4618855||||||||
script engine binaries|tap point detection concept|exploration focus|61bb70dd1bf343db9db4de2fd4618855||||||||
script engine|malware analysis tool|Supports Reverse Engineering for Malware Analysis|29c90defc318401c836c2874dfed9526||||||||
type information|laika [10], tie [29]|Research on Type Inference in Binary Executables|29c90defc318401c836c2874dfed9526||||||||
howard [43]|rewards [31], argos [56]|Reverse Engineering Work for Data Structures and API Tracing|29c90defc318401c836c2874dfed9526||||||||
debin [20]|typeminer [33]|Predicting Type Information in Binary Executables|29c90defc318401c836c2874dfed9526||||||||
script engine|object creation function|FunctionCall|f6264da776fe4e77baf56a0bb68aa52b||||||||
object management table|scripts|TableIndexReference|f6264da776fe4e77baf56a0bb68aa52b||||||||
value-based detection|tap point detection for arguments|DetectionMethodComparison|f6264da776fe4e77baf56a0bb68aa52b||||||||
script engine hook points function|return value of script apis|FunctionOutputAssumption|f6264da776fe4e77baf56a0bb68aa52b||||||||
hook and tap points|false positives (fps)|detection of FPs in log lines for script API A calls that are not actually made by the target script|36ec13c65ec64d4db7a4300b9202154a||||||||
script api b call|false negative (fn)|inclusion of a call to script API B in log lines despite it being an actual call made by the target script|36ec13c65ec64d4db7a4300b9202154a||||||||
script api a|a related malware|inappropriate hook and tap points selection|bc4eaf5b1b6d4659b9a357a2b75d7126||||||||
target script api|test scripts|call dependency verification|bc4eaf5b1b6d4659b9a357a2b75d7126||||||||
verification scripts|official documents of the target script language and software development platforms like github [17]|automatic collection for call extraction|bc4eaf5b1b6d4659b9a357a2b75d7126||||||||
benign scripts|script api tracer|analysis tool usage|7cd91e80e4fd4c3da09fa62249f372a7||||||||
malicious scripts|script api calls|observation of differences|7cd91e80e4fd4c3da09fa62249f372a7||||||||
fp reduction|hook and tap point selection|experimentally proven effectiveness|7cd91e80e4fd4c3da09fa62249f372a7||||||||
script api|tap point|Data Flow Observation|e55166988c004f739c38e398c537a47b||||||||
local function|hook point|Entry Monitoring|e55166988c004f739c38e398c537a47b||||||||
analysis code|memory dump|Data Collection|e55166988c004f739c38e398c537a47b||||||||
binary instrumentation technique|code insertion|Implementation Mechanism|e55166988c004f739c38e398c537a47b||||||||
execution trace logging step|instruction-level hooking|uses|9adc39510fe2450cb4be2023c94c551d||||||||
script api tracer generation step|function-level hooking|uses|9adc39510fe2450cb4be2023c94c551d||||||||
instruction-level hooking|exhaustively capturing all branches executed in script engine binaries|for|9adc39510fe2450cb4be2023c94c551d||||||||
function-level hooking|definitions of hook and tap points located at function entry and its arguments|according to|9adc39510fe2450cb4be2023c94c551d||||||||
stager|script analyzer generator based on engine reversing|is|072f89afc1524e74ad5f6da7ef300b06||||||||
intel pin|dynamic binary instrumentation framework for acquiring execution traces of target script engines|used by|072f89afc1524e74ad5f6da7ef300b06||||||||
detours|dynamic binary instrumentation framework with inline hooking feature used to generate script api tracers|also provides|072f89afc1524e74ad5f6da7ef300b06||||||||
script api tracer|dynamic link library (dll)|contains|7b53789925034343b3841ffc07e235eb||||||||
script api tracer|configuration file|reads|7b53789925034343b3841ffc07e235eb||||||||
script api tracer|hook and tap points|identifies|7b53789925034343b3841ffc07e235eb||||||||
stager|malicious scripts in the wild|analyzes|7b53789925034343b3841ffc07e235eb||||||||
stager-generated tracer|fps and fns|produces|7b53789925034343b3841ffc07e235eb||||||||
stager-generated tracer|existing analysis tools|compares performance with|7b53789925034343b3841ffc07e235eb||||||||
human effort|test script preparation|required for|7b53789925034343b3841ffc07e235eb||||||||
stager|vbe7.dll (version 7.1.10.48)|uses|3e2e119a8bd24302b0770c43c49051d7||||||||
stager|vbscript.dll (version 5.8.9600.18698)|uses|3e2e119a8bd24302b0770c43c49051d7||||||||
vbscript|stager|is used by|3e2e119a8bd24302b0770c43c49051d7||||||||
powershell 6.0.3|stager|uses|3e2e119a8bd24302b0770c43c49051d7||||||||
windows 7 (32-bit)|intel core i7 cpu @ 2.60ghz|hosts|3e2e119a8bd24302b0770c43c49051d7||||||||
intel core i7 cpu @ 2.60ghz|windows 7 (32-bit)|is hosted on|3e2e119a8bd24302b0770c43c49051d7||||||||
vbscript|vbscript.dll (reactos 0.4.9)|uses alternative implementation of|3e2e119a8bd24302b0770c43c49051d7||||||||
vbscript.dll (version 5.8.9600.18698)|vbscript|is a version of|3e2e119a8bd24302b0770c43c49051d7||||||||
powershell 6.0.3|vbscript.dll (version 5.8.9600.18698)|can be used interchangeably with|3e2e119a8bd24302b0770c43c49051d7||||||||
6600u cpu|at 2.60ghz|operating_frequency|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
2gb|memory capacity|memory_allocation|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
vbe7.dll|version 7.1.10.48|software_version|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
vbscript.dll (windows)|version 5.8.9600.18698|software_version|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
vbscript.dll (reactos)|version reactos 0.4.9|software_version|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
powershell 6.0.3|scripting engine version|software_version|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
hook and tap points|analysis target|investigation_focus|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
stager|malware analysis tool|tool_utilization|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
microsoft vbscript|proprietary script engine|analysis_target|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
vba (in microsoft office)|attached script execution environment|execution_context|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
microsoft office process|observation target during vba analysis|process_monitoring|97abe736bf3948b6a8189f7b4fb6d3b5||||||||
stager|detection accuracy evaluation tool|uses|6b5731a154474b1aaac2d1ec082818ca||||||||
vba|script api for com object handling|provides|6b5731a154474b1aaac2d1ec082818ca||||||||
vbscript|script apis including reflection (eval and execute)|has|6b5731a154474b1aaac2d1ec082818ca||||||||
powershell|cmdlets for various functionalities|includes|6b5731a154474b1aaac2d1ec082818ca||||||||
dp tables|used to set a threshold of similarity for hook point detection|analyzed in preliminary experiment|6b5731a154474b1aaac2d1ec082818ca||||||||
0.8|threshold value used for differential execution analysis-based hook point detection|defined based on manual analysis of DP tables|6b5731a154474b1aaac2d1ec082818ca||||||||
original points column|shows number of branches obtained from branch traces|displays in Table 3|6b5731a154474b1aaac2d1ec082818ca||||||||
vba|script api (createobject)|hooks_point_detection|7d170d3bb13345f7b1befa4be394f2fe||||||||
vbscript|script api (invoke com)|tap_points_detection|7d170d3bb13345f7b1befa4be394f2fe||||||||
powershell|script api (execute)|hooks_point_detection|7d170d3bb13345f7b1befa4be394f2fe||||||||
createobject|93,000,90 hooks point candidates|filtering_irrelevant_branches|7d170d3bb13345f7b1befa4be394f2fe||||||||
invoke (com)|85,641,170 hook and tap points|obtaining_final_points|7d170d3bb13345f7b1befa4be394f2fe||||||||
execute|90,024,821 obtained branches|precision_of_branch_filtering|7d170d3bb13345f7b1befa4be394f2fe||||||||
script api tracers|stager's capability to generate|applicability_to_proprietary_engines|7d170d3bb13345f7b1befa4be394f2fe||||||||
hook point candidates|53|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|98|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|34|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|42|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|29|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|48|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|92|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|121|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook point candidates|134|contains|6b40b9bebc9242939dbbc6c186d28105||||||||
hook and tap point detection|✓|has|6b40b9bebc9242939dbbc6c186d28105||||||||
log availability|✓|has|6b40b9bebc9242939dbbc6c186d28105||||||||
stager|malware entity detection and analysis tool|capability_of|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
vba|microsoft excel macros environment|targeted_by|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
vbscript (reactos)|open-source operating system based on windows api and ms dos|supported_in|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
powershell|microsoft's task automation framework and configuration management tool|targeted_by|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
createobject|vbscript function to create an object from a class identifier (clsid)|detected_as|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
invoke on vbscript of reactos|function within the script engine that is responsible for invocation of idispatch::invoke com interface|detected_as|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
eval and execute (vbscript)|functions related to code execution within the vbscript environment|not_applicable_to|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
hook points of eval and execute|intercepted or monitored locations where specific actions take place in a system|not_implemented_in|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
stager (for vbscript)|tool capable of detecting hooks and tap points for powershell script engine with bytecode analysis|capable_of|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
cli layer|an additional layer between the operating system and script engines that provides a common language infrastructure (microsoft .net framework)|additional_layer_in|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
stager analysis of powershell|proper detection of hook and tap points within the script engine despite the additional cli layer|successful_in|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
table 3|documentation or reference table providing details on stager's detections across various script engines|referenced_by|32150ac0dc8d47ea8e230ecd1387aeb7||||||||
backtrace|differential execution analysis|comparison|2dd176cd78284837be73cbb47e315502|Compares the generated trace against a baseline to identify suspicious API calls.|||||||
script api tracers|stager|generation by|f64134103fb4462c9164edb8bedae08b||||||||
vba injector|malicious script|example of|f64134103fb4462c9164edb8bedae08b||||||||
declare statement|windows api call|facilitates|f64134103fb4462c9164edb8bedae08b||||||||
rundll32.exe|process creation|target of|f64134103fb4462c9164edb8bedae08b||||||||
malware entity|memory allocation (0x31c bytes)|uses|c88f8155378047f9a922e2277ab8bbfb||||||||
malware entity|write and execute permission memory|writes to|c88f8155378047f9a922e2277ab8bbfb||||||||
memory allocation (0x31c bytes)|code of the size|contains|c88f8155378047f9a922e2277ab8bbfb||||||||
malware entity|script api tracer|creates a thread for|c88f8155378047f9a922e2277ab8bbfb||||||||
script api tracer|apis called from the input script through declare statement|generates log of|c88f8155378047f9a922e2277ab8bbfb||||||||
vba injector|stager-generated script api tracer|analyses with|c88f8155378047f9a922e2277ab8bbfb||||||||
vbscript downloader|stager-generated script api tracer|monitors using|c88f8155378047f9a922e2277ab8bbfb||||||||
script api tracer|malicious script|analyze|06d8abc0841a4ffa8b4e8e79ed6cef11||||||||
vbscript downloader|http response|save_to_file|06d8abc0841a4ffa8b4e8e79ed6cef11||||||||
saved file|cmd.exe|execute|06d8abc0841a4ffa8b4e8e79ed6cef11||||||||
powershell module|digital threats: research and practice, vol. 2, no. 1, article 5|retrieve_from|06d8abc0841a4ffa8b4e8e79ed6cef11||||||||
powershell fileless malware|stager-generated script api tracer|acquisition relationship|b4f2114f023845189bf3988416735521||||||||
evasive malicious script|stager-generated script api tracer|acquisition relationship|b4f2114f023845189bf3988416735521||||||||
c&c server|powershell process|Web access|ff60a07bb68347cea467df86d5f636d6||||||||
additional code|system web proxy|simple downloading|ff60a07bb68347cea467df86d5f636d6||||||||
retrieved additional powershell code|invok-expression function|execution of retrieved code|ff60a07bb68347cea467df86d5f636d6||||||||
malicious script|script api tracer|analysis with STAGER-generated script API tracer|ff60a07bb68347cea467df86d5f636d6||||||||
evasive malicious script|virustotal analysis log|understanding behavior of evasion mechanism|ff60a07bb68347cea467df86d5f636d6||||||||
script api tracer|stager-generated script api tracers|capability_comparison|914668a06e9646da89dff0343213ab3a||||||||
api monitor|stager-generated script api tracers|failure_rate_comparison|914668a06e9646da89dff0343213ab3a||||||||
vipermonkey|stager-generated script api tracers|failure_rate_comparison|914668a06e9646da89dff0343213ab3a||||||||
stager-generated script api tracers|api monitor (system-level monitoring)|comparison of behavior observation capabilities|e90e4a22c6fc4a63a35231160b967ddf||||||||
stager-generated script api tracers|vipermonkey (script-level monitoring)|comparison of behavior observation capabilities and analysis failure rate|e90e4a22c6fc4a63a35231160b967ddf||||||||
vipermonkey|script engine emulator|uses|b6804a8d9f0146228b0c0177c7fed8fe||||||||
vipermonkey|vba scripts analysis|performs|b6804a8d9f0146228b0c0177c7fed8fe||||||||
stager-generated tracer|script engine instrumentation|uses|b6804a8d9f0146228b0c0177c7fed8fe||||||||
stager-generated tracer|vba scripts analysis|performs|b6804a8d9f0146228b0c0177c7fed8fe||||||||
vipermonkey|avalanche effect|causes|b6804a8d9f0146228b0c0177c7fed8fe||||||||
stager-generated tracer|no avalanche effect|prevents|b6804a8d9f0146228b0c0177c7fed8fe||||||||
vipermonkey|script apis logging|captures|b6804a8d9f0146228b0c0177c7fed8fe||||||||
stager-generated tracer|script apis logging|captures|b6804a8d9f0146228b0c0177c7fed8fe||||||||
vipermonkey|insufficient implementation of vba emulator|has|b6804a8d9f0146228b0c0177c7fed8fe||||||||
stager-generated tracer|real script engine of vba with instrumentation|uses|b6804a8d9f0146228b0c0177c7fed8fe||||||||
vipermonkey|terminates execution due to emulator issues|results in|b6804a8d9f0146228b0c0177c7fed8fe||||||||
stager-generated tracer|continues execution without errors|allows for|b6804a8d9f0146228b0c0177c7fed8fe||||||||
stager-generated script api tracers|vanilla script engines|execution speed comparison|c5caa158e0f74976aacf98efc7f4ee59||||||||
malicious scripts|quick dynamic analysis tools|capability of being executed by|c5caa158e0f74976aacf98efc7f4ee59||||||||
stager-generated script api tracers|malicious scripts|tool for tracing and analyzing|c5caa158e0f74976aacf98efc7f4ee59||||||||
vba|test scripts|script language used in|c5caa158e0f74976aacf98efc7f4ee59||||||||
vbscript|test scripts|script language used in|c5caa158e0f74976aacf98efc7f4ee59||||||||
powershell|test scripts|script language used in|c5caa158e0f74976aacf98efc7f4ee59||||||||
average loc|lines of code per script|average number of|c5caa158e0f74976aacf98efc7f4ee59||||||||
powershell|vba|technical_relation|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|vba|technical_relation|46de763d12de4a07b9fddf9ba0593063||||||||
powershell|vbscript|technical_relation|46de763d12de4a07b9fddf9ba0593063||||||||
stager|test scripts|evaluation_tool|46de763d12de4a07b9fddf9ba0593063||||||||
loc|script apis|measurement_unit|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time|resource_consumption|46de763d12de4a07b9fddf9ba0593063||||||||
test script writers|computer science department|participants_group|46de763d12de4a07b9fddf9ba0593063||||||||
script languages|vba|domain_specificity|46de763d12de4a07b9fddf9ba0593063||||||||
stager|detection accuracy|evaluation_methodology|46de763d12de4a07b9fddf9ba0593063||||||||
test scripts|malicious scripts|comparison_subjects|46de763d12de4a07b9fddf9ba0593063||||||||
script apis|frequently used|usage_frequency|46de763d12de4a07b9fddf9ba0593063||||||||
stager|malicious scripts|detection_tool|46de763d12de4a07b9fddf9ba0593063||||||||
test script writers|experience level|expertise_level|46de763d12de4a07b9fddf9ba0593063||||||||
script languages|language specifications|technical_documentation|46de763d12de4a07b9fddf9ba0593063||||||||
loc|simple scripts|complexity_level|46de763d12de4a07b9fddf9ba0593063||||||||
test scripts|evaluation of detection accuracy|experimentation_purpose|46de763d12de4a07b9fddf9ba0593063||||||||
vba|script apis frequently used by malicious scripts|malicious_behavior_simulation|46de763d12de4a07b9fddf9ba0593063||||||||
powershell|technical documentation on language specifications|learning_source|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|script apis frequently used by malicious scripts|malicious_behavior_simulation|46de763d12de4a07b9fddf9ba0593063||||||||
stager|test script creation guidelines|experimentation_instructions|46de763d12de4a07b9fddf9ba0593063||||||||
loc|average number of lines per test script|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
script apis|list provided to participants in advance|test_data_preparation|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time spent learning language specifications|training_requirement|46de763d12de4a07b9fddf9ba0593063||||||||
stager|malware analysis toolkit|cybersecurity_toolset|46de763d12de4a07b9fddf9ba0593063||||||||
test scripts|created by participants with varying expertise levels|heterogeneous_data_sources|46de763d12de4a07b9fddf9ba0593063||||||||
malicious scripts|behavior patterns analyzed in stager|threat_modeling|46de763d12de4a07b9fddf9ba0593063||||||||
script apis|frequently used by malicious scripts|malicious_functionality_indicator|46de763d12de4a07b9fddf9ba0593063||||||||
stager|detection accuracy evaluation methodology|cybersecurity_assessment_methodology|46de763d12de4a07b9fddf9ba0593063||||||||
test scripts|created for the purpose of evaluating stager's detection capabilities|experimentation_goal|46de763d12de4a07b9fddf9ba0593063||||||||
vba|script apis list provided to participants in advance|test_data_preparation|46de763d12de4a07b9fddf9ba0593063||||||||
powershell|technical documentation on language specifications for learning purpose|learning_source|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|script apis list provided to participants in advance|test_data_preparation|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time spent on creating valid test scripts|resource_consumption|46de763d12de4a07b9fddf9ba0593063||||||||
stager|detection accuracy evaluation toolkit used in the experiment|cybersecurity_toolset|46de763d12de4a07b9fddf9ba0593063||||||||
test scripts|created with an average of 3.8 lines per script for powershell, 2.75 lines for vbscript, and 2 lines for vba|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
script apis|list used to evaluate the detection accuracy of stager in section 5.2|evaluation_criteria|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|effort required from participants without prior experience in writing script languages|training_requirement|46de763d12de4a07b9fddf9ba0593063||||||||
stager|cybersecurity tool used to evaluate the test scripts created by participants|evaluation_tool|46de763d12de4a07b9fddf9ba0593063||||||||
powershell|script language with an average of 3.8 lines per test script|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
vba|script language with an average of 2 lines per test script|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|script language with an average of 2.75 lines per test script|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
stager|tool used to confirm the validity of created test scripts|validation_methodology|46de763d12de4a07b9fddf9ba0593063||||||||
script apis|technical details provided in advance for participants to write valid test scripts|test_data_preparation|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time invested by participants with varying levels of expertise in script languages|resource_consumption|46de763d12de4a07b9fddf9ba0593063||||||||
stager|cybersecurity tool used to assess the detection accuracy of test scripts|evaluation_tool|46de763d12de4a07b9fddf9ba0593063||||||||
loc|statistical metric used to measure the complexity and size of created test scripts|quantitative_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
script apis|list of functionalities commonly exploited by malicious scripts for testing purposes|malicious_behavior_simulation|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time spent by participants to understand the requirements and create test scripts|resource_consumption|46de763d12de4a07b9fddf9ba0593063||||||||
stager|malware analysis tool used for validating the created test scripts|evaluation_methodology|46de763d12de4a07b9fddf9ba0593063||||||||
vba|script language with an average of 3.8 lines per script in test creation|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
powershell|script language used to create valid test scripts for evaluation purposes|test_data_source|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|script language with an average of 2.75 lines per script in test creation|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
stager|cybersecurity toolkit used to analyze the created test scripts for detection accuracy evaluation|evaluation_toolset|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time and expertise required from participants during the experiment|resource_consumption|46de763d12de4a07b9fddf9ba0593063||||||||
vba|script language with an average of 3.8 lines per script for test creation|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
powershell|script language used to create valid and simple test scripts|test_data_source|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|script language with an average of 2.75 lines per script for test creation|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
stager|malware analysis tool used to validate the created test scripts and evaluate their detection accuracy|evaluation_methodology|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time invested by participants in learning script languages before creating tests|training_requirement|46de763d12de4a07b9fddf9ba0593063||||||||
vba|script language with an average of 3.8 lines per test script for the experiment|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
powershell|script language used to create valid and simple test scripts for evaluation purposes|test_data_source|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|script language with an average of 2.75 lines per test script for the experiment|statistical_measurement|46de763d12de4a07b9fddf9ba0593063||||||||
stager|malware analysis tool used to assess the detection accuracy of created test scripts|evaluation_toolset|46de763d12de4a07b9fddf9ba0593063||||||||
human effort|time and expertise required from participants in creating valid test scripts for stager evaluation|resource_consumption|46de763d12de4a07b9fddf9ba0593063||||||||
vbscript|test scripts creation|time_efficiency|40cc444ee3da4e7a848a3fe9b9394edf||||||||{'average time (seconds)': 36.6}
vba|test scripts creation|time_efficiency|40cc444ee3da4e7a848a3fe9b9394edf||||||||{'average time (seconds)': 42.6}
powershell|test scripts creation|time_efficiency|40cc444ee3da4e7a848a3fe9b9394edf||||||||{'average time (seconds)': 42.6}
all languages combined|test scripts creation|time_efficiency|40cc444ee3da4e7a848a3fe9b9394edf||||||||{'average time (seconds)': 59.5}
stager|manual reverse-engineering of script engines|human_effort_reduction|40cc444ee3da4e7a848a3fe9b9394edf||||||||{'time reduction factor': 'weeks or months'}
script api|malware analysis|use in detection and analysis of malware|24af219235e245189ac469f8a3d2858d||||||||
argument matching|tap point detection|technique for detecting hooks|24af219235e245189ac469f8a3d2858d||||||||
differential execution analysis|hook point detection|method used to analyze script engines with multiple functions|24af219235e245189ac469f8a3d2858d||||||||
control flow graph flattening|obfuscated implementation of script engine|technique that can prevent accurate detection of hook points|24af219235e245189ac469f8a3d2858d||||||||
false positives|verification scripts|scripts required to reduce the occurrence of false positives in malware analysis|24af219235e245189ac469f8a3d2858d||||||||
jit compilation|script api tracing|affects|7bf94684a0544c5e98d3a6acc3548e1a||||||||
inlining script apis|hook points in the script engine|enables bypassing of|7bf94684a0544c5e98d3a6acc3548e1a||||||||
our method|jit compilation|is not affected by|7bf94684a0544c5e98d3a6acc3548e1a||||||||
slight modification|effects of jit compilation on script api tracing|can handle|7bf94684a0544c5e98d3a6acc3548e1a||||||||
human assistance|malware analysis|facilitate|37460a49b52c4f8a842a3661b5c191a3||||||||
tap point detection|value matching|dependent on|37460a49b52c4f8a842a3661b5c191a3||||||||
script engines|malware analysis|source of information for|37460a49b52c4f8a842a3661b5c191a3||||||||
reverse-engineer|function analysis|performs|37460a49b52c4f8a842a3661b5c191a3||||||||
hook point detection|malware analysis|reduces workload for|37460a49b52c4f8a842a3661b5c191a3||||||||
value matching|tap point identification|limitation of|37460a49b52c4f8a842a3661b5c191a3||||||||
semantics of values|human-assisted analysis|considered in|37460a49b52c4f8a842a3661b5c191a3||||||||
type information of variables|human assistance|improved through|37460a49b52c4f8a842a3661b5c191a3||||||||
number of functions to analyze|hook point detection|decreased by|37460a49b52c4f8a842a3661b5c191a3||||||||
tap point identification|human-assisted analysis|beneficial for|37460a49b52c4f8a842a3661b5c191a3||||||||
jaek|javascript api hooking|tools-technique|bc1521f2410e461c882c35299770d317||||||||
revelo|script behavior analysis|tool-capability|bc1521f2410e461c882c35299770d317||||||||
box-js|javascript api hooking|tools-technique|bc1521f2410e461c882c35299770d317||||||||
jsunpack-n|script behavior analysis|tool-capability|bc1521f2410e461c882c35299770d317||||||||
jsdetox|script behavior analysis|tool-capability|bc1521f2410e461c882c35299770d317||||||||
sulo|action script monitoring|tools-technique|bc1521f2410e461c882c35299770d317||||||||
jsand|javascript emulation|tools-technique|bc1521f2410e461c882c35299770d317||||||||
flashdetect|script engine modification for flash hooks|tools-technique|bc1521f2410e461c882c35299770d317||||||||
vipermonkey|vba emulation with api logging|tool-capability|bc1521f2410e461c882c35299770d317||||||||
api chaser|system api hooking tool|uses for system-level monitoring|021206004ff946e5bc9cad102ee174a2||||||||
alkanet|system call hooking tool|used for binary analysis|021206004ff946e5bc9cad102ee174a2||||||||
ether|unknown (not specified)|mentioned as a binary analysis tool|021206004ff946e5bc9cad102ee174a2||||||||
nitro|unknown (not specified)|mentioned as a binary analysis tool|021206004ff946e5bc9cad102ee174a2||||||||
cxpinspector|system call hooking tool|used for building symbolic execution engines|021206004ff946e5bc9cad102ee174a2||||||||
introlib|unknown (not specified)|mentioned as a binary analysis tool|021206004ff946e5bc9cad102ee174a2||||||||
drakvuf|script engine hooking tool|used for building script API tracers|021206004ff946e5bc9cad102ee174a2||||||||
chef [4]|symbolic execution engine builder (for scripts)|uses real script engines and manual source code analysis|021206004ff946e5bc9cad102ee174a2||||||||
stager|script api tracer|mentioned as a tool with similar design to Chef but using binary analysis instead of manual source code analysis; goal is different (building script API tracers vs. symbolic execution engines)|021206004ff946e5bc9cad102ee174a2||||||||
virtual machine introspection|virtuoso [14]|mentions|399732111cff469a92f85fad354a445c||||||||
virtual machine introspection|vm-space traveler (vmst) [16]|compares with and notes differences from|399732111cff469a92f85fad354a445c||||||||
virtuoso|state-of-the-art study at that time|described as|399732111cff469a92f85fad354a445c||||||||
vmst|automation of the vmi tools generation|achieves|399732111cff469a92f85fad354a445c||||||||
vmst's key idea|redirection of code and data execution to another machine for obtaining results|described as|399732111cff469a92f85fad354a445c||||||||
code executed on different machines|usually identical|insight regarding|399732111cff469a92f85fad354a445c||||||||
vmst|tappan zee (north) bridge [13]|related_system|23f1d8a953634118b8d6a33f361673e8||||||||
autotap|monitoring memory access of software inside a vm with various inputs for learning|malware_detection|23f1d8a953634118b8d6a33f361673e8||||||||
slow-bridge|extracting meta-data using online data redirection like vmst on a vm with heavy-weight software-based virtualization for training|malware_analysis|23f1d8a953634118b8d6a33f361673e8||||||||
fast-bridge|using the meta-data for vmi on a vm with light-weight hardware-based virtualization|malware_monitoring|23f1d8a953634118b8d6a33f361673e8||||||||
hybrid-bridge [41]|uses decoupled execution and training memorization for efficient redirection-based vmi|malware_introspection|23f1d8a953634118b8d6a33f361673e8||||||||
vm introspection|monitoring the tap points in real time from the outof-vm for achieving effective vm instrospection|cybersecurity_measure|23f1d8a953634118b8d6a33f361673e8||||||||
kernel objects|execution context|tracks and resolves|5dfb9da5aebd42f591274584434cd01f||||||||
kernel objects|argument types|resolves|5dfb9da5aebd42f591274584434cd01f||||||||
kernel objects|access types|tracks and resolves|5dfb9da5aebd42f591274584434cd01f||||||||
log file|meta data|dumps|5dfb9da5aebd42f591274584434cd01f||||||||
studies|semantic gap around the vm|mitigate|5dfb9da5aebd42f591274584434cd01f||||||||
some studies|finding tap points|similar approach to ours|5dfb9da5aebd42f591274584434cd01f||||||||
script engine vms|malware analysis|Methodology for automatic reverse engineering of script engine VM bytecode syntax and semantics to identify tap points used by malware for obfuscation.|2d28cabe989e42209bb32e11bb5ec8e9||||||||
script engines|automated analysis tools|Development of automated analysis tools that can detect local functions corresponding to script APIs within the VM structure.|2d28cabe989e42209bb32e11bb5ec8e9||||||||
digital threats: research and practice|publication date|Journal publication with a January 2021 release date for research on automatic reverse engineering of script engine VMs for building script API tracers.|2d28cabe989e42209bb32e11bb5ec8e9||||||||
sharif et al. [42]|script engine vm analysis|Prior study that proposed a method to automatically reverse engineer virtual machines used by malware for obfuscation; this study focused on identifying information about VMs and bytecode rather than detecting local functions corresponding to script APIs.|2d28cabe989e42209bb32e11bb5ec8e9||||||||
rolles|vmprotect|reverse-engineering|55d01ec07e3e495da14fbe5daff6bf7c||||||||
coogan et al.|system calls|identifying bytecode instructions|55d01ec07e3e495da14fbe5daff6bf7c||||||||
kinder et al.|branch instructions|logging with test scripts|55d01ec07e3e495da14fbe5daff6bf7c||||||||
extended static analysis|vpc-sensitive static analysis|methodology_relationship|52e8ef838bf34d2880703ad0cca04bb2||||||||
a related malware|virtualization-obfuscation|obfuscation_technique|52e8ef838bf34d2880703ad0cca04bb2||||||||
conventional static analysis|over-approximation on states|analysis_limitation|52e8ef838bf34d2880703ad0cca04bb2||||||||
vmattack [25]|static and dynamic analysis|multidisciplinary_approach|52e8ef838bf34d2880703ad0cca04bb2||||||||
sbir|simplified code presentation|optimization_technique|52e8ef838bf34d2880703ad0cca04bb2||||||||
nightingale [18]|dynamic analysis of vm instructions|methodology_description|52e8ef838bf34d2880703ad0cca04bb2||||||||
api function identification|vm instructions recognition|study focus comparison|fadecf0784d24af3aa65780d4811a29e||||||||
script engine vms bytecode|virtualization-obfuscated binaries bytecode|operability contrast|fadecf0784d24af3aa65780d4811a29e||||||||
existing studies|our research|research gap closure|fadecf0784d24af3aa65780d4811a29e||||||||
differential execution analysis|carmony et al. [8]|proposed method for identifying tap points of Adobe Acrobat Reader using differential analysis of execution and memory traces|bef159aab07b410dad3a0d5410590f53||||||||
differential execution analysis|zhu et al. [57]|used to identify blocking conditions used by anti-adblockers through differential analysis of JavaScript execution traces with and without an adblocker|bef159aab07b410dad3a0d5410590f53||||||||
differential execution analysis|modified smith-waterman algorithm|used for identifying commonly appeared sequences in the differentiation algorithm developed by Usui et al.|bef159aab07b410dad3a0d5410590f53||||||||
tap points of adobe acrobat reader|carmony et al. [8]|identified through differential execution analysis proposed by Carmony et al.|bef159aab07b410dad3a0d5410590f53||||||||
blocking conditions used by anti-adblockers|zhu et al. [57]|discovered through differential execution analysis used by Zhu et al. to identify branch divergences caused by an adblocker|bef159aab07b410dad3a0d5410590f53||||||||
differentiation algorithm|modified smith-waterman algorithm|algorithm developed by Usui et al. for identifying commonly appeared sequences in their research on script engines|bef159aab07b410dad3a0d5410590f53||||||||
feature location techniques|differential analysis of execution traces|Employs the same technique as for studying software features in engineering.|9ece5db9a9254985a4826f708d8c5a27||||||||
wilde et al. [50]|software reconnaissance|Proposed a method that locates software features by comparing execution traces with and without the feature of interest active.|9ece5db9a9254985a4826f708d8c5a27||||||||
wong et al. [52]|approach comparing execution slices|Presented an approach that compares execution slices instead of traces, taking data flow into account in addition to control flow.|9ece5db9a9254985a4826f708d8c5a27||||||||
eisenbarth et al. [15]|dynamic analysis of binaries with formal static analysis|Addresses the difficulty of defining conditions that activate a single feature by combining dynamic analysis of binaries and formal static analysis of program dependency graphs and source code.|9ece5db9a9254985a4826f708d8c5a27||||||||
koschke et al. [27]|extended work for statement-level analysis|Extended the previous work by Eisenbarth et al. to enable handling statement-level analysis instead of method-level one.|9ece5db9a9254985a4826f708d8c5a27||||||||
asadi et al. [3]|natural language processing techniques for source code analysis|Proposed a method that uses natural language processing techniques to analyze source code and comments, in addition to the analysis of execution traces.|9ece5db9a9254985a4826f708d8c5a27||||||||
dynamic script analysis tools|problems of current dynamic script analysis tools|describe|ed5b7407e3764ccaa2335bd26cfcad70||||||||
proposed a method for automatically generating script api tracers|automatically analyzing the binaries of script engines|methodology|ed5b7407e3764ccaa2335bd26cfcad70||||||||
detect appropriate hook and tap points in script engines through dynamic analysis using test scripts|experiment with a prototype system implemented with our method|experimental approach|ed5b7407e3764ccaa2335bd26cfcad70||||||||
script api tracers can analyze malicious scripts in the wild|generated script api tracers|capability demonstration|ed5b7407e3764ccaa2335bd26cfcad70||||||||
append more effective script analysis capabilities|future work|research direction|ed5b7407e3764ccaa2335bd26cfcad70||||||||
tomoya matsumoto, yuki kimura, and the members of matsuura laboratory|kind support as participants in the experiment|acknowledgment|ed5b7407e3764ccaa2335bd26cfcad70||||||||
anonymous reviewers|insightful comments|review appreciation|ed5b7407e3764ccaa2335bd26cfcad70||||||||
virustotal|malware analysis platform|platform_for_analyzing_and_detecting_malware|398eb49e3b2d458fa43309d8058a5c17||||||||
jsand|client-side javascript sandbox|sandbox_technology_to_isolate_and_monitor_third-party_JavaScript|398eb49e3b2d458fa43309d8058a5c17||||||||
fatemeh asadi et al.|heuristic approach to concept identification in execution traces|research_on_using_heuristics_to_discover_software_concepts_from_execution_data|398eb49e3b2d458fa43309d8058a5c17||||||||
chef|infrastructure automation tool|tool_for_configuring_and_managing_it_infrastructures|398eb49e3b2d458fa43309d8058a5c17||||||||
api monitor|software tracing and monitoring utility|utility_for_monitoring_and_tracing_api_calls_made_by_applications|398eb49e3b2d458fa43309d8058a5c17||||||||
stefan bucur et al.|prototyping symbolic execution engines for interpreted languages|research_on_developing_and_experimenting_with_symbolic_execution_engines_for_languages_like_javascript|398eb49e3b2d458fa43309d8058a5c17||||||||
capacitorset/box-js|javascript sandbox framework|open-source_framework_designed_to_sandbox_and_isolate_untrusted_javascript_code|398eb49e3b2d458fa43309d8058a5c17||||||||
curtis carmony et al.|exploiting pdf parsers in malware detectors|research_on_abusing_pdf_parsing_capabilities_to_evade_malware_detection_systems|398eb49e3b2d458fa43309d8058a5c17||||||||
malware entity|a related malware|entity_relationship|a08dad493e4a45efa6aec85c8979bd9b||||||||
ieee transactions on software engineering|sp'12|conference_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
yangchun fu and zhiqiang lin. 2012|space traveling across vm: automatically bridging the semantic gap in virtual machine introspection via online kernel data redirection. in proceedings of the 33rd ieee symposium on security and privacy (sp'12). ieee, 586–600|publication_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
github inc. github|https://github.com/|resource_linkage|a08dad493e4a45efa6aec85c8979bd9b||||||||
xie haijiang, zhang yuanyuan, li juanru, and gu dawu. 2017|nightingale: translating embedded vm code in x86 binary executables. in proceedings of the 20th international conference on information security (isc'17). springer, 387–404|publication_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
blake hartstein [n.d.]|jsunpack-n|project_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
jingxuan he, pesho ivanov, petar tsankov, veselin raychev, and martin vechev. 2018|debin: predicting debug information in stripped binaries. in proceedings of the 2018 acm sigsac conference on computer and communications security (ccs'18). acm, 1667–1680|publication_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
timo hirvonen [n.d.]|sulo|project_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
timo hirvonen 2014|dynamic flash instrumentation for fun and profit. blackhat usa briefings 2014|presentation_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
ralf hund 2016|the beast within—evading dynamic malware analysis using microsoft com.|publication_relation|a08dad493e4a45efa6aec85c8979bd9b||||||||
blackhat usa briefings|kahusecurity|mention|5d3fbc98369f4620ac08433284ea070b||||||||
revelo javascript deobfuscator|http://www.kahusecurity.com/posts/revelo_javascript_deobfuscator.html|linking_to|5d3fbc98369f4620ac08433284ea070b||||||||
vmattack: deobfuscating virtualization-based packed binaries|anatoli kalysch, johannes götzfried, and tilo müller. 2017. vmattack: deobfuscating virtualization-based packed binaries. in proceedings of the 12th international conference on availability, reliability and security (ares’17). 1–10.|citing_work|5d3fbc98369f4620ac08433284ea070b||||||||
api chaser: anti-analysis resistant malware analyzer|yuhei kawakoya, makoto iwamura, eitaro shioji, and takeo hariu. 2013. api chaser: anti-analysis resistant malware analyzer. in proceedings of the 16th international symposium on research in attacks, intrusions and defenses (raid’15). springer, 123–143.|citing_work|5d3fbc98369f4620ac08433284ea070b||||||||
t. usui et al. [27]|rainer koschke and jochen quante|cited by|87d9d855adb5456191429e449dfe5b4c||||||||
philippe lagadec|vipermonkey|creator of|87d9d855adb5456191429e449dfe5b4c||||||||
jonghyup lee, thanassis avgerinos, and david brumley [29]|tie: principled reverse engineering of types in binary programs|author of|87d9d855adb5456191429e449dfe5b4c||||||||
tamas k. lengyel, steve maresca, bryan d. payne, george d. webster, sebastian vogl, and aggelos kiayias [30]|drakvuf dynamic malware analysis system|research on|87d9d855adb5456191429e449dfe5b4c||||||||
zhiqiang lin, xiangyu zhang, and dongyan xu [31]|automatic reverse engineering of data structures from binary execution|researchers in the field of|87d9d855adb5456191429e449dfe5b4c||||||||
chi-keung luk, robert cohn, robert muth, harish patil, artur klauser, geoff lowney, steven wallace, vijay janapa reddi, and kim hazelwood [32]|pin: building customized program analysis tools with dynamic instrumentation|contributors to the project on|87d9d855adb5456191429e449dfe5b4c||||||||
alwin maier, hugo gascon, christian wressnegger, and konrad rieck [33]|research presented in ndss'19|presenters at the conference on|87d9d855adb5456191429e449dfe5b4c||||||||
typeminer|machine learning algorithm for recovering types in binary programs|technique_used_for|a90f0a2555d64784ae9280be18f7b7a8||||||||
antimalware scan interface (amsi)|microsoft framework for scanning and detecting malware|software_framework_designed_for|a90f0a2555d64784ae9280be18f7b7a8||||||||
yuto otsuki, eiji takimoto, shoichi saito, eric w. cooper, koichi mouri|researchers who developed a system for identifying malware-invoked system calls using branch trace facilities|authors_of_research_paper|a90f0a2555d64784ae9280be18f7b7a8||||||||
jäk tool|utility that uses dynamic analysis to crawl and test modern web applications|software_tool_designed_for|a90f0a2555d64784ae9280be18f7b7a8||||||||
nitro: hardware-based system call tracing for virtual machines|research project focusing on hardware-assisted system call tracing for vm security|project_aimed_at|a90f0a2555d64784ae9280be18f7b7a8||||||||
reactos project|open source operating system designed to be binary compatible with windows nt architecture|developer_of_operating_system|a90f0a2555d64784ae9280be18f7b7a8||||||||
microsoft research detours library|software tool for intercepting win32 function calls and other api activity in microsoft windows applications|library_for_intercepting_function_calls|a90f0a2555d64784ae9280be18f7b7a8||||||||
rolf rolles|researcher who developed techniques for unpacking virtualization obfuscators|expertise_in_area_of|a90f0a2555d64784ae9280be18f7b7a8||||||||
malware entity|a related malware|relatedness|98ec59ea12314ae3a3a510bc172db19c||||||||
usenix workshop on offensive technologies (woot’09)|proceedings of the 3rd usenix workshop on offensive technologies (woot'09)|publication_context|98ec59ea12314ae3a3a510bc172db19c||||||||
malware emulators|automatic reverse engineering|technique_application|98ec59ea12314ae3a3a510bc172db19c||||||||
virtual machine introspection|hybrid-bridge method|methodology_implementation|98ec59ea12314ae3a3a510bc172db19c||||||||
jsdetox|toshinori usui, yuto otsuki, yuhei kawakoya, makoto iwamura, jun miyoshi, and kanta matsuura. 2019.|software_citation|98ec59ea12314ae3a3a510bc172db19c||||||||
powershell team|github repository|project_hosting|98ec59ea12314ae3a3a510bc172db19c||||||||
sandprint|fingerprinting malware sandboxes|technique for identifying unique characteristics of a sandbox environment used by malware to evade detection or analysis.|b8c1b086a0734dcd99a12d33a819a763||||||||
tap points|kernel execution monitoring|points in the kernel code where information is accessed or modified during system calls that can be monitored for intrusion detection and analysis of kernel-level behavior.|b8c1b086a0734dcd99a12d33a819a763||||||||
kernel object semantics|automatic inference from binary code|the process of extracting the meanings and behaviors associated with objects in the kernel by analyzing compiled software without human intervention.|b8c1b086a0734dcd99a12d33a819a763||||||||
anti-adblockers|disrupting using differential execution analysis|methods for detecting and countering anti-adblocking mechanisms employed by websites to prevent the use of ad blocking software. This is achieved through detailed comparison of how a web page or application executes with and without an ad blocker enabled, allowing researchers to identify specific tactics used to evade ad blocking and develop strategies to counter them effectively.|b8c1b086a0734dcd99a12d33a819a763||||||||
defacement malware|web attacks|causes|be417e4b96d04173becdec595dd66b01||||||||
marco balduzzi|trend micro ftr team|author-team|be417e4b96d04173becdec595dd66b01||||||||
ryan flores|trend micro ftr team|author-team|be417e4b96d04173becdec595dd66b01||||||||
lion gu|trend micro ftr team|author-team|be417e4b96d04173becdec595dd66b01||||||||
federico maggi|vincenzo ciancaglini|coauthors|be417e4b96d04173becdec595dd66b01||||||||
roel reyes|akira urano|coauthors|be417e4b96d04173becdec595dd66b01||||||||
trend micro forward-looking threat research (ftr) team|a trendlabs research paper|producer-product|be417e4b96d04173becdec595dd66b01||||||||
web defacers|geopolitical events|trigger|be417e4b96d04173becdec595dd66b01||||||||
trend micro legal disclaimer|general information and educational purposes|intended-use|be417e4b96d04173becdec595dd66b01||||||||
translations of material into other languages|convenience translation|purpose|be417e4b96d04173becdec595dd66b01||||||||
accuracy of a translation|original language official version|reference-source|be417e4b96d04173becdec595dd66b01||||||||
trend micro|malware entity|analyzes|b5af2f0c40c14c98880751673956307a||||||||
a related malware|iocs|contains|b5af2f0c40c14c98880751673956307a||||||||
real world conflicts|cyberspace|reflected in|b5af2f0c40c14c98880751673956307a||||||||
auxiliary activities of defacement groups|iocs|related to|b5af2f0c40c14c98880751673956307a||||||||
raimund genes (1963-2017)|trend micro|former CEO of|b5af2f0c40c14c98880751673956307a||||||||
web attacks|attacks that compromise internet assets like mail servers, cloud infrastructures, and websites|defines|c66efbf0d3e548ebb3109d330c12fd9b||||||||
raimund genes (1963-2017)|individual mentioned in the context of cybersecurity research on web attacks|references|c66efbf0d3e548ebb3109d330c12fd9b||||||||
cybercriminal's goal|to profit through activities like pushing ransomware or stealing data|describes_motivation|c66efbf0d3e548ebb3109d330c12fd9b||||||||
patriotism|an emotional motivation that can trigger web compromises|causes_web_compromises|c66efbf0d3e548ebb3109d330c12fd9b||||||||
hacktivism|the practice of subverting a website with the goal of promoting a specific agenda or political ideology; can involve web defacement, traffic redirection, denial of service, and malware distribution to support their cause|explains|c66efbf0d3e548ebb3109d330c12fd9b||||||||
zone-h1|a dedicated website that collects evidence of web defacements; allows attackers (defacers) to voluntarily submit reports on compromises|provides_example_of|c66efbf0d3e548ebb3109d330c12fd9b||||||||
web defacements|geopolitical events and conflicts|influence|d7ffe6ffad6d4821b24209b670cb57a0||||||||
cybercriminals' attacks against websites|victims|target|d7ffe6ffad6d4821b24209b670cb57a0||||||||
geopolitical events and conflicts|malware families|influence selection of|d7ffe6ffad6d4821b24209b670cb57a0||||||||
cybercriminals' attacks against websites|techniques|use of|d7ffe6ffad6d4821b24209b670cb57a0||||||||
victims|infrastructure|compromise of|d7ffe6ffad6d4821b24209b670cb57a0||||||||
malware families|indicators of compromise (iocs)|related to|d7ffe6ffad6d4821b24209b670cb57a0||||||||
techniques|vulnerabilities|exploit|d7ffe6ffad6d4821b24209b670cb57a0||||||||
infrastructure|security measures|counteract|d7ffe6ffad6d4821b24209b670cb57a0||||||||
web defacements|geopolitical events|reflection|4f1f2894189442b5866783e29c514d32||||||||
defacers' religious inclination|triggers for attacks|potential influence|4f1f2894189442b5866783e29c514d32||||||||
data analysis system|web defacement reports|gathering and clustering|4f1f2894189442b5866783e29c514d32||||||||
hacking groups' affiliations|collectives of hackers|organizational structure|4f1f2894189442b5866783e29c514d32||||||||
recruitment tools|distribution of hacking techniques|methodology|4f1f2894189442b5866783e29c514d32||||||||
hacking activities|support for cybercrime|escalation|4f1f2894189442b5866783e29c514d32||||||||
web defacement|malware entity|causation|41caff12885d4c9694d9a37f9771276a||||||||
geopolitical events|trigger for web defacement activities|motivation|41caff12885d4c9694d9a37f9771276a||||||||
automated system|web defacement reports processing|technology_application|41caff12885d4c9694d9a37f9771276a||||||||
static-code analyzer|feature extraction from deface pages|data_processing|41caff12885d4c9694d9a37f9771276a||||||||
dynamic-code analyzer|additional feature extraction (dynamically generated pages)|data_processing|41caff12885d4c9694d9a37f9771276a||||||||
defacer's name|web defacement report meta-information|attribute|41caff12885d4c9694d9a37f9771276a||||||||
vulnerability|web defacement report meta-information|attribute|41caff12885d4c9694d9a37f9771276a||||||||
defacer's name|malware entity (potential)|association|41caff12885d4c9694d9a37f9771276a||||||||
vulnerability|malware exploit vector (potential)|association|41caff12885d4c9694d9a37f9771276a||||||||
deface page|source code (html/js/css) extraction|data_item|41caff12885d4c9694d9a37f9771276a||||||||
dynamic-code analyzer|headless browser rendering for feature extraction|technology_interaction|41caff12885d4c9694d9a37f9771276a||||||||
dynamically generated pages|additional content (external resources)|data_item|41caff12885d4c9694d9a37f9771276a||||||||
embedded streams of songs|dynamic-code analyzer processing for external content extraction|data_processing|41caff12885d4c9694d9a37f9771276a||||||||
campaign detector|defacements|analyzes|270830b98f664aca820acbf61212205e||||||||
criminal group|defacers|comprised of|270830b98f664aca820acbf61212205e||||||||
target choices|deface pages|related to|270830b98f664aca820acbf61212205e||||||||
geopolitical events|web attacks|trigger|270830b98f664aca820acbf61212205e||||||||
malware entity|deface pages template|used by relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
static analyzer|feature extraction for clustering|processes data from relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
dynamic analyzer|feature extraction for clustering|contributes to feature set used in clustering relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
malware entity|criminal group propaganda campaign|promotes through defacement pages relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
machine learning algorithm|defacement campaign detection and labeling|automatically identifies new campaigns based on feature analysis relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
elastic search backend|indexed defacement campaign information|stores and indexes for fast retrieval relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
web console|analyst interaction with indexed data|allows visualization and analysis of stored campaign information relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
malware entity|criminal group organization analysis|provides insights into how groups are structured relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
defacement page cluster|malicious actor association with multiple groups or transitions between them|reveals actor's connections and movements within the cybercrime ecosystem relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
geopolitical event|web attack trigger mechanism|can lead to increased web attacks as a response or exploitation of such events relationship|72e6765a6f1249aaa37a0d8f094e1cf2||||||||
defacers|contact information|disclosure of contact details by defacers on compromised websites|ffa2d1051aec4090b26ed6eb8345b807||||||||
twitter|promotion of beliefs and attacks|use of Twitter as a platform to advertise cyberattacks and associated ideologies|ffa2d1051aec4090b26ed6eb8345b807||||||||
email addresses|primary form of contact for defacers|emails being the most common method for defacers to communicate with others about their activities and beliefs|ffa2d1051aec4090b26ed6eb8345b807||||||||
telephone numbers|uncommon form of contact in cyberattacks|telephones being an infrequently used method for defacers to communicate due to the risk of attribution it poses|ffa2d1051aec4090b26ed6eb8345b807||||||||
streaming providers (e.g., youtube)|tools for spreading propaganda in cyberattacks|use of streaming platforms as a means to distribute religious or ideological content alongside cyber attacks|ffa2d1051aec4090b26ed6eb8345b807||||||||
audio files (hosted externally)|propaganda medium for defacers|external hosting of audio files containing propaganda that is played during a web attack as part of the defacement process|ffa2d1051aec4090b26ed6eb8345b807||||||||
visual aspects (embedded in defaced pages)|tools for spreading ideology and messages|the inclusion of visual elements within compromised websites to convey political or ideological messages as part of the attack's propaganda efforts|ffa2d1051aec4090b26ed6eb8345b807||||||||
free kashmir|#opisrael|related_campaigns|dfc0a602bb5c4b359dbeaccc16c52efe||||||||
south china sea|#savesyria|unrelated_topics|dfc0a602bb5c4b359dbeaccc16c52efe||||||||
free kashmir|#antiserbs|conflicting_interests|dfc0a602bb5c4b359dbeaccc16c52efe||||||||
south china sea|#opindia|unrelated_topics|dfc0a602bb5c4b359dbeaccc16c52efe||||||||
free kashmir|#opfrance|conflicting_interests|dfc0a602bb5c4b359dbeaccc16c52efe||||||||
#opisrael|a related campaign|campaign_relation|1902dbf367774e48b3c54d7764f7449f||||||||
#opsavegaza|another related campaign|campaign_relation|1902dbf367774e48b3c54d7764f7449f||||||||
#opbader / #electronicbader / #baderoperation|a third related campaign|campaign_relation|1902dbf367774e48b3c54d7764f7449f||||||||
israel-palestine conflict|the geopolitical context for the campaigns|contextual_relationship|1902dbf367774e48b3c54d7764f7449f||||||||
west bank occupation|a specific aspect of the conflict mentioned|conflict_detail|1902dbf367774e48b3c54d7764f7449f||||||||
gaza military operations|another specific aspect of the conflict mentioned|conflict_detail|1902dbf367774e48b3c54d7764f7449f||||||||
#opisrael defacement|initiated by imlulzpirate|causation|7b9a81b0d6a34c02969c8f35694d0d9c||||||||
#opisrael campaign|gained traction after initial defacement|dependence|7b9a81b0d6a34c02969c8f35694d0d9c||||||||
anonymous collective|supported #opisrael cause and organized campaigns against israeli websites|cooperation|7b9a81b0d6a34c02969c8f35694d0d9c||||||||
#opisrael engaged sub-campaign|started in 2015 by anonghost team and continued up to 2016 with anonymous arabe|succession|7b9a81b0d6a34c02969c8f35694d0d9c||||||||
anonghost team|responsible for the majority of the 2015 campaign|exclusivity|7b9a81b0d6a34c02969c8f35694d0d9c||||||||
anonymous arabe|accountable for the majority of the 2016 campaign|repetition|7b9a81b0d6a34c02969c8f35694d0d9c||||||||
defaced pages by anonghost team and anonymous arabe|showing identical wording for #opisrael engaged campaign|homogeneity|7b9a81b0d6a34c02969c8f35694d0d9c||||||||
#opisrael engaged|#opbader|related_campaigns|d0c169318f89455aaeff472bf926b4e3||||||||
#opisrael decided|#opbader|related_campaigns|d0c169318f89455aaeff472bf926b4e3||||||||
#electronicbader|#baderoperation|same_campaign|d0c169318f89455aaeff472bf926b4e3||||||||
#opisrael engaged|#opisrael decided|related_sub_campaigns|d0c169318f89455aaeff472bf926b4e3||||||||
battle of badr|digital jihad|historical_reference_to|d0c169318f89455aaeff472bf926b4e3||||||||
#fallagateam|#tunisianfallagateam|related_groups|d0c169318f89455aaeff472bf926b4e3||||||||
al fallaga team|fallaga hackers|same_group|d0c169318f89455aaeff472bf926b4e3||||||||
anonymous ghost gaza|stole personal information of israeli citizens|attacked|eff8b10a276640b3a54f12158f86c6f4||||||||
anonymous ghost gaza|posted stolen data on facebook and pastebin|exposed|eff8b10a276640b3a54f12158f86c6f4||||||||
hacking groups participating in #opisrael campaigns|from middle east, north africa, bangladesh, malaysia, indonesia|participated|eff8b10a276640b3a54f12158f86c6f4||||||||
anonymous ghost gaza|threatened to steal personal information of israeli citizens|issued threat|eff8b10a276640b3a54f12158f86c6f4||||||||
hacking groups participating in #opisrael campaigns|mostly from arabic-speaking countries|origin|eff8b10a276640b3a54f12158f86c6f4||||||||
anonghost|participated in the campaign|activity|eff8b10a276640b3a54f12158f86c6f4||||||||
capoo_tunisianoo|hacker participating in #opisrael campaigns|individual activity|eff8b10a276640b3a54f12158f86c6f4||||||||
fallaga team|hacking group from middle east participating in the campaign|group activity|eff8b10a276640b3a54f12158f86c6f4||||||||
anonymous arabe|hacking group from arabic-speaking countries involved in #opisrael campaigns|role|eff8b10a276640b3a54f12158f86c6f4||||||||
dr.t3rr0r|individual hacker participating in the campaign|activity|eff8b10a276640b3a54f12158f86c6f4||||||||
hitch|another individual hacker involved in #opisrael campaigns|participation|eff8b10a276640b3a54f12158f86c6f4||||||||
memberal_force|additional hacking group taking part in the campaign|contribution|eff8b10a276640b3a54f12158f86c6f4||||||||
"|n|ewbiec27 vandathe"|yet another individual hacker active in #opisrael campaigns|action|eff8b10a276640b3a54f12158f86c6f4||||||||
god|potential pseudonym for an anonymous participant in the campaign|anonymous activity|eff8b10a276640b3a54f12158f86c6f4||||||||
mrhax|another individual hacker associated with #opisrael campaigns|association|eff8b10a276640b3a54f12158f86c6f4||||||||
gaza|a group possibly related to the defacement campaign due to its name|relation|eff8b10a276640b3a54f12158f86c6f4||||||||
black worm|hacking tool or technique mentioned in context of #opisrael campaigns|technique|eff8b10a276640b3a54f12158f86c6f4||||||||
mohamad dexmod|individual hacker participating in the campaign|activity|eff8b10a276640b3a54f12158f86c6f4||||||||
bseso|hacking group or individual mentioned as a participant in #opisrael campaigns|contribution|eff8b10a276640b3a54f12158f86c6f4||||||||
#opfrance|charlie hebdo attacks|timeline_contextualization|563e9207fd194ea68e964c741d1d9e1f||||||||
french websites|carrefour supermarket|target_specificity|563e9207fd194ea68e964c741d1d9e1f||||||||
.fr domains|second-most targeted tlds|defacement_distribution|563e9207fd194ea68e964c741d1d9e1f||||||||
#opfrance hackers|french website defacers|attacker_identification|563e9207fd194ea68e964c741d1d9e1f||||||||
36% of #opfrance defacements|.fr tlds|defacement_concentration|563e9207fd194ea68e964c741d1d9e1f||||||||
#opfrance campaign|geopolitical event trigger|campaign_motivation|563e9207fd194ea68e964c741d1d9e1f||||||||
web defacement campaigns|#opfrance|campaign_relation|684029992497452a9900f8febf406096||||||||
hacking groups|middle east cyber army (meca)|group_membership|684029992497452a9900f8febf406096||||||||
#opfrance|islamic preacher junaid thorne's statement|statement_inspiration|684029992497452a9900f8febf406096||||||||
meca members|suspected leader 'the greatest'|leader_suspicion|684029992497452a9900f8febf406096||||||||
cyber police operations|bulgarian police arrest of syrian student|police_operation|684029992497452a9900f8febf406096||||||||
meca defacements|#opsavethegreatest campaign modification|campaign_modification|684029992497452a9900f8febf406096||||||||
middle east cyber army|most active group behind #opfrance|group_activity|88d46411f825486babab6526c4c5336f||||||||
anonghost|active in the anti-israel defacements and participated in #opindia campaigns|hacking_group_activities|88d46411f825486babab6526c4c5336f||||||||
mauritania coder|participated in both #opfrance and anti-israel defacements|hackers_involvement_in_multiple_campaigns|88d46411f825486babab6526c4c5336f||||||||
prosox|active participant in the anti-israel defacements|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
mrahsan|participated in both #opfrance and the anti-india campaigns|hackers_involvement_in_multiple_campaigns|88d46411f825486babab6526c4c5336f||||||||
haxor|mentioned as a participating hacker in #opindia campaign|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
mr.bz|named as a participant in the anti-israel defacements|hackers_involvement_in_specific_campaigns|88d46411f825486babab6526c4c5336f||||||||
hani xavi|referred to as one of the hackers involved in #opindia campaign|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
owner dzz|reportedly participated in both anti-israel and india campaigns|hackers_involvement_in_multiple_campaigns|88d46411f825486babab6526c4c5336f||||||||
zesn|participated in the #opindia campaign targeting indian websites|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
rexal|mentioned as a hacker involved in the anti-israel defacements|hackers_involvement_in_specific_campaigns|88d46411f825486babab6526c4c5336f||||||||
scooterist|identified as participating in #opindia campaign against indian websites|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
anoaghost|associated with the anti-israel defacements and involved in #opindia campaigns|hackers_involvement_in_multiple_campaigns|88d46411f825486babab6526c4c5336f||||||||
bl4ckt3rrorist|referred to as a hacker who participated in the anti-israel defacements|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
amine|mentioned among hackers involved in #opindia campaigns against indian websites|hackers_involvement_in_specific_campaigns|88d46411f825486babab6526c4c5336f||||||||
moodz|reportedly active in the anti-israel defacements and #opindia campaigns|hackers_involvement_in_multiple_campaigns|88d46411f825486babab6526c4c5336f||||||||
anonghost|mentioned as a hacking group that participated in the anti-israel defacements and #opindia campaigns|group_activity|88d46411f825486babab6526c4c5336f||||||||
casablanca|referred to as one of the hackers involved in #opindia campaign targeting indian websites|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
haxorz|associated with the anti-israel defacements and possibly involved in other campaigns as well|hackers_involvement_in_multiple_campaigns|88d46411f825486babab6526c4c5336f||||||||
hexlook|mentioned among hackers active in the anti-israel defacements and #opindia campaigns|hacker_activity|88d46411f825486babab6526c4c5336f||||||||
target tld's of #opindia (top level domains)|com, in, ac.in, co.in, org, net, edu.in, gov.in, co, info, net.in, biz|TLD_targets|88d46411f825486babab6526c4c5336f||||||||
indian border disputes (triggers)|kashmir and jammu with pakistan; border between india and bangladesh|geopolitical_triggers|88d46411f825486babab6526c4c5336f||||||||
#opindia|cricket team (the tigers)|controversy|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
shashi tharoor|bangladeshi hackers|targeting|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
tweet|defacement campaign|trigger|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
ac.in|com.ar|targeted domain|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
org.in|edu.in|targeted domain|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
gov.in|net.in|targeted domain|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
tharoor tweet|#opindia campaign|controversial statement|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
bangladeshi hackers|indian websites|defacement attack|e15d9ee7b52f44ee83d8040ef96cea5b||||||||
freekashmir|zcompanyhackingcrew(zhc)|campaign_by|2dfa3314bc27415ca6337ddcec029092||||||||
muslimliberationarmy|zcompanyhackingcrew(zhc)|campaign_with|2dfa3314bc27415ca6337ddcec029092||||||||
freekashmir|pakistanihackinggroups|campaign_by|2dfa3314bc27415ca6337ddcec029092||||||||
zcompanyhackingcrew(zhc)|muslimliberationarmy|grouping_with|2dfa3314bc27415ca6337ddcec029092||||||||
freekashmir|defacementpages|campaign_on|2dfa3314bc27415ca6337ddcec029092||||||||
zcompanyhackingcrew(zhc)|penalcodeactno.45of1860|references_in|2dfa3314bc27415ca6337ddcec029092||||||||
muslimliberationarmy|humanrightsb abuses|focuses_on|2dfa3314bc27415ca6337ddcec029092||||||||
pakistanihackinggroups|kashmirisactivistsandmilitants|targets_in|2dfa3314bc27415ca6337ddcec029092||||||||
nationalism inspires retaliatory hacking|defacement campaigns against rival countries' websites|Triggers|33273753e2ce41fc960d26f26df449bc||||||||
pakistani hacker faisal 1337|hacking into indian government website of kerala state|Performed Attack|33273753e2ce41fc960d26f26df449bc||||||||
indian hackers|launched #op_pak_cyber_space in retaliation|Counterattack Campaign|33273753e2ce41fc960d26f26df449bc||||||||
pakistani defacer alone injector|defaced mumbai airport customs website|Performed Attack|33273753e2ce41fc960d26f26df449bc||||||||
indian hackers|retaliated with defacement of pakistani airports' websites|Counterattack Campaign|33273753e2ce41fc960d26f26df449bc||||||||
indian, pakistani and bangladeshi hackers|each other's hacking|ongoing campaigns by|3a147e7f45d348d79b399b2593e00f99||||||||
team indian black hats aka indian cyber devils|pakistani websites|retaliatory defacements made by|3a147e7f45d348d79b399b2593e00f99||||||||
jaish-e-mohammed|pathankot air force base attack|claimed and attributed to|3a147e7f45d348d79b399b2593e00f99||||||||
indian government|kashmir|surgical strikes targeting locations in|3a147e7f45d348d79b399b2593e00f99||||||||
riseofthetigers|#opindia campaign|creates|1772211ca86d4b40b70862bfea5cef08||||||||
bangladeshi hacking groups|riseofthetigers|joins|1772211ca86d4b40b70862bfea5cef08||||||||
criminal.bd|#opindia campaign|participates in|1772211ca86d4b40b70862bfea5cef08||||||||
mr anonymous|#opindia campaign|supports|1772211ca86d4b40b70862bfea5cef08||||||||
red lizard|#opindia campaign|participates in|1772211ca86d4b40b70862bfea5cef08||||||||
rootheater|#opindia campaign|supports|1772211ca86d4b40b70862bfea5cef08||||||||
mr anon|#opindia campaign|participates in|1772211ca86d4b40b70862bfea5cef08||||||||
xl33tx_sn4p3r|#opindia campaign|joins|1772211ca86d4b40b70862bfea5cef08||||||||
mrahsan haxor|#opindia campaign|supports|1772211ca86d4b40b70862bfea5cef08||||||||
criminal.bd|a related malware|malicious_software|2c6cd40b55ef4a2d846314c97702b911||||||||
mr anonymous|red lizard|hacking_group|2c6cd40b55ef4a2d846314c97702b911||||||||
red lizard|rootheater|member_of|2c6cd40b55ef4a2d846314c97702b911||||||||
mr anon|xl33tx_sn4p3r|hacker|2c6cd40b55ef4a2d846314c97702b911||||||||
xl33tx_sn4p3r|mrahsan haxor|username|2c6cd40b55ef4a2d846314c97702b911||||||||
zero cool|ghost_root|hacker_alias|2c6cd40b55ef4a2d846314c97702b911||||||||
zain|mr.sh4hz3b|username|2c6cd40b55ef4a2d846314c97702b911||||||||
haxor haxor|pk_robot dulava!|hacking_group|2c6cd40b55ef4a2d846314c97702b911||||||||
mr. bangladesh|figure 32. top 15 participating hacking groups and hackers|data_reference|2c6cd40b55ef4a2d846314c97702b911||||||||
military actions prompt a #savesyria campaign on april 22, 2016, the syrian government launched airstrikes targeting residential areas in aleppo during friday scheduled prayers. the attacks happened despite a ceasefire agreement by both sides in february 2016. there were several more airstrikes, the worst of which hit the al-quds hospital, killing 50 people|a related event|historical_context|2c6cd40b55ef4a2d846314c97702b911||||||||
#savesyria campaign that exposed graphic images of wounded civilians in aleppo.|a social media campaign|publicity_initiative|2c6cd40b55ef4a2d846314c97702b911||||||||
target tlds of #savesyria|targeted domains|defacement_targets|2c6cd40b55ef4a2d846314c97702b911||||||||
russia was behind the april 2016 airstrikes. russia is seen as supportive of syrian president bashar al-assad, and the country has reinforced assad's regime through air superiority assets.|suspected involvement|geopolitical_implications|2c6cd40b55ef4a2d846314c97702b911||||||||
defaced sites showing graphic images of aleppo|visual evidence|digital_protest|2c6cd40b55ef4a2d846314c97702b911||||||||
fallaga team|tunisian hackers and anonymous arabe|membership|7bbbb5791ecb439fb5f7240a7d26cb94||||||||
defacement campaign|#stoptheholocaust, #aleppoisburning, #savealeppo, #savesyria|associated with|7bbbb5791ecb439fb5f7240a7d26cb94||||||||
kosovo police|ethnic serbian rioters and roadblocks into enclaves of serbian control|confrontation between|7bbbb5791ecb439fb5f7240a7d26cb94||||||||
ksg-crew|albanianhackers|collaboration with|7bbbb5791ecb439fb5f7240a7d26cb94||||||||
#antiserbs campaign|clashes between kosovo police and ethnic serbian rioters|triggered by|7bbbb5791ecb439fb5f7240a7d26cb94||||||||
brussels agreement|integration of northern kosovo into kosovo and involvement of kosovo serbs in police and judiciary|aims to resolve conflict through|7bbbb5791ecb439fb5f7240a7d26cb94||||||||
kwgdeface|albanianhackers|affiliation with|7bbbb5791ecb439fb5f7240a7d26cb94||||||||
web defacement|anti-serbs campaign|related to|0a55b43c22a64a5cadb82359c955c744||||||||
maritime incident|guang da xing no. 28|involved in|0a55b43c22a64a5cadb82359c955c744||||||||
taiwanese government|ddos attacks against .gov.ph|initiated|0a55b43c22a64a5cadb82359c955c744||||||||
philippine coast guard|death of taiwanese fisherman hung shih-cheng (洪石成)|caused|0a55b43c22a64a5cadb82359c955c744||||||||
taiwanese hackers|response to call for ddos attacks against .gov.ph|participated in|0a55b43c22a64a5cadb82359c955c744||||||||
south china sea|disputes involving taiwan and philippines|site of|0a55b43c22a64a5cadb82359c955c744||||||||
kosovo independence|support mentioned in defacement pages|related to|0a55b43c22a64a5cadb82359c955c744||||||||
serbian-controlled territories bordering kosovo with an albanian majority|listed as areas of interest in defacement pages|mentioned in|0a55b43c22a64a5cadb82359c955c744||||||||
web defacements|geopolitical events in the south china sea|trigger relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
team 1937cn|china-based hacker group|attribution relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
team vietnam|vietnam-based defacer group|attribution relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
anonymous philippines|philippines-based hacktivist group|attribution relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
zesn|individual defacer (unknown origin)|individual relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
yoco smart|hacking group from an unknown country|attribution relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
silic group|individual defacer (unknown origin)|individual relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
nama defacer|individual defacer from an unknown country|individual relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
anonreaper|philippines-based hacktivist group|attribution relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
bloodsecurity|hacking group from an unknown country|attribution relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
hukbalahack|philippines-based hacktivist group|attribution relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
alfabetovirtual|individual defacer from an unknown country|individual relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
team 1937cn|china-based hacker group involved in south china sea defacements|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
anonymous philippines|philippines-based hacktivist group actively participating in south china sea defacements|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
zesn|individual defacer (unknown origin) with activity related to south china sea tensions|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
yoco smart|hacking group from an unknown country involved in south china sea web attacks|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
silic group|individual defacer (unknown origin) with activity related to south china sea tensions|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
nama defacer|individual defacer from an unknown country involved in south china sea web attacks|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
anonreaper|philippines-based hacktivist group actively participating in south china sea defacements|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
bloodsecurity|hacking group from an unknown country involved in south china sea web attacks|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
hukbalahack|philippines-based hacktivist group actively participating in south china sea defacements|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
alfabetovirtual|individual defacer from an unknown country with activity related to south china sea tensions|activity relationship|a6ed1eb5bd044c3d80d311bc1e5b6810||||||||
vietnamese marine surveillance|chinese oil survey vessels|hostile encounter|1bb5e78a6d8e461eaf9848c70cf819fc||||||||
south china sea cables|cut by chinese marine surveillance|attack action|1bb5e78a6d8e461eaf9848c70cf819fc||||||||
vietnamese oil survey vessels|attacked in south china sea|victim of attack|1bb5e78a6d8e461eaf9848c70cf819fc||||||||
vietnamese defacer 'mr.n - cubi11'|chinese government websites|defacement attack|1bb5e78a6d8e461eaf9848c70cf819fc||||||||
hongke union (huc)|.vn websites|retaliatory defacement attacks|1bb5e78a6d8e461eaf9848c70cf819fc||||||||
huc (hacktivist group)|ddos attacks|conducted|ef72e182790d4acdaf2bf603d012a26a||||||||
huc (hacktivist group)|defacement of websites|engaged in|ef72e182790d4acdaf2bf603d012a26a||||||||
chinese hackers|retaliation against vietnamese defacers|responded with|ef72e182790d4acdaf2bf603d012a26a||||||||
silic (hacktivist group)|defacement of .vn websites|carried out|ef72e182790d4acdaf2bf603d012a26a||||||||
chinese hackers|message regarding huangyan island dispute|left on the defaced website of University of Philippines|ef72e182790d4acdaf2bf603d012a26a||||||||
anonymous #occupyphilippines|university of the philippines website|defacement|b6dd85e7c26a4d7d87696d64e5d8392c||||||||
#occupyphilippines and privatex|gov.cn sites|joint attack operation #OpChinaDown|b6dd85e7c26a4d7d87696d64e5d8392c||||||||
silic group|gov.ph sites|web defacement campaign|b6dd85e7c26a4d7d87696d64e5d8392c||||||||
defacement page|silic defacement page|specific example of a defaced webpage created by the Chinese hacktivism group 1937cn|538e7b08706544fe98be66d3b4e40018||||||||
chinese hacktivism group 1937cn|defacement war|participation in a series of defacements targeting websites|538e7b08706544fe98be66d3b4e40018||||||||
stopreclamation and opchina campaigns|south china sea reclamation activities|triggered by geopolitical events involving the Spratly archipelago|538e7b08706544fe98be66d3b4e40018||||||||
bloodsec defacement page|pastebin announcement|related to a Pastebin post declaring the start of #OpChina campaign on May 28, 2015|538e7b08706544fe98be66d3b4e40018||||||||
#stopreclamation and #opchina campaigns|unjust actions over south china sea|protest against Chinese activities in the region as described by hackers from Philippines and Vietnam|538e7b08706544fe98be66d3b4e40018||||||||
anonymous philippines|chinese government|political message delivery|770938c1b7a84dc793494583d2cea05f||||||||
vietnamese hackers (anonghost)|south east asian countries' .gov.cn sites|malware attack|770938c1b7a84dc793494583d2cea05f||||||||
chinese defacer team '1937cn'|philippines and vietnam joint action|retaliation (defacing .vn sites)|770938c1b7a84dc793494583d2cea05f||||||||
defacement|web attack|trigger_of|306b161672c34e848cc5a3b9da4f5b8e||||||||
geopolitical events|defacement web attacks|cause_of|306b161672c34e848cc5a3b9da4f5b8e||||||||
civil aviation administration of vietnam|reporting agency|report_on|306b161672c34e848cc5a3b9da4f5b8e||||||||
vietnam airlines|attacked entity|target_of|306b161672c34e848cc5a3b9da4f5b8e||||||||
tan son nhat international airport|location of attack (check-in system)|location_for|306b161672c34e848cc5a3b9da4f5b8e||||||||
noi bai international airport|location of attack (flight info screens and speakers)|location_for|306b161672c34e848cc5a3b9da4f5b8e||||||||
the 1937cn team|potential hacker group|suspected_by|306b161672c34e848cc5a3b9da4f5b8e||||||||
code party|indonesian hacking group mentioned in the context of defacement and web attacks|related_to|306b161672c34e848cc5a3b9da4f5b8e||||||||
gunz_berry|hacker alias (possible member of code party)|member_of|306b161672c34e848cc5a3b9da4f5b8e||||||||
anoncoders|indonesian hacking group mentioned in the context of defacement and web attacks|related_to|306b161672c34e848cc5a3b9da4f5b8e||||||||
moroccan ethical hackers|hacker group from morocco mentioning as an example of a hacking group|example_of|306b161672c34e848cc5a3b9da4f5b8e||||||||
myanmar noob hackers|hacker group from myanmar mentioned in the context of defacement and web attacks|related_to|306b161672c34e848cc5a3b9da4f5b8e||||||||
virus noir|french hacking group mentioning as an example of a hacking group with international memberships|example_of|306b161672c34e848cc5a3b9da4f5b8e||||||||
zolo|silent hell|hacker_group|718f160a525346f79a6ff87f6411f98d||||||||
toshiro|rock|member_of|718f160a525346f79a6ff87f6411f98d||||||||
dropper|gen|malware_technique|718f160a525346f79a6ff87f6411f98d||||||||
hardhunter|sniper|similar_name|718f160a525346f79a6ff87f6411f98d||||||||
zarrar|radical|hacker_group|718f160a525346f79a6ff87f6411f98d||||||||
assassin|metallic|malware_family|718f160a525346f79a6ff87f6411f98d||||||||
xenon|syed zadaa|unknown|718f160a525346f79a6ff87f6411f98d||||||||
papaas|pccs|member_of|718f160a525346f79a6ff87f6411f98d||||||||
mongoose|hard hunter|malware_technique|718f160a525346f79a6ff87f6411f98d||||||||
chf code|dorian gray|unknown|718f160a525346f79a6ff87f6411f98d||||||||
zcompany hacking crew|hacking crew|same_name|718f160a525346f79a6ff87f6411f98d||||||||
hothead|zulﬁ ibrar buttz madni|unknown|718f160a525346f79a6ff87f6411f98d||||||||
muslim liberation army|army|same_name|718f160a525346f79a6ff87f6411f98d||||||||
milan milo|killer mind|unknown|718f160a525346f79a6ff87f6411f98d||||||||
tazii|trick aka saywhat? mastermind nabeel unknown xaha silence destiny hax cobra black zarb e momin de decorum angel xtremist pak jaguars killermind haxor nabeel (master mind) hawk facho hyp3r boy jerry hassan faisy ali laghari|unknown_relationship|718f160a525346f79a6ff87f6411f98d||||||||
hawk|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
facho|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
hyp3r|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
boy|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
jerry|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
hassan|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
faisy ali|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
laghari|zcompany hacking crew|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
anonymous|hacking collective|example_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
rise of the tigers|hacktivism campaign|formed_to_support|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
3xp1r3 cyber army|rise of the tigers collective|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
blacksmith hacker's team|rise of the tigers collective|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
cyb3r command0s|rise of the tigers collective|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
bangladesh grey hat hackers|rise of the tigers collective|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
bangladesh black hat hackers|rise of the tigers collective|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
cyber sword and bangladesh script kidde hackers|rise of the tigers collective|member_of|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
facebook calendar|defacement activity scheduling|used_for|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
social media post|defacement script template sharing|used_for|9c41a851d2f54ce68e55ed8e762ddbdc||||||||
malware entity|a related malware family|entity_relationship|567b367e1c044e05b781a5f8b4499d7d||||||||
defacement campaign|geopolitical event|event_trigger|567b367e1c044e05b781a5f8b4499d7d||||||||
facebook events|defacement campaign organization|organizational_tool|567b367e1c044e05b781a5f8b4499d7d||||||||
team pages|hacking group recruitment|recruitment_platform|567b367e1c044e05b781a5f8b4499d7d||||||||
defacement page templates|defacer community|shared_resource|567b367e1c044e05b781a5f8b4499d7d||||||||
tools spread through social media and sharing sites|malware tools dissemination|distribution_network|567b367e1c044e05b781a5f8b4499d7d||||||||
team websites hosting forums, downloads, news, and more|hacking group collaboration|collaborative_platform|567b367e1c044e05b781a5f8b4499d7d||||||||
hacking tutorials on github and streaming sites|defacement technique dissemination|knowledge_sharing|567b367e1c044e05b781a5f8b4499d7d||||||||
attack techniques shared by defacers|potential targets for exploitation|technique_exposure|567b367e1c044e05b781a5f8b4499d7d||||||||
defacers|exploit-db authors|overlap in activity or identity|cafe75a9605248fdba206ab062e19dba||||||||
geopolitical events|web attacks (defacement)|trigger relationship|cafe75a9605248fdba206ab062e19dba||||||||
team p0ison's founder junaid hussain (trick)|free kashmir movement supporter through defacements|political alignment and expression through cyber activity|cafe75a9605248fdba206ab062e19dba||||||||
trick|free kashmir supporter|association|729206c7ab5440c7903783e3f1ce9a39||||||||
junaid hussain|katie kay's hacker|history-of-crime|729206c7ab5440c7903783e3f1ce9a39||||||||
junaid hussain|isis member|affiliation|729206c7ab5440c7903783e3f1ce9a39||||||||
ramnit malware|malicious software family|classification-of-malware|729206c7ab5440c7903783e3f1ce9a39||||||||
ramnit malware|banking credential stealer|functionality-of-malware|729206c7ab5440c7903783e3f1ce9a39||||||||
ramnit malware|worm propagation capabilities|additional-capabilities-of-malware|729206c7ab5440c7903783e3f1ce9a39||||||||
defaced websites|unwitting infection sources for ramnit|role-in-spreading-malware|729206c7ab5440c7903783e3f1ce9a39||||||||
ramnit|malware entity|is a type of|3ac39f6d13394f09869a7ccb830dbaa1||||||||
stupid|top defacer spreading ramnit|was infected by|3ac39f6d13394f09869a7ccb830dbaa1||||||||
cyb3r_sw0rd|defacer with high number of infections|had websites distributing|3ac39f6d13394f09869a7ccb830dbaa1||||||||
fallaga team|group of defacers from arabic-speaking countries|were infected by Ramnit and spread it through compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
小北|chinese defacer spreading malware|had their websites used to distribute Ramnit|3ac39f6d13394f09869a7ccb830dbaa1||||||||
gunz_berry|defacer from china contributing to spread of ramnit|used compromised web pages to disseminate the malware|3ac39f6d13394f09869a7ccb830dbaa1||||||||
by：小康|chinese defacer with infected websites|unwittingly distributed Ramnit through their defacement pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
med max|defacer spreading malware as part of top 30 list|was infected by and spread Ramnit|3ac39f6d13394f09869a7ccb830dbaa1||||||||
anwar dreno|individual defacer from north africa affected by ramnit|contributed to the distribution of Ramnit through their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
blackvirus|malware spreading defacer on top 30 list|infected by and spread Ramnit via their websites|3ac39f6d13394f09869a7ccb830dbaa1||||||||
anonghost|hacking group associated with malware distribution|was infected by and spread Ramnit through compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
baws|defacer on the top 30 list spreading malware|had websites that distributed Ramnit|3ac39f6d13394f09869a7ccb830dbaa1||||||||
dz|individual defacer from algeria affected by ramnit|contributed to the spread of Ramnit through their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
zalim|malware spreading indian defacer on top 30 list|infected by and spread Ramnit via their websites|3ac39f6d13394f09869a7ccb830dbaa1||||||||
sniper_sa|south african defacer with infected websites|unwittingly distributed Ramnit through their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
chinafans|chinese defacer spreading malware as part of top 30 list|was infected by and spread Ramnit via their websites|3ac39f6d13394f09869a7ccb830dbaa1||||||||
umca|malware distributing united mexican hackers association on the top 30 list|infected by and spread Ramnit through compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
owner dzz|defacer with websites used to distribute malware|was infected by Ramnit and contributed to its spread|3ac39f6d13394f09869a7ccb830dbaa1||||||||
turkhackteam.org|hacking group from turkey spreading malware as part of top 30 list|infected by and distributed Ramnit through their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
by 刺心|defacer with infected websites on the top 30 list|unwittingly spread Ramnit via their defacement pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
mrcybererror404|malware spreading individual from turkey on the top 30 list|infected by and disseminated Ramnit through compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
hakant|indian defacer with infected websites contributing to malware spread|was affected by Ramnit and distributed it via their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
team_cc|chinese hacking group spreading malware as part of top 30 list|infected by and spread Ramnit through their websites|3ac39f6d13394f09869a7ccb830dbaa1||||||||
大|chinese defacer with infected websites contributing to malware spread|was affected by Ramnit and distributed it via their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
sp@rk cod3r|indian defacer spreading malware as part of top 30 list|was infected by Ramnit and contributed to its spread|3ac39f6d13394f09869a7ccb830dbaa1||||||||
anonymous arabe|hacking group from the middle east spreading malware on the top 30 list|infected by and distributed Ramnit through their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
dulava!|indian defacer with infected websites contributing to malware spread|was affected by Ramnit and distributed it via their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
fallaga team|group of defacers from arabic-speaking countries spreading malware on the top 30 list|infected by and spread Ramnit through their websites|3ac39f6d13394f09869a7ccb830dbaa1||||||||
xamd|indian defacer with infected websites contributing to malware spread|was affected by Ramnit and distributed it via their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
kkk1337|defacer spreading malware as part of top 30 list|infected by and spread Ramnit through their websites|3ac39f6d13394f09869a7ccb830dbaa1||||||||
ll_azab_siyah_ll|malware spreading defacer on the top 30 list from arabic-speaking countries|infected by and spread Ramnit via their websites|3ac39f6d13394f09869a7ccb830dbaa1||||||||
星|chinese defacer with infected websites contributing to malware spread|was affected by Ramnit and distributed it via their compromised web pages|3ac39f6d13394f09869a7ccb830dbaa1||||||||
web defacements|geopolitical events|causes|28f0b8f5f3ae4948ae47e2f9cf063af2||||||||
web defacement activities|other hacking activities and criminal behavior|potential_escalation|28f0b8f5f3ae4948ae47e2f9cf063af2||||||||
internet of things (iot) devices|web defacements|vulnerability|28f0b8f5f3ae4948ae47e2f9cf063af2||||||||
router control panel|hacker’s page|replaced_by|28f0b8f5f3ae4948ae47e2f9cf063af2||||||||
web defacement|vulnerability exploitation|Attack Vector|acd4e7aa923545a2b741276d24cbf912||||||||
malware distribution|defacement group monetization|Potential Evolution of Activity|acd4e7aa923545a2b741276d24cbf912||||||||
web shells|maintaining access to compromised servers|Technique for Persistence|acd4e7aa923545a2b741276d24cbf912||||||||
doxing and leaking stolen data|hacktivist agenda expansion|Escalation of Cyberactivities|acd4e7aa923545a2b741276d24cbf912||||||||
malicious redirections or exploit code|ransomware installations|Potential Next Step in Attack Chain|acd4e7aa923545a2b741276d24cbf912||||||||
vbs_ramnit.smc|infected defacement pages|Unintentional Malware Distribution|acd4e7aa923545a2b741276d24cbf912||||||||
malware entity|ransomware|causes_malicious_behavior|e02b1695265e4253abfe4bde6c367d1e||||||||
defacements|geopolitical events|triggers_web_attacks|e02b1695265e4253abfe4bde6c367d1e||||||||
indian hackers|pakistani servers and users|targeted_for_installing_ransomware|e02b1695265e4253abfe4bde6c367d1e||||||||
enterprise security|basic security policies|relies_on|e02b1695265e4253abfe4bde6c367d1e||||||||
web application firewalls|malicious traffic|filter_monitor_and_block|e02b1695265e4253abfe4bde6c367d1e||||||||
secure coding standards|all web applications of an organization|implemented_on|e02b1695265e4253abfe4bde6c367d1e||||||||
testing tools|deployed codes for security vulnerabilities|used_to_test|e02b1695265e4253abfe4bde6c367d1e||||||||
patching systems and networks|unpatched or outdated software with vulnerabilities|prevents_exploitation_of|e02b1695265e4253abfe4bde6c367d1e||||||||
web applications|vulnerabilities|containment|8b2b5bf0439f4d06846a73d70108bd22||||||||
trend micro™ deep security™ and vulnerability protection|virtual patching|provides|8b2b5bf0439f4d06846a73d70108bd22||||||||
sql injection|cross-site scripting attacks|can lead to|8b2b5bf0439f4d06846a73d70108bd22||||||||
zone-h archives|unrestricted information|provides access to|8b2b5bf0439f4d06846a73d70108bd22||||||||
ibid.|vulnerabilities information|refers to previous source for|8b2b5bf0439f4d06846a73d70108bd22||||||||
hack cn|global attack statistics|tracks|8b2b5bf0439f4d06846a73d70108bd22||||||||
mirror zone (offline)|defacement data|was a source for|8b2b5bf0439f4d06846a73d70108bd22||||||||
h4ck mirror (offline)|hack mirror service|provided by|8b2b5bf0439f4d06846a73d70108bd22||||||||
mydeface.com (offline)|defacement information|was a source for|8b2b5bf0439f4d06846a73d70108bd22||||||||
bbc newsround|gaza conflict background|provides context on|8b2b5bf0439f4d06846a73d70108bd22||||||||
al-islam.org|battle of badr history|offers information about|8b2b5bf0439f4d06846a73d70108bd22||||||||
india|pakistan-based militants|indictment|b0d11c6026d24d29bfe73eaf7ab44c8c||||||||
pathankot air base|pakistan-based militants|target of attack|b0d11c6026d24d29bfe73eaf7ab44c8c||||||||
india|nepal|constitution change recommendation|b0d11c6026d24d29bfe73eaf7ab44c8c||||||||
al quds hospital|airstrike|target of attack|b0d11c6026d24d29bfe73eaf7ab44c8c||||||||
mitrovica's flashpoint bridge|kosovo's divisions|Symbolizes|fc0a5cf049c44a289219409e12d3f013||||||||
pcg men|taiwan family|Ordered to Pay|fc0a5cf049c44a289219409e12d3f013||||||||
shooting incident|taiwan-philippines cyber war|Ignited|fc0a5cf049c44a289219409e12d3f013||||||||
pinoy vendetta|vietnamese hackers|Warns and Defaces Websites|fc0a5cf049c44a289219409e12d3f013||||||||
petro vietnam|china sea cable|Destruction of|fc0a5cf049c44a289219409e12d3f013||||||||
chinese ships|vietnamese hackers|Counterattacks against|fc0a5cf049c44a289219409e12d3f013||||||||
kafan.cn|vietnamese hacker attacks on domestic websites|Reporting of|fc0a5cf049c44a289219409e12d3f013||||||||
freebuf|cybersecurity news site|Information source|66d2f45fe7044382814ffbe937c4d9cb||||||||
dbm website|target of a cyber attack|Attacked entity|66d2f45fe7044382814ffbe937c4d9cb||||||||
china's secret weapon in the south china sea: cyber attacks|article title on the diplomat|Document reference|66d2f45fe7044382814ffbe937c4d9cb||||||||
#opchina official index|pastebin document with iocs and cyber threat info|Threat intelligence source|66d2f45fe7044382814ffbe937c4d9cb||||||||
vietnam news (29 july 2016)|news outlet reporting on a cybersecurity incident involving chinese hackers|Media coverage of a cyber event|66d2f45fe7044382814ffbe937c4d9cb||||||||
chinese hackers|vietnam's airports and vietnam airlines website|attacked|332b9a2a910c41a58634fa14815558d1||||||||
info-security magazine|report on chinese hacker attacks against vietnamese targets|reported|332b9a2a910c41a58634fa14815558d1||||||||
vietnam news (newspaper)|coverage of the cyberattack by chinese hackers targeting vietnam's airports and vietnam airlines website|covered|332b9a2a910c41a58634fa14815558d1||||||||
defacement|geopolitical events as triggers for web attacks|analyzed|332b9a2a910c41a58634fa14815558d1||||||||
malware entity|a related malware|entity_relationship|48055d16402047be93f53e47ccfc694f||||||||
junaid hussain|team poison's hacker|member_of|48055d16402047be93f53e47ccfc694f||||||||
offensive security|exploit database repository owner|owner_of|48055d16402047be93f53e47ccfc694f||||||||
international business times|media outlet reporting on hacker activity|reported_by|48055d16402047be93f53e47ccfc694f||||||||
the guardian|newspaper covering cybersecurity and geopolitical events|published_in|48055d16402047be93f53e47ccfc694f||||||||
india defense news|website reporting on indian hackers' activities|reported_by|48055d16402047be93f53e47ccfc694f||||||||
global technical support and r&d center|trend micro trend micro incorporated|affiliation|395e3340137047dead26265c0d97fa8d||||||||
internet content security and threat management solutions|businesses and consumers|target_audience|395e3340137047dead26265c0d97fa8d||||||||
trend micro incorporated|a global cloud security leader|industry_positioning|395e3340137047dead26265c0d97fa8d||||||||
smart protection network infrastructure|cloud-computing security technology|technology_description|395e3340137047dead26265c0d97fa8d||||||||
trend micro t-ball logo|trademark or registered trademark of trend micro incorporated|legal_status|395e3340137047dead26265c0d97fa8d||||||||
