Let's go with a Go RAT!
Dec 2018
Yoshihiro Ishikawa
Shinichi Nagano
Copyright ©LAC Co., Ltd. All Rights Reserved.

Who are we?
• Organization: LAC Co.,Ltd.(lac.co.jp)
• Department: Cyber Emergency Center
• Job Title: Cyber Threat Analyst and handler

Yoshihiro Ishikawa (CISSP)
• Department: Cyber Emergency Center
• Job Title: Cyber Threat Analyst and handler

Shinichi Nagano (GREM)
Copyright ©LAC Co., Ltd. All Rights Reserved.

Agenda
n Purpose
n A study of Go language (GoLang)
n wellmess and its detail
n wellmess C2 traffic simulation (DEMO)
n Prevention method
n Conclusion
Copyright ©LAC Co., Ltd. All Rights Reserved.

Purpose
n

n
n

wellmess malware and its botnet is currently
still categorized as an unknown Golang
malware
several incident cases that we handled from
January 2018
Not detected[2] by security software until we
published analysis report[1] about June 2018

We would like to introduce the analysis result of "wellmess"
And now hopefully will be useful to prevent the attack in the future.
Copyright ©LAC Co., Ltd. All Rights Reserved.

We provide IT total solutions
based on advanced security technologies.
CYBER

-

EDUCATION

-

PENTEST -

JSOC

-

119

-

CONSULTING

A study of Golang executable

Copyright ©LAC Co., Ltd. All Rights Reserved.

What about Golang
Go[3] is an open source programming language developed by
Google Inc. in 2009, in our presentation we call it as “GoLang”.
n Current stable version 1.11.2
n Run on various platforms such as Linux, Mac, Windows, Android
n Golang malware
n

Mirai(C2/Server) is one of the most famous
n Otherwise such as Lady[4], GoARM.Bot[5], Go Athena RAT[6], Encriyoko ,
n

[7]

Copyright ©LAC Co., Ltd. All Rights Reserved.

Golang executables characteristics
Go executables is huge file size (even packed by UPX[8] < 4Mb)
n Function name is left intact in the executable files (in many cases)
n The character string becomes one continuous block (go1.8 higher)
n

Not stripped
function Name

continuous block
Copyright ©LAC Co., Ltd. All Rights Reserved.

Golang executables characteristics - 2
The function names can be specified by using IDAGolangHelper[9] in IDA Pro[11].
Before

After

Rename
functions

Copyright ©LAC Co., Ltd. All Rights Reserved.

Golang executables characteristics - 3
Not every string-blob can be separated IDAGolangHelper, so we need to do it manually
Possible

split values
Impossible

No split values …
Copyright ©LAC Co., Ltd. All Rights Reserved.

We provide IT total solutions
based on advanced security technologies.
CYBER

-

EDUCATION

-

PENTEST -

JSOC

-

119

-

CONSULTING

wellmess and its detail

Copyright ©LAC Co., Ltd. All Rights Reserved.

What’s about wellmess
wellmess is a RAT coded on GoLang on multiple platform operating
systems.
n

C2 Functions
Command Execution (RCE)
n File Upload and Download
n

n

Identification
Lang: GoLang (main) & .Net (minor version only)
n Type: Windows 32/64-bit Executable(these main slides) & ELF x64 (Appendix:C)
n Characteristic:
n Compiled with Ubuntu (go1.8.3), Windows (go1.8)
n "wellmess” naming is coming from "Welcome Message” (attacker’s thought)
n Usage of IRC terms like “welcome message”, “bot”, “chat” or “join” etc
n

Copyright ©LAC Co., Ltd. All Rights Reserved.

Typo strings
Does he means choice?

Does he means welcome message?

Does he means Mozilla?

Copyright ©LAC Co., Ltd. All Rights Reserved.

Specific characteristic strings
different package name C2 server
Supports Japanese,
Korean and Chinese

Copyright ©LAC Co., Ltd. All Rights Reserved.

Specific User-Agents
Each wellmess had a different User-Agents hard-coded.
n
n
n
n
n
n

Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/41.0.2228.0 Safari/537.36
Mozilla/5.0 (X11; U; Linux x86_64; ja-JP; rv:1.9.2.16) Gecko/20110323
Ubuntu/10.10 (maverick) Firefox/3.6.16
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14
(KHTML, Like Gecko) Version/7.03 Safari/7046A194A
Mozilla/5.0 (X11; OpenBSD amd64; rv:28.0) Gecko/20100101 Firefox/28.0
Mozzila/5.0 (Windows NT 6.1; WOW64; rv:56.0) Gecko/20100101 Firefox/
56.0
Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;
FunWebProducts)
Copyright ©LAC Co., Ltd. All Rights Reserved.

Lateral movement
welmess doesn’t have lateral movement function, for that purpose the
attacker was using another tool, in some cases they used gost[13], a tunneling
tools written by Golang

Victim
Attacker

Copyright ©LAC Co., Ltd. All Rights Reserved.

Other version: compiled with .NET wellmess
dnSpy[13]

(too long, redacted)
Payload(DLL file) is encrypted
Replace strings and Base64, decrypt RC6
Payload DLL file is
loaded and executed
using AppDomain
CreateInstanceAndU
nwrap method
utilizing Proxy class.
Copyright ©LAC Co., Ltd. All Rights Reserved.

Other version: The payload of .NET wellmess

.NET version RCE is also using Powershell
methods which are not found in the
Has similar functions
as per in Golang version Golang version
Copyright ©LAC Co., Ltd. All Rights Reserved.

Comparison of Golang and .NET wellmess
Functions

Golang (mostly spotted)

.NET (several cases only)

Support OS

Windows, Linux, (NAS)

Windows

Encryption

RC6, AES, RSA, obfuscation

RC6, AES, RSA, obfuscation

Bot commands

Command Execution
File Upload and Download

Command Execution
File Upload and Download

How to Command Exec

CMD (Windows)
Execve (Linux)

PowerShell, CMD

C2 Protocol

HTTP, POST, Cookie

HTTP, POST, Cookie

Packer

UPX or none

Original Packer (bytes obfuscator)

Latest version(ITW)
2018-10-02
#Virus Total First Submission

2018-07-25

Bot functions is almost the same among Golang and .NET
We think that the main wellmess used by an attacker is Golang

Copyright ©LAC Co., Ltd. All Rights Reserved.

Comparison of Golang and .NET wellmess
Functions

Golang (mostly spotted)

.NET (several cases only)

Support OS

Windows, Linux, (NAS)

Windows

Encryption

RC6, AES, RSA, obfuscation

RC6, AES, RSA, obfuscation

Command Execution

Command Execution

How to Command Exec

CMD (Windows)
Execve (Linux)

PowerShell, CMD

C2 Protocol

HTTP, POST, Cookie

HTTP, POST, Cookie

Packer

UPX or none

Original Packer (bytes obfuscator)

Bot commands

data.replace("+",
").replace("
"").replace("
File Upload"and
Download ", "=").replace(".
File Upload and ",
Download
", "").replace(",", "+").replace(":", "/") reference by JPCERT/CC [15]

Latest version(ITW)
2018-10-02
#Virus Total First Submission

2018-07-25

Bot functions is almost the same among Golang and .NET
We think that the main wellmess used by an attacker is Golang

Copyright ©LAC Co., Ltd. All Rights Reserved.

Bot commands syntax
wellmess uses tags in XML format to communicate tag C2 commands
Following is regular expression matching rules of the tags

Golang version
<;(?P<key>[^;]*?);>(?P<value>[^<]*?)<;[^;]*?;>
.NET version
<;(?<key>[^;]*?);>(?<value>[^<]*?)<;[^;]*?;>

Copyright ©LAC Co., Ltd. All Rights Reserved.

Bot commands
Tag

Command Functions

<;head;>

C

Used with <;service;> tag

G

C2 server acceptance

p

(Re)Initialize AES key and Sending Host Info

fu

File upload (from C2 to bot)

fd

File download (from bot to C2)

m

Change the division size per communication

u

Change user-agent

a:x_x

Item number information of divided
communication

rc

Waiting C2 command

<;service;>

<;title;>

<;body;>

Payload part added to the command
Copyright ©LAC Co., Ltd. All Rights Reserved.

Bot commands samples
AOyniCcS=1bLTL+NuPy0+%2CeDJx+1Q%2Cm0+1zZ8a+uj84J+VLbRk+tYH8v+pCeL6+gRkR; D9y5yGqO=G
+B%3AbW%3Ao.+Y8GDHj+K2QKny+WZ2vQZ+L1v84h+p3P1qT.+Z8auj8+4JVLbR+ktYH8v+pCfbOO+ZDq5
77.+LySyuj+30PqHX+%2CXho8Z+YzBMr8+tQIevh.+rxEbIz+OVIVRP+x9DfH6+duxldn+PKi3f4.+y%2CI6td+
RfavbR+67eQVw+twTN%3AI+HB1vPy.+hWzm2f+ASQlzB+Jiz9pt+EzNRQA+fRv1mL.+pziFHi+vzbux9+VA2
zkY+8Ve9rz+T0u8jb.+1LH0%2Cx+WDpcVw+TIJjDV+5Dy6Mx+GTUarDtVk+++

Decrypted Cookie header

<;head;>57494e2d3550464b544835345154517c636f6e
736f6c657c57494e2d3550464b544835345154517c757
36572e3b0c44298fc1c149afbf4c8996fb92427ae41e46
49b934ca495991b7852b855/p<;head;><;title;>a:1_0<;title
;><;service;>p<;service;>
Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication
Bot

1

C2

1’

2

2’

3

3’

4

4’

We must prepare the
hard-coded RC6 key and
changing RSA public key

There are 4 steps until command &
control communication
1.Bot sends AES + iv + Host Information
1ʼ.C2 acceptance

2.Bot sends Host Information
2ʼ.C2 acceptance

3.Bot sends ready signal to RCE
3ʼ.C2 send RCE

4.Bot sends result of RCE
4ʼ.C2 acceptance
Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 1
Bot

C2

Cookie Header: Infected
Host Information in RC6

1

POST Body: AES + iv in
RSA public key

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 1
Bot

C2

1

“p” means Initial phase

Phase 1 of 2

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 1
Bot

C2

NULL of SHA256 hash

1

HexDump

Infected PC Information

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 1
Bot

C2

1

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 1'
Bot

1

C2

1’

Cookie Header: C2 Server
response in RC6

“G” means just received

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 2
Bot

1
2

C2

Cookie Header: Infected
Host Information in RC6

1’

POST Body: Host Information
in RSA public key
Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 2
Bot

1
2

C2

1’

Phase 2 of 2

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 2
Bot

1
2

C2

1’

Computer
Name

Mode

User
Domain

User
Name

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 3
Bot

1
2
3

C2

Cookie Header: standby
to receive C2 Command

1’
2’

POST Body: It looks like
no data is included

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 3
Bot

1
2
3

C2

1’
2’

“rc” means to standby
receiving C2 command

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 3'
Bot

1
2
3

C2

1’
2’
3’

POST Body:
C2 Command in AES

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 4
Bot

C2
Cookie Header: split
block number in RC6

1
2
3
4

1’
2’
3’

POST Body: Result of C2
Command in AES
Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 4
Bot

1
2
3
4

C2

1’
2’
3’

Phase 1 of 1

Copyright ©LAC Co., Ltd. All Rights Reserved.

C2 traffic communication - 4
Bot

C2

The Japanese font is garbled

Copyright ©LAC Co., Ltd. All Rights Reserved.

We provide IT total solutions
based on advanced security technologies.
CYBER

-

EDUCATION

-

PENTEST -

JSOC

-

119

-

CONSULTING

wellmess C2 traffic simulation DEMO

Copyright ©LAC Co., Ltd. All Rights Reserved.

Import notes
It is forbidden in Japan to share any form of any malicious code
without the written acknowledgement from and to the law
enforcement.
n In this demonstration there is a possibility the used PoC code can be
misused to control a real alive malware, there is a risk for malicious
used if this PoC leaks, it is considered as malicious code.
n Due the circumstances above, we can not share the source code
used for this demonstration, however, this demonstration itself is
explaining enough details to proofing the concept of the C2
communication traffic/protocol used by wellmess malware.
n

Copyright ©LAC Co., Ltd. All Rights Reserved.

Prevention and Detection
n

C2 traffic connection in network detection
n

wellmess traffic detect at using Suricata[16] or snort[17]

alert tcp $HOME_NET any -> $EXTERNAL_NET any (msg:"wellmess C2 traffic detection!";
content:"Accept-Encoding|3a 20|gzip"; content: "POST / HTTP/1.1"; pcre:"/Cookie\x3a [azA-Z0-9]{8}=/"; content:"Content-Type|3A| application|2F|x-www-form-urlencoded|3b|
charset|3d|utf-8"; sid:1000000;)
n

Static and dynamic detection
YARA[18]
n wellmess malware can be detected and identified. By the YARA rule (will
be introduce next slide)
n EDR
n Powershell and cmd wellmess execution can be traced by EDR log or
process tree
Copyright ©LAC Co., Ltd. All Rights Reserved.
n

YARA rules (one case)
For Golang

For .NET

rule wellmess_go {

rule chatbot_net {

meta:
author = "LAC Co., Ltd."
strings:
$mz = { 4D 5A }
$elf = {7F 45 4C 46}
$str1 = "botlib.FromNormalToBase64"
$str2 = "botlib.AES_Encrypt"
$str3 = "botlib.UnpackB"
$str4 = "botchat.go"
$str5 = "choise.go"
$str6 = "wellmess.go"
condition:
($mz at 0 or $elf at 0) and any of ($str*)
}

meta:
author = "LAC Co., Ltd."
strings:
$mz = { 4D 5A }
$str = "Start bot" wide
$str2 = "ROL"
$str3 = "ROR"
$str4 = "FromBase64ToNormal"
$str5 = "FromNormalToBase64"
$str6 = "SSL"
condition:
($mz at 0) and all of them
}
Copyright ©LAC Co., Ltd. All Rights Reserved.

EDR tracing for wellmess infection
Windows Defender ATP[19]
Machine Timeline

Copyright ©LAC Co., Ltd. All Rights Reserved.

Conclusion
n wellmess is a RAT coded on GoLang and .NET, a RAT

controlled by the C2 botnet.
n We have confirmed some cases where wellmess infection
was found in targeted organizations. So, Attacks using the
malware may continue in other countries.
n For the information sharing with OPSEC on a global
scale, you are more than welcome to contact us !

Copyright ©LAC Co., Ltd. All Rights Reserved.

Appendix A - Reference
1.
2.

https://www.lac.co.jp/lacwatch/pdf/20180614_cecreport_vol3.pdf
https://www.virustotal.com/ja/file/
0b8e6a11adaa3df120ec15846bb966d674724b6b92eae34d63b665e0698e0193/analysis/
3. https://golang.org/
4. https://news.drweb.com/show/?i=10140&lng=en
5. http://blog.0day.jp/2014/09/linuxgoarmbot.html
6. https://blog.talosintelligence.com/2017/02/athena-go.html#more
7. https://www.symantec.com/connect/blogs/malware-uses-google-go-language
8. https://upx.github.io/
9. https://github.com/sibears/IDAGolangHelper
10. https://www.hex-rays.com/products/ida/
11. https://www.paterva.com/web7/
12. https://github.com/ginuerzh/gost
13. https://github.com/0xd4d/dnSpy
14. https://blogs.jpcert.or.jp/en/2018/07/malware-wellmes-9b78.html
15. https://suricata-ids.org/
16. https://www.snort.org/
17. http://virustotal.github.io/yara/
18. https://www.microsoft.com/en-us/windowsforbusiness/windows-atp
Copyright ©LAC Co., Ltd. All Rights Reserved.

Appendix B - IOC
n Golang
n efda5178286678794b40987e66e686ce
n 6fd56f2df05a77bdfd3265a4d1f2abac
n b981736a057b888170148a91bcd86a59
n 579d3af1b487ea3c442870eabe886a4f
n .NET
n 98fe909510c79b21e740fec32fb6b1a0
n 4a2b8954695b32322508e844ff7e74f5
Copyright ©LAC Co., Ltd. All Rights Reserved.

Appendix C – Flow chart 1/4 (case of ELF)
Initial communication

Copyright ©LAC Co., Ltd. All Rights Reserved.

Appendix C – Flow chart 2/4 (case of ELF)
Receive response
& Bot process

Copyright ©LAC Co., Ltd. All Rights Reserved.

Appendix C – Flow chart 3/4 (case of ELF)
Execute Bot Command

Copyright ©LAC Co., Ltd. All Rights Reserved.

Appendix C – Flow chart 4/4 (case of ELF)
Continue Bot
Command

Copyright ©LAC Co., Ltd. All Rights Reserved.

We provide IT total solutions
based on advanced security technologies.
CYBER

-

EDUCATION

-

PENTEST -

JSOC

-

119

-

CONSULTING

Thank you. Any Questions ?

Copyright ©LAC Co., Ltd. All Rights Reserved.