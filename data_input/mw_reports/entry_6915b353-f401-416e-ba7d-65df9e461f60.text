Reversing Ryuk: A Technical Analysis of Ryuk
Ransomware
securityliterate.com/reversing-ryuk-a-technical-analysis-of-ryuk-ransomware/
April 19, 2020

Ryuk has been in operation since mid-2018 and is still one of the key ransomware variants
operating in 2020. The threat actors behind Ryuk have been known to target a wide range of
industries, and they typically demand substantial ransom amounts.
Lately, given the ongoing COVID-19 situation, the actors behind Ryuk have been taking
advantage of this and targeting the most vulnerable ‚Äì hospitals and the health care industry.
In light of this (and because I am personally interested in how Ryuk functions), here is a
technical analysis of Ryuk‚Äôs key functionalities.
Note: The Ryuk sample I used for this analysis is:
feafc5f8e77a3982a47158384e20dffee4753c20

Carbon Copies
The first thing Ryuk does upon execution is the creation of two ‚Äúhidden‚Äù executable files that
are placed on the desktop or one of the user‚Äôs temporary directories, depending on where
the Ryuk sample was executed from.

1/11

Ryuk hidden

executables.
These executables are actually copies of the primary Ryuk executable, and seem to be used
for a few different purposes ‚Äì most notably persistence and spawning additional instances of
itself for more threads and faster encryption of the filesystem.

Ryuk child
processes (executables) running.
Ryuk is extremely fast in its encryption process. This is possible due to the way Ryuk
behaves in regards to threads. The two executables and associated processes that were
created, along with the process injection techniques I will outline below, all serve as hosts for
multi-threaded encryption. More on this later.

Process Injection
After the creation of its child processes, Ryuk will attempt to inject itself into additional
processes running on the victim‚Äôs system.
Ryuk utilizes the Windows functions CreateToolHelp32Snapshot, Process32First, and
Process32Next in order to enumerate processes running on the victim‚Äôs system and search
for a feasible target process for injection:

2/11

Ryuk enumerating system processes.
Ryuk is only able to inject code into processes that are running at the same (or lower)
privilege level as the Ryuk sample itself. So if Ryuk is running as Administrator or System
(hopefully not the case!) it will be able to inject into System-level processes.
An important note is that Ryuk will not inject into csrss.exe, explorer.exe, or lsass.exe. This
safeguard is likely used to prevent system instability, but this is just an educated guess.
(Please let me know if you have additional information about this.)

3/11

Ryuk process-injection

safeguards.
After enumeration and selection of a target process, Ryuk utilizes a typical process injection
technique:
First, the OpenProcess and GetModuleHandleA functions are called in order to get a handle
to the target process.

Ryuk getting a handle to the target process.

4/11

VirtualAllocEx is then called in order to allocate memory within the address space of the
target process, followed by WriteProcessMemory, which is called in order to write code into
this new memory space. Finally, CreateRemoteThread is called to create a new thread in the
context of the victim process, which will subsequently execute the injected code.

Ryuk writing memory and creating a thread.
This injection process can also be seen in an excerpt from API Monitor:

Ryuk process injection ‚Äì API Monitor.
The injected code is actually just another copy of the original Ryuk process. (See my post on
unpacking Ryuk if you are interested in learning one method of leveraging this process
injection technique in order to unpack Ryuk.)
When I ran Ryuk in my Windows VM, code was injected into dwm.exe, taskhost.exe, and
even the VirtualBox Tray process (VBoxTray.exe). Interestingly, two of these processes
crashed a few minutes after injection, so it appears that Ryuk can cause some incidental
system instability.

5/11

Ryuk code

injection crashes VBoxTray.exe.

Command Execution
Ryuk leverages Windows command line tools for most of its supporting functionalities. Some
of these commands can be seen in the below code:

Ryuk executing

various command-line commands.
During my analysis, the following command were run by Ryuk:
net.exe stop "audioendpointbuilder" /y

6/11

This command kills the ‚Äúaudio endpoint builder‚Äù Windows service, which causes audio to
malfunction on the victim system. I am still unsure why Ryuk executes this command, and I
have no good suggestions.. Other than perhaps to infuriate the end user.
net.exe stop "samss" /y

Stops the Security Accounts Manager. This technique may be used to prevent security alerts
being triggered and sent to a SIEM.
cmd.exe /c "WMIC.exe shadowcopy delete"

This command clears the Windows Volume Shadow Copies so that they cannot be used to
recover files.
cmd.exe /c "vssadmin.exe Delete Shadows /all /quiet"

This command is used as another method of removing shadow copies of files.
cmd.exe /c "bcdedit /set {default} recoveryenabled No & bcdedit /set {default}"
cmd.exe /c "bootstatuspolicy ignoreallfailures"

These commands are used to disable Windows error recovery and associated boot options
so it is more difficult to recover the system.
icacls "C:*" /grant Everyone:F /T /C /Q
icacls "D:*" /grant Everyone:F /T /C /Q
icacls "Z:*" /grant Everyone:F /T /C /Q

These commands attempt to assign the group Everyone full permissions to the C, D,and Z
drives. This is used before the encryption process begins, to ensure Ryuk has permissions to
modify files.
cmd.exe " /C REG ADD
"HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v "EV" /t REG_SZ
/d "<path_to_Ryuk>"

This command is used to add Registry persistence. Essentially, this will ensure the Ryuk
sample will run again upon system bootup. Ryuk will only encrypt files once, however.
Speaking of that‚Ä¶ on to encryption!

Encryption ‚Äì A Multi-Threaded Operation
The file encryption process runs once the above command line commands have been
executed. As previously mentioned, Ryuk encrypts the filesystem using multiple threads,
spread amongst the primary Ryuk executable, the secondary executables, and the
processes Ryuk was able to inject into. Ryuk creates a new thread for each file being
encrypted:

7/11

Ryuk encryption threads.

Ryuk utilizes the functions FindFirstFileW and FindNextFileW in order to iterate through the
files on the victim system. Once a file has been found, Ryuk will call CreateThread in order to
start a new encryption thread.
It is notable how quickly Ryuk is able to enumerate the files on the victim system and encrypt
them. In my initial tests (running on a virtual machine with 50+ GB hard drive) files were
encrypted within a matter of 120 seconds or so, including files on network-attached drives.
Ryuk will also create a ‚Äúreadme‚Äù file (RyukReadme.htm) in every directory that contains
encrypted files. This readme file instructs the victim to contact the email address mentioned
for further instructions on how to pay the ransom:

8/11

Ryuk

readme file.
I originally wanted to go a bit more in depth into how Ryuk encrypted files and the encryption
algorithms used. However, after a bit of research and code review, I realized that Ryuk is not
doing anything incredibly new or note-worthy in terms of the encryption process. According
to this research, Ryuk is utilizing RSA-4096 and AES-256 encryption algorithms, which are
extremely strong and, at this point in time, ‚Äúunbreakable‚Äù. I put unbreakable in quotes
because, technically, no encryption algorithms are completely unbreakable and all will
eventually be broken

üòâ

Network Enumeration
Ryuk performs some rudimentary network enumeration in order to discover other network
drives and adjacent systems to encrypt. In my tests, and according to the Ryuk code in the
sample I analyzed, Ryuk is able to enumerate the network in a few different ways.
First, Ryuk obtains the ARP table from the victim machine (using the GetIpNetTable function)
and attempts to ping those connected systems to see if they are online:

Ryuk pinging

connected systems.

9/11

If these systems are ‚Äúalive‚Äù, Ryuk will attempt to connect to and mount SMB shares on these
systems:

Ryuk

attempting to connect to SMB network shares.
Ryuk will then attempt to encrypt any file system it is able to, given the victim system has the
correct permissions and network capabilities to mount these devices.
In addition, Ryuk grabs the network adapter IP addresses (using the GetAdapterAddresses
function) from the victim system:and attempts to send WOL (Wake-On-LAN) packets to
these systems in order to wake them up. Ryuk will only send WOL packets to addresses that
start with 10, 172, or 192.

Ryuk Wake-on-LAN attempts.

Defending Against Ryuk

10/11

Ryuk

MITRE ATT&CK matrix.
Since Ryuk (and other modern ransomware) is incredibly efficient and will encrypt an
entire filesystem and attached network drives very quickly (likely within minutes), it is
best to detect Ryuk as early in the Kill Chain as possible, ideally in the Delivery phases
and before Installation.
Ryuk is typically delivered via other malware and droppers, such as Trickbot, Dridex,
and Cobalt Strike Beacons. Developing detections and mitigating controls against
these malware variants in order to detect an infection before the deployment of Ryuk is
optimal.
In the event that Ryuk is deployed and encryption occurs, a sound business continuity
and backup plan will be very helpful. Ensure offline backups are kept available.
Consider very carefully before paying the ransom for the purchase of the Ryuk
decryptor software. This decryptor software has been well-researched by several threat
intelligence vendors, and is said to be very poorly programmed and tends to crash
during the decryption process, or worse, permanently destroys encrypted files.
As always, thanks for reading! If you enjoyed this post, follow me on Twitter (@d4rksystem).

11/11