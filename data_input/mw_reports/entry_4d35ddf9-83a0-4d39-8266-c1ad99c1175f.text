How I Cracked a Keylogger and Ended Up in Someone's
Inbox
trustwave.com/Resources/SpiderLabs-Blog/How-I-Cracked-a-Keylogger-and-Ended-Up-in-Someone-s-Inbox/

It all started from a spam campaign. Figure 1 shows a campaign we picked up recently from
our spam traps with a suspicious document file attachment. Notice how poor the English is;
this shall serve as a sign of warning to the email recipients.

1/14

Figure 1: Spam Sample
The attachment uses the ".doc" file extension but is actually an RTF (rich text file) file
format. The file contains a specially crafted RTF stack overflow exploit. This was
determined to be the CVE-2010-3333 that exploits the Microsoft Word RTF parser in
handling the "pFragments" shape property. This vulnerability had been patched more than
half a decade ago.

2/14

Figure 2. Obfuscated shellcode in a specially crafted RTF file
As you can see in Figure 2, the exploit and the shellcode were obfuscated to avoid antivirus
detection. After extracting, cleaning up and decoding the exploit, I figured out that the
shellcode would download and execute a file from the domain volafile[.]io

3/14

Figure 3. Shellcode HEX dump
THE PAYLOAD

Figure 4. The downloaded executable file
The downloaded file is a Microsoft .NET Win32 executable. A quick hex dump preview of
the file gave a very interesting clue that I am dealing with a HawkEye keylogger build.

Figure 5. Hawkeye Keylogger string in the malware body
And with a little bit of Google-Fu, the string pointed me to a website which develops this
keylogger. In the website, they've listed all of its "awesome features".

Figure 6. HawkEye Keylogger Features

4/14

In my quick dynamic analysis, the keylogger drops a copy of itself to the Application Data
(%appdata%) folder and uses the filename WindowsUpdate.exe. It sets an autorun registry
to facilitate persistency in the Windows system even after reboot.

Figure 7. Keylogger's Installation routine
It also drops the following files in the infected system:
%Temp%\Sysinfo.txt – the dropped malware executable path
%Appdata%\pid.txt – the malware process ID
%Appdata%\pidloc.txt – the malware process executable location
I then observed network activity from the keylogger process that tries to obtain the infected
system's external IP address from checkip.dyndns.com. This legitimate website is
commonly used by malware to determine the IP address of the infected system.

Figure 8. Get infected machine's IP address packet capture
After a short while, SMTP network activity was observed where the system information of
the infected system was sent to the attacker's email address.

5/14

Figure 9. Email sent by the keylogger to the attacker's email address that contains the
system information
The information may include:
CPU Name (computer name)
Local Date and Time
Installed Language
OS Installed
Platform
OS Version
Memory installed
.Net Framework Installed
System Privileges
Default Browser
Installed Firewall
Internal IP Address
External IP Address
Recovered Email settings and passwords
Recovered Browser and FTP passwords
As previously mentioned, the keylogger was compiled with Microsoft .NET. So the next
thing I did is to decompile the executable. I used an open-source .NET Decompiler called
ILSpy to accomplish this task.

6/14

Figure 10. Hawkeye keylogger decompiled source code
I took a closer look in the decompiled source code and compared it to its list of "Awesome
Features". I can confirm that its claim is 100% legit. I found the following features in its code
like:
Keylogging.

Figure 11. Keylogging routine
A clipboard stealer/logger.

7/14

Figure 12. Clipboard logging routine
A browser, FTP, and Mail Client password stealer. It also attempts to steal password
manager credentials and Windows keys.

Figure 13.
A worm-like USB infection routine that will allow the keylogger to spread to other Windows
machine.

8/14

Figure 14. USB infection routine
It may also target the users of online gaming platform Steam. It deletes the configuration
data and login data files so that the user will be forced to login again. This is an opportunity
for the keylogger to steal the user's Steam credentials.

Figure 15. Steam deletion routine
9/14

The stolen information including the desktop screenshot are sent to either to the attacker's
email address or FTP server depending on how the keylogger was configured.

Figure 16. Email sending routine
The attacker may also configure the keylogger to upload the stolen information through a
HTTP tunnel to a PHP host, but the code seems to be voided.

Figure 17.
The most interesting part I've found in the decompiled code however is a C# constructor
named Form1(). This is where the keylogger configuration was stored. But to secure the
attacker's email and FTP credentials, these data were encrypted using Rijndael algorithm
and Base64.

10/14

Figure 18. The keylogger configuration
As you may know, those encrypted data are not always secure, especially if the decryption
routine is in the decompiled source code!

Figure 19. The keylogger calls the Decrypt method
The image below is the "Decrypt" method where it accepts two string parameters: the
encryptedBytes and the secretKey. The secret key happens to be a hardcoded string
HawkSpySoftwares

11/14

Figure 20. The decryption routine
As mentioned, the keylogger uses the Rijndael algorithm and the secret key is salted with
the Unicode string "099u787978786", also hardcoded.

Figure 21. The keylogger uses Rijndael algorithm
Out of curiosity, I copied the decryption part of the code, modified it accordingly and
compiled it in MS Visual Studio, and of course the decryption was successful. (sorry, I need
to blur the credentials :))

12/14

Figure 22. The decrypted email and FTP credentials
They appear to be email accounts on compromised systems. The emails sent to this inbox
are rerouted automatically to the attacker's Gmail account.

Figure 23. Emails are rerouted to the attacker's own email address
CONCLUSION
Perhaps the attacker knows that the HawkEye keylogger can be easily cracked, and to
protect their own email credentials, they've hijacked a compromised email account as the
initial receiver that eventually forward emails to the attacker's own email address.

13/14

We have reported the compromised email accounts to their rightful owners, in order for
them to change their passwords and remove the attacker's email address from their reroute
message settings.
Since this was written, we received similar spam messages with RTF attachments but this
time containing the CVE-2012-0158 exploit. The payload is the same keylogger but they
have used different email credentials.
The two vulnerabilties used in these attacks are old, but still widely used in email attacks.
As usual, it is advisable to update your systems with the latest patches, to protect you from
these old exploits used by cybercriminals. Trustwave Secure Email Gateway's AMAX
(Advanced Malware and Exploit Detection) was able to detect these attached RTF exploit in
the email gateway.

14/14