Investigating
PowerShell Attacks
Defcon 2014
(Pre-Conference Draft)
PRESENTED BY: Ryan Kazanciyan, Matt Hastings

© Mandiant, A FireEye Company. All rights reserved.

Background Case Study

Victim
VPN

Attacker
Client

WinRM,
SMB,
NetBIOS

Victim workstations,
servers

 Fortune 100 organization
 Command-and-control via
 Scheduled tasks
 Compromised for > 3 years
 Active Directory
 Authenticated access to
corporate VPN

© Mandiant, A FireEye Company. All rights reserved.

 Local execution of
PowerShell scripts
 PowerShell Remoting

2

Why PowerShell?
It  can  do  almost  anything…
Execute commands

Download files from the internet

Reflectively load / inject code

Interface with Win32 API

Enumerate files

Interact with the registry

Interact with services

Examine processes

Retrieve event logs

Access .NET framework

© Mandiant, A FireEye Company. All rights reserved.

3

PowerShell Attack Tools
 PowerSploit
 Reconnaissance
 Code execution
 DLL injection
 Credential harvesting
 Reverse engineering






Posh-SecMod
Veil-PowerView
Metasploit
More  to  come…

 Nishang

© Mandiant, A FireEye Company. All rights reserved.

4

PowerShell Malware in the Wild

© Mandiant, A FireEye Company. All rights reserved.

5

Investigation Methodology

WinRM

PowerShell Remoting
evil.ps1

backdoor.ps1

Persistent PowerShell

Local PowerShell script

Registry

File System

Event Logs

Memory

Network
Traffic

Sources of Evidence

© Mandiant, A FireEye Company. All rights reserved.

6

Attacker Assumptions
 Has admin (local or domain) on target system
 Has network access to needed ports on target system
 Can use other remote command execution methods to:
 Enable execution of unsigned PS scripts
 Enable PS remoting

© Mandiant, A FireEye Company. All rights reserved.

7

Version Reference
2.0

3.0

4.0

Default (SP1)

Requires
WMF 3.0
Update

Requires WMF
4.0 Update

Default
(R2 SP1)

Requires
WMF 3.0
Update

Requires WMF
4.0 Update

Default

Requires WMF
4.0 Update
Default

Default

© Mandiant, A FireEye Company. All rights reserved.

Default (R2)

8

Memory Analysis

Memory Analysis
 Scenario: Attacker interacts with target host through
PowerShell remoting
 What’s  left  in  memory  on  the  accessed  system?
 How can you find it?
 How long does it persist?

© Mandiant, A FireEye Company. All rights reserved.

10

WinRM Process Hierarchy
svchost.exe
(DcomLaunch)
wsmprovhost.exe

Invoke-Command
{c:\evil.exe}

evil.exe

Client

Invoke-Command
{Get-ChildItem C:\}

Invoke-Mimikatz.ps1

wsmprovhost.exe
svchost.exe
(WinRM)

Get-ChildItem C:\

Kernel

Remote Host
© Mandiant, A FireEye Company. All rights reserved.

11

Remnants in Memory
svchost.exe
(DcomLaunch)
wsmprovhost.exe

Cmd history

evil.exe
wsmprovhost.exe
svchost.exe
(WinRM)

Cmd history

Get-ChildItem C:\

Terminate at
end of session

Remnants of C2
persist in
memory

Kernel

© Mandiant, A FireEye Company. All rights reserved.

12

Example: In-Memory Remnants
SOAP in WinRM service memory, after interactive PsSession with command:
echo teststring_pssession > c:\testoutput_possession.txt

© Mandiant, A FireEye Company. All rights reserved.

13

Example: In-Memory Remnants
WinRM service memory - Invoke-Mimikatz.ps1 executed remotely on target host

© Mandiant, A FireEye Company. All rights reserved.

14

What to Look For?
 XML / SOAP
strings
/wsman.xsd
<rsp:Command>
<rsp:CommandLine>
<rsp:Arguments>
<S N="Cmd“>

 Known attacker
filenames
 View context
around hits
 Yes, this is painful

<rsp:CommandResponse><rsp:CommandId>""xmlns:r
sp="http://schemas.microsoft.com/wbem/wsman/1
/windows/shell"""C80927B1-C741-4E99-9F97CBA80F23E595</a:MessageID><w:Locale
xml:lang="en-US" s:mustUnderstand="false"
/><p:DataLocale xml:lang="en-US"
s:mustUnderstand="false"
/><p:SessionId"/w:OperationTimeout></s:Header
><s:Body><rsp:CommandLine
xmlns:rsp="http://schemas.microsoft.com/wbem/
wsman/1/windows/shell" CommandId="9A153F8AAA3C-4664-8600AC186539F107"><rsp:Command>prompt""/rsp:Comma
nd><rsp:Arguments>AAAAAAAAAFkAAAAAAAAAAAMAAAa
jAgAAAAYQAgC2Yc+EDBrbTLq08PrufN+rij8VmjyqZEaG
AKwYZTnxB++7vzxPYmogUmVmSWQ9IjAiPjxNUz48T2JqI
E49IlBvd2VyU2hlbGwiIFJlZklkPSIxIj48TVM+PE9iai
BOPSJDbWRzIiBSZWZJZD0iMiI+PFROIFJlZklkPSIwIj4
8VD5TeXN0ZW0uQ29sbG
. . .

© Mandiant, A FireEye Company. All rights reserved.

15

How Long Will Evidence Remain?

wsmprovhost.exe

• Best source of intact evidence
• Only lasts until PS session exits

svchost.exe for
WinRM

• Fragments of evidence
• Retention depends on # of remoting sessions
• May last until reboot

Kernel pool

• Fragments of evidence
• Brief lifespan, depends on system utilization

Pagefile

• Fragments of evidence
• Brief lifespan, depends on system utilization
• May last beyond reboot

© Mandiant, A FireEye Company. All rights reserved.

16

Memory Analysis Summary
 Timing is everything
 Challenging to recover evidence
 Many variables
 System uptime
 Memory utilization
 Volume of WinRM activity

© Mandiant, A FireEye Company. All rights reserved.

17

Event Logs

Event Logs
 Scenario: Attacker interacts with target host through
 Local PowerShell execution
 PowerShell remoting

 Which event logs capture activity?
 Level of logging detail?
 Differences between PowerShell 2.0 and 3.0?

© Mandiant, A FireEye Company. All rights reserved.

19

PowerShell Event Logs
 Application Logs
 Windows PowerShell.evtx
 Microsoft-WindowsPowerShell/Operational.evtx
 Microsoft-WindowsWinRM/Operational.evtx

 Analytic Logs
 Microsoft-WindowsPowerShell/Analytic.etl
 Microsoft-WindowsWinRM/Analytic.etl

© Mandiant, A FireEye Company. All rights reserved.

20

PowerShell 2.0 Event Logging
 What you do get
 Start & stop times of activity
 Loaded providers
 User account context

 What  you  don’t  get
 Detailed history of executed commands
 Console input / output

 Analytic logs help (somewhat)
 Disabled by default
 High volume of events
 Encoding & fragmentation

© Mandiant, A FireEye Company. All rights reserved.

21

Local PowerShell Execution

EID 400: Engine state is changed
from None to Available.

PowerShell

Start & stop times of
PowerShell session
EID 403: Engine state is changed
from Available to Stopped.

© Mandiant, A FireEye Company. All rights reserved.

22

Local PowerShell Execution

PowerShell
Operational**

EID 40961: PowerShell console is
starting up

Start time of
PowerShell session

EID 4100: Error Message = File
C:\temp\test.ps1 cannot be loaded
because running scripts is disabled
on this system

Error provides path to
PowerShell script

** Events exclusive to PowerShell 3.0 or greater

© Mandiant, A FireEye Company. All rights reserved.

23

Local PowerShell Execution

EID 7937: Command test.ps1 is Started.

EID 7937: Command Write-Output is Started.
PowerShell
Analytic**

What
executed?
(arguments
not logged)

EID 7937: Command dropper.exe is Started
** Events exclusive to PowerShell 3.0 or greater

© Mandiant, A FireEye Company. All rights reserved.

24

Remoting (Accessed Host)

EID 400: Engine state is changed from
None to Available.

Start time of
PowerShell session

EID 600: Provider WSMan is Started.

Indicates use of
PowerShell remoting

PowerShell

© Mandiant, A FireEye Company. All rights reserved.

25

Remoting (Accessed Host)

EID 169: User CORP\MattH
authenticated successfully using NTLM

WinRM
Operational

EID 81: Processing client request for
operation CreateShell
EID 134: Sending response for operation
DeleteShell

© Mandiant, A FireEye Company. All rights reserved.

Who connected via
remoting

Timeframe of
remoting activity

26

Remoting (Accessed Host)
EID 32850: Request 7873936. Creating a
server remote session. UserName:
CORP\JohnD

PowerShell
Analytic

Who connected via
remoting

EID 32867: Received remoting fragment
[…]  Payload  Length:  752  Payload  Data:
0x020000000200010064D64FA51E7C784
18483DC[…]  
EID 32868: Sent remoting fragment […]  
Payload Length: 202 Payload Data:
0xEFBBBF3C4F626A2052656649643D22
30223E3[…]  

© Mandiant, A FireEye Company. All rights reserved.

Encoded contents
of remoting I/O

27

PS Analytic Log: Encoded I/O
Invoke-Command {Get-ChildItem C:\}

© Mandiant, A FireEye Company. All rights reserved.

28

PS Analytic Log: Decoded Input
Invoke-Command {Get-ChildItem C:\}

© Mandiant, A FireEye Company. All rights reserved.

29

PS Analytic Log: Decoded Output
Invoke-Command {Get-ChildItem C:\}

© Mandiant, A FireEye Company. All rights reserved.

30

Other Logging Solutions for PS 2.0
 Set global profile to log console command activity
%windir%\system32\WindowsPowerShell\v1.0\
profile.ps1
 Use Start-Transcript cmdlet
 Records all session input / output to text file

 Overwrite default prompt function
 Intercept commands and add to event log

 Only works for local PowerShell execution
 Can run PowerShell without loading profiles

© Mandiant, A FireEye Company. All rights reserved.

31

Other Logging Solutions for PS 2.0
 AppLocker – Script rules

© Mandiant, A FireEye Company. All rights reserved.

32

PowerShell 3.0: Module Logging
Solves (almost) all our logging problems!

Computer Configuration  →  
Administrative Templates  →  
Windows  Components  →  
Windows  PowerShell  →
Turn on Module Logging

© Mandiant, A FireEye Company. All rights reserved.

33

Module Logging Examples
Get-ChildItem c:\temp -Filter *.txt -Recurse | Select-String password

Microsoft-Windows-PowerShell/Operational (EID 4103)
ParameterBinding(Get-ChildItem): name="Filter"; value="*.txt"
ParameterBinding(Get-ChildItem): name="Recurse"; value="True"
ParameterBinding(Get-ChildItem): name="Path"; value="c:\temp"
ParameterBinding(Select-String): name="Pattern"; value="password"
ParameterBinding(Select-String): name="InputObject";
value="creds.txt"

...
Command Name = Get-ChildItem
User = CORP\MHastings
Logged upon command execution

ParameterBinding(Out-Default): name="InputObject";
value="C:\temp\creds.txt:2:password: secret"
ParameterBinding(Out-Default): name="InputObject";
value="C:\temp\creds.txt:5:password: test"
Logged upon command output
© Mandiant, A FireEye Company. All rights reserved.

34

Module Logging Examples
Invoke-Mimikatz.ps1 via remoting

Detailed  “percommand”  
logging

© Mandiant, A FireEye Company. All rights reserved.

35

Module Logging Examples
Invoke-Mimikatz.ps1 via remoting

Mimikatz
output in
event log

© Mandiant, A FireEye Company. All rights reserved.

36

Persistence

PowerShell Persistence
 Scenario: Attacker
configures system to
load malicious PS
upon startup / logon
 Why persist?
 Backdoors
 Keyloggers

 What are common
PS persistence
mechanisms?
 How to find them?

© Mandiant, A FireEye Company. All rights reserved.

38

Common Techniques
 Registry  “autorun”  keys
 Scheduled tasks
 User  “startup”  folders
 Easy to detect

At1.job
At1.job
At1.job

 Autorun review
 Registry timeline
analysis
 File system timeline
analysis
 Event log review

© Mandiant, A FireEye Company. All rights reserved.

39

Persistence via WMI
Use WMI to automatically launch PowerShell upon a common event
Namespace:  “root\subscription”

Set-WmiInstance

EventFilter
Filter name, event query

Set-WmiInstance

CommandLineEventConsumer
Consumer name, path to
powershell.exe

Set-WmiInstance

FilterToConsumerBinding
Filter name, consumer name

© Mandiant, A FireEye Company. All rights reserved.

40

Event Filters
 Query that causes the consumer to trigger
SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE
TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'
AND TargetInstance.SystemUpTime >= 240 AND
TargetInstance.SystemUpTime < 325

Run within minutes of startup

SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE
TargetInstance ISA 'Win32_LocalTime' AND
TargetInstance.Hour = 12 AND TargetInstance.Minute = 00
GROUP WITHIN 60

Run at 12:00

© Mandiant, A FireEye Company. All rights reserved.

41

Event Consumers
 Launch  “PowerShell.exe”  when  triggered  by  filter
 Where does the evil PS code load from?
sal a New-Object;iex(a IO.StreamReader((a
IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64
String('7L0HYBxJliUmL23Ke39K9UrX4HShCIBgEyTYkEAQ7MGIzeaS7B1pRyMpqyq
BymVWZV1mFkDM7Z28995777333nvvvfe6O51OJ/ff/z9cZmQBbPbOStrJniGAqsgfP3
58Hz8ivlsXbb795bpdrdv0o2/nZVml363qcvbR/xMAAP//'),[IO.Compression.Co
mpressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()

Stored in user or system-wide  “profile.ps1”
Set-WmiInstance -Namespace "root\subscription" -Class
'CommandLineEventConsumer' -Arguments @{
name='TotallyLegitWMI';CommandLineTemplate="$($Env:SystemRoot)\Syst
em32\WindowsPowerShell\v1.0\powershell.exe NonInteractive";RunInteractively='false'}

Added to Consumer Command-Line Arguments
(length  limit,  code  must  be  base64’d)
© Mandiant, A FireEye Company. All rights reserved.

42

Enumerating WMI Objects with PowerShell
 Get-WMIObject –Namespace root\Subscription
-Class __EventFilter
 Get-WMIObject -Namespace root\Subscription
-Class __EventConsumer
 Get-WMIObject -Namespace root\Subscription
-Class __FilterToConsumerBinding

© Mandiant, A FireEye Company. All rights reserved.

43

PS WMI Evidence: File System
WBEM repository
files changed
(common)

Strings in
“objects.data”

Global or per-user
“profile.ps1”  changed  
(if used to store code)

© Mandiant, A FireEye Company. All rights reserved.

sal a New-Object;iex(a IO.StreamReader((a
IO.Compression.DeflateStream([IO.MemoryStr
eam][Convert]::FromBase64String('7L0HYBxJl
iUmL23Ke39K9UrX4HShCIBgEyTYkEA...

44

PS WMI Evidence: Registry

Key

Value

Data

HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\
ESS\//./root/CIMV2\Win32ClockProvider

[N/A]

[N/A]

Key Last Modified
06/04/14 01:30:03 UTC
Created only when setting a time-based WMI filter
(many other types of triggers may be used)

© Mandiant, A FireEye Company. All rights reserved.

45

PS WMI Evidence: Other Sources
 SysInternals AutoRuns (v12)
 Memory: WMI filter & consumer names
 svchost.exe (WinMgmt service)
 WmiPrvse.exe

 Event logs: WMI Trace
 Too noisy

© Mandiant, A FireEye Company. All rights reserved.

46

Conclusions

Other Sources of Evidence
 Refer to whitepaper
 Prefetch file  for  “PowerShell.exe”
 Local execution only
 Scripts in Accessed File list

 Registry
 PowerShell  “ExecutionPolicy”  setting

 Network traffic analysis (WinRM)
 Port 5985 (HTTP) / port 5986 (HTTPS)
 Payload always encrypted
 Identify anomalous netflows

© Mandiant, A FireEye Company. All rights reserved.

48

Lessons Learned
 Upgrade to PS 3.0 and enable Module Logging if possible
 Baseline legitimate usage in environment
 ExecutionPolicy setting
 Remoting enabled
 Script naming conventions, paths
 Which users
 Source systems
 Destination systems

 Recognize artifacts of anomalous usage

© Mandiant, A FireEye Company. All rights reserved.

49

Acknowledgements
 Matt Graeber
 Joseph Bialek
 Chris Campbell
 Lee Holmes
 David Wyatt

© Mandiant, A FireEye Company. All rights reserved.

 David Kennedy
 Josh Kelley
 All the other PowerShell
authors, hackers, and
researchers!

50

Questions?

ryan.kazanciyan@mandiant.com
@ryankaz42
matt.hastings@mandiant.com
@HastingsVT

© Mandiant, A FireEye Company. All rights reserved.

51