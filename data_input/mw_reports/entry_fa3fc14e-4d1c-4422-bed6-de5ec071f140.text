Reversing an Android sample which uses Flutter
cryptax.medium.com/reversing-an-android-sample-which-uses-flutter-23c3ff04b847
@cryptax

May 12, 2022

@cryptax
May 12
¬∑
6 min read
Flutter is a framework able to build multi-platform apps (e.g. iOS and Android) from a single
code base. The same source code is able to generate an iOS app, and/or an Android app,
which is extremely convenient from a developer‚Äôs perspective. In the case of Flutter, the
source code is written in , and the apps are natively compiled. For reverse engineering, this
is an issue, because (1) we don‚Äôt have good Dart decompilers, and (2) native apps are
usually more difficult to reverse than Dalvik ones.
Thanks to @Hexe and @U+039b for their assistance & enthusiasm on this work.
A few days ago, I got enticed into reversing a possibly malicious Android sample, which was
posing as an app for the French national health system (‚ÄúAmeli‚Äù). Its hash is
171b326ba772e0c15558679ab3bfe88a55d99b70978a4c0c6b60f66c025585eb .
There are 2 different parts to this blog post:
1. . Read this part if you want to hear how I struggled to reverse the app.
2. . Read this part to learn if the app is malicious or not.

Reverse engineering Flutter-based Android apps
How do I detect the app uses Flutter?
There are two cases.
If the app is in , you are lucky. Unzip the APK and look for the code in
./assets/flutter_assets/kernel_blob.bin [1]
If the app is in (which is the case for the suspicious sample), you will find
libflutter.so in ./lib/ subdirectories.

1/7

I have added Flutter detection to . In addition, DroidLysis detects use of Andromo.
Andromo is a ‚ÄúNo-Code iOS and Android native apps development platform [..] backed by
Google Flutter‚Äù. This is probably how the app was written: the developer used Andromo,
which uses Flutter.

Where is the Dart code?
Don‚Äôt waste your time reversing the dalvik bytecode. I personally wasted time decrypting
a Base64 AES encrypted dynamically loaded DEX‚Ä¶ and landed inside Google Ads‚Ä¶
In Flutter release apps, the app payload is located in ./lib/<platform>/libapp.so [2].

üòè

Dart code runs in an ‚Äúisolate‚Äù, which is a structure which contains a heap, references to
objects etc. Isolates are isolated
and can‚Äôt access each other, except one special isolate,
the ‚ÄúVM‚Äù isolate that everybody can access [3].
When we inspect libapp.so , we see a VM ‚Äúsnapshot‚Äù and an isolate snapshot. Snapshots
are the serialized state of an isolate, frozen at a given moment.

Output of : readelf -s libapp.so
So, more precisely, the Dart code of the app is _kDartIsolateSnapshotInstruction (and
Data). The format of snapshots is explained in [2,4] and I have written a Python tool to parse
snapshot headers.

2/7

Parsing the snapshots of the app. The first one is the VM isolate. Both use version 2.13.

Tools to reverse Dart
There are basically 3 tools to reverse Dart:
[5]: this is a Python toolkit to parse libapp.so . It works for Flutter 2.5. Example of
use . Unfortunately, we have.
[6]: this tool is meant to parse libapp.so and dump all classes of the isolate
snapshots. Exactly what I am looking for, except it works for Flutter 2.10. There‚Äôs. It
isn‚Äôt finished yet. I tried to fix errors for my sample, by quickly moving out of issues it
encountered, but I got no interesting decompiled output in the end (meaning my ‚Äúquick
fix‚Äù is too quick, and there‚Äôs more to be done to get it to work).
[7]: this framework operates differently. The idea is to patch the sample and use a
patched version of the Flutter library. Then, to write Frida hooks and dynamically
analyze calls to the patched library.

To reFlutter ‚Ä¶ or not
Patching the application is easy: run reFlutter to generate the patched application (select
option 2), then align it ( zipalign ) and sign it ( apksigner ).

Patching the sample with reFlutter ‚Äî select option 2 for dynamic analysis of the sample
Then, run the application and get a dump in /data/data/<PACKAGE>/dump.dart . This is
where I had read the project description too fast. I thought I‚Äôd get the decompiled dart code.
No. We get code offsets to use in Frida hooks.
For example, the dump provides the following offset for get:zra .

3/7

Function 'get:zra': getter const. null {
Code Offset: _kDartIsolateSnapshotInstructions + 0x000000000000c1a4
}

To hook it, I‚Äôll need to customize the reFlutter Frida hook with the correct offset:
function hookFunc() {
// _kDartIsolateSnapshotInstructions (c000) + code offset
(c1a4)
var dumpOffset = '0x181a4'
var argBufferSize = 150
var address =
Module.findBaseAddress('libapp.so')
console.log('\n\nbaseAddress: ' +
address.toString())...

This is not very handy: I don‚Äôt know which are the interesting functions, so I‚Äôd need to hook
them all. Actually, the issue is I don‚Äôt want dynamic analysis at this stage, but static analysis
(‚Äústatic analysis ruleZ‚Äù is my favorite sentence!). My bad, I should have understood this
before trying to use reFlutter! :-( Finally, to my understanding, reFlutter is similar (or the
same?) as [8] which recompiles the Flutter engine located in libflutter.so to print debug
messages.

Analyzing the reFlutter dump
Even if the reFlutter dump does not contain what I am after (Dart decompiled code), it
nevertheless contains valuable information: the list of all libraries, classes, objects and
functions.

4/7

This is the list of methods of the internal Dart:_http library
Unfortunately, if we rule out all standard Dart libraries (_http, core, ffi, developer, io‚Ä¶), we
are left with ‚Ä¶ obfuscated library names ( aAf , AAf , aof ‚Ä¶) and obfuscated function
names.

Obfuscated functions names of library ‚Äúcuf‚Äù
I assume this is because the app was built using Andromo. In theory, if we were lucky, the
class/function names could help us understand what the sample does.

Malware analyst‚Äôs angle
So, the fact is we don‚Äôt have any good tool to decompile Dart from libapp.so + the
sample has some form of obfuscation. We‚Äôre not totally done yet: strings outputs
interesting strings.

Notice the URLs going to amelimoncompte[.]blogpost[.]com
The sample seems nothing more than a front-end to website
https://amelimoncompte[.]blogpost[.]com. We have URLs such as
https://amelimoncompte[.]blogspot[.]com/2021/06/se-connecter.html (‚Äúse connecter‚Äù = login)
which might have us fear the website tries to phish national health credentials. At least today,
this is not the case: a link redirects to https://lescertificats[.]net/ameli-mon-compte/ which in
turn redirects to the official website of French national health system.

What‚Äôs the goal?
So, the sample is a somewhat useless but non malicious front-end to understand or head
to the French national health system. What‚Äôs the point in creating such an app?!
Another URL in the sample links to the developer of the apps:
https://builder[.]andromo[.]com/hub/6cb42c3646917ed5db25d9241cd1e7fa/ points to
‚Äúsantotosapps‚Äù. This developer creates several other similar apps on the Play Store.

5/7

Applications developed by ‚Äúsantotosapps‚Äù in Google Play Store. Notice how each app look
alike: a large rectangular icon with simple upper case font.
Those apps also look like front-end to official websites. They don‚Äôt seem malicious (yet), but
use is unclear. So, once again, what‚Äôs the point?
The only reason I can see is advertisement. Each of these apps come packaged with
Google Ads. Perhaps they will generate some income to the developer if enough people
download them?
Conclusion: it‚Äôs not malicious ‚Äî from a malware analyst‚Äôs point of view ‚Äî but my
personal advice is to keep away from such apps.
‚Äî the Crypto Girl

References
[1]
[2]
[3]
[4] and part 2:
[5]
[6]
[7]
[8]
My personal additions:

6/7

in Android apps within DroidLysis:
:

7/7