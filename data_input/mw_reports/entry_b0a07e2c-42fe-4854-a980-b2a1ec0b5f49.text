Sage 2.0 analysis | CERT Polska
cert.pl/en/news/single/sage-2-0-analysis/

Introduction
Sage is a new ransomware family, a variant of CryLocker. Currently it’s distributed by the
same actors that are usually distributing Cerber, Locky and Spora.
In this case malspam is the infection vector. Emails from the campaign contain only
malicious zip file without any text. Inside zip attachment there is malicious Word document
with macro that downloads and installs ransomware.
After starting the ransomware, Windows UAC window is shown repeatedly until the user
clicks yes.
At the end the encryption process is started and all files are encrypted:

1/7

Ransom message directs us to panel in the Tor network, but before we can log in we have to
solve a captcha:

And finally we are greeted with “user-friendly” panel:

2/7

We can even chat with malware creators:

3/7

Interestingly, this ransomware doesn’t remove itself after encryption, but copies itself to
%APPDATA%\Roaming directory and re-encrypts all files after every reboot (until the ransom
is paid).

Technical analysis
After this short introduction, We’ll focus on the technical side (because Sage 2.0 is not
completely a generic ransomware, few things are rather novel).
Main function of binary looks like this:
As we see, there is a lot of fingerprinting and checks, though most of them are quite
standard. More interesting features include:

Debug switch

4/7

Probably something didn’t work on the first try, so there is a debug command line parameter
to test that configuration data is set correctly:
And surely enough, this debug parameter does what it should:

Someone probably forgot to remove this from the final version, because this is clearly a
debugging feature.

Locale Check
Sage 2.0 creators like some nations more than others:
This checks user keyboard layouts:
next == 0x23 -> Belarussian
next == 0x3F -> Kazakh
next == 0x19 -> Russian
next == 0x22 -> Ukrainian
next == 0x43 -> Uzbek
next == 0x85 -> Sakha
We’re a bit disappointed that Polish didn’t make it on the exception list (If Sage creators are
reading this: our locale is 0x15).

Location fingerprinting
Sage is trying to get it’s host location by querying maps.googleapis.com with current SSID
and MAC:

Canary file
Before encryption Sage checks for existence of a special debug file:
Thanks to this, malware creators don’t have to worry about accidentally running the
executable and encrypting their own files.
Finally, if the file is not found, encryption is initiated.

Extension whitelist
Of course, not every file is encrypted – only files with whitelisted extension are touched:

5/7

Encryption
As usual, this is the most interesting thing in ransomware code. Sage 2.0 is especially
unusual because it encrypts files with elliptic curve cryptography.
The curve used for encryption is y^2 = x^3 + 486662x^x + x over the prime field defined by
2^255 – 19, with base point x=9. These values are not arbitrary – this curve is also called
Curve25519 and is the state of the art in modern cryptography. Not only it’s one of the fastest
ECC curves, it’s also less vulnerable to weak RNG, designed with side-channel attacks in
mind, avoids many potential implementation pitfalls, and (probably) not backdoored by any
three-letter agency.
Curve25519 is used with hardcoded public key for shared secret generation. The exact code
looks like this (with structures and function names by us):
This looks like properly implemented Elliptic Curve Diffie-Hellman (ECDH) protocol, but
without private keys saved anywhere (they are useful only for decryption and malicious
actors can create them anyway using their private key).
This may look complicated, but almost all those functions are just wrappers for ECC primitive
– named CurveEncrypt by us. For example, computing matching public key is
curve25519(secretKey, basePoint) – where basePoint is equal to 9 (one 9 and 31 zeroes).
Shared key computation is very similar, but instead of using constant base point we use
public key:
Due to the design of Curve25519, converting between any sequence of random bytes and a
secret key is very easy – it’s enough to mask few bits:
And, also because of this, secret key generation is completely trivial (it’s enough to generate
32 random bytes and convert them to the secret key):
That’s all for the key generation. What about file encryption? Files are encrypted with
ChaCha (unconventional algorithm, again) and key is appended to output file – but after
being encrypted with Curve25519:
AppendFileKeyInfo fucntion appends sharedKey and pubKey to the file:
ChaCha is not very popular algorithm among ransomware creators. It’s very closely related
to Salsa20 which was used in Petya ransomware. We don’t know why AES is not good
enough for Sage – probably it’s only trying to be different.
In other words, there are two sets of keys + one key pair for every encrypted file:
After ransomware finishes we know only my_public, sh_public, fl_shared, but we need
chachakey to actually decrypt the file.
6/7

This encryption scheme is quite solid because it makes offline encryption possible – there is
no need to bother connecting with C&C and negotiating encryption keys – the public key is
hardcoded in binary and because of asymmetric cryptography decryption is impossible.
Assuming that malware creators didn’t make any drastic implementation mistakes (and we
have no reason to suspect that they did), recovery of encrypted files is impossible. Of
course, it’s always possible that master encryption key will eventually be leaked or released.

Additional information
Yara rules:
Hashes (sha256):
sample 1,
362baeb80b854c201c4e7a1cfd3332fd58201e845f6aebe7def05ff0e00bf339
sample 2,
3b4e0460d4a5d876e7e64bb706f7fdbbc6934e2dea7fa06e34ce01de8b78934c
sample 3,
ccd6a495dfb2c5e26cd65e34c9569615428801e01fd89ead8d5ce1e70c680850
sample 4,
8a0a191d055b4b4dd15c66bfb9df223b384abb75d4bb438594231788fb556bc2
sample 5,
0ecf3617c1d3313fdb41729c95215c4d2575b4b11666c1e9341f149d02405c05
Additional information:
https://www.govcert.admin.ch/blog/27/saga-2.0-comes-with-ip-generationalgorithm-ipga – short, but very condensed analysis performed by Swiss CERT.

7/7