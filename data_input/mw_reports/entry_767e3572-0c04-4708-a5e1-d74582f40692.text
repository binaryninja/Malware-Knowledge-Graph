Analysis of Emotet v4 | CERT Polska
cert.pl/en/news/single/analysis-of-emotet-v4/

Introduction
Emotet is a modular Trojan horse, which was firstly noticed in June 2014 by Trend Micro. This malware is related to other types like Geodo,
Bugat or Dridex, which are attributed by researches to the same family.
Emotet was discovered as an advanced banker – it’s first campaign targeted clients of German and Austrian banks. Victims’ bank accounts
were infiltrated by a web browser infection which intercept communication between webpage and bank servers. In such scenario, malware
hooks specific routines to sniff network activity and steal information. This technique is typical for modern banking malware and is widely
known as Man-in-the-Browser attack.
Next, modified release of Emotet banker (v2) has taken advantage of another technique – automation of stealing money from hijacked bank
accounts using ATSs (Automated Transfer Systems, more informations on page 20 of CERT Polska Report 2013). This technology is also
used in other bankers. Good examples are ISFB (Gozi) or Tinba.
At the beginning of April 2017, we observed wide malspam campaign in Poland, distributing fraudulent mails. E-mails were imitating delivery
notifications from DHL logistics company and contained malicious link, which referred to brand-new, unknown variant of Emotet.

Malware distributed in this campaign differed from previously known versions. Behavior and communication methods were similar, but malware
used different encryption and we noticed significant changes in its code. Thus we called this modification version 4.

Dropper
Links from the phishing campaign pointed to a dropper, which downloaded and executed malware. Dropper was written in Javascript and
wasn’t highly obfuscated. It was fairly easy to notice, that strings with distribution site URLs were just reversed.
Distribution sites found in dropper:
1/6

hxxp://etherealmedia.co.uk/download6051/
hxxp://intecsoftware.com/download1577/
hxxp://danirvinphotography.com/download0303/
hxxp://brandcastersmedia.com/download6493/
hxxp://aktech.com.pl/download9674/

Main module
An interesting thing in Emotet is its modular structure. Main module dropped by script doesn’t contain anything harmful and is used only to
download another modules from C&C, which perform specific tasks. Sample dropped by script is protected using some generic packer to avoid
recognition by AV software.
After unpacking, malware loads libraries and resolves WinAPI routines used in encryption and communication with C&C. Names of specific
functions are obfuscated and stored as array of hashes. Emotet uses simple sdbm hash function for this purpose. To make hashes more
varied, values are additionally XORed with some constant specified in binary.
Strings that are distinctive for Emotet are also encoded using 4-byte XOR key, different for each string.
Main executable file contains also a list of IP addresses of C&C servers. Similar to previous versions, sample communicates with
Command&Control using plain HTTP.

Encryption
The most significant change in new version is usage of different encryption algorithm. In previous releases, communication was encrypted
using RC4. In fourth version, Emotet switched to 128-bit AES in CBC mode.
Intercepted request:
GET / HTTP/1.1
Cookie:
DD29=e8fd7YpIy2Ui+U7bz1/cQD9bH4KHshzaN2SpKoPEnC1D85K4Zrwdb6dBoHoDC5GgvcgecLN20kpk1lQxus6AJEiutWK4hBSWFbQUmtyr3Lx
User-Agent: Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; SLCC1; .NET CLR 1.1.4322)
Host: 206.214.220.79:8080
Connection: Keep-Alive
Cache-Control: no-cache
Request body is passed in Cookie header. Cookie’s key is random 16-bit hexadecimal number, with Base64-encoded binary blob as value.
After decoding, structure of request is described below:
Offset

Field name

0..95

asymmetrically encrypted 128-bit AES key used for request encryption

96..115

SHA1 hash of plaintext request body

116..x

Request body, AES-128-CBC encrypted

Before sending, malware performs key generation. In the first stage, Emotet loads 768-bit RSA public key, stored in executable. Then, AES
symmetric key is generated using cryptographically secure PRNG (CryptGenKey). Finally, generated key is encrypted using previously loaded
public key and attached to the request using PKCS#1v2.0 (OAEP) padding.
Cryptography is based on Microsoft CryptoAPI mechanisms.
Key generation and public key import:

2/6

Request encryption:

Communication with C&C
Received response is presented below:

Communication protocol is based on Google Protocol Buffers. Protocol Buffers is a mechanism, which allows developers to simply build own
protocols using set of message structure declarations, written in a specific protobuf language. Protocol Buffers generates parsing and
serializing modules, which can be directly used in developed solution. Protobuf supports wide set of languages, including Python, Java, PHP
or C++. Using this kind of mechanisms isn’t something new in malware, protobuf-based protocols can be found for example in Gootkit
malware.
Unfortunately, Emotet’s case is a bit different. Protobuf code inside malware is slightly modified and provides additional type of encoding,
which is not specified in the original Protocol Buffers documentation. Because of this small difference, response can’t be properly decoded
using generic protobuf parsers e.g. protoc with –decode_raw argument fails.
Anyway, original protocol definitions were successfully reversed:
Registration request contains command id (16) and some information about host operating system. Each field of RegistrationRequestBody
structure has been described below:
botId field
This field provides information about values specific to victim’s machine and probably is meant to be unique between bot instances.
[host_name]_[locale]_[host_id]
e.g. CERTCERT_PL_32122958
host_name – contains only chars from 0..9a..zA..Z- charset, another chars are replaced by ‘?’
locale – contains information about locale settings. In this case, dash ‘-‘ is also forbidden
host_id – 32-bit hexadecimal value of sdbm hash (used also by API resolver) from current user login xored by Windows drive serial
number.
osVersion field
32-bit field, which describes version of Windows running on infected host. It’s a bit field, where each groups of bits contains specific value of
OSVERSIONINFOEX structure.
Bits

Description

0..3

dwMajorVersion

4..7

dwMinorVersion

8..11

wServicePackMajor

12..15

wServicePackMinor

16..19

wProductType

20..23

SYSTEM_INFO.wProcessorArchitecture

procList field
Contains comma-separated list of currently running process names.
mailClient field

3/6

Provides information about used mail client (read from “HKLM\Software\Clients\Mail” registry key value). If it’s Microsoft Outlook and it’s MAPI
DLL is 64-bit, name is followed by ” x64″ suffix.

Response
If a registration request was received, C&C server returns a list of Emotet modules. HTTP status response is always 404 Not Found,
regardless of the fact whether request was built properly or not. In this case, response body contains encrypted response.
HTTP/1.1 404 Not Found
Server: nginx
Content-Type: text/html; charset=UTF-8
Content-Length: 728740
Connection: keep-alive
alc:*qLud&lt;d^G&gt;...
Structure of encrypted response is quite similar to the request structure. Encrypted payload starts at 116-byte of received message. Response
is encrypted using the same AES key, which was passed in request. After successful decryption, we obtain protobuf-like message with list of
MZ binaries or URLs.
In this case, malware uses non-standard encoding. Field repeated Module modules = 1 [packed=true]; is illegal in protobuf language, because
packed attribute can be used only for primitive numeric type of repeated fields. Surprisingly, list of modules is encoded like packed list of
Message objects.
Here is a low-level C&C response description, using Protocol Buffers encoding primitives:
Type

Name

Comment

TAG

tag

0x0a

VARINT

length of ‘modules’ list

ModuleResponse

Module (repeated)
VARINT

length of Module element

TAG

‘type’ field tag

VARINT

type

TAG

‘blob’ field type

VARINT

length of ‘blob’

RAW

‘blob’ content

0x08

0x12

…
It should be noted that elements of Modules are repeated without Module message tag, which is specific to packed encoding,
type field
This field defines type of blob content and specifies method of module execution. Type field can be one of the following values:
Value

Description

1

Store in %TEMP% and execute with -U argument

2

Like ‘1’, but without arguments

3

Download and execute file from URL specified ‘blob’

4

Use own internal loader – load and execute PE file from ‘blob’

5

Uninstall – delete related ‘.lnk’ from Startup folder

default

Do nothing

Modules
In previous versions, Emotet modules were providing the following set of functionalities:

4/6

Stealing money from bank accounts (Man-in-the-Browser attack)
Spreading by sending spam e-mails
Stealing mails and credentials to mail accounts
DDoS module
Stealing browsing history and passwords from web browser
In version 4 distributed in the last campaign, we didn’t observe banking module, which is somewhat unusual for this type of malware. Behavior
of other modules was quite similar to previous versions. During analysis, we successfully dropped two types of modules, described below:
Credentials stealer
In server response, we found two similar modules, which purpose was to steal credentials from web browser and mail client. Both modules
have embedded NirSoft password recovery software inside:
Recovery software was embedded as XOR-encoded static blob, using 32-bit key (similar to strings). On module startup, software was decoded
and stored in %TEMP%, and then executed with /scomma [temp file name] parameter, which leads to dump all passwords into file contained in
%TEMP% folder (name generated using GetTempFileNameW). Stealed data were sent to C&C server for malware spreading purpose.
Spam module
Second type of module was spam module, used for malware spreading. Firstly, module asks C&C for message template, list of recipients and
list of hijacked accounts, which will be used to spam distribution.
Request structure presents as below:
Fields flags and additionalData specify, which data has been received from server and which we’re expecting in C&C answer.
Server response looks like below:
E-mails are not sent using local account. Distribution is performed using previously scrapped mail accounts, which are sent to each
spambot.
Message template example:
Hello <span style="text-transform: uppercase;">&lt;&gt;</span>
Thank you for your order. The details can be found below.
Invoice attached: <a href="http://aceeight.com/Cust-000564-17424/">http://aceeight.com/Cust-000564-17424/&lt;&gt;</a>
This e-mail was sent by <span style="text-transform: uppercase;">&lt;&gt;
&lt;&gt;</span>

Summary
Basic functionality of Emotet in last campaign was just stealing credentials and spreading. Even though, malware is still active and also
actively developed. Because of lack of few important modules, Emotet will be probably extended in future. In case of infection, we recommend
changing passwords to all accounts, which credentials were stored in mail client or web browser.

Additional informations
Detailed Kaspersky analysis from 2015 (Emotet v2 and v3)
Analysis based on sample: c53956c95100c5c0ba342977f8fc44fcad35aabc24ec44cb12bb83eee1ed34fa
MD5 of fetched modules (13th April):
0497c120248c6f00f1ac37513bd572e5
5b2d58b4104309ee9c93b455d39c7314
722268bad0d3a2e90aa148d52c60943e
C&C list
hxxp://87.106.105.76:443
hxxp://173.255.229.121:443
hxxp://178.79.177.141:443
hxxp://79.170.95.202:7080
hxxp://206.214.220.79:8080
hxxp://88.198.50.221:8080
hxxp://5.39.84.48:8080

5/6

hxxp://188.68.58.8:7080
hxxp://162.214.11.56:7080
hxxp://5.196.73.150:8080
hxxp://203.121.145.40:7080
hxxp://46.165.212.76:7080
C&C public key:
-----BEGIN PUBLIC KEY----MHwwDQYJKoZIhvcNAQEBBQADawAwaAJhAJ16QBv5Csq0eruFy4BvTcXmmIyeqUb3
vCCc8K/zOYOpL/Ww6FCdUpvPfs+RR/sLBalwtKmT14iRUaNmJdygnAKUIRWR1HNt
0rQRir0pD4QlkXlnZ9lZazTfyMV8BLCatwIDAQAB
-----END PUBLIC KEY----Yara rules:
rule emotet4_basic: trojan
{
meta:
author = "psrok1/mak"
module = "emotet"
strings:
$emotet4_rsa_public = { 8d ?? ?? 5? 8d ?? ?? 5? 6a 00 68 00 80 00 00 ff 35 [4] ff 35 [4] 6a 13 68 01 00 01 00 ff 15 [4] 85 }
$emotet4_cnc_list = { 39 ?? ?5 [4] 0f 44 ?? (FF | A3)}
condition:
all of them
}
rule emotet4: trojan
{
meta:
author = "psrok1"
module = "emotet"
strings:
$emotet4_x65599 = { 0f b6 ?? 8d ?? ?? 69 ?? 3f 00 01 00 4? 0? ?? 3? ?? 72 }
condition:
any of them and emotet4_basic
}
rule emotet4_spam : spambot
{
meta:
author="mak"
module="emotet"
strings:
$login="LOGIN" fullword
$startls="STARTTLS" fullword
$mailfrom="MAIL FROM:"
condition:
all of them and emotet4_basic
}

6/6