Defeating APT10
Compiler-level
Obfuscations
Takahiro Haruyama
Threat Analysis Unit
Carbon Black

Who am I?
• Takahiro Haruyama (@cci_forensics)

 Principal Threat Researcher
 Carbon Black’s Threat Analysis Unit (TAU)

 Reverse-engineering cyber espionage malware
 Past public research presentations
 binary diffing, Winnti/PlugX malware research
 forensic software exploitation, memory forensics

Virus Bulletin 2019

 linked to PRC/Russia/DPRK

2

Overview
• Motivation and Approach
• Microcode
• Opaque Predicates

• IDA 7.2 Issues and 7.3 Improvements
• Wrap-up

Virus Bulletin 2019

• Control Flow Flattening

3

Virus Bulletin 2019

Motivation and
Approach

4

This function
just returns
the value

Virus Bulletin 2019

Question

5

Question

Control
Flow
Flattening

Virus Bulletin 2019

Opaque Predicates

6

APT10 ANEL [1][2]
• RAT program used by APT10

 observed in Japan uniquely
• ANEL version 5.3.0 or later are obfuscated with

Virus Bulletin 2019

 opaque predicates
 control flow flattening

7

We need an automated
de-obfuscation method

Virus Bulletin 2019

Examples

8

Motivation and Approach
• automate ANEL code de-obfuscations

 The obfuscations looked similar to the ones described
in Hex-Rays blog [3]
 It was made for another variant of the obfuscations

 I investigated the causes then modified
HexRaysDeob to work for ANEL samples [8]

Virus Bulletin 2019

 The IDA plugin HexRaysDeob [4] didn’t work

9

Virus Bulletin 2019

Microcode
10

Microcode
low

• intermediate representation

(IR) used by IDA Pro
decompiler

 transformed from low-level to
high-level IRs [3]

high

Virus Bulletin 2019

• optimized in 9 maturity levels

11

Microcode Explorer [4]

just 8
instructions

Virus Bulletin 2019

over
150
instructions

12

Microcode Explorer [4]

just 8
instructions

Virus Bulletin 2019

over
150
instructions

13

Key Structures [5]
mblock_t

minsn_t

HexRaysDeob installs
two optimizer callbacks:
optblock_t and optinsn_t
minsn_t
mop_t (left)

mblock_t
.....
mblock_t

minsn_t
.....
minsn_t

mop_t (right)
mop_t (dest)

Virus Bulletin 2019

mbl_array_t

14

CFG and Instructions in
Microcode Explorer
CFG (mblock_t)

block number

sub
instructions

nested
instructions
(minsn_t)

Virus Bulletin 2019

top-level instruction

15

Virus Bulletin 2019

Opaque Predicates

16

Opaque Predicates Summary
• optinsn_t::func

replaces an opaque
predicate pattern with
another expression

• ANEL samples require 2

more patterns and dataflow tracking

Virus Bulletin 2019

 called from MMAT_ZERO to
MMAT_GLBOPT2

17

Pattern1: ~(x * (x - 1)) | -2
• In the example below,

• The pattern x *

(x-1) will be replaced with 2

Virus Bulletin 2019

 dword_745BB58C = either even or odd
 dword_745BB58C * (dword_745BB58C - 1) = always
even
 the lowest bit of the negated value becomes 1
 OR by -2 (0xFFFFFFFE) will always produce the value -1

18

Pattern2: read-only global
variable >= 10 or < 10
• dword_72DBB588 is always 0

 without a value (will be initialized with 0)
 only read accesses

• the pattern matching function replaces the global

variable with 0

 the variable - 10 < 0
 the immediate value can be different, not 10 (e.g., 9)

Virus Bulletin 2019

• other variants

19

Data-flow tracking for the
patterns

Virus Bulletin 2019

• trace back the minsn_t / mblock_t linked lists

= x * (x - 1) ?

20

Data-flow tracking for the
patterns (Cont.)
• optinsn_t::func passes

 An additional code traces
from jnz then passes the
pointer to setl

Virus Bulletin 2019

a null mblock_t pointer
if an instruction is not
top-level

= read-only
global variable ? 21

Virus Bulletin 2019

Control Flow
Flattening

22

Virus Bulletin 2019

Control Flow Flattening: Summary

23

Control Flow Flattening:
block comparison variable
The unflattening code
translates block comparison
variables into block numbers
(mblock_t::serial)

block comparison variable
comparison

Virus Bulletin 2019

block comparison variable
assignment

24

Control Flow Flattening:
Modifications
• three main modifications

 Unflattening in multiple maturity levels

 Implementation for various jump cases

Virus Bulletin 2019

 Control flow handling with multiple dispatchers

25

Unflattening in Multiple
Maturity Levels
• The original

implementation works in
MMAT_LOCOPT

 due to "Odd Stack
Manipulations” obfuscation

ANEL code in later
maturity levels

 The block comparison
variable heavily depends on
opaque predicate conditions

Virus Bulletin 2019

• I had to unflatten the

26

Unflattening in Multiple
Maturity Levels (Cont.)
• The loop becomes simpler once opaque predicates are broken

In MMAT_LOCOPT,
The block comparison variable
0x4624F47C is translated into block #9

Virus Bulletin 2019

• Unflattening in later maturity levels makes another problem

27

Unflattening in Multiple
Maturity Levels (Cont.)
• The block will be eliminated in later maturity levels
• The modified code

Virus Bulletin 2019

 Links between block comparison variables and block
addresses in MMAT_LOCOPT
 Guesses the block numbers in later maturity levels by using
each block and instruction addresses

28

Control Flow Handling with
Multiple Dispatchers
• The original implementation assumes an

obfuscated function has only one control flow
dispatcher

• Some functions in the ANEL sample have

 up to seven dispatchers in one function

Virus Bulletin 2019

multiple dispatchers

29

Control Flow Handling with
Multiple Dispatchers (Cont.)
• The modified code

 catches the hxe_prealloc event then calls the
optblock_t::func
 This event occurs several times in MMAT_GLBOPT1 and
MMAT_GLBOPT2
 control flow dispatcher / first block detection
 block comparison variable validation

Virus Bulletin 2019

 utilizes different algorithms

30

Control Flow Handling with
Multiple Dispatchers (Cont.)
• The modified code detects block comparison variable

Virus Bulletin 2019

duplications and applies the most likely variable

31

Implementation for Various
Jump Cases: The Originals
(1) goto case for normal block

(2) conditional jump case for
flattened if-statement block

from conditional block

flattened
block(s)
(dispatcher
predecessor)
to control flow dispatcher

false
nonJcc

true

dispatcher
predecessor

flattened
blocks

Virus Bulletin 2019

endsWithJCC

32

Implementation for Various Jump
Cases: The Originals (Cont.)

Virus Bulletin 2019

(2)

33

Implementation for Various
Jump Cases: The Additions

pred 0

pred 1

...

pred N

(4) (2)+(3) combination case
endsWith
JCC

false
nonJcc

dispatcher
predecessor

pred 1

true

...

pred 0
dispatcher
predecessor

pred N

Virus Bulletin 2019

(3) goto N predecessors case

34

Implementation for Various Jump
Cases: The Additions (Cont.)

Virus Bulletin 2019

(3)

35

Virus Bulletin 2019

(4)

Implementation for Various Jump
Cases: The Additions (Cont.)

36

Implementation for Various Jump
Cases: The Additions (Cont.)
• (5) Block

comparison
variables are
assigned in the first
blocks

 The modified code
reconnects first blocks
as successors of the
flattened block

• I saw up to three

assignments of the
case in one function

Virus Bulletin 2019

block #1 will be
the successor
of block #7

37

Virus Bulletin 2019

IDA 7.2 Issues and
7.3 Improvements

38

Evaluation on IDA 7.2
• Tested ANEL samples

 5.4.1 payload [1]

 3d2b3c9f50ed36bef90139e6dd250f140c373664984b97a97a5
a70333387d18d
 f333358850d641653ea2d6b58b921870125af1fe77268a6fdfed
a3e7e0fb636d

• The modified tool could deobfuscate 92% of the

obfuscated functions that we encountered in
the 5.4.1 payload

Virus Bulletin 2019

 5.5.0 rev1 loader DLL [6]

39

Evaluation on IDA 7.2 (Cont.)
• The causes of the failures

 Propagations of opaque predicates deobfuscation
failed

resolved
in IDA 7.3

 No method to handle a conditional jump of a
dispatcher predecessor with multiple predecessors

Virus Bulletin 2019

resolved
 The next block number guessing algorithm failed in this case

40

IDA 7.3: Propagation of Opaque
Predicates Deobfuscation
aliased stack slots 7.2
always 0xC1A18C30 (signed)

Virus Bulletin 2019

7.3

41

IDA7.3: Handling a Conditional
Jump of a Dispatcher Predecessor
• All jump cases (1)-(5) can be conditional

 (2)-(4) cases require a mblock_t duplication

 clear the flag MBA2_NO_DUP_CALLS
 use mbl_array_t::insert_block API then copy
instructions and other information
 adjust destinations of the blocks passing a control to
the exit block whose block type is BLT_STOP

Virus Bulletin 2019

• IDA 7.3 provides the option

42

Conditional Jump Case (2)

BLT_1WAY

Virus Bulletin 2019

BLT_2WAY

43

Conditional Jump Case (3)

Virus Bulletin 2019

preds can be
conditional too

44

preds can be
conditional too

Virus Bulletin 2019

Conditional Jump Case (4)

not seen in the
tested samples :-)

45

Workaround in Control Flow
Unflattening Failure
• The plugin execution with 0xdead deobfuscates

only opaque predicates in the current selected
function

idc.load_and_run_plugin("HexRaysDeob", 0xf001)

Virus Bulletin 2019

idc.load_and_run_plugin("HexRaysDeob", 0xdead)

46

Virus Bulletin 2019

Wrap-up
47

Wrap-up
• The compiler-level obfuscations are starting to

be observed in the wild

 The automated deobfuscation is needed
 1570 insertions(+), 450 deletions(-)
 It works for almost every obfuscated function of
APT10 ANEL on IDA 7.3

Virus Bulletin 2019

• The modified code is available publically [7]

48

Acknowledgement
• Hex-Rays
• Rolf Rolles
• TAU members
Virus Bulletin 2019

 especially Jared Myers and Brian Baskin

49

References
• [1] https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-

japanese-corporations-using-updated-ttps.html

• [2] https://jsac.jpcert.or.jp/archive/2019/pdf/JSAC2019_6_tamada_jp.pdf
• [3] http://www.hexblog.com/?p=1248
• [4] https://github.com/RolfRolles/HexRaysDeob

• [6] https://www.secureworks.jp/resources/at-bronze-riverside-updates-anel-

malware

• [7] https://github.com/carbonblack/HexRaysDeob
• [8] https://www.carbonblack.com/2019/02/25/defeating-compiler-level-

obfuscations-used-in-apt10-malware/

Virus Bulletin 2019

• [5] https://www.hexblog.com/?p=1232

50

Questions?
• [Q1] What’s the obfuscating compiler?

 [A1] Not sure but it may be Obfuscator-LLVM
• [Q2] This tool works for other samples with

similar obfuscations?

 Q1 is resolved
 the compiler algorithm and implementation have been
thoroughly investigated

Virus Bulletin 2019

 [A2] Yes only if

51