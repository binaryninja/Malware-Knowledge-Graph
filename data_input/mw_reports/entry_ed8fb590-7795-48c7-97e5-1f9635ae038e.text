A TrendLabsSM Research

TREND MICRO LEGAL DISCLAIMER
The information provided herein is for general
information and educational purposes only. It is not
intended and should not be construed to constitute
legal advice. The information contained herein may
not be applicable to all situations and may not
reflect the most current situation. Nothing contained
herein should be relied on or acted upon without
the benefit of legal advice based on the particular
facts and circumstances presented and nothing
herein should be construed otherwise. Trend Micro
reserves the right to modify the contents of this
document at any time without prior notice.
Translations of any material into other languages are
intended

solely

as

a

convenience.

Translation

accuracy is not guaranteed nor implied. If any
questions

arise

related

to

the

accuracy

of

a

translation, please refer to the original language
official version of the document. Any discrepancies
or differences created in the translation are not
binding and have no legal effect for compliance or
enforcement purposes.
Although Trend Micro uses reasonable efforts to
include accurate and up-to-date information herein,
Trend Micro makes no warranties or representations
of any

kind

as to

its

accuracy,

currency,

or

completeness. You agree that access to and use of
and reliance on this document and the content
thereof is at your own risk. Trend Micro disclaims all
warranties of any kind, express or implied. Neither
Trend Micro nor any party involved in creating,
producing, or delivering this document shall be
liable

for

any

consequence,

loss,

or

damage,

including direct, indirect, special, consequential, loss
of business profits, or special damages, whatsoever

Confucius developed multiple chat software for Windows and Android based on a legitimate, opensource chat application. The chat applications they developed — Simple Chat Point, Secret Chat
Point, and Tweety Chat — have backdoor functionalities. The Android version, for instance, can steal
SMS messages, accounts, contacts, and files, as well as record audio. We were able to access
some of the logs of these fake chat apps and saw romance used as a social engineering lure to urge
their targets to install the malware on their mobile device.

Simple Chat Point
Simple Chat Point was hosted directly on Google Play, but it was already removed from the app
store at the time of our research. We believe this was Secret Chat Point’s precursor, which we saw
published on Google Play on September 27, 2017. They are both consistent in their “privacy policy”
that tries to justify their intrusive Android permissions to unwitting victims.

Figure 1: Screenshot of Simple Chat Point

4

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 2: The application’s “privacy policy”

Figure 3: Secret Chat Point’s homepage
Note: The background image is available elsewhere as a stock photo

5

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Secret Chat Point
Secret Chat Point touted itself as an application that enforces anonymity and privacy (i.e., not storing
chat logs), offered in Windows and Android platforms. At the time of our research, the download link
was already disabled in the HTML code, as Google already removed the application from their app
store. We managed to find versions 1.2 and 1.4 of the Android application in third-party app
marketplaces but found no installer for the Windows version. Version 1.2 was uploaded in October
2017 and the latest known version, 1.4, was uploaded in November 2017. The Google cache page of
the application shows it was created by Simple Chat Point’s developer and installed by 10–50 users.
While Secret Chat Point indeed has real chat features (although not anonymous at all), it also has
undocumented routines, such as collecting and harvesting all SMS messages, contacts, and
accounts, which get triggered when specific words are sent to the app. It can also list and get all files
present in Pictures, Download, Documents, DCIM/Camera, WhatsApp/Media/WhatsApp Documents,
and WhatsApp/Media/WhatsApp Images.
Once a command is received and executed, its result is forwarded to a C&C server specified in the
Config class. Secret Chat Point’s website does not have Simple Chat Point’s privacy policy but
instead displays fake statistics and partnerships to lend itself credibility.

Figure 4: Code snippets showing Secret Chat Point’s undocumented features

6

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 5: Permissions required for the app to execute its hidden features

Tweety Chat
Tweety Chat is offered in 32-bit and 64-bit Windows systems as well as Android devices, flaunted as
capable of chatting directly through the web browser after registering an account. Its appearance
resembles an old chat application in 2012 named TweetyChats, which still has a Facebook Page
with over 200 followers. Its domain expired by the end of 2015, however. Why Tweety? The string
“Tweety” is in one of the python reverse shells we analyzed, so the python binary is probably related.

Figure 6: Tweety Chat’s login page

7

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 7: Facebook Page of the old application TweetyChats
We tested Tweety Chat’s Android version and noticed telltale signs indicating their targets of
interest: Verification emails with a physical address whose postal code is assigned to a provincial
capital that also appears (upon logging in) as a chat channel in Tweety Chat.
Tweety Chat’s Windows version works differently. After running the Windows Installer, an
executable, created with Windows component IExpress, is executed. It contains two binaries: a
clean and functional TweetyChatSetup.exe, and a malicious intelsys.exe. In Resource Hacker, an
open-source resource editor and extraction utility, TweetyChatSetup.exe is marked as
RUNPROGRAM while intelsys.exe is labeled as POSTRUNPROGRAM, indicating the latter executes
after the user installs TweetyChatSetup.exe.

TweetyChatSetup.exe is almost the same as the binary available from a GitHub repository we found.
It can be downloaded as a 30MB installer of rocket.chat, an open-source chat application. Its
JavaScript Object Notation (JSON) file, app-32\resources\servers.json, has the default setting:

While the application itself is not malicious, the website, which gets opened in the Tweety Chat
application window, links to a Trojanized communication application.

8

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 8: The Trojanized version of Tweety Chat (top),
and the executable in Resource Hacker (bottom)

intelsys.exe — a Python file compiled to an EXE with the internal name “Porky.py” — is a backdoor.
Its supported commands are: quit, cd, cwd, pickup, drop, and exec; the backdoor will try to run
commands as shell commands using subprocess.Popen with the parameter, shell=True:

9

|



If a bot operator enters the path to a file, it will be uploaded to the C&C server.



If a bot operator enters a directory, the files with extensions .jpeg, .gif, .png, .doc, .docx,
.ppt, .pptx, .xls, .xlsx, and .pdf are recursively searched then uploaded to the C&C server.

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

quit

Exit the session

cd

Change directory (folder or drive)

cwd

Change working directory

pickup

Steal file

drop

Download a file from a specified URL

exec

Execute shell command

Table 1: Supported commands on intelsys.exe
Its decompiled source code reveals that English is not the attacker’s native language, e.g.,
coden_data string. In the course of our research, we saw that Tweety Chat’s Window version was
constantly updated, adding x32 and x64 versions, minor changes to the Porky backdoor — including
persistence mechanism via the Run registry key — and updates related to exception handlings. One
variant, for instance, included a third EXE file embedded in the IExpress installer, which was a
compiled batch2exe file calling the backdoor binary.
Tweety Chat’s Android version is similar to Secret Chat Point’s, whose email/contact information
points to the latter’s developer. This iteration has two additional features: downloading and
uploading parameters and recording audio by setting a new parameter. Version 1.0.1 was uploaded
to Google Play on December 1, 2017, but it was eventually removed from the app store (its latest
known version is 1.0.3).

Figure 9: The Google cache of the Android version of TweetyChat

10

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 10: Code snippets showing its file retrieval feature, which is limited to file extensions related
to documents and images (top, bottom)

Social Engineering
The applications’ user lists, chat room names, and content were stored on a remote server without
any authentication. The chat logs shed light on the social engineering methods the operators used to
persuade victims to install the malware on their Android devices. The first user and chatroom were
created on August 27, 2017, and were probably the app authors’ testing ground. The succeeding
users and chatrooms were created on October 31, with December 12 the latest.
A certain hayat22 and love piqued our interest. hayat22, purportedly a female student, engaged in an
online romance with a target whose handle was love, describing himself as living in South Asia
working in garments manufacturing and wholesaling.
Over the course of their correspondence, love suggested using WhatsApp to communicate. hayat22
declined, saying she felt safer using Tweety Chat. love refused, but when hayat22 demurred and
gave love an online cold shoulder, love tried installing Tweety Chat — and failed. He claimed that he
wasn’t able to install the app. hayat22 quickly lost interest and stopped replying to him altogether.
Note their conversation below; hayat22 can speak Hindi and occasionally, English. She also sent him
a photo to show what Tweety Chat looked like.

11

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 11: One of the conversations between love and hayat22
We’re not sure how love wound up in the chat room or how he met hayat22. He was probably either
using the Windows version of Secret Chat Point or its web interface, which explains why hayat22
was urging him to install Android Tweety Chat.
In an earlier chat group, an operator called Heena urged the members to install Secret Chat Point on
other people's mobile devices to get perks like credits or the ability to “go invisible”. In another chat
room called “Maira’s room”, a target of interest disclosed he was a government officer traveling back
from a northern city near the country’s provincial capital. A few days after, the operator stopped
answering in the chat room, and her user account was deleted from the server.

12

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 12: hayat22 showing TweetyChat’s user interface (top),
and a chat group operator urging members to install Secret Chat Point (bottom)

13

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

We dove deeper into Confucius’ operations—namely, the malware-ridden documents, backdoors,
and file stealers they use in their campaigns. Of note are the resemblances of their malware to
Patchwork’s. The use of an exploit for a security flaw disclosed in December 2017 and their rather
recent activities suggest Confucius’ campaigns are active.

Trojanized Documents
Confucius’ backdoors are delivered through Office documents exploiting memory corruption
vulnerabilities CVE-2015-1641 and CVE-2017-11882. The latter is a 17-year old security flaw in
Equation Editor that was actively exploited in the wild in December 2017. The sctrls backdoor we
came across is delivered via RTF files exploiting CVE-2015-1641. The documents that exploit CVE2017-11882 download another payload — an HTML Application (HTA) file toting a malicious Visual
Basic (VBS) script — from the server, which is executed accordingly by the command-line tool
mshta.exe.

Figure 13: Hex-decoded content of the exploit-laden RTF file, revealing the threat’s second stage
The abc.hta file (Figure 12) downloads a decoy document, which will be opened in Microsoft Word
(WINWORD) that in turn downloads the executable payload (the sctrls backdoor). It’s worth noting
that the payload is missing the first 2 bytes, which are later added before it is executed. This is likely
done to bypass antivirus (AV) detection.

14

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

The script also deletes Office resiliency registry keys. These keys have values that are designed to
display a warning to the user when Office does not terminate correctly. Deleting the resiliency keys
will ensure that no notification is displayed to the victim.
Another document, which exploits CVE-2017-11882, takes a more direct approach. It contains a
simple downloader in the form of a shellcode that downloads and executes the sip_telephone
backdoor.

Figure 14: Screenshot of the decoy document with a picture of a fake prompt (top),
and the decrypted shellcode containing the payload’s path

Backdoors and Shells
sctrls
The sctrls backdoor has these functions:


Compute the unique identifier (hash) from the username and computer name.



Register a new user on the C&C server; this registration creates a new folder with hash name
(<some_name>.php?b=<hash>).



Read contents of the folder with the hash name from the C&C server, then download and run
executables from that particular folder.

The malware operators can then upload binaries of shells or file stealers that will be executed into
the respective folders. The directories of their C&C server were unsecured, and we were able to
access all their registered victims (hashes) — numbering around 50 — as well as the other
backdoors and file stealers in their employ.

15

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 15: List of victims infected with sctrls in the open directory. Six directory names correspond to
a date, implying they are different campaigns

ByeBye Shell
ByeBye Shell is a custom shell usually bundled with decoy documents. For instance, when a dropper
is executed, a decoy document is displayed and the backdoor runs in the background. ByeBye Shell
supports a few basic commands: shell, comd, sleep, quit, and kill.

Figure 16: Commands implemented by ByeBye Shell

16

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

shell

create a cmd.exe process with redirected input and output
supported commands:

comd

put, EXIT, dup, exe, fget, fput, getproc, listdir, copyfile, exec
fget and fput are used for sending and receiving files

sleep

sleep for 30 minutes; send the string “BYE BYE” back to the C&C server

quit

disconnect the current connection, sleep for a while, then try to connect again

kill

kill itself and exit the backdoor thread
Table 2: ByeBye Shell’s commands; note that there are variants of ByeBye Shell
with different subsets of commands, and not all are always implemented

The executables have two hardcoded strings that are sent back to the C&C server when a host is
infected. They probably serve as a sort of campaign name or tag, with some dating as far back as
2014. A particular modification of ByeBye Shell tracks all the infected victims in a simple .php
interface. The machine names possibly indicate their targets: military officials and businessmen,
among others. Confucius recently started tagging machines related to security researchers, probably
to avoid sending commands to them.
The shell application kept regularly posting the base64-encoded machine name and volume serial
number (Figure 15). “Terminal Status” can be enabled by anyone who has access to the control
panel. When “On” is selected, the affected machine establishes a connection on the same domain to
port 4443, which opens ByeBye Shell’s main functionality.

Figure 17: ByeBye Shell’s interface showing Confucius’ campaigns

17

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 18: ByeBye Shell’s binary contains the word “smurf” in its PDB path, too

remote-access-3
This backdoor (remote access tool) is internally named as “remote-access-c3” as shown in its PDB
path:

Figure 19: Internal name of remote-access-3
The remote-access-c3 backdoor seems to be inspired by Patchwork’s NDiskMonitor because they
share some behaviors, strings, and commands. remote-access-c3 is written in C++ using the
Standard Template Library (STL) library. When remote-backdoor-c3 is executed, it waits for a certain
time, because of its long initial time delay. It later loads and executes all modules saved in the
system registry, establishes persistence via Task Scheduler, and starts a beaconing thread.
The beaconing thread queries live.php script with parameters license, which is the username
Unicode-encoded (\uXXXX) then base64 encoded, with parameters current_license (base64encoded OS version) and bui, which is probably the backdoor ID.

18

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Figure 20: Beaconing request of remote-access-c3
In its C&C command processing loop, there are familiar commands also seen in NDiskMonitor, such
as cme-update, which also splits the received response with the pipe (“ | ”) character and the of use
of cmd /c to call the command. Like NDiskMonitor, it also sends the program running response to
component_update.php. Additionally, the ue| command for downloading and executing the payload
is implemented in STL backdoor.
The command mod|, not found in NDiskMonitor, adds or removes modules. Each module is stored in
the registry. The backdoor also searches for one of three characters in the C&C response: 0 for
loading the module into memory and executing it immediately; 1 for storing module binary data to
the registry; and 2 for deleting module binary data from the registry.
In one version of remote-access-c3, the strings inside the binary are not obfuscated and clearly
visible. Others had their strings encrypted by various simple algorithms, e.g. XOR with a constant
value and subtracting a constant value from each byte, among others.

Figure 21: Implemented backdoor commands of remote-access-c3

19

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

ReverseShellSimple and Tweety reverse shells
ReverseShellSimple, named as such from its PDB path, is a simple reverse shell that calls create
process where standard input, output, and error handles are redirected to the socket. Tweety is
written in Python, distributed as a Python file compiled to EXE. Decompilation shows that the shell
waits for commands and reports its name as “Tweety”.
The implemented commands are:


uu — takes a file, encodes it with base64, and sends it to the C&C server



cd — changes the directory



quit — exits the shell session

If none of the predefined commands match, then the received command is passed to the
subprocess.Popen call. The parameter “shell=True” means “the specified command will be executed
through the shell,” according to the documentation. The output value of the command executed via
shell is sent back to the C&C server. Because of the “Tweety” string, we believe this is somehow
linked with the Tweety Chat application.

Figure 22: Tweety’s reverse shell internal name (top), and shell command execution (bottom)

sip_telephone backdoor
sip_telephone, also named in the PDB path as such, uses Windows Management Instrumentation
(WMI) to get the AV installed in the machine, its computer name, and processor ID, among others. It
performs tasks in an endless loop, with 100 seconds of sleep time:
1. Create a folder on the remote server.
2. Create a file named COM_INFO.txt in the remote folder with the contents (installed AV
software, IP-machine name, etc.).
3. Downloads app.jpg from a server’s directory whose name corresponds to the list of
processor IDs – machine_name.

20

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

4. If the corresponding directory contains app.jpg, then this file is downloaded and executed.
app.jpg file is downloaded and executed into c:\ProgramData\<PC_name>\<random_name>
from a list:


word.exe



ntfs.exe



drv.exe



csvt.exe



appsec.exe



svshot.exe



steam.exe



geforce.exe



polsrv.exe



PowerPoint.exe



inteldriver.exe



proxystr.exe



daemon.exe



windowsdrv.exe

In at least one case, we noticed that putty.exe was uploaded instead into app.jpg, probably
for testing purposes.
5. Delete the app.jpg file from the remote server.

Figure 23: List of victims infected by sip_telephone backdoor
Most of the directories were empty. Attackers control victims by uploading the app.jpg file into the
desired directory, but these files are eventually deleted. In a specific directory, this malware
compromised about 150 hosts, most of them on December 21, 2017.

21

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Information stealers
file-sweeper
Based on its internal strings (URL paths and parameters, etc.), it seems to be very similar to
Patchwork’s Wintel stealer, which was written in .NET. However, file-sweeper is written in C++ using
STL library. file-sweeper steals Word documents (.docx, .doc), PowerPoint files and slideshows
(.pptx, .pps), Excel spreadsheets (.xls, .xlsx), and Portable Document Format files (.pdf).

Figure 24: file-sweeper’s strings are similar to the Wintel stealer (top);
the list of files it steals is also in the body (bottom)

swissknife2
swissknife2 is a Python script compiled into an EXE file with open-source tool PyInstaller. It is
possible to decompile the file into .py source code and analyze its functions, which are:
1. Enumerating all files in ~\Downloads, ~\Document, ~\Desktop and in DRIVE_REMOVABLE,
DRIVE_FIXED, DRIVE_REMOTE, which are not A or C.

22

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

2. Creating a folder username{volumeSerialNumber} in the cloud service for each victim:

3. Uploading files with .pdf, .doc, .docx, .ppt, .pptx, .xls, and .xlsx to the cloud service.
As mentioned in the documentation from the cloud storage provider, an access token is required to
communicate with the account. This token can be obtained from swissknife2’s decompiled script.
Access to the token allowed us to write a script that enumerates all the folders and files that were
uploaded to the account. The third Boolean parameter, as per the documentation, is called
include_deleted. If its value is True, “the results will include entries for files and folders that used to
exist but were deleted.”
During the research, data of around 60 victims was uploaded to a Confucius-owned cloud storage
service account. There were also a few thousand files in the account that were later deleted. We did
not get any of these files and only managed to obtain the metadata indicating they previously existed
in the account.

svctrls and Winframe stealers
This file stealer is written in Delphi and pilfers images (.png, .jpg, .jpeg), spreadsheets (.xls, .xlsx),
documents (.doc, .docx, .pdf), PowerPoint files (.ppt, .pptx), personal storage tables containing
messages, calendar events, and others in Microsoft software such as Exchange and Outlook (.pst),
offline folder files in Outlook (.ost), and data record files (.csv). The stolen files are uploaded over
HTTP via multipart request.
Winframe is very similar to svctrls, which is also written in Delphi. It steals files with the same
extensions, and uploads them to the C&C server over HTTP via multipart request.

Figure 25: Multipart request that sends a stolen file to the C&C server

23

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

usctrls stealer
usctrls is an external media file stealer that scans USB drives or CDs for certain extensions. It then
copies any file of interest it finds to %AppData%\Roaming\OffLogs\. The file
%AppData%\Roaming\OffLogs\items.log will contain a list of file names that were copied from the
removable media. The binary file contains one timer that takes care of the persistence. It also has
two callbacks (Aval = available, and Rved = removed), which are called when the external media is
inserted or removed. usctrls searches for and copies PDFs, Word documents (.doc, docx),
PowerPoint files (.ppt, .pptx), and Excel spreadsheets (.xls, .xlsx).

Figure 26: List of the uscrtls’ stealer components

fileUpload stealer
fileUpload is named after the PDB path in its malicious binary. Written in C++, its code shares
similarities with a version of ByeBye Shell. It connects to a .php file to decide which functions should
be switched on or off for which users. When doing these POST requests, it sends two values in
POST parameters:


teststr=base64(<user_name>{<volume_serial_number>})



testval=eEBRQVoh

Figure 27: fileUpload stealer’s parameters

24

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

ZnJlZWludHJuZXQuY29t

freeintrnet[.]com

d2lubG9nLmZycA==

winlog.frp

ZmF1bHRzdGF0dXMucHJm

faultstatus.prf

c3RhdHVzLmZycA==

status.frp

QnJvd3NlclVwZGF0ZS5sbms=

BrowserUpdate.lnk

VXBkYXRlIEJyb3dzZXI=

Update Browser

L2luZXRncmlkL3ByZXNlbnQucGhw

/inetgrid/present.php

L2luZXRncmlkL2Fja3BvbGNtZC5waHA=

/inetgrid/ackpolcmd.php

L3VwbG9hZGVyLnBocA==

/uploader.php

b2ZmTG9nc1xc

offLogs\\

Table 3: fileUpload’s strings are base64-encoded
fileUpload searches for and steals Word documents (.doc, .docx), PowerPoint files (.ppt, .pptx),
Excel spreadsheets (.xls, .xlsx), and PDFs, then uploads them to the C&C server. We actually saw
other versions of this file stealer. One version employed a hook that counted left mouse button
clicks. Once it reaches a specified number, another function is activated, which we think serves as
an anti-sandbox routine.

25

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Confucius illustrates the hazards of targeted attacks: Patient, persistent, and raring to exploit
vulnerabilities in people, processes, and technology. As organizations increasingly digitize
information, their exposure to theft also broadens. Traditional defenses will be more challenging to
maintain, and these need to be complemented with defense in depth and improved awareness. Here
are some countermeasures organizations can adopt:

26



Mind the security gaps: Keep the system, its programs/applications, and network updated;
create more robust patch management and incident response and remediation policies that
will highlight security without hindering business operations. Consider virtual patching for
legacy or end-of-life systems.



Enforce the principle of least privilege: Remove the attackers’ leverage by preventing access
to the organization’s crown jewels. Network segmentation reduces traffic congestion while
restricting user privileges, thus preventing lateral movement. Data categorization, which
differentiates data by their value, mitigates the damage in case of a breach.



Restrict and secure the use of tools such as PowerShell and other command-line tools
typically reserved for the organization’s system administrators and information security staff
to prevent their abuse. Disable outdated and unnecessary extensions, plugins, and
components that interact with the system’s programs, as they can also be used as entry
points.



As technology broadens horizons, so will the attackers’. Proactively monitor your
infrastructure, as each layer can be used as a doorway into the organization — from its
physical perimeters, and online gateways, endpoints, network, and servers. Firewalls and
intrusion detection and prevention systems help block network-based threats. Application
control and behavior monitoring prevent suspicious files and anomalous behaviors from
executing within the system, while URL filtering/categorization blocks malicious URLs and
malware-hosting sites.



Play it smart and don’t take the bait: Email-borne threats and malicious mobile apps rely
heavily on social engineering to be successful. Empowering and nurturing the workplace
with stronger cybersecurity awareness helps — even something as simple as knowing how
to identify red flags in spam email can stand between an attacker and the organization’s
bottom line.

|

Deciphering Confucius: A Look at the Group’s Cyberespionage Operations

Trend Micro Solutions