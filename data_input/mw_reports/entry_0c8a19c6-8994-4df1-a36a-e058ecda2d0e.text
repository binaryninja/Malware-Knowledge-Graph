garage4hackers
garage4hackers.com/entry.php

CSIS Security Group A/S has uncovered a new trojan-banker family which we have named
Tinba (Tiny Banker) alias Zusy.

Tinba is a small data stealing trojan-banker. It hooks into browsers and steals login data and
sniffs on network traffic. As several sophisticated banker-trojan it also uses Man in The
Browser (MiTB) tricks and webinjects in order to change the look and feel of certain
webpages with the purpose of circumventing Two factor Authentification (2FA) or tricking the
infected user to give away additional sensitive data such as credit card data or TANs.
Tinba is the smallest trojan-banker we have ever encountered and it belongs to a complete
new family of malware which we expect to be battling in upcoming months.
source:https://www.csis.dk/en/csis/news/3566/
This time we are investigating the tiny banker's DGA. We are again only interested in the
code that is dealing
with the domain name generation.
Execute the sample and let it terminate itself. It will inject its code into Explorer.exe process.
Attach debugger to explorer.exe.

1/9

Now where should we start in vast pool of explorer.exe address space?
The answer is again the place where we can find teh simptoms of DGA. Let us set
breakpoint at
"gethostbyname".
The code will break at gethostbyname, let it finish its work and you'l land in DGA code from
its return address.
The following code belongs to the DGA :
Code:

2/9

02252739
0225273A
0225273C
02252742
02252743
02252745
0225274B
0225274C
02252752
02252753
02252758
0225275F
02252762
02252764
02252768
0225276A
0225276C
02252772
02252773
02252779
0225277A
0225277F
02252786
02252789
0225278B
0225278E
02252794
02252799
0225279B
0225279D
0225279E
022527A0
022527A2
022527A8
022527AD
022527AF
022527B1
022527B4
022527B6
022527B8
022527BA
022527BC
022527BE
022527C0
022527C1
022527C3
022527C5
022527C6
022527CC
022527CD
022527CF
022527D0
022527D6
022527D7
022527DD

55
89E5
81EC 0C020000
57
6A 20
8D93 605E4000
52
8D95 F8FEFFFF
52
E8 040B0000
0FB783 C25E4000
8945 FC
EB 6C
837D FC 00
75 21
6A 20
8D95 F8FEFFFF
52
8D93 605E4000
52
E8 DD0A0000
0FB783 C25E4000
8945 FC
EB 45
FF4D FC
8DB3 A05E4000
B9 10000000
31C0
31D2
AC
01C2
^E2 FB
8DBB 605E4000
B9 0C000000
0207
30D0
0247 01
3C 61
76 04
3C 7A
72 04
FEC2
^EB ED
AA
^E2 EA
B0 2E
AA
8B83 B85E4000
AB
31C0
AA
8D93 605E4000
52
FF93 4D354000
85C0

PUSH EBP
MOV EBP,ESP
SUB ESP,20C
PUSH EDI
PUSH 20
LEA EDX,DWORD PTR DS:[EBX+405E60]
PUSH EDX
LEA EDX,DWORD PTR SS:[EBP-108]
PUSH EDX
CALL 0225325C
MOVZX EAX,WORD PTR DS:[EBX+405EC2]
MOV DWORD PTR SS:[EBP-4],EAX
JMP SHORT 022527D0
CMP DWORD PTR SS:[EBP-4],0
JNZ SHORT 0225278B
PUSH 20
LEA EDX,DWORD PTR SS:[EBP-108]
PUSH EDX
LEA EDX,DWORD PTR DS:[EBX+405E60]
PUSH EDX
CALL 0225325C
MOVZX EAX,WORD PTR DS:[EBX+405EC2]
MOV DWORD PTR SS:[EBP-4],EAX
JMP SHORT 022527D0
DEC DWORD PTR SS:[EBP-4]
LEA ESI,DWORD PTR DS:[EBX+405EA0] ; "oGkS3w3sGGOGG7oc"
MOV ECX,10
XOR EAX,EAX
XOR EDX,EDX
LODS BYTE PTR DS:[ESI]
ADD EDX,EAX
LOOPD SHORT 0225279D
LEA EDI,DWORD PTR DS:[EBX+405E60] ; "ssrgwnrmgrxe.com"
MOV ECX,0C
ADD AL,BYTE PTR DS:[EDI]
XOR AL,DL
ADD AL,BYTE PTR DS:[EDI+1]
CMP AL,61
JBE SHORT 022527BC
CMP AL,7A
JB SHORT 022527C0
INC DL
JMP SHORT 022527AD
STOS BYTE PTR ES:[EDI]
LOOPD SHORT 022527AD
MOV AL,2E ; "."
STOS BYTE PTR ES:[EDI]
MOV EAX,DWORD PTR DS:[EBX+405EB8] ; "com"
STOS DWORD PTR ES:[EDI]
XOR EAX,EAX
STOS BYTE PTR ES:[EDI]
LEA EDX,DWORD PTR DS:[EBX+405E60]
PUSH EDX
CALL DWORD PTR DS:[EBX+40354D]
TEST EAX,EAX

3/9

022527DF
022527E1
022527E7
022527E8
022527EE
022527F0
022527F6
022527F9
022527FB
022527FD
02252800
02252803
0225280A
0225280E
02252813
02252817
0225281B
02252821
02252823
02252829
0225282A
0225282B
02252830
02252833
02252838
02252839
0225283B
02252841
02252842
02252844
02252845
02252846
02252848
0225284B
0225284D
0225284E
02252853
02252854
02252859
0225285F
02252860
02252861
02252866
02252869
0225286A
0225286F
02252870
02252875
02252876
02252879
0225287E
02252880
02252882
02252884
02252889

79 1C
JNS SHORT 022527FD
8D93 605E4000
LEA EDX,DWORD PTR DS:[EBX+405E60]
52
PUSH EDX
FF93 5F354000
CALL DWORD PTR DS:[EBX+40355F] ; call to gethostbyname
85C0
TEST EAX,EAX
^0F84 6EFFFFFF
JE 02252764
8B40 0C
MOV EAX,DWORD PTR DS:[EAX+C]
8B00
MOV EAX,DWORD PTR DS:[EAX]
8B00
MOV EAX,DWORD PTR DS:[EAX]
8B55 08
MOV EDX,DWORD PTR SS:[EBP+8]
8942 04
MOV DWORD PTR DS:[EDX+4],EAX
66:8B83 7E5E4000 MOV AX,WORD PTR DS:[EBX+405E7E]
66:8942 02
MOV WORD PTR DS:[EDX+2],AX
66:C702 0200
MOV WORD PTR DS:[EDX],2
C642 08 00
MOV BYTE PTR DS:[EDX+8],0
C642 0C 00
MOV BYTE PTR DS:[EDX+C],0
8DBD F4FDFFFF
LEA EDI,DWORD PTR SS:[EBP-20C]
6A 20
PUSH 20
8D93 605E4000
LEA EDX,DWORD PTR DS:[EBX+405E60]
52
PUSH EDX
57
PUSH EDI
E8 2C0A0000
CALL 0225325C
83C7 20
ADD EDI,20
B9 18000000
MOV ECX,18
60
PUSHAD
6A 01
PUSH 1
FF93 93104000
CALL DWORD PTR DS:[EBX+401093]
61
POPAD
0F31
RDTSC
AB
STOS DWORD PTR ES:[EDI]
49
DEC ECX
^75 F0
JNZ SHORT 02252838
8B7D 0C
MOV EDI,DWORD PTR SS:[EBP+C]
31C0
XOR EAX,EAX
AA
STOS BYTE PTR ES:[EDI]
B8 80000000
MOV EAX,80
AB
STOS DWORD PTR ES:[EDI]
68 80000000
PUSH 80
8D95 F4FDFFFF
LEA EDX,DWORD PTR SS:[EBP-20C]
52
PUSH EDX
57
PUSH EDI
E8 F6090000
CALL 0225325C
83EF 04
SUB EDI,4
57
PUSH EDI
E8 57F9FFFF
CALL 022521C6
4F
DEC EDI
68 85000000
PUSH 85
57
PUSH EDI
FF75 08
PUSH DWORD PTR SS:[EBP+8]
E8 8F010000
CALL 02252A0D
89C6
MOV ESI,EAX
29F8
SUB EAX,EDI
6A 04
PUSH 4
E8 05000000
CALL 0225288E
0D 0A0D0A00
OR EAX,0A0D0A

4/9

0225288E
0225288F
02252890
02252895
02252897
0225289D
022528A0
022528A2
022528A8
022528AA
022528AB
022528B1
022528B7
022528B8
022528BA
022528C0
022528C1
022528C6
022528C8
022528CD
022528CF
022528D4
022528DA
022528DB
022528DC
022528E2
022528E3
022528E8
022528EA
022528F0
022528F1
022528F2

50
57
E8 F30A0000
85C0
^0F84 C7FEFFFF
8D78 04
39F7
^0F84 BCFEFFFF
87FE
AD
3B83 573D4000
^0F85 ADFEFFFF
AC
84C0
^0F85 A4FEFFFF
AD
3D 80000000
74 12
3D 00010000
74 0B
3D 00020000
^0F85 8AFEFFFF
50
56
8D95 F4FDFFFF
52
E8 0D000000
85C0
^0F84 74FEFFFF
5F
C9
C2 0800

PUSH EAX
PUSH EDI
CALL 02253388
TEST EAX,EAX
JE 02252764
LEA EDI,DWORD PTR DS:[EAX+4]
CMP EDI,ESI
JE 02252764
XCHG ESI,EDI
LODS DWORD PTR DS:[ESI]
CMP EAX,DWORD PTR DS:[EBX+403D57]
JNZ 02252764
LODS BYTE PTR DS:[ESI]
TEST AL,AL
JNZ 02252764
LODS DWORD PTR DS:[ESI]
CMP EAX,80
JE SHORT 022528DA
CMP EAX,100
JE SHORT 022528DA
CMP EAX,200
JNZ 02252764
PUSH EAX
PUSH ESI
LEA EDX,DWORD PTR SS:[EBP-20C]
PUSH EDX
CALL 022528F5
TEST EAX,EAX
JE 02252764
POP EDI
LEAVE
RETN 8

If gethostbyname returns empty hand, it then loops through the code to generate another
domain :
Code:
022527E8
022527EE
022527F0

FF93 5F354000
85C0
^0F84 6EFFFFFF

CALL DWORD PTR DS:[EBX+40355F]
TEST EAX,EAX
JE 02252764

; call to gethostbyname

Above code snippet will loop through the code starting at 0x02252764. So this address is
where the DGA starts,
We should check the stack and all register's conditions when we'll land on address
0x02252764.
Remember these conditions are needed as arguments while reversing any subroutine :
Code:

5/9

02252764
837D FC 00
Number of domains
02252768
75 21
0225276A
6A 20
0225276C
8D95 F8FEFFFF
02252772
52
02252773
8D93 605E4000
02252779
52
0225277A
E8 DD0A0000
0225277F
0FB783 C25E4000
02252786
8945 FC
02252789
EB 45

CMP DWORD PTR SS:[EBP-4],0 ; Starts with 0x03E8 ; 1000

0225278B
0225278E
02252794
02252799
0225279B
0225279D
0225279E
022527A0
022527A2
022527A8
022527AD
022527AF
022527B1
022527B4
022527B6
022527B8
022527BA
022527BC
022527BE
022527C0
022527C1
022527C3
022527C5
022527C6
022527CC
022527CD
022527CF
022527D0
022527D6

DEC DWORD PTR SS:[EBP-4]
LEA ESI,DWORD PTR DS:[EBX+405EA0] ; "oGkS3w3sGGOGG7oc"
MOV ECX,10
XOR EAX,EAX
XOR EDX,EDX
LODS BYTE PTR DS:[ESI]
ADD EDX,EAX
LOOPD SHORT 0225279D
LEA EDI,DWORD PTR DS:[EBX+405E60] ; "ssrgwnrmgrxe.com"
MOV ECX,0C
ADD AL,BYTE PTR DS:[EDI]
XOR AL,DL
ADD AL,BYTE PTR DS:[EDI+1]
CMP AL,61
JBE SHORT 022527BC
CMP AL,7A
JB SHORT 022527C0
INC DL
JMP SHORT 022527AD
STOS BYTE PTR ES:[EDI]
LOOPD SHORT 022527AD
MOV AL,2E ; "."
STOS BYTE PTR ES:[EDI]
MOV EAX,DWORD PTR DS:[EBX+405EB8] ; "com"
STOS DWORD PTR ES:[EDI]
XOR EAX,EAX
STOS BYTE PTR ES:[EDI]
LEA EDX,DWORD PTR DS:[EBX+405E60]
PUSH EDX

FF4D FC
8DB3 A05E4000
B9 10000000
31C0
31D2
AC
01C2
^E2 FB
8DBB 605E4000
B9 0C000000
0207
30D0
0247 01
3C 61
76 04
3C 7A
72 04
FEC2
^EB ED
AA
^E2 EA
B0 2E
AA
8B83 B85E4000
AB
31C0
AA
8D93 605E4000
52

JNZ SHORT 0225278B
PUSH 20
LEA EDX,DWORD PTR SS:[EBP-108]
PUSH EDX
LEA EDX,DWORD PTR DS:[EBX+405E60]
PUSH EDX
CALL 0225325C
MOVZX EAX,WORD PTR DS:[EBX+405EC2]
MOV DWORD PTR SS:[EBP-4],EAX
JMP SHORT 022527D0

A decision is made at 0x02252764 for comparison of value at address [EBP-4] which is
0x03E8 in teh begining that is 0x3E8 and then decreses along the looping through the
successive loops.
This is the maximum number of domains to be generated. If this value is greater than 0 then
a jump is made to
address 0x0225278B. Let us check what is at this address:
Code:

6/9

0225278B
0225278E
02252794
02252799
0225279B
0225279D
0225279E
022527A0
022527A2
022527A8
022527AD
022527AF
022527B1
022527B4
022527B6
022527B8
022527BA
022527BC
022527BE
022527C0
022527C1
022527C3
022527C5
022527C6
022527CC
022527CD
022527CF
022527D0
022527D6

FF4D FC
8DB3 A05E4000
B9 10000000
31C0
31D2
AC
01C2
^E2 FB
8DBB 605E4000
B9 0C000000
0207
30D0
0247 01
3C 61
76 04
3C 7A
72 04
FEC2
^EB ED
AA
^E2 EA
B0 2E
AA
8B83 B85E4000
AB
31C0
AA
8D93 605E4000
52

DEC DWORD PTR SS:[EBP-4]
LEA ESI,DWORD PTR DS:[EBX+405EA0] ; "oGkS3w3sGGOGG7oc"
MOV ECX,10
XOR EAX,EAX
XOR EDX,EDX
LODS BYTE PTR DS:[ESI]
ADD EDX,EAX
LOOPD SHORT 0225279D
LEA EDI,DWORD PTR DS:[EBX+405E60] ; "ssrgwnrmgrxe.com"
MOV ECX,0C
ADD AL,BYTE PTR DS:[EDI]
XOR AL,DL
ADD AL,BYTE PTR DS:[EDI+1]
CMP AL,61
JBE SHORT 022527BC
CMP AL,7A
JB SHORT 022527C0
INC DL
JMP SHORT 022527AD
STOS BYTE PTR ES:[EDI]
LOOPD SHORT 022527AD
MOV AL,2E ; "."
STOS BYTE PTR ES:[EDI]
MOV EAX,DWORD PTR DS:[EBX+405EB8] ; "com"
STOS DWORD PTR ES:[EDI]
XOR EAX,EAX
STOS BYTE PTR ES:[EDI]
LEA EDX,DWORD PTR DS:[EBX+405E60]
PUSH EDX

The above code snippet is the DGA itself. It utilizes one hardcoded domain name as seed
and another string as salt.
Every new generated domain name gets consumed in generating next domain name. The
difference in this DGA is
that it it doesnt use date/time for domain generation, rather uses the domain name as seed
for generating next domain.
Code:

7/9

'''
Filename : TinBaDGA.py
Developer : Garage4Hackers
Greets
: b0nd, FB1H2S, "vinnu", l0rdDeathStorm, nightrover and all g4h team
'''
import os, time
utility = "TinBaDGA"
def tinbaDGA(idomain, seed):
print "[+] "+utility+" : Initiated"
suffix = ".com"
domains = []
count = 0x03E8
eax = 0
edx = 0
for i in range(count) :
buf = ''
esi = seed
ecx = 0x10
eax = 0
edx = 0
for s in range(len(seed)) :
eax = ord(seed[s])
edx += eax
edi = idomain
ecx = 0x0C
d = 0
while ( ecx > 0 ):
al = eax & 0xFF
dl = edx & 0xFF
#print "0 eax : %x edx : %x ecx : %x" % (eax, edx, ecx)
#print "0 al : %x dl : %x" % (al, dl)
al = al + ord(idomain[d])
al = al ^ dl
#print "1 al : %x dl : %x" % (al, dl)
al += ord(idomain[d+1])
al = al & 0xFF
#print "2 al : %x dl : %x" % (al, dl)
eax = (eax & 0xFFFFFF00)+al
edx = (edx & 0xFFFFFF00)+dl
if al > 0x61 :
if al < 0x7A :
#al = ord(idomain[d])
eax = (eax & 0xFFFFFF00) +al
buf += chr(al)
d += 1
ecx -= 1
#print "\tal : %x ecx : %x" % (al, ecx)
continue
#time.sleep(4)
dl += 1

8/9

dl = dl & 0xFF
edx = (edx & 0xFFFFFF00)+dl
domain = buf+suffix
print "[%d] %s" %(i, domain)
domains.append(domain)
idomain = domain
return domains

def init():
harddomain = "ssrgwnrmgrxe.com"
seed = "oGkS3w3sGGOGG7oc"
domains = tinbaDGA(harddomain, seed)
index = 0
fp = open(utility+".log", "wb")
for domain in domains :
index += 1
line = "[%d] %s" % (index, domain)
fp.write(line+'\n')
print line
fp.close()
init()

SHA256 hash of Sample under investigation :
856e486f338cbd8daed51932698f9cdc9c60f4558d22d963f5 6da7240490e465

9/9