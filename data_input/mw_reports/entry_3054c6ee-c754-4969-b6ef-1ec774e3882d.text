White paper

North Korea
Bitten by
Bitcoin Bug
Financially motivated campaigns
reveal new dimension of the
Lazarus Group
Darien Huss

www.proofpoint.com

Table of Contents
EXECUTIVE SUMMARY........................................................................................................................................................... 3
OVERVIEW............................................................................................................................................................................... 4
INTRODUCTION...................................................................................................................................................................... 4

PowerRatankba Downloaders......................................................................................................................................5
Campaign Timeline.................................................................................................................................................................... 5
PowerSpritz................................................................................................................................................................................ 6
Windows Shortcut (LNK)............................................................................................................................................................ 8
Microsoft Compiled HTML Help (CHM)..................................................................................................................................... 9
JavaScript Downloaders.......................................................................................................................................................... 11
VBScript Macro Microsoft Office Documents.......................................................................................................................... 13
Backdoored PyInstaller Applications....................................................................................................................................... 15
Implant Description and Analysis..............................................................................................................................18
PowerRatankba Description..................................................................................................................................................... 18
PowerRatankba.A C&C Description......................................................................................................................................... 19
PowerRatankba.B C&C Description........................................................................................................................................ 20
PowerRatankba Persistence.................................................................................................................................................... 20
PowerRatankba.B Stage2 - Gh0st RAT.................................................................................................................................... 21
Gh0st RAT Purpose.................................................................................................................................................................. 23
Shopping Spree: Enter RatankbaPOS..................................................................................................................................... 23
RatankbaPOS Analysis............................................................................................................................................................ 23
RatankbaPOS Targeted Region............................................................................................................................................... 28
Attribution to Lazarus Group......................................................................................................................................28
Encryption................................................................................................................................................................................ 28
Obfuscation.............................................................................................................................................................................. 30
Functionality............................................................................................................................................................................. 30
Code Overlap........................................................................................................................................................................... 31
Decoys..................................................................................................................................................................................... 32
C&C.......................................................................................................................................................................................... 32
CONCLUSION........................................................................................................................................................................ 33

Research Contributions........................................................................................................................................................... 33
Indicators of Compromise (IOCs)............................................................................................................................................ 34
ET and ETPRO Suricata/Snort Signatures............................................................................................................................... 37

North Korea Bitten by Bitcoin Bug

2

Executive Summary
With activity dating at least to 2009, the Lazarus Group has consistently ranked among the most disruptive, successful,
and far-reaching nation-state sponsored actors. The March 20, 2013 attack in South Korea, the Sony Pictures hack in 2014,
the successful theft of $81 million from the Bangladesh Bank in 2014, and perhaps most famously this year’s WannaCry
ransomware attack and its global impact have all been attributed to the group. The Lazarus Group is widely accepted as
being a North Korean state-sponsored threat actor by numerous organizations in the information security industry, law
enforcement agencies, and intelligence agencies around the world.
The Lazarus Group’s arsenal of tools, implants, and exploits is extensive and under constant development. Previously,
they have employed DDoS botnets, wiper malware to temporarily incapacitate a company, and a sophisticated set of
malware targeting the SWIFT banking system to steal millions of dollars. In this report we describe and analyze a new,
currently undocumented subset of the Lazarus Group’s toolset that has been widely targeting individuals, companies, and
organizations with interests in cryptocurrency.
Threat vectors for this new toolset, dubbed PowerRatankba, include highly targeted spearphishing campaigns using
links and attachments as well as massive email phishing campaigns targeting both personal and corporate accounts of
individuals with interests in cryptocurrency. We also share our discovery of what may be the first publicly documented
instance of a nation-state targeting a point-of-sale related framework for the theft of credit card data, again using a variant
of malware that is closely related to PowerRatankba.

North Korea Bitten by Bitcoin Bug

3

Overview
The Lazarus Group has increasingly focused on financially motivated attacks and appears to be capitalizing on both the
increasing interest and skyrocketing prices for cryptocurrencies. Proofpoint researchers have uncovered a number of
multistage attacks that use cryptocurrency-related lures to infect victims with sophisticated backdoors and reconnaissance
malware. Victims of interest are then infected with additional malware including Gh0st RAT to steal credentials for
cryptocurrency wallets and exchanges, enabling the Lazarus Group to conduct lucrative operations stealing Bitcoin and
other cryptocurrencies. We also discovered what appears to be the first publicly documented instance of a nation-state
targeting a point-of-sale related framework for the theft of credit card data in a related set of attacks. Moreover, the timing of
the point-of-sale related attacks near the holiday shopping season makes the potential financial losses considerable.

Introduction
It is already well-known that Lazarus Group has targeted and successfully breached several prominent cryptocurrency
companies and exchanges. From these breaches, law enforcement agencies suspect that the group has amassed nearly
$100 million worth of cryptocurrencies based on their value today. We hypothesize that many of these previously reported
operations targeting cryptocurrency organizations have actually been conducted by the espionage team of the Lazarus
Group based on evidence we provide in the Attribution section. Further, we assess that until today, many of Lazarus
Group’s traditional financially motivated team have remained largely in the shadows as they conduct these operations
adding to their already impressive stockpile of various cryptocurrencies.
Several watering hole attacks targeting the banking and financial industries that occurred at the end of 2016 and beginning
of 2017 utilized a first stage downloader implant dubbed Ratankba. During those incidents, Lazarus Group primarily used
Ratankba as a reconnaissance tool, described by colleagues at Trend Micro as a utility to “survey the lay of the land.” In
this research we detail a new implant dubbed PowerRatankba, a PowerShell-based malware variant that closely resembles
the original Ratankba implant. We believe that PowerRatankba was likely developed as a replacement in Lazarus Group’s
strictly financially motivated team’s arsenal to fill the hole left by Ratankba’s discovery and very public documentation
earlier this year.
In this report, we first provide a brief timeline of events related to the malicious activity. Next, we describe the various
delivery methods that Lazarus Group utilized to infect victims with PowerRatankba (Fig. 1). We then detail the inner
workings of PowerRatankba and how it is utilized to deliver a more fully capable backdoor to interesting victims (Fig. 1).
Following that, we share details on a new and emerging threat targeting the South Korean point-of-sale industry that we
have dubbed RatankbaPOS (Fig. 1). Finally, we explain our high-confidence attribution to Lazarus Group.

North Korea Bitten by Bitcoin Bug

4

Figure 1: Flow of PowerRatankba activity from victims to the Lazarus Group operators

PowerRatankba Downloaders
In this section we will detail each of the different attack vectors and campaigns we have discovered that eventually lead to
the delivery of PowerRatankba. In total we have discovered six different attack vectors:
• A new Windows executable downloader dubbed PowerSpritz
• A malicious Windows Shortcut (LNK) file
• Several malicious Microsoft Compiled HTML Help (CHM) files using two different techniques
• Multiple JavaScript (JS) downloaders
• Two macro-based Microsoft Office documents
• Two campaigns utilizing backdoored popular cryptocurrency applications hosted on internationalized domain (IDN)
infrastructure to trick victims into thinking they were on a legitimate website

Campaign Timeline
The campaigns discussed in this research began on or around June 30th, 2017. According to our data those campaigns
were highly targeted spearphishing attacks targeting at least one executive at a cryptocurrency organization to deliver a
PowerRatankba.A variant. All other campaigns utilized PowerRatankba.B variants. We currently have no visibility into how
the LNK, CHM, and JS campaigns were delivered to users, but given common Lazarus modus operandi, we can speculate
that they may have been delivered through attachments or links in emails. We gained visibility again during the massive
email campaigns utilizing BTG- and Electrum-themed applications to ultimately deliver PowerRatankba. The timeline below
illustrates the exact dates of campaigns where we are aware of them. Where exact dates are unknown, we based estimates
on first campaign observations and metadata (Fig. 2).

North Korea Bitten by Bitcoin Bug

5

Figure 2: Timeline of campaigns ultimately related to PowerRatankba

PowerSpritz
PowerSpritz is a Windows executable that hides both its legitimate payload and malicious PowerShell command using
a non-standard implementation of the already rarely used Spritz encryption algorithm (see the Attribution section for
additional analysis of the Spritz implementation). This malicious downloader has been observed being delivered via
spearphishing attacks using the TinyCC link shortener service to redirect to likely attacker-controlled servers hosting the
malicious PowerSpritz payload. In early July 2017 an individual on Twitter shared an attack they observed targeting them
(Fig. 3) utilizing a fake Skype update lure to trick users into clicking on a link to hxxps://skype.2[.]vu/1. The TinyCC link
redirected to a server that, at the time, would have likely returned a PowerSpritz payload: hxxp://201.211.183[.]215:8080/
update.php?t=Skype&r=update

Figure 3: PowerSpritz spearphishing email shared on Twitter by @LeoAW, abusing Skype name and branding

North Korea Bitten by Bitcoin Bug

6

We have since discovered three additional TinyCC URLs utilized to spread PowerSpritz: one with a Telegram theme (hxxp://
telegramupdate.2[.]vu/5 -> hxxp://122.248.34[.]23/lndex.php?t=Telegram&r=1.1.9) and two more with Skype theme
(hxxp://skypeupdate.2[.]vu/1 -> hxxp://122.248.34[.]23/lndex.php?t=SkypeSetup&r=mail_new and hxxp://skype.2[.]vu/k
-> unknown). Some of the PowerSpritz payloads were previously hosted on Google Drive; however, we were unable to
determine if that service was actually used to spread the payloads in-the-wild (ITW).
PowerSpritz decrypts a legitimate Skype or Telegram installer using a custom Spritz implementation with the key “Znxkai@
if8qa9w9489”. PowerSpritz then writes the legitimate installer to disk in the directory returned by GetTempPathA either as
a hardcoded filename such as SkypeSetup.exe or, in some versions, as the filename returned by GetTempFileNameA.
The installer is then executed to trick the potential victim into thinking they downloaded a legitimate, working application
installer or update. Finally, Spritz uses the same key to decrypt a PowerShell command that downloads the first stage of
PowerRatankba (Fig. 4). All three PowerSpritz samples we discovered executed the identical PowerShell command.

Figure 4: Script output showing PowerSpritz PowerShell encoded and decoded command

North Korea Bitten by Bitcoin Bug

7

As shown in the above decoded script (Fig. 4), PowerSpritz attempts to retrieve a payload from hxxp://dogecoin.
deaftone[.]com:8080/mainls.cs that is expected to be a Base64-encoded PowerShell script. After decoding mainls.cs,
a PowerRatankba.A implant is revealed (Fig. 5) with hxxp://vietcasino.linkpc[.]net:8080/search.jsp as its command and
control (C&C).

Figure 5: PowerSpritz retrieving Base64-encoded PowerRatankba

Windows Shortcut (LNK)
A LNK masquerading as a PDF document was discovered on an antivirus
scanning service. The malicious “Scanned Document Part 1.pdf.lnk”
LNK file, along with a corrupted PDF named “Scanned Document Part
2.pdf,” were compressed in a ZIP file named “Scanned Documents.zip”
(Fig. 6). It is unclear if the PDF document was tampered with intentionally
to increase the chances a target would open the malicious LNK or if the
actor(s) unintentionally used a corrupted document. We currently are not
aware of how the LNK or compressed ZIP files were utilized ITW.

Figure 6: ZIP file with decompressed
malicious LNK and corrupted PDF

The malicious LNK uses a known AppLocker bypass to retrieve its
payload from a TinyURL shortener link hxxp://tinyurl[.]com/y9jbk8cg (Fig.
7). This shortener previously redirected to hxxp://201.211.183[.]215:8080/
pdfviewer.php?o=0&t=report&m=0 . At the time of analysis the C&C
server was no longer returning payloads. However, the same IP was
used in the PowerSpritz campaigns. Based on the same C&C usage
and similar URI structure, we assess with low confidence that the LNK
campaign would have delivered PowerRatankba via PowerSpritz.

Figure 7: Malicious LNK AppLocker bypass to retrieve payload

North Korea Bitten by Bitcoin Bug

8

Microsoft Compiled HTML Help (CHM)
Several malicious CHM files were uploaded to a multi antivirus scanning service in October, November, and December. We
inspected the compressed ZIP metadata to better understand the likely chronological order in which the CHMs were used.
Unfortunately we have been unable to determine how these infection attempts were delivered to victims ITW. The themes of
the malicious CHMs include:
• A confusing, poorly written request for assistance with creating a website with possible romantic undertones (Fig. 8-1)
• Documentation on a blockchain technology called ALCHAIN from Orient Exchange Co. (Fig. 8-2)
• A request for assistance in developing an initial coin offering (ICO) platform (Fig. 8-3)
• White paper on the Falcon Coin ICO (Fig. 8-4)
• A request for applications to develop a cryptocurrency exchange platform (Fig. 8-5)
• A request for assistance in creating an email marketing tool (Fig. 8-6)

Figure 8: CHM lures utilized in attempts to deliver PowerRatankba
All of the CHM files use a well-known technique to create a shortcut object capable of executing malicious code and then
causing that shortcut object to be automatically clicked via the “x.Click();” function. Two different methods were used
across the CHMs to retrieve the malicious payload.
The first method uses a VBScript Execute command and BITSAdmin tool to download a malicious VBScript file (Fig.
9). The payload is downloaded (Fig. 10) from hxxp://www.businesshop[.]net/hide.gif and saved to C:\windows\temp\
PowerOpt.vbs. Once the downloaded VBScript (Fig. 10) is executed, it will attempt to download PowerRatankba from
hxxp://158.69.57[.]135/theme.gif, saving the expected PowerShell script to C:\Users\Public\Pictures\opt.ps1.

North Korea Bitten by Bitcoin Bug

9

Figure 9: Malicious code embedded in CHM to download a VBScript PowerRatankba downloader

Figure 10: BITSAdmin retrieving malicious payload over HTTP

North Korea Bitten by Bitcoin Bug

10

Figure 10: BITSAdmin retrieving malicious payload over HTTP
The second method downloads a similar VBScript-based PowerRatankba downloader using PowerShell directly in the
CHM (Fig. 11). A similar VBScript Execute command is utilized to call PowerShell’s DownloadString to execute the payload
directly from hxxp://92.222.106[.]229/theme.gif

Figure 11: PowerShell utilized in CHM to retrieve PowerRatankba downloader VBS
The 5_6283065828631904327.chm (030b4525558f2c411f972d91b144870b388380b59372e1798926cc2958242863)
contains notable pieces of unused code as well as code pointing to an RFC1918 private IP address in the decompressed
doc.htm file (Fig. 12). The first excerpt of unused code consists of a more traditional PowerShell command that downloads
a script from hxxp://192.168.102[.]21/power.ps1. The next block of code adds an obfuscation technique (also present in
other related CHMs) where the quotes are replaced with the “*” character. This obfuscated code downloads a PowerShell
payload from the same RFC1918 address but from a different URI: hxxp://192.168.102[.]21/pso.ps1. We assess that this
is likely a remnant of the author developing the malicious CHM method using their local environment rather than using
code stolen from an unrelated CHM, tool, or other malicious payload. Additionally, another piece of commented code
follows which executes a VBScript file “C:\Users\dolphinePC\Downloads\run_32.vbs”. This may offer another clue to the
developer’s environment that has a possible username of dolphinePC. Finally, a PowerRatankba.B implant was embedded
in the same CHM as aa.ps1 and configured with C&C servers of 92.222.106[.]229 and 158.69.57[.]135.
Figure 12: Leftover code in 5_6283065828631904327.chm
As a final note on the CHM campaigns, the following three samples contain an email address of either robert_mobile@
gmail[.]com or robert_mobile@mail[.]com, which we assess with some confidence are related to the threat actor:
• 772b9b873100375c9696d87724f8efa2c8c1484853d40b52c6dc6f7759f5db01
• 6cb1e9850dd853880bbaf68ea23243bac9c430df576fa1e679d7f26d56785984
• 9d10911a7bbf26f58b5e39342540761885422b878617f864bfdb16195b7cd0f5

JavaScript Downloaders
Throughout November several compressed ZIP files containing a JavaScript (JS) downloader were observed being hosted
on likely attacker-controlled servers. We are not currently aware if or how these files were delivered to potential victims. The
naming of the files and the decoy PDF documents they retrieve provide some clues about the nature of the lures. Themes
include the cryptocurrency exchanges Coinbase and Bithumb, the Falcon Coin ICO, and a list of Bitcoin transactions.
Each JavaScript downloader is obfuscated (Fig. 13) using JavaScript Obfuscator (see Attribution section for additional
analysis) or a similar tool. After de-obfuscating (Fig. 14), the logic of the malicious downloader is very straightforward. First,
an obfuscated PowerRatankba.B PowerShell script is downloaded from a fake image URL such as: hxxp://51.255.219[.]82/
theme.gif. Next, the PowerShell script is saved to C:\Users\Public\Pictures\opt.ps1 and then executed.

North Korea Bitten by Bitcoin Bug

11

Figure 13: Obfuscated falconcoin.js

Figure 14: Deobfuscated falconcoin.js revealing PowerRatankba and decoy PDF URLs
The last step in execution is to retrieve the decoy PDF from hxxp://51.255.219[.]82/files/download/falconcoin.pdf and open
it using rundll32.exe and shell32.dll,OpenAs_RunDLL (Fig. 15-1). Samples using Coinbase and Bithumb themes also
downloaded PDF decoys (Fig. 15-2,15-3). Additionally we discovered that the content from the Coinbase decoy has been
used in Lazarus group-attributed espionage campaigns (see Attribution for more details).

North Korea Bitten by Bitcoin Bug

12

Figure 15: Decoys downloaded or sent along with PowerRatankba JavaScript downloaders

VBScript Macro Microsoft Office Documents
Two VBScript macro-laden Microsoft Office documents have been observed associated with this activity: one Word
document and one Excel spreadsheet. The Word document (b3235a703026b2077ccfa20b3dabd82d65c6b5645f7f1
5e7bbad1ce8173c7960) uses an Internal Revenue Service (IRS) theme and was sent as an attachment named “report
phishing.doc”. The spearphishing email was sent from an @mail.com address with the subject of “Phishing Warnning”[sic].
Ironically, the sender email address was spoofed as phishing@irs.gov (Fig. 16) while the content of the lure (Fig. 17) was
likely copied from an official IRS webpage.
Figure 16: Spearphishing email spoofed sender
and subject

Figure 17: IRS themed Word document PowerRatankba
downloader
The IRS-themed malicious document uses a macro
to download a PowerRatankba VBScript from
hxxp://198.100.157[.]239/hide.gif (Fig. 18), save it to C:\
Users\Public\Pictures\opt.vbs, and execute it with wscript.
exe. It in turn downloads the PowerRatankba.B from
hxxp://198.100.157[.]239/theme.gif, saving the downloaded
payload to C:\Users\Public\Pictures\opt.ps1, and finally
executing it with powershell.exe.

North Korea Bitten by Bitcoin Bug

13

Figure 18: IRS-themed malicious document macro
The second malicious Office document we discovered is an Excel spreadsheet named bithumb.xls. It uses a Bithumb lure
(Fig. 19) and includes stolen branding. The spreadsheet was found compressed in a ZIP file named Bithumb.zip along with
a decoy PDF document named “About Bithumb.pdf” (Fig. 20).

Figure 19: Malicious Bithumb Excel spreadsheet with English option shown, with stolen branding

Figure 20: “About Bithumb.pdf decoy” document inside Bithumb.zip archive, with stolen branding
The Excel spreadsheet contains a macro with an embedded Base64-encoded PowerRatankba VBScript downloader
(rather than retrieving it from a C&C using HTTP (Fig. 21)). The embedded VBScript is first dropped to disk at c:\Users\
Public\Documents\Proxy.vbs and then executed using wscript.exe. The dropped VBScript file is configured to download
PowerRatankba from hxxp://www.energydonate[.]com/images/character.gif while saving the downloaded payload to C:\
Users\Public\Documents\ProxyAutoUpdate.ps1.

North Korea Bitten by Bitcoin Bug

14

Figure 21: Base64 encoded PowerRatankba downloader embedded in bithumb.xls

Backdoored PyInstaller Applications
Most recently, several large email phishing campaigns attempted to trick unsuspecting victims into visiting fake webpages
to download or update cryptocurrency applications. The copycat websites were mirror images of legitimate websites with
software download links pointing to the correct installers hosted on the legitimate websites. The only exception was the
link to download the Windows version of the application, which was hosted on the copycat websites. These PyInstaller
executables were backdoored with a few lines of Python code added to download the PowerRatankba implant.
The first campaign that utilized this technique used a Bitcoin Gold (BTG) theme to trick the targets into visiting an
internationalized domain name (IDN) website (Fig. 22). An email was sent to targets offering a BTG wallet application
along with a link to the malicious website: hxxps://xn--bitcoingld-lcb[.]org/. However, web browsers and email clients would
display the link as follows: hxxps://bitcoingöld[.]org/. Emails in this BTG campaign were sent between approximately
November 10-16, 2017. Some of the known sender emails include but are not limited to: info@xn--bitcoingod-8yb[.]com,
info@xn--bitcoigold-o1b[.]com, and tech@xn--bitcoingld-lcb[.]org. Campaigns using IDN can be difficult to recognize as
malicious because they are typically very similar to the mimicked legitimate domains except for a single character (Fig. 23).
(see IOC section for more likely related IDNs)

Figure 22: Sample email containing a URL to malicious IDN hosting PyInstaller PowerRatankba downloader. The

North Korea Bitten by Bitcoin Bug

15

IDN email address is emphasized in a red box.

Figure 23: Excerpt from phishing email showing the IDN link
with red arrow pointing to internationalized character
Many thanks to Yonathan Klijnsma (@ydklijnsma) of RiskIQ,
whose assistance allowed us to analyze a historical scrape of
one of the web pages hosting the malware at xn--bitcoingldlcb[.]org. In the scrape, an additional text and a button were
inserted in place of the BTG logo. The button used JavaScript to
download a payload from hxxps://bitcoingöld[.]org/bitcoingold.
exe (IDN: xn--bitcoingld-lcb[.]org) (Fig. 24). Additional
differences are likely the result of changes to the legitimate
website (Fig. 25) since the malicious campaign.

Figure 24: Malicious BTG website hosting
PowerRatankba downloader. Credit: RiskIQ

North Korea Bitten by Bitcoin Bug

Figure 25: Legitimate BTG website showing difference
between legitimate and malicious websites (note: this
screenshot was not taken on the same day as the
screenshot of the malicious website)

16

Once clicked, the button on the malicious BTG page would have directed a victim to download a payload
from hxxps://bitcoingöld[.]org/bitcoingold.exe. At the time of our analysis, this URL was not returning content.
However, we discovered from a comment on a multiple anti-virus scanning service that someone targeted
by this campaign had uploaded a payload downloaded from the fake website. The file in that case was
named ElectronGold-1.1.1.exe (eab612e333baaec0709f3f213f73388607e495d8af9a2851f352481e996283f1).
We also found a similar payload with unknown origin named ElectronGold-1.1.exe
(b530de08530d1ba19a94bc075e74e2236c106466dedc92be3abdee9908e8cf7e).
The second campaign we discovered used a fake Electrum update as the lure to similarly direct victims to a malicious IDN
resembling the legitimate electrum.org website (Fig. 26). The emails in this case were sent, based on our visibility, using a
unique @mail.com email address for each recipient, and at least some of the emails were sent between November 18-21,
2017. A subject of “New Electrum Wallet Released” was used to trick victims into thinking that they needed to download
an update for Electrum to be able to use Segwit2X and Bitcoin Gold. If a victim clicked on the malicious link, they were
presented with what appeared to be a normal version of Electrum’s official website (Fig. 27).

Figure 26: Phishing email with fake Electrum
wallet application update announcement

Figure 27: A fake website with links to backdoored installation
packages highlighted in red boxes and internationalized
character noted by red arrow

Each of the links highlighted in red led to a malicious payload hosted directly on the same server: hxxps://xn--electrms2a[.]org/electrum-3.0.3.exe (Fig. 28). The electrum-3.0.3.exe is a backdoored PyInstaller that is configured to download a
VBScript PowerRatankba downloader.

North Korea Bitten by Bitcoin Bug

17

Figure 28: HTML code from malicious Electrum webpage
In both campaigns, the same malicious Python code was injected into the PyInstallers, specifically into \gui\qt\installwizard.
py. The backdoor code in each campaign is nearly identical except for the target URL and the file name to which the
downloaded VBScript is saved (Fig. 29).

Figure 29: Side-by-side comparison of backdoored installwizard.py scripts. Left: BTG, Right: Electrum
The BTG campaign was configured to download a VBScript from hxxp://www.btc-gold[.]us/images/top_bar.gif while
saving the downloaded script to C:\Users\Public\Documents\diff.vbs. We were unable to retrieve this file but suspect a
PowerRatankba variant would have been downloaded based on other campaigns.
The Electrum campaign was similarly configured to download a VBScript; however, in this case we were able to analyze the
downloaded payload. The backdoored installwizard.py downloaded a script from hxxp://trade.publicvm[.]com/images/top_
bar.gif (see Attribution section for more commentary) while saving the downloaded script to C:\Users\Public\Documents\
Electrum_backup.vbs. The downloaded Electrum_backup.vbs was a PowerRatankba downloader with a target URL of
hxxp://trade.publicvm[.]com/images/character.gif, which ultimately delivered a PowerRatankba implant with a C&C of trade.
publicvm[.]com.

Implant Description and Analysis
Three key implants were used at various points in these campaigns. The implants -- PowerRatankba, Gh0st RAT, and
RatankbaPOS -- and specific variations are described in detail below.

PowerRatankba Description
PowerRatankba is used for the same purpose as Ratankba: as a first stage reconnaissance tool and for the deployment
of further stage implants on targets that are deemed interesting by the actor. Similar to its predecessor, PowerRatankba
utilizes HTTP for its C&C communication.
Once executed, PowerRatankba first sends detailed information about the infected device to its C&C server via the
BaseInfo HTTP POST (Fig. 30), including the computer name, IP address(es), OS boot time and installation date, language,
if ports 139, 3389, and/or 445 are open/closed/filtered, a process list, and (PowerRatankba.B only) output from two WMIC
commands (Fig. 31).

North Korea Bitten by Bitcoin Bug

18

Figure 30: Initial HTTP POST containing infected device information to PowerRatankba.A C&C

Figure 31: WMIC command output sent via same initial HTTP POST
There are only slight variations between the initial BaseInfo HTTP POST, such as the process list is retrieved by
PowerRatankba.A using “tasklist /svc” while PowerRatankba.B uses just “tasklist”.

PowerRatankba.A C&C Description
After the initial C&C check-in, PowerRatankba.A issues What HTTP GET requests (Fig. 32) to retrieve commands from the C&C
server. All PowerRatankba.A HTTP requests contain a randomly generated numeric UID passed in the u HTTP URI parameter.

Figure 32: PowerRatankba.A What HTTP GET Request
This variant receives commands and sends responses in plaintext. This variant only has four commands (Table 1) including
a sleep, exit, and two different execute code functions.

North Korea Bitten by Bitcoin Bug

19

Table 1: PowerRatankba.A C&C commands
Command

Description

success

Sleep and send request after sleep

killkill

Exit

Execute

Download payload from provided URL and execute via memory injection

DownExec

Download payload from provided URL, save to disk, then execute

PowerRatankba.B C&C Description
Similar to its predecessor, PowerRatankba.B issues What HTTP requests to its C&C server after the initial check-in. Instead
of a numeric UID, this variant uses the infected device’s double-Base64-encoded MAC address (Fig. 33).

Figure 33: PowerRatankba.B What HTTP GET Request
Commands from the C&C are still expected as plaintext but command parameters for all commands except interval are
encrypted with DES using “Casillas” as both the key and initialization vector (IV) and then Base64-encoded. The response
of the cmd command is the only data that is sent DES encrypted to the C&C whilst all other network traffic sent from the
infected device to the C&C is either plaintext or Base64-encoded.
Several new commands were added to this variant (Table 2) while Execute and DownExec were replaced. The command
exe was eventually changed to inj while functionality remained the same. Additionally, some earlier variants did not contain
all of the commands listed below but the overall capabilities of the backdoor remained largely the same, therefore for the
purpose of this research all variants with DES encryption are considered variant PowerRatankba.B.
Table 2: PowerRatankba.B C&C commands
Command

Description

success

Sleep and send request after sleep

killkill

Exit

interval

Change default sleep length

cmd

Execute command using “cmd.exe /c $cmdInst” . Command response is sent back to the
C&C DES encrypted and Base64 encoded

cf_sv

Replace SCH, VBS, PS1 files with provided server location and pre-determined URI (e.g.,

rrr

Download payload from provided URL, write to C:\Users\Public\Documents\000.exe, and
then execute payload.

exe or inj

Download payload from provided URL, inject into process memory using InvokeReflectivePEInjection

PowerRatankba Persistence
For persistence, PowerRatankba.A saves a JS file to the victim’s Startup folder as appView.js that will
be executed every time the victim’s user account logs in. The persistence JS (Fig. 34) contains a XOR
encoded PowerShell script to retrieve a Base64 encoded PowerShell from a hardcoded URL (e.g.,
hxxp://macintosh.linkpc[.]net:8080/mainls.cs ). The encoded PowerShell script used a XOR key of
“ZWZBGMINRQLUSVTGHWVYANJHTVUHTLTUGKOHIYOXQEFEIPHNGACNKMBWGRTJIHRANIIZJNNZHVF”.

North Korea Bitten by Bitcoin Bug

20

Figure 34: appView.js persistence JS
PowerRatankba.B is capable of using two different persistence methods while only one will be used based on whether
or not the executing user has Administrator privileges. PowerRatankba first checks if the account has administrator
privileges by executing the following command: “whoami /groups | findstr /c:”S-1-5-32-544” | findstr /c:”Enabled group”
&& goto:isadministrator’’. If the user account does have administrator privileges then PowerRatankba will download a
PowerShell script from a hardcoded location (e.g., “$BaseServer + ‘images/character.gif’”), save it to a hardcoded location
(e.g., C:/Windows/System32/WindowsPowerShell/v1.0/Examples/detail.ps1), and finally create a scheduled task to execute
the downloaded PowerShell script on system startup. If the user account does not have administrator privileges then a
VBScript file is downloaded from a hardcoded location (e.g., “$BaseServer + ‘images/top_bar.gif’”) and saved to the
executing user’s Startup folder as, for example, PwdOpt.vbs or ProxyServer.vbs.

PowerRatankba.B Stage2 - Gh0st RAT
A Gh0st remote access Trojan/tool (RAT) was delivered via PowerRatankba.B to several devices running common
cryptocurrency-related applications. The Gh0st RAT samples were delivered via the memory injection exe/inj command (Fig.
35). After decrypting the command with DES the target URL was revealed to be hxxp://180.235.133[.]235/img.gif (Fig. 36).

Figure 35: Exe command delivered from PowerRatankba.B C&C to infected device
Figure 36 (left): PowerRatankba.B retrieving
Base64-encoded Gh0st dropper
The fake image was actually a Base64-encoded
custom encryptor with the embedded, encrypted
Gh0st RAT as the final payload. The encryptor
utilized AES in CBC-mode with the NIST
Special Publication 800-38A example key of
“2B7E151628AED2A6ABF7158809CF4F3C” and IV of
“000102030405060708090A0B0C0D0E0F” (Fig. 37).

North Korea Bitten by Bitcoin Bug

21

Figure 37: AES key and IV in custom encryptor downloaded by PowerRatankba.B
The decrypted Gh0st implant is a custom variant with magic bytes of RFC18 (Fig. 38). This variant was likely based on version
3.4.0.0 of Gh0st/PCRat, however we consider it likely that the author(s) have given their implants an internal version of 1.0.0.1
as can be observed in the decompressed initial check-in to the C&C (as well as hardcoded in the binaries) (Fig. 39).

Figure 38: Magic RFC18 value in unpacked Gh0st RAT sample

Figure 39: Version 1.0.0.1 RFC18 Gh0st RAT
Much of the 3.4.0.0 code remains the same, including the usage of Zlib compression and the infamous \x78\x9c default
Zlib compression header bytes (Fig. 40) observed in countless Gh0st RAT samples over the years.

Figure 40: Initial Gh0st check-in depicting RFC18 magic bytes and Zlib header

North Korea Bitten by Bitcoin Bug

22

Gh0st RAT Purpose

During our research we discovered that long-term sandboxing detonations of PowerRatankba not running cryptocurrencyrelated applications were never infected with a Stage2 implant. This may indicate that the PowerRatankba operator(s)
were only interested in infecting device owners with an obvious interest in various cryptocurrencies. In one case, a RFC18
Gh0st RAT was delivered to a PowerRatankba.B infected device within twenty minutes of the initial infection. From analyzing
C&C traffic logs we assess that a Lazarus operator almost immediately viewed the screen of the infected device and then
proceeded to take over full remote control, giving them the ability to interact with applications on the infected device,
including a password-protected Bitcoin wallet application.

Shopping Spree: Enter RatankbaPOS
Beyond stealing millions of US dollars worth of cryptocurrency, we have discovered a Lazarus operation to steal pointof-sale (POS) data primarily targeting POS terminals of businesses operating in South Korea. Considering the time of
year, most retail businesses around the world report their highest volume of sales between November and December so
naturally POS is a popular target for criminals. Enter RatankbaPOS, possibly the first publicly documented nation-state
sponsored campaign to steal POS data from a POS-related framework.1
At this time we have been unable to determine how RatankbaPOS is being delivered; however, based on its sharing of
C&C with PowerRatankba implants we hypothesize that Lazarus operators infiltrated at least one organization’s networks
utilizing PowerRatankba to deploy later stage implants (including the possibility of RFC18 Gh0ST RAT) to ultimately deploy
RatankbaPOS. Based on the fact that the file was hosted on the C&C in plaintext, and not Base64 encoded, we assess that
RatankbaPOS was more likely deployed with a later stage implant other than PowerRatankba.

RatankbaPOS Analysis
RatankbaPOS is deployed through a process injection dropper that is also capable of installing itself persistently, checking
a C&C for either an update or a command to delete itself, dropping the RatankbaPOS implant to disk, and finally searching
for the targeted POS process and module for injection and ultimately the theft of POS data.
The dropper first sets up persistence by creating a registry key in HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\
CurrentVersion\Run\igfxgpttray. It uses its own module file name for the registry key value. Next, it makes an HTTP request
to a hardcoded URL hxxp://www[.]webkingston[.]com/update.jsp?action=need_update using a hardcoded User-Agent
(UA) of “Nimo Software HTTP Retriever 1.0” (Fig. 41) to request either instruction from the C&C to delete itself and remove
the persistence registry key or to download an updated implant with which to replace itself. If no response is returned from
the C&C, RatankbaPOS will begin the process injection search.

Figure 41: RatankbaPOS dropper requesting and receiving update from C&C
1 We acknowledge the excellent work from @ashley_shen_920, @051R15, and @kjkwak12 with their documentation of North Korean-related attacks on VANXATM
which was targeting ATM devices and not directly POS.

North Korea Bitten by Bitcoin Bug

23

The process injection search begins by taking a snapshot of the process list using CreateToolhelp32Snapshot. The implant
dropper/injector will then case-insensitive search for a process named xplatform.exe which we assess is likely associated
with Tobesoft’s XPLATFORM UI/UX design software. If a process name match is found then a TH32CS_SNAPMODULE
CreateToolhelp32Snapshot call is used to make a snapshot of xplatform.exe’s running module list. Loaded modules
are then iterated using Module32First and Module32Next while converting each result to lowercase by adding 0x20 to
any uppercase letters and then finally comparing the string to ksnetadsl.dll (Fig. 42) that we assess is associated with
a KSNET POS framework . Finally, the filesize of ksnetadsl.dll is checked to make sure it is 98,304 bytes (Fig. 42). If a
successful match is found then the process ID (PID) of xplatform.exe is returned. Lastly, RatankbaPOS will be written to
disk as c:\windows\temp\hkp.dll and the PID of xplatform.exe process will be used to inject hkp.dll into xplatform.exe using
LoadLibraryA and CreateRemoteThread (Fig. 43).

Figure 42: Dropper/injector searching for ksnetadsl.dll and correct filesize

North Korea Bitten by Bitcoin Bug

24

Figure 43: Injecting RatankbaPOS into xplatform.exe
RatankbaPOS will first hook the KSNETADSL.dll module at offset 0xB146 (Fig. 44). Interestingly there is code for
RatankbaPOS to check KSNETADSL.dll for an exported function named 1000B146, which seems like an unusual export
name for which to check, but this code will never be used because ‘!strcmp(“1000B146”, “1000B146”)’ will always be true.
We hypothesize that this feature was included either by mistake or was previously used for debugging. RatankbaPOS will
also log messages to a file stored in c:\windows\temp\log.tmp.
Figure 44: RatankbaPOS
setting KSNETADSL.dll
injection offset
At this point in the reverse
engineering process, we
would naturally begin
reversing the KSNETADSL.
dll module; however, we
have only been able to find
two such modules with a
filesize of 98,304 bytes:

•

f2f6b4770718eed349fb7c77429938ac1deae7dd6bcc141ee6f5af9f4501a695

•

6c8c801bb71b2cd90a2c1595092358e46cbfe63e62ef6994345d6969993ea2d6

North Korea Bitten by Bitcoin Bug

25

After analyzing both KSNETADSL.dll modules, our preliminary assessment is that neither of the modules are the correct
target for RatankbaPOS. We can at least gain some insight into the purpose of KSNETADSL.dll, which appears to be the
handling of encrypted and decrypted credit card numbers for a KSNET-related POS framework system (Fig. 45). Further
analysis of RatankbaPOS focusing on the code used for C&C revealed the likely purpose of this implant

Figure 45: Screenshot showing KSNET module interaction with CARD_NO registry key
Only one HTTP POST request is programmed in RatankbaPOS for the communication to a C&C that is called via
CreateThread in the hook handler (DoC2, Fig. 46).

Figure 46: Hook handler creating new thread for C&C then hooking KSNETADSL.dll
Our analysis of the C&C communication revealed a number of clues as to what was being exfiltrated. Initially, the implant
uses strchr to find the first occurrence of “=” in the string data that is received from the hook of KSNETADSL.dll. Next,
37-bytes beginning at 16-bytes before the position of the “=” are copied to a buffer. Finally, that buffer is compared to a
substitution buffer that was created at the beginning of RatankbaPOS’ execution (Fig. 47). The substitution algorithm uses
the values starting at offset 0x30-0x39 in the “E”-filled buffer to substitute the ASCII values of “0-9” for “ZCKOADBLNX” as
well as at offset 0x3D for substitution of ASCII “=” to “Y”. Therefore, values “0-9” will be obfuscated to “ZCKOADBLNX”
while “=” will be obfuscated to “Y” (Fig. 48).

Figure 47: Obfuscation substitution buffer created in RatankbaPOS

North Korea Bitten by Bitcoin Bug

26

Figure 48: Obfuscation substitution buffer in memory
To obfuscate the data, RatankbaPOS simply uses the hex value of the cleartext ASCII string to substitute itself for a value
in the substitution buffer. For instance, a value of “0” would be substituted to “Z” while any equals signs (“=”) will be
substituted for “Y”. This method is used to likely obfuscate the data so it is harder to detect by simply glancing at network
traffic or through the use of heuristic-based detection of plaintext credit card data transmitted over the network. Once
the stolen data has been obfuscated, it is sent in a POST HTTP request to the URL /list.jsp?action=up using the same
hardcoded UA as the injector: “Nimo Software HTTP Retriever 1.0” (Fig. 49). So far we have observed the following C&C
domains: www.energydonate[.]com and online-help.serveftp[.]com.

Figure 49: DoC2 function that obfuscates stolen data and exfiltrates to a C&C

North Korea Bitten by Bitcoin Bug

27

Based on documentation we have found online,
RatankbaPOS is possibly targeting plaintext track data in
the first 16 bytes followed by a “=” and finally followed by
encrypted POS-related data beginning with “99” (Fig. 50).
According to the document, this is an encrypted form of
the track data. Based on this, there is the possibility that
this campaign may be targeting a SoftCamp POS-related
software application, framework, or device. If we are correct
and the values “99” always follow the “=” sign then one
could potentially find exfiltrated data in network traffic by
searching for the string “YXX” starting at offset 16 in the
client body of an HTTP POST request. However, more logic
will likely be necessary to reduce false positives but this
opens up several options for detection.
Figure 50: Documentation on South Korean POS
software depicting POS data that matches the pattern
RatankbaPOS is searching for (markings not ours)

RatankbaPOS Targeted Region
Based on the fact that RatankbaPOS is targeting a South Korean software vendor’s POS framework, including clues that
the length of exfiltrated data matches related POS data (document here, and another document here), we assess with high
confidence that this threat is primarily targeting devices in South Korea.

Attribution to Lazarus Group
Attribution is a controversial topic and arguably one of the most difficult tasks threat intelligence analysts face. However,
based on our research, we assess with a high level of confidence given the information available to us that the operations
and activity discussed in this research are attributed to Lazarus Group and ultimately North Korea.
In consideration of the controversial and difficult task at hand, we are providing an above and beyond summary of just
some of the key pieces and overlaps to validate our assessment. Key reasons, discussed in detail below, are Encryption,
Obfuscation, Functionality, Code Overlap, Decoys, and C&C.

Encryption
In October 2016 Lazarus Group pulled off a major operation that allegedly compromised at least 20 banks in Poland as
well as banks in other countries around the world. The attacks have been well documented by BAE, Kaspersky, ESET,
TrendMicro, and Symantec. The attribution of this attack to Lazarus (aka, Bluenoroff) and ultimately North Korea is widely
accepted across the industry. What has not been documented publicly, to our knowledge, are the specifics behind the
implementation of the Spritz encryption cipher utilized in some of the implants surrounding the banking incidents in late
2016 and early 2017.
Spritz is self-described as a spongy RC4-like stream cipher that was designed by Ronald Rivest and Jacob Schuldt.
Multiple implementations of Spritz exist on Github in languages like C and Python. Anyone researching Lazarus Group’s
version of Spritz will quickly find out that neither of the previously mentioned implementations will successfully decrypt
hidden payloads in either banking related implants nor PowerSpritz’s legitimate installer payload and malicious
PowerShell commands.
The issue, or possibly feature, in Lazarus Group’s implementation of Spritz can be found buried in a single paragraph on
page five of the original Spritz publication (Fig. 51). It states that addition and subtraction may be substituted for exclusiveor (XOR) and is referred to Spritz-xor.

North Korea Bitten by Bitcoin Bug

28

Figure 51: Excerpt from Spritz publication
Examining Lazarus Group’s implementation of Spritz in
one of the original implants utilized to compromise banks
in late 2016 and 2017 via watering hole attacks, it quickly
becomes apparent that they have actually implemented
Spritz-xor instead of the normal Spritz algorithm (Fig. 52).

Figure 52: Spritz-xor decrypt implementation in Lazarus Group’s implant from compromised banks
PowerSpritz utilizes the same exact Spritz-xor implementation as the older Lazarus Group-attributed implant (Fig. 53).
We assess that due to how rare Spritz usage is ITW, in addition to the implemented deviation from the standard, that it is
unlikely a different threat actor is also using this specific implementation.
Figure 53: Spritz-xor decrypt implementation in PowerSpritz

North Korea Bitten by Bitcoin Bug

29

Obfuscation
Earlier this year several watering hole attacks targeting South Korea utilized an ActiveX 0day exploit in M2Soft to deliver
Lazarus-connected FBI-RAT and Charon implants. Some of the techniques observed in these attacks overlap with the
JS downloader and CHM PowerRatankba campaigns. One such overlap was through the usage of a well-known JS
obfuscation technique in both the M2Soft exploit and PowerRatankba JS downloader campaigns. The method is a public
and widely used technique of masking strings using their hexadecimal values and placing them in an array assigned to a
variable with a naming structure of _0x[a-f0-9]{4} (Fig. 54).

Figure 54: ActiveX M2Soft exploit utilizing JS obfuscation also observed in a PowerRatankba campaign

Functionality
Several features in the original Ratankba implants are similar or identical when compared to PowerRatankba and
RatankbaPOS. Furthermore, the usage of a common directory c:\windows\temp\ for the storage of implants and logs are
seen across a wide array of Lazarus Group’s toolset. A brief overview of similar features is shown in below (Table 3) while a
detailed description of each overlap may be found below.
Table 3: Feature comparison table
Feature

Ratankba

PowerRatankba

RatankbaPOS
X

JSP C&C similarities

X

X

Commands:
success,killkill

X

X

Sleep 15 minutes loop

X

c:\windows\temp\

M2Soft Exploit

FEIB Spreader

X

X

X
X

X

First consider the C&C protocols utilized in all Ratankba, PowerRatankba, and RatankbaPOS. Ratankba’s initial POST to
C&C to divulge compromised system information uses the same BaseInfo parameter as PowerRatankba. Additionally, a
Ratankba sample (bd7332bfbb6fe50a501988c3834a160cf2ad948091d83ef4de31758b27b2fb7f) utilizes a C&C of list.jsp
while RatankbaPOS utilizes an identical URIfile name for allegedly exfiltrating credit card information to a C&C. Second,
Ratankba’s supported commands include success and killkill that function identically to the respective PowerRatankba
commands. Furthermore, a sleep loop of 900 seconds (15 minutes) is utilized in both Ratankba and RatankbaPOS’
dropper (Fig. 56,56).

Figure 55: Ratankba command loop sleep

North Korea Bitten by Bitcoin Bug

30

Figure 56: RatankbaPOS dropper target process search loop
Lastly, while further analyzing the M2Soft exploit discussed in the Obfuscation section, a familiar destination directory of
C:\windows\temp\ was spotted in the deobfuscated JS (Fig. 57,58). This destination directory was also used during the
PowerRatankba CHM campaign, by RatankbaPOS for log and implant storage, and by the FEIB spreader.

Figure 57: Deobfuscated M2Soft exploit used to deliver Lazarus FBI-RAT implant

Figure 58: Deobfuscated M2Soft exploit used to deliver Lazarus Charon implant

Code Overlap
On or before October 3rd, 2017, the Far Eastern International Bank (FEIB) in Taiwan was
hacked by Lazarus Group to steal money via the SWIFT system. One of the implants
(9cc69d81613285352ce92ec3cb44227af5daa8ad4e483ecc59427fe23b122fce) utilized in that attack was a loader and
spreader that writes itself to the Windows temp directory: c:\windows\temp\. This directory is also used by numerous other
Lazarus Group implants including by the RatankbaPOS dropper for the payload drop location as well as for RatankbaPOS
logging. Additionally, there are several instances of code overlap between RatankbaPOS and the FEIB spreader implant.
One such overlap includes the way in which each implant sets up persistence in almost precisely the same way (Fig. 59).

Figure 59: Registry key persistence. Left: FEIB spreader, Right: RatankbaPOS dropper

North Korea Bitten by Bitcoin Bug

31

Decoys
Content found in a PowerRatankba JS downloader decoy (transaction.pdf downloaded by transaction.js) was previously
utilized in Lazarus campaigns using techniques that have more traditionally, to our knowledge, been used for espionage
rather than for financial gain. The campaign occurred on August 4th, 2017, where Lazarus Group impersonated a National
police officer of South Korea along with a malicious Microsoft Office Excel document. The malicious Excel attachment
utilized a macro-based VBScript XOR dropper technique that has been very well documented in public already.
The document used in this attack was named 비트코인 거래내역.xls
(b46530fa2bd5f9958f664e754ae392dc400bd3fcb1c5adc7130b7374e0409924), which roughly translates to “Bitcoin
transaction history.” Using the macro-based VBScript XOR dropper technique a CoreDn downloader implant is dropped to
disk with a C&C of www.unsunozo[.]org. The interesting overlap with the PowerRatankba campaigns can be found in the
lure used by the Excel spreadsheet (Fig. 60). The highlighted transactions, after the “Final bitcoin Address” section match
with the beginning of the transactions used in the PowerRatankba decoy transaction.pdf.

Figure 60: Excel CoreDn ~tmp001.xls decoy on the left, PowerRatankba transaction.pdf decoy on the right
On a final note for this aspect of the actor attribution, campaigns utilizing the VBScript XOR macro technique have
historically been used for attacks more closely associated with espionage than for direct financial gain, as was the case
when several campaigns targeted the personal accounts of employees at US defense contractors. This behavior may offer
a clue as to the desperation North Korea has for procuring currency through illicit means, possibly due to the economic
sanctions imposed on the regime. This may indicate that there has been a significant shift in directives for the Lazarus
team(s) that historically conducted espionage campaigns. Furthermore, several of the campaigns utilizing the old VBScript
XOR macro technique have direct or within-one-week overlap with PowerRatankba campaigns alluding to the possibility
that there is in fact more than one team working under the North Korean umbrella as other companies have suggested
(e.g., Kaspersky’s excellent write-up on Bluenoroff).

C&C
A report was found in a Facebook post from mickeyfintech that listed a domain
utilized in several PowerRatankba campaigns as being associated with infrastructure
utilized in the breach of the FEIB (Fig. 61). The domain, trade.publicvm[.]com,
was allegedly connected to the FEIB hack. That domain was also used by several
PowerRatankba downloaders and payloads for hosting as well as C&C. This is a low
confidence indicator as we have been unable to corroborate if that domain was in
fact utilized by Lazarus in the hacking of the FEIB.
Figure 61: Facebook post listing PowerRatankba domain as being associated
with FEIB breach

North Korea Bitten by Bitcoin Bug

32

Conclusion
This report has introduced several new additions to Lazarus Group’s ever-growing arsenal, including a variety of different
attack vectors, a new PowerShell implant and Gh0st RAT variant, as well as an emerging point-of-sale threat targeting
South Korean devices. In addition to insight into Lazarus’ emerging toolset, there are two key takeaways from this research:
• Analyzing a financially motivated arm of a state actor highlights an often overlooked or underestimated aspect of statesponsored attacks; in this case, we were able to differentiate the actions of the financially motivated team within Lazarus
from those of their espionage and disruption teams that have recently grabbed headlines.
• This group now appears to be targeting individuals rather than just organizations: individuals are softer targets, often
lacking resources and knowledge to defend themselves and providing new avenues of monetization for a statesponsored threat actor’s toolkit.
• Moreover, both the explosive growth in cryptocurrency values and the emergence of new point-of-sale malware near the
peak holiday shopping season provide an interesting example of how one state-sponsored actor is following the money,
adding direct theft from individuals and organizations to the more “traditional” approach of targeting financial institutions
for espionage that we often observe with other APT actors.

Research Contributions
Proofpoint
Kafeine (@kafeine)
Matthew Mesa (@mesa_matt)
Kimberly (@StopMalvertisin)
James Emory (@sudosev)
External
Malc0de (@malc0de)
Adam (@infosecatom)
Jacob Soo (@_jsoo_)

Special Thanks
We would like to thank Yonathan Klijnsma (@ydklijnsma) and RisqIQ (@RiskIQ) for supporting
this research by sharing data and assisting with some of the infrastructure analysis.

North Korea Bitten by Bitcoin Bug

33

Indicators of Compromise (IOCs)
PowerSpritz ITW URLs

hxxp://skype.2[.]vu/1
hxxp://skype.2[.]vu/k
hxxp://skypeupdate.2[.]vu/1
hxxp://telegramupdate.2[.]vu/5
hxxps://doc-00-64-docs.googleusercontent[.]com/docs/securesc/
ha0ro937gcuc7l7deffksulhg5h7mbp1/39cbphg8k5qve4q5rr6nonee
1bueiu8o/1499428800000/13030420262846080952/*/0B63J1WTZC49h
X1JnZUo4Y1pnRG8?e=download
hxxps://drive.google[.]com/uc?export=download&id=0B63J1WTZC49hdDR0clR3cFpITVE
hxxp://201.211.183[.]215:8080/update.php?t=Skype&r=update
hxxp://122.248.34[.]23/lndex.php?t=SkypeSetup&r=mail_new
hxxp://122.248.34[.]23/lndex.php?t=Telegram&r=1.1.9

PowerSpritz Hashes

cbebafb2f4d77967ffb1a74aac09633b5af616046f31dddf899019ba78a55411
9ca3e56dcb2d1b92e88a0d09d8cab2207ee6d1f55bada744ef81e8b8cf155453
5a162898a38601e41d538f067eaf81d6a038268bc52a86cf13c2e43ca2487c07

PowerSpritz C&C

hxxp://dogecoin.deaftone[.]com:8080/mainls.cs
hxxp://macintosh[.]linkpc[.]net:8080/mainls.cs

Microsoft Compiled HTML Help (CHM) Hashes

81617bd4fa5d6c1a703c40157fbe16c55c11260723b7f63de022fd5dd241bdbf
d5f9a81df5061c69be9c0ed55fba7d796e1a8ebab7c609ae437c574bd7b30b48
4eb2dd5e90bda6da5efbd213c8472775bdd16e67bcf559f58802a8c371848212
01b047e0f3b49f8ab6ebf6795bc72ba7f63d7acbc68f65f1f8f66e34de827e49
I3e91f399d207178a5aa6de3d680b58fc3f239004e541a8bff2cc3e851b76e8bb
9d10911a7bbf26f58b5e39342540761885422b878617f864bfdb16195b7cd0f5
85a263fc34883fc514be48da2d814f1b43525e63049c6b180c73c8ec00920f51
6cb1e9850dd853880bbaf68ea23243bac9c430df576fa1e679d7f26d56785984
772b9b873100375c9696d87724f8efa2c8c1484853d40b52c6dc6f7759f5db01
6d4415a2cbedc960c7c7055626c61842b3a3ca4718e2ac0e3d2ac0c7ef41b84d
030b4525558f2c411f972d91b144870b388380b59372e1798926cc2958242863

Microsoft Compiled HTML Help (CHM) C&C
hxxp://92.222.106[.]229/theme.gif
hxxp://www.businesshop[.]net/hide.gif

MS Shortcut Link (LNK) Hashes

beecb33ef8adec99bbba3b64245c7230986c3c1a7f3246b0d26c641887387bfe
8f0b83d4ff6d8720e134b467b34728c2823c4d75313ef6dce717b06f414bdf5c

MS Shortcut Link (LNK) C&C

hxxp://tinyurl[.]com/y9jbk8cg
hxxp://201.211.183[.]215:8080/pdfviewer.php?o=0&t=report&m=0

JavaScript Hashes

e7581e1f112edc7e9fbb0383dd5780c4f2dd9923c4acc09b407f718ab6f7753d
7975c09dd436fededd38acee9769ad367bfe07c769770bd152f33a10ed36529e
100c6400331fa1919958bed122b88f1599a61b3bb113d98b218a535443ebc3a7
8ff100ca86cb62117f1290e71d5f9c0519661d6c955d9fcfb71f0bbdf75b51b3
97c6c69405ed721a64c158f18ab4386e3ade19841b0dea3dcce6b521faf3a660
41ee2947356b26e4d8aca826ae392be932cd8800476840713e9b6c630972604f
25f13dca780bafb0001d521ea6e76a3bd4dd74ce137596b948d41794ece59a66

JavaScript C&C

hxxp://51.255.219[.]82/files/download/falconcoin.zip
hxxp://51.255.219[.]82/theme.gif
hxxp://51.255.219[.].82/files/download/falconcoin.pdf
hxxp://apps.got-game[.]org/images/character.gif

North Korea Bitten by Bitcoin Bug

34

hxxp://apps.got-game[.]org/files/download/transaction.pdf
hxxp://www.energydonate[.]com/files/download/bithumb.zip
hxxp://www.energydonate[.]com/images/character.gif
hxxp://www.energydonate[.]com/files/download/bithumb.pdf

MS Office Docs Hashes

b3235a703026b2077ccfa20b3dabd82d65c6b5645f7f15e7bbad1ce8173c7960
b9cf1cba0f626668793b9624e55c76e2dab56893b21239523f2a2a0281844c6d
972b598d709b66b35900dc21c5225e5f0d474f241fefa890b381089afd7d44ee

MS Office Docs C&C

198.100.157[.]239
hxxp://www.energydonate[.]com/files/download/Bithumb.zip
hxxp://www.energydonate[.]com/images/character.gif

PyInstaller Hashes

b530de08530d1ba19a94bc075e74e2236c106466dedc92be3abdee9908e8cf7e
eab612e333baaec0709f3f213f73388607e495d8af9a2851f352481e996283f1
eb372423e4dcd4665cc03ffc384ff625ae4afd13f6d0589e4568354be271f86e

PyInstaller Hosting or Email IDNA
xn--bitcin-zxa[.]org
xn--electrm-s2a[.]org
xn--bitcingold-hcb[.]org
xn--bitcoigold-o1b[.]com
xn--bitcoingld-lcb[.]com
xn--bitcoingld-lcb[.]org
xn--bitcoingod-8yb[.]com
xn--btcongold-54ad[.]com
xn--btcongold-g5ad[.]com

Likely Related IDNA

xn--6fgp[.]com
xn--bitcingold-5bb.[]com
xn--bitcingold-jbb[.]com
xn--bitcingold-t3b[.]com
xn--bitcoingol-4kb[.]com
xn--bitoingold-1ib[.]com
xn--btcoingold-v8a[.]com
xn--bitcoingldwallet-twb[.]org

PyInstaller C&C

hxxp://www.btc-gold[.]us/images/top_bar.gif
hxxp://trade.publicvm[.]com/images/top_bar.gif

PowerRatankba Hashes

41f155f039448edb42c3a566e7b8e150829b97d83109c0c394d199cdcfd20f9b
20f7e342a5f3224cab8f0439e2ba02bb051cd3e1afcd603142a60ac8af9699ba
db8163d054a35522d0dec35743cfd2c9872e0eb446467b573a79f84d61761471
3cd0689b2bae5109caedeb2cf9dd4b3a975ab277fadbbb26065e489565470a5c
b265a5d984c4654ac0b25ddcf8048d0aabc28e36d3e2439d1c08468842857f46
1768f2e9cea5f8c97007c6f822531c1c9043c151187c54ebfb289980ff63d666
99ad06cca4910c62e8d6b68801c6122137cf8458083bb58cbc767eebc220180d
f7f2dd674532056c0d67ef1fb7c8ae8dd0484768604b551ee9b6c4405008fe6b
d844777dcafcde8622b9472b6cd442c50c3747579868a53a505ef2f5a4f0e26a

NOTE: Several of these domains reflect themes and brands (only BTG) that are confirmed to have been used in phishing attacks. Additionally, they were
registered in the same timeframe, at the same registrar, with matching server characteristics that were observed in the confirmed IDNA infrastructure domains.
These domains in no way indicate that they have been used for attacks, nor that the themes utilized indicate that the entity in question has been targeted or
compromised. We simply assess that this infrastructure is related to Lazarus Group and currently do not know how or if it was utilized for campaigns.

North Korea Bitten by Bitcoin Bug

35

PowerRatankba C&C

51.255.219[.]82
144.217.51[.]246
158.69.57[.]135
198.100.157[.]239
201.139.226[.]67
92.222.106[.]229
apps.got-game[.]org
trade.publicvm[.]com
www.businesshop[.]net
vietcasino.linkpc[.]net

Related Unknown Purpose C&C
coinbases[.]org
africawebcast[.]com
bitforex.linkpc[.]net
macintosh.linkpc[.]net
coinbroker.linkpc[.]net
moneymaker.publicvm[.]com

RFC18 Gh0st RAT

3a856d8c835232fe81711680dc098ed2b21a4feda7761ed39405d453b4e949f6

RFC18 Gh0st RAT Download Locations
hxxp://180.235.133[.]235/img.gif
hxxp://180.235.133[.]121/images/img.gif

RFC18 Gh0st RAT C&C
180.235.133[.]235:443
180.235.133[.]121:443
51.255.219[.]82:443
158.69.57[.]135:443

RatankbaPOS ITW

hxxp://www.webkingston[.]com/top.gif

RatankbaPOS Hashes

b66624ab8591c2b10730b7138cbf44703abec62bfc7774d626191468869bf21c
79a4b6329e35e23c3974960b2cecc68ee30ce803619158ef3fefcec5d4671c98
d334c40b42d2e6286f0553ae9e6e73e7e7aaec04a85df070b790738d66fd14fb
2b05a692518a6102c540e209cb4eb1391b28944fdb270aef7ea47e1ddeff5ae2

RatankbaPOS Loader C&C

hxxp://www.webkingston[.]com/update.jsp?action=need_update

RatankbaPOS Exfiltration C&C

hxxp://www.energydonate[.]com/list.jsp?action=up
hxxp://online-help[.]serveftp[.]com/list.jsp?action=up

North Korea Bitten by Bitcoin Bug

36

ET and ETPRO Suricata/Snort Signatures
2824864,ETPRO TROJAN Ratankba Recon Backdoor/Module CnC Beacon 1
2828904,ETPRO TROJAN RatankbaPOS Dropper CnC Checkin M1
2828905,ETPRO TROJAN RatankbaPOS Dropper CnC Checkin M2
2828906,ETPRO TROJAN RatankbaPOS CnC Checkin
2828921,ETPRO TROJAN PowerRatankba DNS Lookup 1
2828922,ETPRO TROJAN PowerRatankba DNS Lookup 2
2828923,ETPRO TROJAN PowerRatankba DNS Lookup 3
2828924,ETPRO TROJAN PowerRatankba DNS Lookup 4
2828925,ETPRO TROJAN PowerRatankba DNS Lookup 5
2828926,ETPRO TROJAN PowerRatankba DNS Lookup 6
2828927,ETPRO TROJAN PowerRatankba DNS Lookup 7
2828928,ETPRO TROJAN PowerRatankba DNS Lookup 8
2828929,ETPRO TROJAN PowerRatankba DNS Lookup 9
2828930,ETPRO TROJAN PowerRatankba DNS Lookup 10
2828931,ETPRO TROJAN PowerRatankba DNS Lookup 11
2828932,ETPRO TROJAN PowerRatankba DNS Lookup 12
2828933,ETPRO TROJAN PowerRatankba DNS Lookup 13
2828934,ETPRO TROJAN PowerRatankba DNS Lookup 14
2828935,ETPRO TROJAN PowerRatankba DNS Lookup 15
2828936,ETPRO TROJAN PowerRatankba DNS Lookup 16
2828937,ETPRO TROJAN PowerRatankba DNS Lookup 17
2828938,ETPRO TROJAN PowerRatankba DNS Lookup 18
2828939,ETPRO TROJAN PowerRatankba DNS Lookup 19
2828940,ETPRO TROJAN PowerRatankba DNS Lookup 20
2828941,ETPRO TROJAN PowerRatankba DNS Lookup 21
2828942,ETPRO TROJAN PowerRatankba DNS Lookup 22
2828943,ETPRO TROJAN PowerRatankba DNS Lookup 23
2828944,ETPRO TROJAN PowerRatankba DNS Lookup 24
2828945,ETPRO TROJAN PowerRatankba DNS Lookup 25
2828946,ETPRO TROJAN PowerRatankba DNS Lookup 26
2828947,ETPRO TROJAN PowerRatankba DNS Lookup 27
2828948,ETPRO TROJAN PowerRatankba DNS Lookup 28
2828949,ETPRO TROJAN PowerRatankba DNS Lookup 29
2828950,ETPRO TROJAN PowerRatankba DNS Lookup 30
2828951,ETPRO TROJAN PowerRatankba DNS Lookup 31
2828952,ETPRO TROJAN PowerRatankba DNS Lookup 32
2828953,ETPRO TROJAN PowerRatankba DNS Lookup 33
2828971,ETPRO TROJAN RatankbaPOS POS Exfiltration

North Korea Bitten by Bitcoin Bug

37

ABOUT PROOFPOINT
Proofpoint, Inc. (NASDAQ:PFPT), a next-generation cybersecurity company, enables organizations to protect the way their people
work today from advanced threats and compliance risks. Proofpoint helps cybersecurity professionals protect their users from
the advanced attacks that target them (via email, mobile apps, and social media), protect the critical information people create,
and equip their teams with the right intelligence and tools to respond quickly when things go wrong. Leading organizations of
all sizes, including over 50 percent o
 f the Fortune 100, rely on Proofpoint solutions, which are built for today’s mobile and
social-enabled IT environments and leverage both the power of the cloud and a big-data-driven analytics platform to combat
modern advanced threats.

www.proofpoint.com

©Proofpoint, Inc. Proofpoint is a trademark of Proofpoint, Inc. in the United States and other
countries. All other trademarks contained herein are property of their respective owners.