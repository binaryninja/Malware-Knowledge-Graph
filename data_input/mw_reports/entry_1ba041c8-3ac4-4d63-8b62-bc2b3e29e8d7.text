Attacks on Android Clipboard
Xiao Zhang and Wenliang Du
Dept. of Electrical Engineering & Computer Science,
Syracuse University, Syracuse, New York, USA
{xzhang35,wedu}@syr.edu

Abstract. In this paper, we perform a thorough study on the risks imposed by the globally accessible Android Clipboard. Based on the risk
assessment, we formulate a series of attacks and categorize them into
two groups, i.e., manipulation and stealing. Clipboard data manipulation may lead to common code injection attacks, like JavaScript injection
and command injection. Furthermore, it can also cause phishing attacks,
including web phishing and app phishing. Data stealing happens when
sensitive data copied into the clipboard is accessed by malicious applications. For each category of attack, we analyze a large number of candidate
apps and show multiple case studies to demonstrate its feasibility. Also,
our app analysis process is formulated to benefit future app development
and vulnerability detection. After a comprehensive exposure of the risk,
we briefly discuss some potential solutions.

1

Introduction

Android was developed by Google in 2008 and officially took over as the mobile
market leader in the fourth quarter of 2010 [23]. One reason for its rapid growth
is the availability of a wide range of feature-rich applications (known as apps).
Different from Apple, Google does not impose a thorough scrutinizing process on
applications submitting to the official Android market (known as Google Play).
Moreover, Google allows the existence of numerous alternative 3rd-party app
stores. While this strategy has been proven to be successful and resulted in
today’s dominance of Android platform, it also puts some system components,
i.e., Clipboard in this paper, under risk.
Security risks on Android Clipboard. The most interesting characteristic
of Android Clipboard is its globally accessible nature, i.e., everything placed
on the clipboard is public and accessible to all the running apps on the device
without any permission requirements or user interactions. Android even allows
apps to monitor data changes on the clipboard by registering a callback listener
to the system. This is not a severe security problem on the desktop environment,
since its clipboard is user-driven and a window should transfer data to or from
the clipboard only in response to a command from the user [1].
In contrast, Android considers each app as a different user with different
privilege. Due to the global unguarded access, various users, i.e., apps, can arbitrarily operate on Android Clipboard without any restriction. What makes the

2

Attacks on Android Clipboard

situation worse is the limited screen size of mobile devices. First of all, users
are much more likely to copy and paste data on mobile devices to save typing
efforts. Furthermore, fewer characters will be visible to users after pasting the
content from the clipboard to the app, easing attackers’ effort in hiding their attacks. Another advantage for attackers targeting Android Clipboard is the lack
of security consideration in common app development.
Our findings. To understand the current security situation on Android Clipboard, we have conducted the first systematic study of the clipboard usage in
benign apps and malicious apps. Our malware sample [24] consists of 3,987 malware apps collected from different sources [3]. The benign sample consists of the
top 500 free apps in each category in Google Play (around 16,000 apps), and
they were collected in July 2012.
Our analysis result shows that 1180 benign apps provide the functionality
to put data on the clipboard, while 8 malware apps try to retrieve data from
the clipboard. Due to the open access, those 8 malware apps could easily steal
whatever information leaked from the mentioned benign apps. At the same time,
we also find that 384 benign apps can get data from the clipboard. However,
around 60 malware apps are capable of manipulating the data on the clipboard.
If a benign app takes the clipboard data for execution without proper checking,
any one of the 60 malware apps could possibly launch the code injection attacks.
Based on the risk assessment, we have formulated a series of attacks and categorized them into two groups, i.e., manipulation and stealing. Clipboard data
manipulation may lead to code injection attacks, like JavaScript injection and
command injection. For the JavaScript injection case, we first analyzed popular
Android browser apps, and our result shows that 9 out of 11 are vulnerable.
In our study, we also found one vulnerable Samsung app, which takes search
string from users and append it to internal JavaScript code for execution without proper validations. If the search string is pasted from the infected clipboard,
malicious apps can potentially interfere with the future behavior of the vulnerable Samsung app. For the command injection case, we have studied 6 popular
terminal apps available on Google Play, and all of them blindly take commands
from clipboard without any scrutinizing. Another group of attack is data stealing,
which happens when sensitive data is copied to the clipboard. To demonstrate
the severity of the attack, we have conducted case studies on three main types
of sensitive data on the mobile device: Contacts, Calendar and Messages. For
each category, we are able to identify several vulnerable apps.
Roadmap. The rest of this paper is organized as follows: Section 2 gives a short
tutorial on Android Clipboard. Section 3 formulates the attack models. While
Section 4 discusses JavaScript injection attack, Section 5 focuses on command
injection attacks. Section 6 discusses the phishing attack. Data leakage attack is
explained in Section 7. Section 8 proposes and briefly discusses several potential
solutions. Finally, Section 9 describes the related work and Section 10 concludes.

Attacks on Android Clipboard

2

3

Short Tutorial on Android Clipboard

On Android platform, the clipboard is a powerful framework to support various
types of data copy and paste within an app as well as among apps. To copy
certain type of data, a corresponding clip object (ClipData) is constructed and
placed on the clipboard if the required permission is granted to the app. The
clipboard holds only one clip object at a time. When an app puts a clip object on
the clipboard, the previous clip object is erased. To paste data, the app retrieves
the clip object and selectively handles the resolved data based on its MIME type.
Different from copying data to the clipboard, no permissions are required for an
app to access the content from the Clipboard. Moreover, apps can even monitor
primary clip changes by registering a listener callback.
ClipManager is responsible for managing the copying, monitoring and pasting
operations on the clipboard. Applications can simply access the ClipManager
without requiring any specific permission, as shown in the following example:
1
2

ClipboardManager mClipboard = (ClipboardManager)
getSystemService(Context.CLIPBOARD_SERVICE);

3

Threat Models

The attacks discussed in this paper are categorized into two models based on
the operations performed by malicious applications on the clipboard data, i.e.,
manipulation and stealing. This section will give a high-level overview of these
two models (depicted in Figure 1), leaving the attack details to later sections.

Fig. 1. Threat Models

Manipulation. We study how malicious apps can interfere with other apps’
execution by manipulating the data on the clipboard. In this attack model, we
assume that the malicious app is installed on the same device as the victim app.

4

Attacks on Android Clipboard

The assumption is not very difficult to satisfy. Actually any app potentially can
perform the attack, since it does not require any permission to access the clipboard on Android. The malicious app keeps monitoring the data change on the
clipboard. Once the copying operation is performed either by some other benign
apps or the user, the malicious app can selectively manipulate the data. When
the modified data is pasted to the same or another app and that app’s future
behavior depends on the pasted data, the attack succeeds. For web-based apps,
attacker can try to inject JavaScript to achieve various damages (Section 4). For
terminal apps, malicious commands may be injected to local/remote server for
execution (Section 5). The attacker can even perform phishing attacks on social
websites as well as their applications (Section 6).
Stealing. We study how malicious apps can steal user’s private information,
which leads to data leakage attacks. The assumption for this threat model is
the same as the previous one. However, instead of manipulating the data, the
attacker tries to detect user’s private data on the clipboard and steals it (Section 7). The attack will cause more damage if the data on this clipboard is a
URI or Intent, which serves as an identifier to user’s private information, such as
Contacts, Calendar or Messages. Although this may sound less likely to happen,
the above requirement is not difficult to achieve at all. Firstly, it is not rare for
users to copy their username or even password to the clipboard. Secondly, many
apps available on Google Play allow users to perform private data copying and
pasting, leaving plenty of attacking opportunities for malicious apps.

4

Injection Attacks - JavaScript

4.1

JavaScript on Mobile Browser’s URL Bar

An emerging trend among all browsers is the combination of searching and navigating from the same box, referred to as URL Bar in this paper. When users are
attracted by something they see on the web, they can type, or more commonly,
copy and paste it into the URL Bar to directly search more information about
it. Considering that Android Clipboard is globally accessible to all the apps on
the same device without requiring any permission, a malicious app can modify
the content on the clipboard and inject malicious JavaScript code with some
small tricks to hide the attack from the user’s attention. Figure 2 illustrates the
phases involved in such an attack.
The success of the attack relies on the browser setting of JavaScript execution
in URL Bar and the trick applied by attackers to hide themselves from the
victims. To study the influence of such attacks, we systematically analyzed the
default setting of the built-in Android browser and other top 10 browsers on
Google Play. The testing device is Samsung Galaxy Nexus running Android
4.3 (JELLY BEAN). We manually installed each browser app and typed the
following JavaScript into its URL Bar:
javascript:alert(’Android Clipboard Attacks’);

Attacks on Android Clipboard

5

Fig. 2. JavaScript Injection on Vulnerable Browser’s URL Bar via Copy-and-Paste

If an alert window is displayed, we conclude that the browser allows JavaScript
execution in its URL Bar by default. We also studied the maximal characters
visible on the URL Bar for each browser. The study results are included in Table 1. Different from desktop browsers that usually disallow pasting JavaScript
code to URL Bar, all the studied mobile browsers allow such an operation. However, Firefox and UC Browser do not support JavaScript execution directly from
the URL Bar, making themselves immune to such attacks. To hide the attack
from users’ attention, attackers could simply add enough blank spaces before the
malicious code. The number of blank spaces depends on the largest number of
visible characters in each browser’s URL Bar. The goal is to make the malicious
code invisible to victim users unless they scroll down to check all the characters
in the URL bar.
Android Browser Apps # of Installs JavaScript Execution Visible Chars
Built-in Browser
N/A
3
<26
Firefox
>10,000,000
7
<33
Dolphin
>10,000,000
3
<20
ONE
>1,000,000
3
<23
Opera Mini
>50,000,000
3
<40
UC Browser
>10,000,000
7
<29
Chrome
>100,000,000
3
<33
Opera
>10,000,000
3
<33
Dolphin Mini
>1,000,000
3
<24
Maxthon
>1,000,000
3
<25
Boat
>1,000,000
3
<23

Table 1: Analysis of the URL Bar in Top Android Browser Applications

To launch the attack, the malicious app simply implements a service that defines a listener callback inside. The callback is invoked whenever the primary clip
on the clipboard changes, allowing attackers to inject JavaScript code. The at-

6

Attacks on Android Clipboard

tacking types include but are not restricted to session hijacking, confused deputy,
integrity compromise and privacy leakage. However, the damage is limited to
the current domain because of the Same Origin Policy (SOP) [19]. To demonstrate each type of attack, we manually installed the latest stable phpBB version
(3.0.11) [17] on a Dell OPTIPLEX 760 desktop running Ubuntu 12.04. Except
for Firefox and UC Browser that do not allow JavaScript execution in their URL
Bar, all the other browsers are vulnerable to the mentioned attacks. In the following sections, all the sample attacks are conducted in Google Chrome on the
testing mobile device, unless otherwise specified.
Session Hijacking. The attacking steps follow exactly the same as in Figure 2,
with the malicious JavaScript sending the victim’s cookies to the remote server.
After that, the attacker can gain unauthorized access to the victim’s entire account. It should be noted that the current stable phpBB version (3.0.11) has
already implemented several mechanisms to prevent against session hijacking
attacks, including HttpOnly cookie [9], session IP validation and browser validation. During the demonstration, we manually turned off the three protections.
However, the following Confused Deputy attack does not require the adjustments
on the phpBB3 server, and still being able to achieve the same damage.
Confused Deputy. Since JavaScript execution in the URL Bar is under the
same context of the current page, the attacker can send malicious requests from
there to the remote server and valid cookie will be automatically appended
by browser. It is impossible for the remote server to distinguish the malicious
requests from benign ones, leading to the Confused Deputy attack. All the mentioned protection mechanisms in phpBB3 will be defeated as well since malicious
requests are sent from exactly the same browser (defeating browser validation)
on the same mobile device (defeating session IP validation) with all the valid
cookie value appended (defeating HttpOnly cookie).

Fig. 3. Integrity Compromise on Google Website

Integrity Compromise. In this scenario, the attacker can modify the value
of any field on the current page in an unauthorized or undetected manner. Even
though the correct value will recover after refreshing the page, data integrity

Attacks on Android Clipboard

7

has already been compromised since accuracy and consistency of data cannot be
maintained and assured over its entire life-cycle. Figure 3 shows how attackers
can advertise themselves on Google home page within the current interactive
session on the victim user’s mobile browser.

Fig. 4. Privacy Leakage on Facebook Application

Privacy Leakage. With the JavaScript injection attack on mobile browsers’
URL Bar, attackers are able to steal sensitive information from victims, leading to Privacy Leakage. The most straightforward attack tries to steal the information of the browser itself, including type, version, resolution, history and
bookmarks. Moreover, leveraging on the HTML5 technology, advanced attackers
could also steal victim’s GeoLocation information and everything stored in the
local storage. Figure 4 illustrates the possibility of privacy leakage from Facebook webpage. As it turns out, Facebook even locally stores telephone numbers
of the victim’s friends.
4.2

Cross Site Scripting (XSS) Attack

Different from normal XSS attacks, the clipboard based XSS attack happens
when the victim pastes malicious JavaScript code (manipulated by attackers)
into a vulnerable app. As a result of that, the data pasted from the clipboard
is reflecting the purpose of malicious attackers, while the operations are still
conducted by the trusted device owner.
In our study, we found one vulnerable Android app1 , which has more than
1,000,000 installs. The app itself is developed using standardized web APIs
based on the PhoneGap [16] framework, and thus compatible with various mobile platforms, such as iOS, Android, Windows OS and etc. Unfortunately, its
user profile form has XSS vulnerability. When the owner is creating or updating
his/her profile, if the content is pasted from the clipboard, malicious apps could
launch XSS attacks targeting at the victim app. The vulnerability detection
techniques and potential damages of XSS attacks are well studied in previous
work [27,42,44,51,52], so we leave out the details from this paper.
1

To protect the company, we decide not to disclose its name.

8

4.3

Attacks on Android Clipboard

Cross Origin Invocation Attack

Both Android and iOS support the scheme [4,10] mechanism, through which
cross origin invocation becomes possible, i.e., an app (origin: application) could
be invoked by a URL (origin: web) once it registers the URL’s scheme. On
Android, registration happens by simply declaring an intent filter in the app’s
manifest file. For example, activity with android:scheme=“fbconnect” inside its
intent filter could be launched by fbconnect://... typed of links.
Previous studies [48] have demonstrated the possibility of unauthorized origin
crossing attacks on popular Android apps, such as Facebook and Dropbox. Those
attacks either need to invoke the browser to load a Dialog URL (Facebook)
or trick the victim user to click on a malicious link (Dropbox). However, the
attacking techniques on the clipboard discussed in this paper bring in another
way to conduct such attacks. Malicious apps could simply replace the clipboard
content with the malicious JavaScript code, which simulates a URL redirecting
event to the malicious scheme. Once the code is pasted into browser’s URL bar,
all the attacks work the same way as in [48].
4.4

Dynamic Page Construction

The behavior of pure client-side web apps entirely depends on user interactions.
The sanitizing technique is less likely to be applied, since the input is provided
by the “trusted” device owner and will only stay within the app itself. However,
if the data is copied from the infected clipboard, attackers could potentially
trigger the victim apps to perform privileged operation, assuming corresponding
permissions are granted to the victim app in advance.
In our study, we have analyzed PhoneGap-based apps that do not have a
server side. The reason is that, as an appealing framework for developers targeting at multiple mobile platforms, PhoneGap is relatively new and few security
concerns have been brought into developers’ consideration. The first step of our
analysis is to select candidate apps that potentially have the vulnerabilities. For
that purpose, we download all the Android apps listed in the PhoneGap homepage and exclude the ones requiring an account on the server side. After that,
we search each app for web pages dynamically constructed from user input. The
work could be eased with proper static JavaScript analysis tools. However, due
to the dynamic feature of JavaScript as a programming language, existing static
analysis tools [11,12] are only able to serve as syntax checkers and validators.
Considering the small number of the candidate apps, we decide to manually analyze them one by one, instead of inventing a complicated tool ourselves. Finally,
we paste malicious JavaScript code to vulnerable apps to determine whether
they are indeed vulnerable.
One vulnerable app, called “Get It Done Task List” [8], is found in our
dataset, which has roughly 50,000 installs. It is a simple but powerful to-do list
and project manager, which allows each project to be assigned with a tag, and
multiple tags can be managed together as a “Smart Group”. When creating a

Attacks on Android Clipboard

9

Fig. 5. Attack on the Vulnerable Task Manager App

smart group, the user first selects desired tags. Then the next web page is dynamically constructed with the all the selected tag names. Due to the lack of
sanitizing, if the tag name comes from infected clipboard data, attackers could inject malicious JavaScript code and take advantage of all the registered JavaScript
interfaces inside the victim app, as shown in Figure 5. Considering the newly
arriving PhoneGap framework and our limited app set, the security situation
of the entire Android app market may be worse in the future, if appropriate
attentions are not raised on this issue.
4.5

SQL-Type Code Injection

In Android, web browsing within apps is eased by the WebView [25] technique,
which packages basic functionalities of browsers, such as page rendering, navigation, and JavaScript execution into a class. Applications requiring these browser
functionalities can simply include the WebView library and create an instance
of WebView class. By doing so, apps essentially embed a basic browser in them,
and can thus use it to display web contents and interact with the Web. The interaction is bidirectional: an app can register JavaScript interfaces to its WebView
component so that in the future, web pages can access the app’s functionalities and resources; an app can also directly load JavaScript into WebView via
loadUrl() API. In this section, we only focus on the risks from apps to their WebView components. However, advanced attackers could use the other interaction
channel to communicate back, and thus cause damage on the app side.
The JavaScript code loaded to WebView could be pre-defined in apps’ source
code. Sometimes, however, the need to dynamically construct JavaScript code
and load it to WebView is also legitimate. For example, an app may choose to
use the following JavaScript to provide search functionality on the loaded web
pages in its WebView component:
wv.loadUrl("javascript:search(" + input + ");");

10

Attacks on Android Clipboard

In the example code, search() is a JavaScript API that takes user input as
the search string and return its occurrence. However, the user-provided search
string is not filtered for escape characters. If the user pastes the search string
from the clipboard, attackers could potentially inject malicious JavaScript code
into the vulnerable app, which results in manipulation of the statement running
on the web pages. This attacking technique is quite similar to the well-studied
SQL injection attack, in which malicious SQL statements are inserted into an
entry field for execution.
JSGuard Design and Implementation. There are three key observations
from the vulnerable code above. The first one is regarding the app architecture. It
must have a WebView component incorporated and directly execute JavaScript
code on loaded web pages. The second observation is the specific pattern of
the loaded JavaScript code, which combines pre-defined code, as well as user
input obtained during runtime. The last one is the lack of scrutinizing on user
provided JavaScript code segment. With all the three observations in mind, we
have developed an analysis tool, called JSGuard, to detect this vulnerability
in Android apps on a large scale. JSGuard is based on Androguard [2], which
provides rich functionalities to retrieve various app resources from its APK file.
JSGuard totally contains 160 Lines Of Code (LOC) written in python, and its
underlying logic is depicted in Figure 6.

3rd-party Market
Google Play

Collection
Phase

App Database

Feedback

WebView Component
Detection
Phase

loadUrl(‘javascript:) API
Patterned JavaScript

Determine
Vulnerable App

Verification
Phase

Fig. 6. JSGuard Design

The input is the same app set as used in our clipboard usage analysis. In
the detection phase, we first check the existence of WebView libraries inside
candidate apps. To do that, we open each APK file; disassemble its classes.dex
file and search for WebView class from included packages. Similarly, the use of
loadUrl() API can also be examined. However, in order to determine whether
loadUrl() is used to load normal web URLs or JavaScript, we have to further
decompile the function in which loadUrl() API is invoked, extract the source
code and match “javascript” with the start of loadUrl() argument.

Attacks on Android Clipboard

11

Applications with JavaScript inside loadUrl() are not necessarily vulnerable
since the JavaScript could be pre-defined. The challenge is how to detect dynamic
constructed JavaScript in our static analysis. Our solution comes from another
observation of the decompiled source code: concatenation of String, which is
achieved using “+” operator or “concat” API in Java, are both decompiled as
“.append()”. It should be noted that our detection algorithm so far tries to reduce
the false negative as much as we can, but may mislabel secure apps. From the
security perspective, however, it is more tolerable to have an absolute secure app
labeled as vulnerable for future verification, rather than a vulnerable app that
is considered as secure and put on the market.
Once apps are identified as containing patterned JavaScript, we manually
verify the potential vulnerabilities inside by launching the SQL-type JavaScript
injection attacks mentioned above. The manual verification experience could
further help to improve our detection algorithm. For example, several apps are
mislabeled as vulnerable because of the suspicious JavaScript code pattern inside
the incorporated Admob advertising libraries. However, the appended string
comes from pre-defined advertisement settings and there is no way for attacker
to inject malicious code.
Analysis Results and Case Studies. The detection phase takes around 42
hours to finish, with an average of 20 seconds spending on each app. The result
shows that the use of WebView is pervasive. More than 58% of the analyzed
apps also uses loadUrl() API to execute JavaScript code directly inside web
pages. Even if only considering apps with the vulnerable JavaScript pattern,
1098 (9.4%) need further verification. In our study, we randomly select 100 out
of the 1098 apps and verify the existence of vulnerabilities manually.

Fig. 7. SQL-Type Code Injection Attacks

12

Attacks on Android Clipboard

Two representative vulnerable apps are found. The first one is an e-book
called “Marine Martial Arts MCRP 3-02B” [13], which has roughly 500,000 installs and uses WebView to display the book content. The second one is an
official Samsung app named “Smart TV Now” [20] for its Smart TV product.
Currently, the app has more than 500,000 installs on Google Play market. More
importantly, it is developed by Samsung developers, which are labeled as “TOP
DEVELOPERS” on Google Play. Both vulnerabilities are caused of the “Search
Box” inside the app, which enables user to type in the search text, and then
conducts the search operation. The implementation of the search feature is identical to the example JavaScript code above. Obviously, if the victim pastes the
search string from the clipboard, the attacker could potentially inject malicious
JavaScript code or invoke registered JavaScript interfaces inside the app, as
shown in Figure 7.

5

Injection Attacks - Command

The computing power brought by mobile devices is becoming as competitive as
normal desktops, but in the palm of our hands or in our pockets. Now they are
not only considered as cell phones, but more of tools to help people finish complicated tasks in their daily life and in work. In Android, terminal apps are widely
available on various markets. Based on provided functionalities, they usually fall
into three different categories: Remote Terminal can be used to establish a
connection with remote servers; Device Terminal enables the access to Android’s built-in Linux command line shell; Combined Terminal incorporates
both the functionalities mentioned above. Due to the general lack of physical
keyboard on mobile devices and the complexity of command composition, most
of terminal apps support command copy and paste in common. However, the
support is blind and the source of the pasted command is never validated. It
could be either from a legitimate user copy or from the polluted copy already
manipulated by attackers.
In our study, a total of six popular Android terminal apps are selected and
evenly distributed to each of the three categorizes, as shown in Table 2. Among
them, Android Terminal [5] is the only one that does not support in-app command copy. However, there are various other sources, such as emails and websites,
where victim users can copy commands. The most important observation from
the study is that all the selected apps allow user to paste and execute commands
within their terminals. If the pasted commands have been manipulated by malicious apps installed on the same device, depending on the type of the current
connection session, various attacks could be launched against the remote server
or even the Android device itself.
The damage caused by vulnerable remote terminal apps on the connected
server is self-explained. Basically, attackers could potentially take full control
of the remote server, steal private data or even delete all the important content. On the other hand, if malicious commands are pasted to Android Debug
Bridge (adb) shell provided in device/combined terminal apps, attackers could

Attacks on Android Clipboard

13

Application Name
Type
# of Installs
Copy Paste
Android Terminal Emulator Device Terminal 5,000,000 - 10,000,000 3
3
ConnectBot
Remote Terminal 1,000,000 - 5,000,000 3
3
Android Terminal
Device Terminal
100,000 - 500,000
5
3
JuiceSSH - SSH Client
Combined Terminal 100,000 - 500,000
3
3
Terminal IDE
Combined Terminal 100,000 - 500,000
3†
3
Server Auditor - SSH client Remote Terminal
10,000 - 50,000
3
3
†

Can copy everything in the current terminal, selectively copy is not supported.

Table 2: Study on Android Terminal Applications

successfully perform any built-in operations, assuming the device is rooted so
that each app is running with root privilege. Otherwise, attacker’s capability
will be restricted by the permission set granted to the victim app. Attackers
could also hide themselves from user consent by appending a newline symbol
and the “clear” command. While the newline symbol will force the execution of
malicious commands immediately after user’s paste operation, “clear” command
will remove the execution history from the current terminal window.

6

Injection Attacks - Phishing

Phishing attacks, known as attempts to acquire sensitive information by masquerading as a trustworthy entity [37], have increased exponentially in recent
years [18]. Despite common phishing techniques [15], Android Clipboard makes
it easier for attackers to successfully launch phishing attacks, since mobile users
perform much more copy-paste operations compared to on desktop environment,
leaving attacks plenty of opportunities to redirect users to malicious entities.
Based on different targets, we categorize phishing attacks on Android devices as
shown in Figure 8.

Fig. 8. Mobile Phishing Attacks via the Clipboard

14

Attacks on Android Clipboard

Social Website Phishing. Entry-level attackers could simply replace all the
URLs copied to the clipboard with desired ones, leading to massive advertising.
The assumption is that copied URLs are always lengthy and complicated, so
that it is extremely difficult for user to notice the URL differences before hitting the “Enter”. However, advanced attackers may selectively replace matched
URLs copied to the clipboard. In this case, even if URLs are short and easy to
distinguish, attackers could leverage on some common tricks, such as misspelled
URLs, to succeed in phishing attack. In Figure 8, the malicious app replaces legitimate Facebook URLs with http://www.faceb0ok.com/. It appears as though
the URL will take you to the official Facebook website; actually this URL points
to the “faceb0ok” (i.e. phishing) domain which is controlled by the attacker.
Social Application Phishing. Phishing attacks on mobile platforms could
also be connected with malicious apps using the scheme mechanism mentioned in
section 4.3. Firstly, all the URLs could be replaced with Google Market scheme,
tricking installation of malicious apps from victim users. Moreover, attackers
could design a large number of activities in their malicious apps, with each
activity representing one targeted social app’s appearance. For example, any
app on the device could design an activity that looks exactly like the login page
in the official Facebook app. When a URL belonging Facebook domain is copied
to the clipboard, that app replaces it with proper scheme that could launch its
Facebook-like activity. Most likely, victim users would type in their Facebook
account information, since they are expecting something happen from Facebook,
either in browser or from the “Facebook” (phishing) app.

7

Data Leakage Attacks

Considering various types of sensitive information stored on mobile devices: once
they are copied to the clipboard, malicious apps could easily steal the user’s
private information. In this section, we conduct case studies on three main type
of sensitive data on mobile device to demonstrate the severity of the attack. For
each category, we select the top 30 free apps on Google Play, and study the
possibility of sensitive data leakage. Our results are summarized in Table 3.
As the result shows, three (10%) of the studied third-party Android Contact
apps have the clipboard support, while four (13.3%) of the studied third-party
Android Calendar apps, with at least 2,600,000 installs in total, support event
copying. In order to better cooperate with other apps, they all choose to resolve
the Contact or event information as pure text first and then put on the clipboard.
The situation becomes even worse when it comes to messaging. All the studied
messenger apps, including the built-in one on Android, allow message copying
and pasting. Due to page limit, table 3 leaves out their names. Once the messages
are copied and placed on the clipboard, malicious apps could access them without
declaring the READ SMS permission.

Attacks on Android Clipboard

15

Contact (3/30)
Rank
# of Installs
DW Contacts&Phone&Dialer 8
1,000,000 - 5,000,000
Contact Picker 2.3
9 5,000,000 - 10,000,000
Phone Book ConTacTs
21
100,000 - 500,000
Calendar (4/30)
Rank
# of Installs
Business Calendar Free
6
1,000,000 - 5,000,000
PETATTO CALENDAR
14 1,000,000 - 5,000,000
DigiCal Calendar&Widgets
20
500,000 - 1,000,000
Gemini Calendar
23
100,000 - 500,000
Messenger
Rank
# of Installs
ALL
N/A
N/A

Table 3: Study on Popular Android Apps that could Leak Sensitive Data

8

Discussion

Unlike the desktop environment, Android treats each app as a different user with
different privilege. However, a similar design for the desktop clipboard is blindly
moved to the Android platform without corresponding changes to accommodate
its different security model. In this section, we discuss several potential solutions
from different perspectives, for protecting the clipboard from being abused.
From the User Perspective. In the current Android implementation, when
the user copies data into the clipboard, an alert is displayed. However, the alert is
missing when an app silently manipulates or steals the data using the clipboard
APIs. We argue that a similar warning message, which displays the calling app’s
information, may help users detect malicious apps’ suspicious behaviors. Then
the user can either refuse to paste the injected data from the clipboard, or
simply uninstall the calling app. This protection, however, is passive, which
solely depends on users’ awareness of security and privacy.
From the Developer Perspective. There is always a battle between app features and the security consideration. For example, three studied Contacts apps
add the integral Contact copy feature to enrich their functionalities, and thus
attract more users. However, their security is compromised since they accidentally leak private data to malicious apps. It is challenging to ask app developers
to sacrifice even one feature for security enhancement. In the specific clipboard
case, to protect themselves from the injection attacks, we suggest developers to
do further validation on fields which could take input from the clipboard paste.
From the Android System Perspective. SEAndroid [50] and FlaskDroid [30],
both proposed a flexible Mandatory Access Control (MAC) framework for Android. One advantage of MAC is the ability to confine privileged Android system
daemons and access to system resources by apps. By extending their policy enforcement, access to the clipboard service could be restricted to certain apps.

16

Attacks on Android Clipboard

9

Related Work

9.1

Desktop Clipboard Security

Attacks caused by the clipboard on desktop environment have been observed
in past few years, such as self-XSS attack [21] and hijacking attack [6] through
Adobe Flash-based ads. Several solutions [7,14] have been proposed and implemented to mitigate the problems above. However, it has been demonstrated
that attackers are still able to bypass the protection on Chrome [22]. Our work
is similar to them in exploiting vulnerabilities inside an app via the clipboard.
However, our work differs from them in four aspects:
Platform. We focus on mobile platforms, more specifically, Android. Compared
to desktop environment, mobile devices contain more sensitive data of the user,
and thus any security compromise will infer a larger damage on victim users.
Attack Efforts. To carry out the attacks on Desktop, significant social engineering efforts are involved to trick victim users to conduct desired operations.
In contrast, any application installed on the same Android mobile device potentially could launch the attack without requiring any special privilege.
Attack Surface. The attacking surface on mobile devices is larger than on
desktop. The attacks on the desktop clipboard only target at browser or webbased apps. However, in our work, many other apps, such as terminal apps,
Contacts apps, Calendar apps and etc., have been demonstrated to be vulnerable
to attacks through Android Clipboard.
Solutions. Google and other big companies have taken the lead to fix the clipboard problem on desktop environment. However, equivalent efforts are missing
on mobile platforms. Moreover, existing solutions on desktop environment are
limited to specific apps. In our work, we discuss several initial thoughts on fixing
the problem on mobile platforms in general.
9.2

Android System Security

As a relatively new platform, Android is evolving quickly and has attracted
lots of attentions from various research groups. A number of studies have been
conducted on Android system with different security focuses:
System/Application Vulnerabilities.
Several vulnerabilities have been
identified on Android system and applications in recent years. Luo et al. [43]
demonstrated attacks on the communication channel between the app and its
embedded WebView component. Recently, Wang et al. [48] identified unauthorized origin crossing attacks on popular Android apps. Our work focuses on the
risk imposed by a different system component, i.e., Clipboard, in Android, but at
the same time, brings in another way to conduct such attacks. Privilege escalation is another important problem in Android. Previous works [54,29,32,33,34,40]

Attacks on Android Clipboard

17

propose a serious of attacks by leveraging on unguarded public interfaces in vulnerable Android applications. However, Clipboard, as a system public interface
with no protection, is overlooked by all of them.
Privacy Protection. Another line of research on smartphone security is devoted to protecting users’ private information. Zhou et al. [54] analyze a large
number of applications to assess the prevalence of content provider vulnerabilities in Android. At the same time, several systems have been developed to prevent malicious applications from leaking user privacy, including TaintDroid [35],
AppFence [41], Aurasium [53], etc. Our work differs from them by focusing on
the clipboard. Moreover, data leakage attacks mentioned in this paper are based
on normal apps’ legitimate functionalities and do not require any permissions
from malicious apps. However, techniques from existing work can be applied to
detect the unauthorized access to Android Clipboard.
It should be noted that Fahl et al. [36] also mentioned the credential stealing attack on Android Clipboard, but only focus on password manager apps.
In contrast, our work extends credential stealing to general data leakage problem in Android. More importantly, we have proposed three additional attacks
via Android Clipboard, including JavaScript injection, command injection and
phishing. After demonstrating their feasibility, we provide a systematic analysis
on vulnerable apps to assess the prevalence.
Privilege Restriction. Several work have been proposed to restrict the app’s
privilege. While Apex [45] allows users to selectively grant permissions to applications during the installation, Saint [46] goes further by governing runtime permission use as dictated by application provider policy. At the same time, several
ideas have been proposed to defeat privilege-escalation attacks, including WoodPecker [40], PScount [26], DroidChecker [31], XMandDroid [28], Stowaway [38],
and the work developed by Felt et al. [39]. Moreover, AdDroid [47], AdSplit [49]
and AFrame [55] restrict the untrusted third-party component, i.e., advertisement, inside the application. All the attacks discussed in this paper are caused
by the ability of an application to arbitrarily access the clipboard in Android.
We consider it as a privilege escalation problem, and further argue that a specific
privilege restriction framework should exist for the clipboard as well.
Mandatory Access Control. Recent studies, including SEAndroid [50] and
FlaskDroid [30], both proposed a flexible Mandatory Access Control (MAC)
framework for Android. With the MAC support, a more strict and system-wide
policy could be enforced to restrict the access to Android Clipboard.

10

Conclusion

In this paper, we assess the current security situation of Android Clipboard by
examine its usage in 16,000 benign apps and 3,987 malicious apps. Based on
the risk assessment, we formulate a series of attacks and categorize them into
two groups, i.e., manipulation and stealing. Clipboard data manipulation may

18

Attacks on Android Clipboard

lead to code injection attacks and phishing attacks. Data stealing happens when
sensitive data or reference is copied to the clipboard. The presence of vulnerable
apps as well as a variety of attack types reflects the severity of the risks imposed
by Android Clipboard. As a result of that, we suggest developers to be cautions
of dealing with the clipboard data. In our future work, we will pursue the idea
of designing a privilege restriction framework specific for Android Clipboard.

11

Acknowledgement

We would like to thank the anonymous reviewers for their valuable comments.
This work was supported in part by NSF Grants 1017771 and 1318814. Any
opinions, findings, conclusions or recommendations expressed in this material
are those of the authors and do not necessarily reflect the views of the NSF.

References
1. About the Clipboard. http://msdn.microsoft.com/en-us/library/windows/
desktop/ms649012(v=vs.85).aspx.
2. AndroGuard. http://code.google.com/p/androguard/.
3. Android Malware Genome Project. http://www.malgenomeproject.org/.
4. Android Scheme. http://developer.android.com/reference/org/apache/http/
conn/scheme/Scheme.html.
5. Android Terminal.
https://play.google.com/store/apps/details?id=com.
linxmap.androidterminal&hl=en.
6. Clipboard Hijack Attack.
http://whatis.techtarget.com/definition/
clipboard-hijack-attack.
7. Firefox Disallows javascript in its URL Bar. https://bugzilla.mozilla.org/
show_bug.cgi?id=656433.
8. Get It Done Task List. https://play.google.com/store/apps/details?id=com.
marcucio.getitdone&hl=en.
9. HttpOnly. https://www.owasp.org/index.php/HttpOnly.
10. iOS SDK: Working with URL Schemes.
http://mobile.tutsplus.com/
tutorials/iphone/ios-sdk-working-with-url-schemes/.
11. JSLint. http://www.jslint.com/.
12. JSure. https://github.com/berke/jsure.
13. Marine Martial Arts MCRP 3-02B. https://play.google.com/store/apps/
details?id=com.appopus.MCRP_3_02B&hl=en.
14. Pasting a javascript: url from the omnibar removes the protocol. http://code.
google.com/p/chromium/issues/detail?id=85232.
15. Phishing Techniques. http://www.phishing.org/phishing-techniques/.
16. PhoneGap: Easily create apps using the web technologies you know and love:
HTML, CSS and JavaScript. http://phonegap.com.
17. phpBB. https://www.phpbb.com/.
18. RSA’s October Online Fraud Report 2012 including summary of Phishing and
Social Networking. http://brianpennington.co.uk/2012/10/25/rsas-octoberonline-fraud-report-2012-including-summary-of-phishing-and-socialnetworking/.

Attacks on Android Clipboard

19

19. Same-origin policy. http://en.wikipedia.org/wiki/Same-origin_policy.
20. Samsung Smart TV Now. https://play.google.com/store/apps/details?id=
com.samsung.videocloud.
21. Self-XSS Attack Explained.
https://www.facebook.com/photo.php?v=
956977232793.
22. Self XSS protection bypass to paste and execute Javascript in the address-bar.
https://code.google.com/p/chromium/issues/detail?id=123213.
23. Statistics and Facts about Android. http://www.statista.com/topics/876/
android/.
24. Y. Aafer, W. Du, and H. Yin. DroidAPIMiner: Mining API Level Features for
Robust Malware Detection in Android. In Proceedings of the 9th International
Conference on Security and Privacy in Communication Networks (SecureComm),
Sydney, Australia, September 25-27 2013.
25. Android-Team. WebView Class Reference. http://developer.android.com/
reference/android/webkit/WebView.html.
26. K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout: analyzing the Android
permission specification. In Proceedings of the 2012 ACM conference on Computer
and communications security, 2012.
27. P. Bisht and V. N. Venkatakrishnan. XSS-GUARD: Precise Dynamic Prevention
of Cross-Site Scripting Attacks . In DIMVA 2008.
28. S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-R. Sadeghi. XManDroid: A
New Android Evolution to Mitigate Privilege Escalation Attacks. Technical report,
Technische UniversitÃt Darmstadt, 2011.
29. S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A. R. Sadeghi, and B. Shastry. Towards Taming Privilege-Escalation Attacks on Android. In Proceedings of the 19th
Annual Network & Distributed System Security Symposium (NDSS), San Diego,
California, USA, Feb. 2012.
30. S. Bugiel, S. Heuser, and A. R. Sadeghi. Flexible and fine-grained mandatory
access control on android for diverse security and privacy policies. In 22nd USENIX
Security Symposium (USENIX Security ’13). USENIX, Aug. 2013.
31. P. P. F. Chan, L. C. K. Hui, and S. M. Yiu. DroidChecker: analyzing Android
applications for capability. In Proceedings of the fifth ACM conference on Security
and Privacy in Wireless and Mobile Networks, 2012.
32. E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing Inter-Application
Communication in Android, June 2011.
33. L. Davi, A. Dmitrienko, A. Sadeghi, and M. Winandy. Privilege Escalation Attacks on Android. In Proceedings of the 17th ACM Conference on Computer and
Communications Security, Chicago, IL, USA, Oct. 2010.
34. M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire: lightweight
provenance for smart phone operating systems. In Proceedings of the 20th USENIX
conference on Security symposium, 2011.
35. W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth.
TaintDroid: an information-flow tracking system for realtime privacy monitoring on
smartphones. In Proceedings of the 9th USENIX conference on Operating systems
design and implementation, 2010.
36. S. Fahl, M. Harbach, P. Yakovleva, T. Muders, and M. Smith. Hey, you, get off of
my clipboard - on how usability trumps security in android password managers.
In In proceeding of 17th International Conference on Financial Cryptography and
Data Security, 2013.
37. A. Felt and D. Wagner. Phishing on Mobile Devices. In WEB 2.0 SECURITY
and PRIVACY (W2SP 2011), 2011.

20

Attacks on Android Clipboard

38. A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android permissions
demystified. In Proceedings of the 18th ACM conference on Computer and communications security, 2011.
39. A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission redelegation: attacks and defenses. In Proceedings of the 20th USENIX conference
on Security symposium, 2011.
40. M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of Capability
Leaks in Stock Android Smartphones. In Proceedings of the 19th Annual Network
& Distributed System Security Symposium, 2012.
41. P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These aren’t the
droids you’re looking for: retrofitting android to protect data from imperious applications. In Proceedings of the 18th ACM conference on Computer and communications security, 2011.
42. M. Johns. SessionSafe: Implementing XSS Immune Session Handling. In ESORICS
2006.
43. T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on WebView in the Android
System. In Annual Computer Security Applications Conference (ACSAC), 2011.
44. M. Martin and M. S. Lam. Automatic Generation of XSS and SQL Injection
Attacks with Goal-Directed Model Checking. In USENIX-SS 2008.
45. M. Nauman, S. Khan, and X. Zhang. Apex: extending Android permission model
and enforcement with user-defined runtime constraints. In Proceedings of the 5th
ACM Symposium on Information, Computer and Communications Security, 2010.
46. M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. Semantically Rich
Application-Centric Security in Android. In Proceedings of the 2009 Annual Computer Security Applications Conference, 2009.
47. P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. AdDroid: Privilege Separation
for Applications and Advertisers in Android. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, 2012.
48. X. W. Rui Wang, Luyi Xing and S. Chen. Unauthorized Origin Crossing on Mobile Platforms: Threats and Mitigation. In ACM Conference on Computer and
Communications Security (ACM CCS), Berlin, Germany, 2013.
49. S. Shekhar, M. Dietz, and D. S. Wallach. AdSplit: Separating Smartphone Advertising from Applications. In Proceedings of the 21st USENIX conference on
Security symposium, 2012.
50. S. Smalley and R. Craig. Security Enhanced (SE) Android: Bringing Flexible MAC
to Android. In 20th Annual Network and Distributed System Security Symposium
(NDSS ’13), San Diego, CA, Feb. 2013.
51. M. Ter˜Louw, P. Bisht, and V. N. Venkatakrishnan. Analysis of Hypertext Isolation
Techniques for {XSS} Prevention. In Web 2.0 Security and Privacy 2008, May
2008.
52. G. Wassermann and Z. Su. Static detection of cross-site scripting vulnerabilities.
In ICSE 2008.
53. R. Xu, H. Saı̈di, and R. Anderson. Aurasium: practical policy enforcement for
Android applications. In Proceedings of the 21st USENIX conference on Security
symposium, 2012.
54. X. J. Yajin Zhou. Detecting Passive Content Leaks and Pollution in Android
Applications. In Proceedings of the 20th Network and Distributed System Security
Symposium (NDSS), San Diego, CA, Feb. 2013.
55. X. Zhang, A. Ahlawat, and W. Du. AFrame: Isolating Advertisements from Mobile
Applications in Android. In Proceedings of the 29th Annual Computer Security
Applications Conference (ACSAC), New Orleans, Louisiana, USA, Dec. 2013.