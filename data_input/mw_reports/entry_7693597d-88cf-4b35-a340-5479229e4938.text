itaymigdal/Nimbo-C2
github.com/itaymigdal/Nimbo-C2
itaymigdal

Nimbo-C2

Nimbo-C2
About
Features
Installation
Easy Way
Easier Way
1/6

Usage
Main Window
Agent Window
Credits
TODO
Modules
Misc

About
Nimbo-C2 is yet another (simple and lightweight) C2 framework.

Nimbo-C2 agent currently supports Windows x64 only. It's written in Nim, with some usage of
.NET (by dynamically loading the CLR to the process). Nim is powerful, but interacting with
Windows is much easier and robust using Powershell, hence this combination is made.
All server components are written in Python:
HTTP listener that manages the agents.
Builder that generates the agent payloads.
Nimbo-C2 is the interactive C2 component that rule'em all!
I developed Nimbo-C2 in the past several months mainly at the late evenings while working
at my day job and waking up at nights to my boy, in order to learn and maybe contribute my
part to the cyber community
.

ðŸ’ª

2/6

My work wouldn't be possible without the previous great work done by others, listed under
credits.

Features
Build EXE, DLL payloads.
Packing payloads using UPX and obfuscate the PE section names ( UPX0 , UPX1 ) to
make detection and unpacking harder.
Encrypted HTTP communication (AES in CBC mode, key hardcoded in the agent and
configurable by the config.jsonc ).
Auto-completion in the C2 Console for convenient interaction.
In-memory Powershell commands execution.
File download and upload commands.
Built-in discovery commands.
Screenshot taking and clipboard stealing.
Memory evasion techniques like NTDLL unhooking, ETW & AMSI patching.
LSASS and SAM hives dumping.
Shellcode injection.
Persistence capabilities.
UAC bypass methods.
And more !

Installation
Easy Way
1. Clone the repository and cd in
git clone https://github.com/itaymigdal/Nimbo-C2
cd Nimbo-C2

1. Build the docker image
docker build -t nimbo-dependencies .

1. cd again into the source files and run the docker image interactively, expose port 80
and mount Nimbo-C2 directory to the container (so you can easily access all project
files, modify config.jsonc , download and upload files from agents, etc.). For Linux
replace ${pwd} with $(pwd) .
cd Nimbo-C2
docker run -it --rm -p 80:80 -v ${pwd}:/Nimbo-C2 -w /Nimbo-C2 nimbo-dependencies

Easier Way
3/6

git clone https://github.com/itaymigdal/Nimbo-C2
cd Nimbo-C2/Nimbo-C2
docker run -it --rm -p 80:80 -v ${pwd}:/Nimbo-C2 -w /Nimbo-C2 itaymigdal/nimbodependencies

Usage
First, edit config.jsonc for your needs.
Then run with: python3 Nimbo-C2.py
Use the help command for each screen, and tab completion.

Main Window
Nimbo-C2 > help
--== Agent ==-agent list
agent interact <agent-id>
agent remove <agent-id>

->
->
->

list active agents
interact with the agent
remove agent data

--== Builder ==-build exe
build dll

->
->

build exe agent (-h for help)
build dll agent (-h for help)

--== Listener ==-listener start
listener stop
listener status

->
->
->

start the listener
stop the listener
print the listener status

--== General ==-cls
help
exit

->
->
->

clear the screen
print this help message
exit Nimbo-C2

Agent Window

4/6

Nimbo-2 [d337c406] > help
--== Send Commands ==-cmd <shell-command>
iex <powershell-scriptblock>

->
->

execute a shell command
execute in-memory powershell command

->

download a file from the agent (wrap

->

upload a file to the agent (wrap paths

--== Discovery Stuff ==-pstree
checksec

->
->

show process tree
check for security products

--== Collection Stuff ==-clipboard
screenshot

->
->

retrieve clipboard
retrieve screenshot

->

dump lsass.exe [methods:

->

dump sam,security,system hives using

->

inject shellcode to remote process

->
->
->

unhook ntdll.dll
patch amsi out of the current process
patch etw out of the current process

->

set run key (will try first hklm, then

->

persist using silent process exit

->

elevate session using the fodhelper

->

elevate session using the sdclt uac

->

pop a message box (blocking! waits for

->

speak using sapi.spvoice com interface

->
->

change sleep time interval and jitter
clear pending commands

--== File Stuff ==-download <remote-file>
path with quotes)
upload <loal-file> <remote-path>
with quotes)

--== Post Exploitation Stuff ==-lsass <method>
direct,comsvcs] (elevation required)
sam
reg.exe (elevation required)
shellc <raw-shellcode-file> <pid>
--== Evasion Stuff ==-unhook
amsi
etw
--== Persistence Stuff ==-persist run <command> <key-name>
hkcu)
persist spe <command> <process-name>
technique (elevation required)
--== Privesc Stuff ==-uac fodhelper <command> <keep/die>
uac bypass technique
uac sdclt <command> <keep/die>
bypass technique
--== Interaction stuff ==-msgbox <title> <text>
enter press)
speak <text>
--== Communication Stuff ==-sleep <sleep-time> <jitter-%>
clear

5/6

collect
kill
take place)
--== General ==-show
back
cls
help
exit

->
->

recollect agent data
kill the agent (persistence will still

->
->
->
->
->

show agent details
back to main screen
clear the screen
print this help message
exit Nimbo-C2

Credits
OffensiveNim - Great resource that taught me a lot about leveraging Nim for implant
tasks. Some of Nimbo-C2 agent capabilities are basically wrappers around
OffensiveNim modified examples.
Python-Prompt-Toolkit-3 - Awsome library for developing python CLI applications.
Developed the Nimbo-C2 interactive console using this.
ascii-image-converter - For the awsome Nimbo ascii art.
All those random people from Github & Stackoverflow that I copy & pasted their code
.

ðŸ˜˜
TODO

Modules
Improve Unhooking and patching by using syscalls.
Run .NET assemblies.
Migrate to another process (Meterpreter-like).
Getsystem.
Collect installed software.
Zip & exfiltrate folder.
Find sensitive files by keywords / regex search.

Misc
Develop Proxy awareness for the agent.
Add option to sign PE agent with digital signature. Some very nice Github projects do
that to lower detection.
Support shellcode payload type.
Support more packers.

6/6