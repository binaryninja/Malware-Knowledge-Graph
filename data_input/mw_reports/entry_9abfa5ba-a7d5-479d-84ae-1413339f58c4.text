Extracting Shellcode in ICEID .PNG Steganography
tccontre.blogspot.com/2021/01/

In this past few days I stumble to some new and old variant of ICEID malware that uses .png steganography to hide
and execute its encrypted shellcode. In this article I will share how the structure of the Iceid png payload look like and
how to extract its encrypted shellcode.

Loader Compression:
same as the other malware, IceID Loader changes its Crypter to execute its main module in memory. From old variant
where the encrypted code stub and decryption module is place in the RSRC section as a data .rsrc entry (RC4
encrypted) to applib compression like the figure below.

1/7

figure 1: The aplib decompressed module of ICEID

PNG Header:
Before we deal with the ICEID PNG steganography, I think it is a good idea to have some preview what PNG file
header format is. It will give as a clear preview how ICEID parse the .PNG header and look for its encrypted
shellcode.
The PNG file format started with 8-bytes signature header "89 50 4e 47 0d 0a 1a 0a". after this header is a chunk
structure or series of chunk structures that contains either a "critical chunks" like "IHDR", "IDAT" and etc... or
"Ancillary chunks" that may contain some attribute related to the color, pixel or metadata of the png file like "sRGB",
"gAMA" and many more.
each PNG chunks layout consist of 4 parts or 4 structure member. the figure below show the 4 parts in IHDR chunk
type.

figure 2: PNG File header Format

ICEID PNG Module Decryptor:
Now that we have some insight how PNG file format look like, lets dive in to the ICEID PNG decryptor module ("let's
call it PNG module") that we already extracted earlier in the memory. This part is really interesting especially in
parsing the header. :)
The PNG module start by executing a thread that will do the following:
1. decrypt its data section (C&C url link) using same approach how it decrypt the shellcode in PNG payload file.
2. it will check the existence of the PNG file in %appdata%<randomname>/, if not
3. it will try to download it to its C&C server
4. then it will parse and check the png file to extract and execute its shellcode.

2/7

The first task is decrypting the C&C server URL link that are place in data section that are encrypted in RC4 algorithm.
the structure of data it used in decrypting this data section can be seen before a call function that will do the
decryption part.

figure 3: Encrypted Data Structure
The first 8 bytes of the encrypted data section is the RC4 key and the rest is the encrypted data.

figure 4: decrypting C&C server URL link

Next it will create a random name folder in %appdata% using the "username" of the infected machine.
with the use of RDTSC command to generate random character. If the module didn't find the png payload in the said
folder it will try to contact the C&C server to download it.

3/7

figure 5: looking for the PNG payload file

Parsing PNG Header:
after reading the PNG and save it in the memory, it will start the checking in offset 0x8 (skipping the PNG header)
which is the "chunk_data_length" of the first chunk type in the header which in our case is "IHDR". The way how it
parse the header to look for "IDAT" chunk_type structure is by adding:
next_chunk_type_struct = size(chunk_data) + chunk_data_length (4 bytes) + chunk_type (4byes) +
chunk_crc32 (4 bytes)
except for the start chunk_type structure where you need to include or add the PNG header size which 8 bytes.
for this topic, I created a simple python script that will parse this header and give you the basic information about the
header. it also parse the chunk_data but I place it in the debug.log of this script.
https://github.com/tccontre/KnowledgeBase/tree/main/malware_re_tools/iceid_stego_shell_decryptor

figure 6: parsing the header

Byte Flag and Decryption Key:
as soon as it found the IDAT chunk_type structure it will check first if the chunk_data_length > 5 then it will skip the
chunk_data_length , chunk_type and chunk_crc32 by adding 0x0c to the current pointer of the "IDAT" chunk
header. the byte in this position looks like a validity flag of the PNG. If this byte is zero, the PNG module will check
another value which is one of the parameter to the function that parse the png header which is also zero, so in this
case it will exit the flag.

4/7

figure 7: byte flag
after this byte is the 8 byte RC4 decryption key followed by the encrypted shellcode using this RC4 key. the python
script I mentioned earlier will parse the RC4 key, extract the shellcode and check the shellcode header and entrypoint
by dis-assembling it using capstone python library.

5/7

figure 8: script tool parser

Conclusion:
In this analysis we learned how PNG file can be used as a weapon to hide the malicious code and how malware
keeps on updating their tools to bypassed detection.
Also thanks to the community for sharing the samples :)

Samples:
sha1: 9a07f8513844e7d3f96c99024fffe6e891338424
6/7

sha1: 1ab6006621c354649217a011cd7ca8eb357c3db4
sha1: c1faa9cb4aa7779028008375e7932051ee786a52
sha1: 481bc0cbdcae1cd40b70b93388bf4086781b44b4
https://www.virustotal.com/gui/file/45520a22cdf580f091ae46c45be318c3bb4d3e41d161ba8326a2e29f30c025d4/details
https://www.virustotal.com/gui/file/e6e0adcc94c3c4979ea1659c7125a11aa7cdabe24a36f63bfe1f2aeee2c5d3a1/detection
https://www.virustotal.com/gui/file/cc1030c4c7486f5295444acb205fa9c9947ad41427b6b181d74e7e5fe4e6f8a9/details
https://www.virustotal.com/gui/file/f6ea81aaf9a07e24a82b07254a8ed4fcf63d5a8e6ea7b57062f4c5baf9ef8bf2/detection

References:
https://en.wikipedia.org/wiki/Portable_Network_Graphics
http://www.libpng.org/pub/png/spec/1.2/PNG-Structure.html
https://blog.malwarebytes.com/threat-analysis/2019/12/new-version-of-icedid-trojan-uses-steganographic-payloads/
https://www.malware-traffic-analysis.net/2020/12/11/index.html

7/7