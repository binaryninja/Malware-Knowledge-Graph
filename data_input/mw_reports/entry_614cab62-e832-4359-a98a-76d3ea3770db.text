Cobalt Strike: Using Known Private Keys To Decrypt Traffic – Part 2
blog.nviso.eu/2021/10/27/cobalt-strike-using-known-private-keys-to-decrypt-traffic-part-2/
October 27, 2021

Blogpost series: Cobalt Strike: Decrypting Traffic
We decrypt Cobalt Strike traffic using one of 6 private keys we found.
In this blog post, we will analyze a Cobalt Strike infection by looking at a full packet capture that was taken during the infection. This analysis
includes decryption of the C2 traffic.
If you haven’t already, we invite you to read part 1 first: Cobalt Strike: Using Known Private Keys To Decrypt Traffic – Part 1.
For this analysis, we are using capture file 2021-02-02-Hancitor-with-Ficker-Stealer-and-Cobalt-Strike-and-NetSupport-RAT.pcap.zip, this is
one of the many malware traffic capture files that Brad Duncan shares on his web site Malware-Traffic-Analysis.net.
We start with a minimum of knowledge: the capture file contains encrypted HTTP traffic of a Cobalt Strike beacon communicating with its team
server.
If you want to know more about Cobalt Strike and its components, we highly recommend the following blog post.
First step: we open the capture file with Wireshark, and look for downloads of a full beacon by stager shellcode.
Although beacons can come in many forms, we can identify 2 major categories:
1. A small piece of shellcode (a couple of hundred bytes), aka the stager shellcode, that downloads the full beacon
2. The full beacon: a PE file that can be reflectively loaded
In this first step, we search for signs of stager shellcode in the capture file: we do this with the following display filter: http.request.uri matches
“/….$”.

Figure 1:

packet capture for Cobalt Strike traffic
We have one hit. The path used in the GET request to download the full beacon, consists of 4 characters that satisfy a condition: the bytevalue of the sum of the character values (aka checksum 8) is a known constant. We can check this with the tool metatool.py like this:
1/10

Figure 2: using metatool.py

More info on this checksum process can be found here.
The output of the tool shows that this is a valid path to download a 32-bit full beacon (CS x86).
The download of the full beacon is captured too:

Figure 3: full beacon download
And we can extract this download:

2/10

Figure 4: export HTTP objects

Figure 5: selecting download

EbHm for saving

3/10

Figure 6: saving selected download to disk
Once the full beacon has been saved to disk as EbHm.vir, it can be analyzed with tool 1768.py. 1768.py is a tool that can decode/decrypt
Cobalt Strike beacons, and extract their configuration. Cobalt Strike beacons have many configuration options: all these options are stored in
an encoded and embedded table.
Here is the output of the analysis:

Figure 7: extracting beacon configuration
4/10

Let’s take a closer look at some of the options.
First of all, option 0x0000 tells us that this is an HTTP beacon: it communicates over HTTP.
It does this by connecting to 192.254.79[.]71 (option 0x0008) on port 8080 (option 0x0002).
GET requests use path /ptj (option 0x0008), and POST requests use path /submit.php (option 0x000a)
And important for our analysis: there is a known private key (Has known private key) for the public key used by this beacon (option 0x0007).
Thus, armed with this information, we know that the beacon will send GET requests to the team server, to obtain instructions. If the team
server has commands to be executed by the beacon, it will reply with encrypted data to the GET request. And when the beacon has to send
back output from its commands to the team server, it will use a POST request with encrypted data.
If the team server has no commands for the beacon, it will send no encrypted data. This does not necessarily mean that the reply to a GET
request contains no data: it is possible for the operator, through profiles, to masquerade the communication. For example, that the encrypted
data is inside a GIF file. But that is not the case with this beacon. We know this, because there are no so-called malleable C2 instructions in
this profile: option 0x000b is equal to 0x00000004 -> this means no operations should be performed on the data prior to decryption (we will
explain this in more detail in a later blog post).
Let’s create a display filter to view this C2 traffic: http and ip.addr == 192.254.79[.]71

Figure 8: full

beacon download and HTTP requests with encrypted Cobalt Strike traffic
This displays all HTTP traffic to and from the team server. Remark that we already took a look at the first 2 packets in this view (packets 6034
and 6703): that’s the download of the beacon itself, and that communication is not encrypted. Hence, we will filter these packets out with the
following display filter:
http and ip.addr == 192.254.79.71 and frame.number > 6703
This gives us a list of GET requests with their reply. Remark that there’s a GET request every minute. That too is in the beacon configuration:
60.000 ms of sleep (option 0x0003) with 0% variation (aka jitter, option 0x0005).

5/10

Figure 9: HTTP

requests with encrypted Cobalt Strike traffic
We will now follow the first HTTP stream:

Figure 10: following HTTP stream

Figure 11: first HTTP stream

This is a GET request for /ptj that receives a STATUS 200 reply with no data. This means that there are no commands from the team server for
this beacon for now: the operator has not issued any commands at that point in the capture file.

6/10

Remark the Cookie header of the GET request. This looks like a BASE64 string:
KN9zfIq31DBBdLtF4JUjmrhm0lRKkC/I/zAiJ+Xxjz787h9yh35cRjEnXJAwQcWP4chXobXT/E5YrZjgreeGTrORnj//A5iZw2TClEnt++gLMyMHwgjsnvg
That value is encrypted metadata that the beacon sends as a BASE64 string to the team server. This metadata is RSA encrypted with the
public key inside the beacon configuration (option 0x0007), and the team server can decrypt this metadata because it has the private key.
Remember that some private keys have been “leaked”, we discussed this in our first blog post in this series.
Our beacon analysis showed that this beacon uses a public key with a known private key. This means we can use tool cs-decrypt-metadata.py
to decrypt the metadata (cookie) like this:

Figure 12: decrypting beacon metadata
We can see here the decrypted metadata. Very important to us, is the raw key: caeab4f452fe41182d504aa24966fbd0. We will use this key to
decrypt traffic (the AES adn HMAC keys are derived from this raw key).
More metadata that we can find here is: the computername, the username, …
We will now follow the HTTP stream with packets 9379 and 9383: this is the first command send by the operator (team server) to the beacon:

Figure 13: HTTP stream with encrypted

command
Here we can see that the reply contains 48 bytes of data (Content-length). That data is encrypted:

7/10

Figure 14: hexadecimal view of HTTP stream

with encrypted command
Encrypted data like this, can be decrypted with tool cs-parse-http-traffic.py. Since the data is encrypted, we need to provide the raw key (option
-r caeab4f452fe41182d504aa24966fbd0) and as the packet capture contains other traffic than pure Cobalt Strike C2 traffic, it is best to provide
a display filter (option -Y http and ip.addr == 192.254.79.71 and frame.number > 6703) so that the tool can ignore all HTTP traffic that is not C2
traffic.
This produces the following output:

8/10

Figure 15: decrypted commands and results
Now we can see that the encrypted data in packet 9383 is a sleep command, with a sleeptime of 100 ms and a jitter factor of 90%. This means
that the operator instructed the beacon to beacon interactive.
Decrypted packet 9707 contains an unknown command (id 53), but when we look at packet 9723, we see a directory listing output: this is the
output result of the unknown command 53 being send back to the team server (notice the POST url /submit.php). Thus it’s safe to assume that
command 53 is a directory listing command.
There are many commands and results in this capture file that tool cs-parse-http-traffic.py can decrypt, too much to show here. But we invite
you to reproduce the commands in this blog post, and review the output of the tool.
The last command in the capture file is a process listing command:

9/10

Figure 16: decrypted process listing command and result
Conclusion
Although the packet capture file we decrypted here was produced more than half a year ago by Brad Duncan by running a malicious Cobalt
Strike beacon inside a sandbox, we can decrypt it today because the operators used a rogue Cobalt Strike package including a private key,
that we recovered from VirusTotal.
Without this private key, we would not be able to decrypt the traffic.
The private key is not the only way to decrypt the traffic: if the AES key can be extracted from process memory, we can also decrypt traffic. We
will cover this in an upcoming blog post.
About the authors
Didier Stevens is a malware expert working for NVISO. Didier is a SANS Internet Storm Center senior handler and Microsoft MVP, and has
developed numerous popular tools to assist with malware analysis. You can find Didier on Twitter and LinkedIn.
You can follow NVISO Labs on Twitter to stay up to date on all our future research and publications.

10/10