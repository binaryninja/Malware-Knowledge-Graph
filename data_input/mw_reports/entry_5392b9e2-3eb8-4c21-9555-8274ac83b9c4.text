Diavol the Enigma of Ransomware
medium.com/walmartglobaltech/diavol-the-enigma-of-ransomware-1fd78ffda648
Jason Reaves

March 10, 2022

Jason Reaves
Mar 10
·
4 min read
By: Jason Reaves and Joshua Platt

Diavol ransomware was first publicly reported by Fortinet in July 2021 [1]. The posting included a technical analysis of the file that was
allegedly dropped from a previous engagement in June 2021. According to the blog, the Diavol variant was found along side a Conti (v3)
sample, which had also been spread during the same attack. In a follow-up article by IBM-Xforce, the researchers concluded a stronger link
existed between the development of Diavol and the operators behind Trickbot malware.
While multiple samples have been found in the wild, they appear to contain development artifacts. It was clear the locker was utilized but there
was no mention of a leak site and nothing had been identified publicly. After analyzing the binary, we spotted some interesting infrastructure
and began to investigate. The domain name enigma-hq[.]net stood out and was associated with ‘195.123.221[.]248’. According to passive
DNS records an update had occurred and enigma-hq[.]net was changed to diavol-news[.]net:

Credit:
The HTML revealed a TOR mirror along with the web mirror pointing to ‘diavol-news[.]net’:
<input type="text" id="blogpostsearch-search" class="search" name="BlogPostSearch[search]" placeholder="Search"><p class="helpblock help-block-error"></p><button type="submit"><i class="fa fa-search"></i></button>
</form></div>
</div><div class="col-md-4 search_fix">
<div class="row">
<div
class="col-md-4">
<a class="pull-left" href="https://xhtnringfhbflc6d.onion" ref="noopener
noreferrer">Tor mirror</a>
</div>
<div class="col-md-4">
<a class="pull-center" href="https://diavol-news.net" ref="noopener noreferrer">Web mirror</a>
</div>
</div>
</div>
</div>
</div>

1/6

Diavol Test Leak Site

Technical Overview
Diavol comes with an interesting assortment of code blocks onboard to accomplish various tasks:

The BITMAP objects contain the code while the JPEG objects contain the imports that need to be resolved.

2/6

Loading BITMAP

Fixing imports from JPEG
The objects were previously detailed in the Fortinet blog but here is an overview from our own analysis of a recent sample:

3/6

There is two interesting pieces that we discovered from our analysis, one is that because of the way VSSMOD works you can plug and play
various ways to wipe shadow copies and the other is the way file encryption works.

Shadow copies
For one of the samples we analyzed the shadow copies were wiped using WinAPI which doesn’t appear to be used very often by ransomware:

After calling CreateVssBackupComponents you can use the IVssBackupComponents class [5] which can then be leveraged to delete
snapshots.

Encryption
File encryption in Diavol is interesting, it has a routine for decoding the onboard RSA public key and importing it before encrypting the key that
will be used to encrypt the files. The file encryption key is 2048 bytes long and is randomly generated however the encryption is simply XORing
the files in chunks of 2048:

4/6

Since the file encryption key is being used across multiple files and is simply a XOR operation we can abuse known plaintext vulnerabilities to
recover files.
A = ClearText
B = EncryptedFile1
C = EncryptedFile2
key = A[:2048] ^ B[:2048]
DecodedFileChunk = key[:2048] ^ C[:2048]
We can test this using files from a sandbox run [6] along with a random MSI file which has a semi static first chunk of bytes, it won’t be a clean
decrypt by any means but would prove out our hypothesis:
>>> clear= open(‘a4ce1d7dfc5ab1fdee8cd0eb97d19c88a04deb8fe6b7b58413a9e2c93eb4a79d.msi’, ‘rb’).read()
>>> b = bytearray(open(‘powerpointmui.msi.lock64’, ‘rb’).read())
>>> c = open(‘sharepointdesignermui.msi.lock64’, ‘rb’).read()
>>> key= bytearray(a[:2048])
>>> for i in range(len(test)):
… test[i] ^= b[i]
…
>>> temp = bytearray(c)
>>> for i in range(len(temp)):
… temp[i] ^= test[i%len(test)]
>>> temp[:5000]
bytearray(b’\xd0\xcf\x11\xe0\xa1\xb1\x1a\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x03\x00\xfe\xff\t\x00\x
\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x
<..snip..>
%\x00\x00\x00&\x00\x00\x00\’\x00\x00\x00(\x00\x00\x00)\x80\x00\x00*\x00\x00\x00+\x00\x00\x00,\x80\x00\x00\x00\x00\x00.\x00\x01\x00/\x80\x00\x000\x00\x00\x00=\x00\x02\x01\x12\x00\x00\x007\x80\x00\x00\xcb\x7f\xff\xff5\x00\x00\x006\x00\x00\x007
5\xc5lD)>\xb2D\xd1\xb7\xff\xff\xfe\xff\xff\xff\xfe\xff\xff\xffG\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M
\x15\xc5lD\t;\xe4E@H\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m
\x00\x10\x84\xff\xff\x91\xfb\x00\x00\x12\x05\x00\x00o\x05\xff\xff\x14\xfa\x00\x00\x95\x06\x00\x00\xe9\x06\x00\x00\x97\x07\x00\x00\xe7\x07\x
<..snip..>
\xff7\xffh\xff\xb4\xff\xff\xff\xb7\xff\x8b\xff\xb6\xff\xff\xff\xb1\xffh\xff)\xff\xff\xff\xb3\xff\x8b\xff\xc6\xff\x8b\xff\xad\xff\xff\xff\xac\xff\xff\xff\xaf\xff\xff\xff\
It appears to have worked and since the file encryption key is generated on a per infection basis we simply only need to abuse this technique
to recover 2048 bytes once in order to then recover all the files on the system.

References
1: https://www.fortinet.com/blog/threat-research/diavol-new-ransomware-used-by-wizard-spider
2: https://heimdalsecurity.com/blog/is-diavol-ransomware-connected-to-wizard-spider/

5/6

3: https://securityintelligence.com/posts/analysis-of-diavol-ransomware-link-trickbot-gang/
4: https://labs.vipre.com/conti-ransomware-part-2-utilizing-server-message-block-smb-to-share-infection/
5: https://docs.microsoft.com/en-us/windows/win32/api/vsbackup/nl-vsbackup-ivssbackupcomponents
6: https://app.any.run/tasks/27db4430-59e5-48c5-8191-f3491f13b3c4#
7: https://www.bleepingcomputer.com/news/security/fbi-links-diavol-ransomware-to-the-trickbot-cybercrime-group/

6/6