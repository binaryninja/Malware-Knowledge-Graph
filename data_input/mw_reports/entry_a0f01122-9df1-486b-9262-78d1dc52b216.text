You	  can’t	  see	  me:	  
A	  Mac	  OS	  X	  Rootkit	  uses	  the	  tricks	  you	  haven't	  
known	  yet.	  
Ming-­‐chieh	  Pan,	  Sung-­‐ting	  Tsai.	  Team	  T5.	  
Contact:	  (nanika|tt)@teamt5.org	  

Abstract	  
Attacking	  Mac	  OS	  X	  has	  become	  a	  trend	  as	  we	  see	  more	  and	  more	  malware	  with	  advanced	  
attack	  techniques	  on	  Mac	  OS	  X.	  In	  order	  to	  gain	  persistent	  control	  and	  avoid	  detection,	  
malware	  have	  started	  to	  adopt	  rootkit	  tricks.	  
We	  will	  quickly	  review	  existing	  rootkit	  on	  Mac	  OS	  X,	  including	  both	  user	  and	  kernel	  mode,	  and	  
approaches	  to	  detect	  them.	  In	  the	  major	  part	  of	  the	  presentation,	  we	  will	  disclose	  several	  new	  
and	  advanced	  rootkit	  techniques	  by	  digging	  into	  more	  kernel	  objects	  and	  data	  structures.	  And	  
we	  will	  demonstrate	  how	  to	  evade	  existing	  detection	  and	  memory	  forensics	  tools,	  such	  as	  
Volatility.	  
Not	  only	  hiding	  things,	  tricks	  to	  gaining	  permission	  will	  also	  be	  discussed.	  It	  is	  not	  necessary	  to	  
be	  root	  to	  get	  into	  kernel.	  And	  also,	  we	  will	  introduce	  techniques	  to	  start	  rootkit,	  special	  way	  to	  
load	  kernel	  modules,	  and	  anti-­‐tracing	  techniques.	  
The	  techniques	  we	  introduced	  have	  been	  tested	  on	  Mac	  OS	  X	  10.9.	  There	  are	  new	  security	  
features	  to	  verify	  3rd	  party	  kernel	  modules	  in	  OS	  X	  10.9,	  and	  we	  will	  tell	  you	  how	  do	  we	  bypass.	  
	  
	  

1	  
	  

Table	  of	  Contents	  
Abstract	  ..........................................................................................................................................	  1	  
1.	   Advanced	  Process	  Hiding	  ........................................................................................................	  3	  
1.1	   The	  rubilyn	  Rootkit	  ............................................................................................................	  3	  
1.2	   Detecting	  rubilyn	  Process	  Hiding	  ......................................................................................	  4	  
1.3	   Volatility	  and	  Bypass	  Volatility	  ..........................................................................................	  4	  
1.4	   Launchd	  Magic	  ..................................................................................................................	  5	  
1.5	   Unlink	  a	  job	  in	  Launchd	  .....................................................................................................	  5	  
2.	   A	  Privileged	  Normal	  User	  ........................................................................................................	  6	  
2.1	   Running	  Privileged	  Tasks	  as	  a	  Normal	  User	  ......................................................................	  6	  
2.2	   Host	  Privilege	  ....................................................................................................................	  6	  
2.3	   How	  to	  Get	  Host	  Privilege	  .................................................................................................	  8	  
3.	   Direct	  Kernel	  Task	  Access	  (Read/Write)	  ..................................................................................	  9	  
3.1	   Access	  Tasks	  Objects	  in	  Kernel	  from	  User	  Mode	  ..............................................................	  9	  
4.	   Bypass	  Kernel	  Module	  Verification	  in	  10.9	  ...........................................................................	  10	  
4.1	   Loading	  a	  Kernel	  Module	  ................................................................................................	  10	  
4.2	   kext_request()	  .................................................................................................................	  10	  
5.	   A	  Trick	  to	  Gain	  Root	  Permission	  ............................................................................................	  11	  
6.	   Conclusion	  .............................................................................................................................	  12	  
	  
	  

	  

2	  
	  

1. Advanced	  Process	  Hiding	  
	  

1.1

The	  rubilyn	  Rootkit	  

	  
The	  rubilyn	  rootkit	  was	  released	  on	  full	  disclosure	  in	  2012,	  and	  claimed	  the	  following	  
capabilities:	  
•
•
•
•
•
•
•
•

It	  works	  across	  multiple	  kernel	  versions	  (tested	  11.0.0+)	  
Give	  root	  privileges	  to	  pid.	  
Hide	  files	  /	  folders	  
Hide	  a	  process	  
Hide	  a	  user	  from	  'who'/'w'	  
Hide	  a	  network	  port	  from	  netstat	  
sysctl	  interface	  for	  userland	  control	  
execute	  a	  binary	  with	  root	  privileges	  via	  magic	  ICMP	  ping	  

Although	  it	  is	  already	  2	  years	  old,	  it	  is	  still	  the	  most	  famous	  rootkit	  on	  Mac	  OS	  X.	  
Here	  is	  the	  process	  structure	  in	  kernel:	  

	  
Rubilyn	  uses	  a	  simple	  DKOM	  (direct	  kernel	  object	  modification)	  to	  hide	  processes.	  It	  just	  unlinks	  
p_list	  to	  hide	  process,	  so	  it	  is	  not	  difficult	  to	  detect	  rubilyn	  process	  hiding.	  
	  
3	  
	  

1.2

Detecting	  rubilyn	  Process	  Hiding	  

	  
There	  is	  a	  corresponding	  task	  to	  each	  process,	  and	  tasks	  are	  also	  a	  linked-­‐list	  like	  process	  list.	  

	  

	  
So	  we	  can	  easily	  detect	  rubilyn	  process	  hiding	  by	  listing	  tasks	  and	  comparing	  with	  process	  list.	  
Actually	  rubilyn	  can	  only	  hide	  process	  from	  ‘ps’	  command,	  however	  using	  Active	  Monitor	  can	  
see	  process/task	  that	  hided	  by	  rubilyn.	  
	  

1.3

Volatility	  and	  Bypass	  Volatility	  

	  
Volatility	  is	  a	  well-­‐know	  memory	  forensic	  tool.	  New	  version	  of	  Volatility	  can	  detect	  rubilyn	  
rootkit.	  
After	  some	  study	  on	  Volatility,	  we	  found	  that	  it	  checks	  p_list,	  p_hash,	  p_pglist,	  and	  task.	  So	  we	  
can	  unlink	  p_list,	  p_hash,	  p_pglist,	  and	  task	  list,	  then	  Volatility	  cannot	  detect	  us.	  
Demonstration	  video:	  https://www.youtube.com/watch?v=_QD5YVSZz4U	  
	  

4	  
	  

1.4

Launchd	  Magic	  

	  
In	  previous	  chapters,	  we	  did	  lots	  of	  hard	  works	  in	  kernel	  in	  order	  to	  hide	  process.	  However,	  
there	  is	  a	  trick	  that	  we	  can	  easily	  find	  an	  invisible	  process	  from	  user	  mode!	  
Launchd	  is	  monitoring	  all	  process	  creation	  and	  termination.	  It	  maintains	  a	  job	  list	  in	  user	  mode.	  
‘launchctl’	  is	  the	  tool	  to	  communicate	  with	  launchd.	  It	  can	  easily	  list	  jobs	  like	  this:	  

	  
	  

1.4.1 Unlink	  a	  job	  in	  Launchd	  
	  
Here	  are	  the	  steps	  to	  unlink	  a	  job	  in	  launchd:	  
•
•
•

Get	  root	  permission.	  
Enumerate	  process	  launchd	  and	  get	  launchd	  task.	  
Read	  launchd	  memory	  and	  find	  data	  section	  
5	  

	  

•
•
•
•

Find	  root_jobmgr	  
! Check	  root_jobmgr-­‐>submgrs	  and	  submgrs-­‐>parentmgr	  
Enumerate	  jobmgr	  and	  get	  job	  
Enumerate	  job	  and	  find	  the	  target	  job	  
Unlink	  the	  job	  

	  

2. A	  Privileged	  Normal	  User	  
	  

2.1

Running	  Privileged	  Tasks	  as	  a	  Normal	  User	  

	  
Following	  picture	  shows	  that	  we	  can	  do	  privileged	  tasks	  as	  normal	  user:	  

	  
As	  a	  normal	  user	  vm	  (uid:501),	  we	  successfully	  loaded	  a	  kernel	  module	  ‘nanika.true’.	  How	  did	  
we	  do	  this?	  
	  

2.2

Host	  Privilege	  

	  
In	  Mac	  OS	  X,	  when	  a	  process	  performing	  a	  task	  that	  requires	  permission,	  it	  doesn’t	  check	  uid	  of	  
the	  process,	  instead,	  it	  checks	  if	  the	  task	  is	  granted	  the	  Host	  Privilege.	  

6	  
	  

	  

	  
Here	  is	  a	  list	  of	  the	  things	  we	  can	  do	  with	  host	  privilege:	  

	  
And	  actually	  it	  can	  have	  permission	  to	  control	  a	  tasks	  via	  these	  API:	  
•
•
	  

processor_set_default	  
host_processor_set_priv	  
7	  

•

processor_set_tasks	  

Host	  privilege	  gives	  a	  process	  power	  to	  do	  a	  lot	  of	  things.	  That’s	  the	  reason	  why	  we	  can	  load	  a	  
kernel	  module	  as	  a	  normal	  user.	  	  
	  

2.3

How	  to	  Get	  Host	  Privilege	  

	  
There	  are	  3	  ways	  to	  grant	  host	  privilege	  to	  a	  regular	  process:	  
•

•

Assign	  host	  privilege	  to	  a	  task	  
! Parse	  mach_kernel	  and	  find	  _realhost	  
! Find	  task	  structure	  
! Assign	  permission:	  task-­‐>itk_host	  =	  realhost-­‐>special[2]	  
! Then	  the	  task/process	  can	  do	  privilege	  things.	  
Hook	  system	  call	  (Global)	  
! When	  process	  is	  retrieving	  the	  task	  information,	  make	  it	  return	  with	  host	  privilege.	  
! Patch	  code	  (Global,	  good	  for	  rootkit)	  
! Here	  is	  the	  code	  we	  are	  going	  to	  patch:	  (host_self_trap)	  

!

	  

Patch	  code:	  

8	  
	  

	  

call	  _host_self	  
mov	  rax,	  [rax+0x20]	  
mov	  rdi,	  rax	  
	  

3. Direct	  Kernel	  Task	  Access	  (Read/Write)	  
	  

3.1

Access	  Tasks	  Objects	  in	  Kernel	  from	  User	  Mode	  

	  
Since	  Mac	  OS	  X	  10.6,	  it	  restricted	  task	  access	  for	  kernel	  task.	  According	  to	  this	  report:	  

	  
However,	  we	  discovered	  a	  way	  to	  direct	  access	  kernel	  task	  memory.	  We	  don’t	  use	  
task_for_pid(),	  instead	  we	  use	  processor_set_tasks().	  
•
•

processor_set_tasks(p_default_set_control,	  &task_list,	  &task_count);	  
then,	  task_list[0]	  is	  the	  kernel	  task!	  

We	  can	  control	  all	  of	  tasks	  and	  read	  /	  write	  memory,	  even	  use	  thread_set_state()	  to	  inject	  
dynamic	  libraries.	  
	  

9	  
	  

4. Bypass	  Kernel	  Module	  Verification	  in	  10.9	  
	  

4.1

Loading	  a	  Kernel	  Module	  

	  
In	  Mac	  OS	  10.9,	  if	  you	  want	  to	  load	  a	  kernel	  module	  you	  have	  to:	  
•
•
•

Put	  the	  kernel	  module	  file	  into	  /System/Library/Extensions/	  
Run	  kextload	  to	  load	  the	  file	  
If	  the	  kernel	  module	  is	  not	  signed,	  OS	  will	  pop	  up	  a	  warning	  message.	  

	  
You	  can	  see	  there	  are	  many	  limitations.	  
Surprisingly,	  we	  found	  a	  way	  to	  break	  these	  limitations.	  We	  can:	  
•
•
•
•

Load	  a	  kernel	  module	  from	  any	  path.	  
Load	  a	  kernel	  module	  on	  the	  fly,	  from	  a	  memory	  buffer,	  etc.	  File	  is	  not	  required.	  
Load	  a	  kernel	  module	  without	  verification.	  (no	  warning	  message)	  
No	  need	  to	  patch	  kextd.	  

	  

4.2

kext_request()	  

	  
Using	  kext_reqest()	  to	  load	  kernel	  module,	  we	  can	  bypass	  many	  verifications.	  Following	  are	  
steps	  to	  use	  kext_request():	  
•

Get	  kext	  data	  ready.	  You	  need	  to	  know	  mkext	  

10	  
	  

•

Get	  your	  host	  privilege.	  It	  checks	  the	  privilege.	  

•
•

Call	  kext_request()	  to	  load	  the	  kernel	  module.	  
Then	  you	  won’t	  get	  any	  problems.	  

	  

5. A	  Trick	  to	  Gain	  Root	  Permission	  
	  
We	  mentioned	  many	  techniques	  that	  could	  be	  used	  in	  a	  rootkit.	  However,	  all	  of	  these	  tricks	  
require	  the	  permission.	  We	  noticed	  a	  design	  problem	  that	  could	  be	  leveraged	  by	  malware	  to	  
gain	  root	  permission.	  
11	  
	  

	  

	  

Authorization	  rights	  are	  a	  core	  part	  of	  Mac	  OS	  X's	  security.	  Rights	  determine	  who	  can	  and	  
cannot	  access	  specific	  functionality.	  This	  is	  controlled	  by	  securityd.	  It	  provides	  a	  mechanism	  for	  
applications	  to	  gain	  root	  permission.	  
When	  an	  application	  requires	  root	  permission,	  it	  could	  send	  request	  to	  get	  specific	  right.	  For	  
example:	  
•
•
•
•

system.privilege.admin	  
system.privilege.taskport	  
com.apple.ServiceManagement.daemons.modify	  
com.apple.ServiceManagement.blesshelper	  

Then	  user	  will	  see	  a	  pop	  up	  window	  and	  ask	  for	  password	  to	  confirm.	  
However,	  one	  of	  right	  is	  interesting:	  com.apple.SoftwareUpdate.scan	  
No	  matter	  who	  request	  this	  right,	  user	  will	  see	  a	  window	  like	  this:	  

	  
“security_auth	  is	  trying	  to	  check	  for	  new	  APPLE-­‐PROVIDED	  software”.	  We	  think	  most	  of	  users	  
will	  type	  the	  password	  and	  won’t	  feel	  anything	  wrong.	  After	  typed	  the	  password,	  we	  can	  gain	  
root	  permission.	  
	  

6. Conclusion	  
	  
In	  this	  paper,	  we	  introduced	  several	  tricks	  that	  could	  be	  used	  by	  rootkit.	  
•

Advanced	  Process	  Hiding:	  it	  could	  hide	  processes	  and	  bypass	  detection	  by	  all	  existing	  
security	  software.	  
12	  

	  

•
•
•
•

A	  Privileged	  Normal	  User:	  rootkit	  can	  use	  this	  trick	  to	  create	  a	  ‘normal’	  power	  user.	  It	  
won’t	  be	  noticed	  easily.	  
Direct	  Kernel	  Task	  Access:	  easier	  to	  access	  process	  memory.	  
Loading	  Kernel	  Module	  Without	  Warnings:	  more	  flexible	  way	  to	  load	  rootkit	  modules.	  
A	  Trick	  to	  Gain	  Root	  Permission:	  the	  trick	  might	  be	  used	  by	  malware	  to	  gain	  the	  1st	  
permission.	  

	  

13