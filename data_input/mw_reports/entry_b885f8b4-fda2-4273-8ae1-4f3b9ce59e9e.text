May, 2020

XMRig-based
CoinMiners
by Blue Mockingbird Threat Actor

Contents
Overview ............................................................................................................. 3
Incident Detection ................................................................................................ 4
Forensic Investigation ........................................................................................... 5
Malware Analysis .................................................................................................. 6
DLLs Dropped by w3wp.exe - CVE-2019-18935 Exploitation.................................... 6
Schtasks Backdoor ............................................................................................. 8
XMRig-based CoinMiner ...................................................................................... 9
CoinMiner Installation and Persistence ............................................................... 13
DLL Installer ................................................................................................ 13
WMI Event Subscription ................................................................................ 14
COR Profiler ................................................................................................. 14
Installation Script and Package ...................................................................... 15
Conclusion ......................................................................................................... 20
References ......................................................................................................... 21

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

OVERVIEW
Since the end of March LIFARS DFIR team has observed an increase in the number of
incidents related to Monero cryptocurrency miners. Some of the companies affected by
this type of malware came to us, which prompted us to begin an investigation. Based on
the initial discussion with the clients, we determined a few machines from which to start
our investigation. As we collected and analyzed more and more data about the current
state of the incident as well as the attacker’s abilities, we utilized approaches from
forensic analysis, monitoring and threat hunting.
Reconstructing the attacker's steps and working backwards, we found Patient Zero –
machine, which was first compromised by attackers to gain access to the client network.
LIFARS detected and analyzed the exploitation of CVE-2019-18935 vulnerability in Telerik
Web UI for ASP.NET, lateral movement and the compromise of hundreds of machines in
the internal network, remote backdoors and cryptocurrency miners with multiple
persistence techniques used, including a not as common one based on COR Profilers.
We found the linking between the publicly available exploit for CVE-2019-18935 and the
custom malware used as an installer of CoinMiners. Later we were able to reconstruct the
whole installation and CoinMiner infection process, including the installation artifacts
which had been deleted. Based on our investigation, we confirmed the origin of these
attacks to the Blue Mockingbird group of attackers.
In this case study, we summarize findings and describe some of our methods and
techniques.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

INCIDENT DETECTION
It started inconspicuously, with a high load of computers. At first glance, there seemed
to be no abnormalities, just some updates being applied, but when the local IT staff
verified these machines, they noticed something unusual – abnormally high CPU and
memory usage by svchost and regsvr processes.. Moreover, the svchost processes
corresponded with the “Problem Reports and Solutions Control Panel Support” service
(wercplsupport). Things started to sound odd...
Further inspection showed association and presence of the file wercplsupporte.dll in
System32 directory. Yes, this file tried to mask itself as legitimate wercplsupport.dll, with
the additional letter “e” concatenated to the end. It even contained the fake information
about its origin – Host Process for Windows Services by Microsoft Corporation, as we can
see on Figure 1.

Figure 1. Meta information from wercplsupporte.dll

Forced AV checks with various AV engines reported the file as CoinMiner, or crypto mining
variant. In another step performed by LIFARS, we saw that the extracted strings contain
many occurrences of XMRig substrings (Figure 2), so we had to deal with the infection of
XMRig-based CoinMiner. But the question is, what else did the attacker deploy in the
client network and how did they get access to it.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Figure 2. XMRig in extracted strings of wercplsupporte.dll

FORENSIC INVESTIGATION
While following the usual procedures like antimalware scans and IOC search, reviewing
artifacts of execution and persistence, event logs, searching for connections, etc., we
analyzed the machine with the XMRig-based CoinMiner, and found a couple of malicious
files.
There were multiple XMRig-based DLLs with the same hash, but different names. Most
of them looked randomly generated, but there were also DLLs with the names dialogex.dll,
checkservices.dll and the previously mentioned wercplsupporte.dll inside the System32
folder. While these names look legitimate, they are not standard names of Windows DLLs
(e.g. can be verified in NSRL database). Most of these DLLs used either scheduled tasks
or services for their persistence.
However, one of the random DLLs had a different hash value and it seems that it is a
type of installer; it creates a scheduled task and service for running wercplsupporte.dll
and dialogex.dll.
These CoinMiner-related malicious files as well as the persistence will be covered later in
this case study.
We also found other malware; the batch file called x.bat with PowerShell downloader.
Interesting fact was that it downloaded its payload from the local webserver instead of a
publicly accessible malware distribution point. While the payload was masked as a
JavaScript resource on the internal webserver, it seemed that it was actually a PowerShell
backdoor.
The above-mentioned finding led our investigation to the webserver, where we found
more evidence of attacker presence as well as another piece of the malware-puzzle.
Especially, there were a couple of DLLs in C:\Windows\Temp\ directory with the filename

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

consisting of the Unix-like timestamp (seconds since Jan 01 1970 UTC) and a randomly
generated number. These DLLs were dropped by w3wp.exe (IIS Worker Process). This
aroused suspicion in us that maybe some ASP.NET web app was vulnerable and exploited
by the attackers.

MALWARE ANALYSIS
Let's summarize our findings and results of analysis of malicious artifacts found during
forensic investigation and monitoring.

DLLS DROPPED BY W3WP.EXE - CVE-2019-18935 EXPLOITATION
Beginning with the latest mentioned artifact, these “Unix-like timestamp” DLLs differed
only in very small portion of their content. To be more precise, they differed only in two
embedded strings – the name of the original DLL file from compilation, especially in the
timestamp part of these filenames.

Figure 3. DLLs dropped by w3wp.exe differs only in the original filenameof the DLL

The DLLs were mixed mode assembly, so they contained both the managed and
unmanaged machine instructions and MSIL instructions. The .NET part of the DLL
contains only the Empty class (yes, really empty). On the other hand, in the native code
of DLL main dispatcher it spawned a new thread and created a TCP socket connected to
the attacker Command & Control server on TCP port 443, but without any TLS encryption.
We already had the suspicion that this could be the payload delivered after exploitation
of the ASP.NET vulnerability. Equipped with the knowledge of its purpose, C&C IP address
and similarity in the original build DLL names, we leverage the Threat Intelligence and
found the tool, which produced the same DLLs.
It turns out that these DLLs had been part of the Remote code execution (RCE) exploit
for a .NET JSON deserialization vulnerability CVE-2019-18935 in Telerik UI for ASP.NET
AJAX.
This RCE exploit can be found on https://github.com/noperator/CVE-2019-18935/.
There is a build_dll.bat script in the GitHub repository, which produces the same filenames
as we saw as original build filenames in our samples – concatenated from the base name

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

of the source code file, datetime and architecture. In the repository, the C source code
of the native part of the DLL file is called rev_shell.c, which also matched our case.

Figure 4. Build_dll.bat script which generated the original DLL filenames

In the Figure 4, there is also an empty.cs module, which contains the Empty class, as we
commented before.

Figure 5. The Empty class used in CVE-2019-18935 RCE

Moreover, this exploit uses the same format of remote payload names as we saw:
timestamp.random.dll, as it is clear from the “demo” run:

Figure 6. Demonstration of CVE-2019-18935 exploit

Thus, it seems that we had the culprit – the exploitation of the CVE-2019-18935, and also
had identified Patient Zero. These findings were verified with the client and they
confirmed that they had deployed an obsolete version of Telerik Web UI for ASP.NET,

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

which was vulnerable. Next step was to correlate the timestamps of the exploitation of
the CVE-2019-18935 with logs from network monitoring and proxy servers.

SCHTASKS BACKDOOR
The x.bat batch file was found during the forensic investigation. As we described above,
it contained a PowerShell downloader, which downloaded a string from a JavaScript
resource from the webserver on the local network and executed it. Then, it called InvokeTaskback with the nccat method and the public IP address as the parameter. Because
the Invoke-Taskback is not a cmdlet or function of PowerShell by default, it had to come
from the JavaScript resource. Thus, this resource was probably PowerShell code instead
of JavaScript.
The IP address is worth attention, because it is the same used as the C&C IP address
with the CVE-2019-18935 exploit.

Figure 7. x.bat with PowerShell downloader and nccat backdoor

Let’s move on to the webserver with the JavaScript resource. In fact, it was indeed a
PowerShell script, at last we had our truth. It created a scheduled task with the name
“NetworkDialogs” in our case, which executed the following command:
regsvr32.exe /u /s /i:"c:\windows\temp\scripttempx.tks" scrobj.dll

The file scripttempx.tks contained either msf, cmd or nccat payload. In our case, the
x.bat used this scheduled task for nccat backdoor.
Again, with Threat Intelligence powered with the knowledge gained revealed the most
probable origin of the scheduled task backdoor: the 4 year old Schtasks-Backdoor GitHub
repository available at https://github.com/re4lity/Schtasks-Backdoor with Chinese
comments in Readme file.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Figure 8. Readme of Schtasks-Backdoor GitHub repository

XMRIG-BASED COINMINER
Recall the detection phase and forensic investigation, we were aware of a couple of DLLs
masked as (or wannabe) Windows system DLLs such as wercplsupporte.dll, dialogex.dll,
and checkservices.dll. Verified on the clean systems and also in known files databases
such as NSRL, not only were their hashes present in the databases, but none of the
filenames were known. On the other hand, for most people these filenames look pretty
legitimate mixed with the many other Windows files in System32 directory.

Figure 9. Module wercplsupporte.dll loaded in svchost.exe is unsigned and not found in NSRL

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

These unknown DLL files were accompanied with multiple DLLs with random names, but
all of them (except one) had the same hash.
We proceeded with the brief analysis of the samples with the same hash, which caused
a lot of DNS resolutions of the domain names such as:
•
•
•
•
•

xmr-us-east1.nanopool.org
xmr-us-west1.nanopool.org
xmr-eu1.nanopool.org
pool.minexmr.com
...

So evidently the domain names are associated with the Monero mining pools. Of course,
they could be used as network IOCs for detection of other machines infected with this
CoinMiner.
Also, a string search revealed the origin in XMRig CoinMiner, with exact versions and build
dates. We saw various similar samples collected from our clients and from public
repositories, with build dates between February and April.

Figure 10. Example of the build dates of XMRig-based samples

Again, XMRig is opensource tool available on GitHub, and version 5.3.0 was released in
December 2019, while on Feb 13 2020 there was a version 5.5.3, thus the attackers didn’t
use the most recent version for their attacks. The second example in the Figure 10
contains XMg 10.5.0, however, while XMG could stand for Coin Magi, the XMg miner
10.5.0 is unknown to search engines. Moreover, the second sample shares large portion
of code with XMRig miner, so this could only be a custom name for this miner.
When we look at the code reuse, there are parts shared with XMRig, but most importantly,
this malware sample is attributed to the Blue Mockingbird group, which is known due to
the same kinds of coin mining attacks as we had previously investigated.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Figure 11. Code Reuse of the XMRig-based CoinMiner

There is another thing common for all of these XMRig-based CoinMiner DLLs. All of them
(at least all of we were able to capture) had the exported symbol (function) called
“fackaaxv”. At the very beginning of this exported function the samples created Mutex
called “Samplexn07”, and if this mutex already exists, this function ends.

Figure 12. Part of the disassembly function fackaaxv. It tries to create a mutex "Samplexn07"

We need to mention, this fackaaxv function is also called directly from the
DllRegisterServer exported entry, which is used when this DLL is used as an argument
for regsvr32.exe.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Figure 13. Call (jump) to the fackaaxv from DllRegisterServer() function

This means that even if this DLL is used with regsvr32.exe, the same mutex is created,
and moreover, its exclusivity is guaranteed even if the fackaaxv entry from this DLL is
called via rundll32.exe, for example.

Figure 14. Example of running CoinMiner process with the Mutex “Samplexn07”

That’s malware analysis point of view. Enriched by forensic investigation, we already
knew that these DLLs had been used in scheduled tasks and services, such as the
aforementioned “Problem Reports and Solutions Control Panel Support” service
(wercplsupport). Moreover, there were a couple of scheduled tasks with random names,
which executed the following commands associated with these CoinMiner DLLs:
•
•
•
•
•

cmd.exe /c regsvr32.exe /s c:\windows\System32\%RANDOM1%.dll
cmd.exe /c rundll32.exe c:\windows\System32\%RANDOM2%.dll,fackaaxv
cmd.exe /c sc config wercplsupport start=auto & sc start wercplsupport
cmd.exe /c sc start wercplsupport & start regsvr32.exe /s
c:\windows\System32\%RANDOM3%.dll
regsvr32.exe /s c:\windows\System32\wercplsupporte.dll

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

All of these tasks were executed daily, on 08:10, 20:02, 20:15, 20:20 and 20:25. Most of
the tasks had random names, except the last one with the name "Windows Problems
Collection".
And that is not all, there was one more service with a random name on the system, which
executed the following command:
•

cmd /c sc config wercplsupport start= auto & sc start wercplsupport &
copy c:\windows\System32\%result3%.dll
c:\windows\System32\wercplsupporte.dll /y & regsvr32.exe /s
c:\windows\System32\%result3%.dll

COINMINER INSTALLATION AND PERSISTENCE
DLL INSTALLER
The next step was to find what was responsible for the persistence described above. We
had one more DLL with a unique hash, so now it was time to analyze it and try to answer
the question of persistence.
Despite its size of approximately 107kB, this DLL contained only a small portion of regular
functions. Most of the code were known library functions. The biggest one of the regular
functions was the DllMain function, which was really simple – it executed the cmd.exe
with the command for creation of the “Windows Problems Collection” scheduled task,
configuring automatic start of the wercplsupport service, copying dialogex.dll to
wercplsupporte.dll file and starting dialogex.dll via regsvr32.dll.

Figure 15. Persistence in DLLMain function of the “unique” DLL file

We had now found what caused one part of the persistence mechanism for the
CoinMiners, but there were others, unknown to us in this phase of incident response and
analysis. We then decided to start with cleaning the known malicious artifacts, while our
monitoring team was watching what happened as a result of the actions.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

WMI EVENT SUBSCRIPTION
During the process, our monitoring team noticed hits on our watchlist with the known
malicious hashes and filepaths. We saw the execution attempts of following command:
•

cmd.exe /c sc config wercplsupport start= auto & sc start wercplsupport
& copy c:\\windows\\System32\\checkservices.dll
c:\\windows\\System32\\wercplsupporte.dll /y & start regsvr32.exe /s
c:\\windows\\System32\\checkservices.dll

But this time, it seemed that it was caused by WMI. Further investigation revealed the
persistence was attributed to WMI Event Subscription. The attackers registered the Event
Filter with conditions related to the Local Time 20:10. They also registered the Consumer
which executed the above command. And lastly, there was registered Filter to Consumer
Binding present.
With that, one question was answered, but several new questions were raised. How did
they register the WMI persistence? What created the other scheduled tasks and services?
Digging deeper into the WMI-related artifacts, we found a .mof file (Managed Object
Format) with the definition of WMI Event Subscription. This file was parsed by compiler
mofcomp.exe and the defined classes and class instances were added to the WMI
repository.

Figure 16. MOF file with the definitions for WMI Event Subscription

COR PROFILER
We continued with the cleaning of the client's network. We also noticed the presence of
CLSID with the name in the pattern XXX-YYY-YYY-YYY-ZZZ, where the InProcServer32
value contained the ZZZ.dll, where XXX, YYY and ZZZ stands for random numbers linked
to the CoinMiner DLLs and scheduled tasks. So, another question was presented: how
had these CLSIDs been created?

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

To speed up the process of cleaning and because there were hundreds of infected
computers, we created and deployed the PowerShell script for the automation of cleaning
the malicious artifacts.
Suddenly, our monitoring team noticed something unusual... When we executed our
script, the PowerShell process spawned the cmd.exe process which then spawned the
schtasks.exe and tried to create scheduled tasks with persistence of CoinMiner.
Our first suspicion was about process injection – either injection of remote thread or DLL
hijacking, or some of the other known and documented techniques.
During the investigation of this behavior, we used the SysInternals Process Monitor tool
and it captured the events of querying the Registry values related to the malicious CLSID,
followed by loading library – the DLL file with the “unique” hash. The DLL file we already
analyzed and described as the installer.

Figure 17. Loading the malicious DLL observed in Process Monitor

Because the question of why the PowerShell was interested in this particular CLSID was
still unanswered, we continued with the analysis of Process Monitor logs, when we could
say “Heureka” - we noticed the CLSID in the environment variable called COR_PROFILER.
Also, the variable COR_ENABLE_PROFILING had been set to the value 1. This means,
every managed process should be connected to a profiler, and the profiler is defined
either via CLSID in COR_PROFILER (the path is determined from InProcServer32 value
of the CLSID) or via its path in the COR_PROFILER_PATH environment variable.
We also found that these environment variables had been defined in Registry key
HLKM\\SYSTEM\CurrentControlSet\Control\Session Manager\Environment.
There were still many unknowns, but we proceeded one more step. We watched for
changes in the Registry related to the Environment and COR_PROFILER, we could then
use this information for a more targeted Threat Intelligence, etc.
INSTALLATION SCRIPT AND PACKAGE
Soon, we found the culprit of the aforementioned persistence artifacts: the batch file
called rn.bat, which did the following:

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Figure 18. Excerpt from the installation batch file rn.bat

•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•

Stopped legitimate service wercplsupport,
Ping 127.11.11.11,
Replaced legitimate wercplsupport.dll with wercplsupporte.dll associated with the
service wercplsupport,
Configured wercplsupport service as autostart,
Generated six random values used later as filenames and tasknames,
Renamed and moved DLL Installer (referenced as comhij.dll) to %RANDOM%.dll
in System32 directory,
4-times copy CoinMiner (referenced as xg.dll) to %RANDOM%.dll in System32,
3-times copy CoinMiner to System32 (as the dialogex.dll, checkservices.dll and
wercplsupporte.dll),
Created 4 scheduled tasks with random names and commands described above
(they utilized regsvr32.exe, rundll32.exe and sc),
Created aforementioned service with random name,
Set environment variables via “wmic ENVIRONMENT create ...” commands,
Registered CLSID as concatenation of generated random numbers,
Started hijacked wercplsupport service,
Compiled WMI Event Subscriber definition and added it to the WMI repository via
mofcomp.exe,
Ran one of the created scheduled tasks,
Cleaned temporary artifacts – deleted itself as well as “installation” package in the
form of ZIP file.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Together with the rn.bat, we found the batch file called set.bat as well. The purpose of
the set.bat was to extract the “installation” package either in the file set.zip or set.zip.tmp
placed in C:\ProgramData directory and via let.exe program which executed the rn.bat
file. Then the set.bat deleted the extracted content of the package as well as itself.

Figure 19. The extraction batch file set.bat

While most of its content was pretty clear, the purpose of the let.exe program may not
be very obvious for people without experience in pentesting and ethical hacking.
On the other hand, when an experienced pentester saw the commandline arguments of
the let.exe, it resembled the commandline arguments of Juicy Potato, a Local Privilege
Escalation tool, from a Windows Service Accounts to NT AUTHORITY\SYSTEM (available
on GitHub at https://github.com/ohpe/juicy-potato).

Figure 20. Usage of Juicy Potato

Just for reference, the given CLSID in set.bat is associated with the winmgmt, while the
Juicy Potato exploit was used for running the rn.bat installation batch file with elevated
privileges of NT AUTHORITY\SYSTEM.
Last but not least, from Threat Intelligence research, we found another DLL file, with the
name that started with the string “nwgold” and a file size of approximately 214 kB. Again,
it was a mixed assembly file, as we saw before in CVE-2019-18935 exploit payload. Again,
it used the same techniques – the empty .NET class, and in the DllMain dispatch function
there was a call to the function which created a new thread and executed a command

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

via cmd.exe, in a very similar manner. Thus, the payload of CVE-2019-18935 exploit and
this “nwgold” dll share non neglected portions of code, especially the parts for the
execution of the malicious activity. There are three possible explanations:
•
•
•

Authors of CVE-2019-18935 exploit and “nwgold” DLL are same,
Authors of “nwgold” DLL inspired themselves from the open source CVE-201918935 exploit,
The functionality of both DLLs is so simple and straightforward, that it is only a
coincidence.

Figure 21. Function for CreateProcessA call and construction of executable path in new thread.
“nwgold” on the left, CVE-2019-18935 payload on the right

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Figure 22. DllMain function.
“nwgold” on the left, CVE-2019-18935 payload on the right

Figure 23. MSIL part of both assemblies – Empty class.
“nwgold” on the left, CVE-2019-18935 payload on the right

From direct comparison of these DLLs it seemed that the main functionality and code
constructs are shared between them, with only a few differences in the used compiler
and platform (x86 vs amd64). Despite the fact that these DLLs were very straightforward,
it was very likely that attackers had inspired in the open source code of CVE-2019-18935
payloads. Especially when we considered the fact that the attackers used mostly open
source tools from GitHub, with only small modifications.
And the last unanswered question was the purpose of “nwgold” DLL. So, in the Thread
function where cmd.exe was executed, it contained the slightly obfuscated construction
of long string.. The content of set.bat batch file, as is depicted in Figure 24.

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

Figure 24. Construction of set.bat’s content

CONCLUSION
LIFARS DFIR team investigated and analyzed the tools, techniques and procedures used
by Blue Mockingbird threat actor. Thankfully to the cooperation of our forensic analysts,
malware analysts, incident responders, threat intelligence researchers and monitoring
team we were able to reconstruct all the parts of the attack chain, as shown in Figure 25,
including the parts which had been deleted even before incident response started.

Figure 25. Diagram of the attack chain

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com

REFERENCES
•
•
•
•
•

https://github.com/noperator/CVE-2019-18935/
https://github.com/re4lity/Schtasks-Backdoor
https://github.com/xmrig/xmrig
https://analyze.intezer.com/#/analyses/f5972783-5d57-43ca-8bb3-dca08741936f
https://github.com/ohpe/juicy-potato

244 Fifth Avenue, Suite 2035, New York, NY 10001
LIFARS.com (212) 222-7061 info@lifars.com