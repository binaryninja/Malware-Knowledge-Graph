DEFENSIVE
LAB AGENCY

FinSpy Android technical
analysis

- Amnesty International -
August 2020

ss * & . = ms
a
‘oa” atetetetatetatats
*« . ea e st 8 8 88 8

arate

OO) atate a,

a
2
*
'*
"es
.*
ee
erate

are
.

. -. +8
tat ate te
"se

eee

.
* b
Lm
o%.
on
.

Defensive Lab Agency
31 avenue de Ségur
75007 Paris

contact@defensive-lab.agency





Executive summary

By analyzing the sample we found what we suspect to
be a new version of the FinFisher's malware FinSpy for
Android. Even though the malware behavior and
capabilities seem to be the same as what it has already
been described in the past, this version goes a step
further to hide the malware configuration and its
capabilities. This new version we named DexDen has
very likely been released between May 2017 and
October 2019.

Command and control server associated to the
malware configuration is still alive by the time we wrote
this report.

In terms of capabilities, the sample we have analyzed is
meant to exfiltrate SIM card information, SMS log, call
log, calendar events, address book, messages and files
from 12 popular messenger applications and to track
victim's location.

This report provides details on how strings are
obfuscated, how the communication protocol has
evolved and how the extraction of three technical
aspects of the malware can give insights on the
malware code-base evolution.

Threat:
FinSpy for Android

Key findings:
New version of FinSpy
Alive C2s

Defensive Lab Agency

31 avenue de Segur
75007 Paris

contact@defensive-lab.agency





Public release

Table of Contents

LT. OVEPVIQW....ccecccccccccccscccsceessesseesssesssssssssssssssssesssessseussesssesssesssssssessssessesssesssssssessssssssssssssssssesssesssecsssesssessesssessseesseesees esas. 4
QD. NOC Lc eeccccccccccsesscscscsessssesessssssssssssussssessssssssssssssssssssssessssessssessssessssesssssssssessssvsessssesssssssssessssssstssssssescssssessssessssesseeeseseeeaees 5
3. A SUSPECTEd NEW FINSPY VETSION........ccecccecceccsesescesessessessesesssssessssssssssesssssssesssssssvssesssssssssssesssesseasessessesssseseeseeeeaees 6
1. CONFIQUIFATION STOFA GEL... ececececcccccsessessessssessessessssssusssssssussessssvssussussssvssessssssssssesssssssssssssssesssesssesseatssesssessecsee sees 6
2. SUING ODFUSCATION LA... eeecccecceccccecescessesessessesssvssessussssussussssvssusssssssvssessssvssesssvssvssessssvssesssssssessissssestessseecesssseesseeeees 6
3. Local Socket AddreSS GENELAatiON no... eececceecessesessessessesessessesssssssvsssssssvssessssvssessssssevssessssssssssasssestestsssssesseaees 7
A. UNKNOWN TLV BYP@S.u i... ccc ccsescessescssssesssusssssssussssssesssussssssssssssssesssussssssssssesssessesssssssesassssssssessesesseeseeseeeseens 9
DS. CONMCIUSION L......eeccececceccecsescessessssssssessessesssssssssssssvssusssssvssvsssssvssesssssessessssssssssssssssssssessessssssssssssssessessesseaseeseecestees 10
4. Sample behavioral ANalySis.u.... ccc cece eccsesccsesesesessessussssssessssessssessvssssssssssessssessesesscsesssessessssessssesssseseeseeseeeeaes 11
1. CONFIQUIFATION PAFSING........ccccceccccccccesccsessesessssssesssssssssssssssvssssvsssssssssvssusvssusvssusvssssssssssssessssasseesssesessesateseeseesseeaeees 17
2. EMErGeNnCy FECONFIGUIATION oo... cecceccccecccessesescsessssssssssssssusvssussssussssusvssessssvasssssssevsssssassssstssestisestsecsseesseseeen 12
3. PrivilIeGe CSCALATION Lecce ccececcccccessesssessessessssssssssusssssssusssssssvssessssssssssesssevssessssvssessssssesseesssssseeasssssesessseecseeeen 13
A, COMMUNICATION WIEN C2... ccccccccccsescesesesssssssssussssusssevsssssssssssssssssussssesvsssssssssssessssssassseasseeascessiessseeeseeean 14
D. Self destruction Capability... cece cscs ccscscessesssssseessessssvsssssssssesssesssssssssssssssesssessessssssssitesstessssseesseeres 14
6. Data Collection MECHANISM .........ccccecccccccecescesessessssssessessessusvssvsssssssvssesssssssvssssssssssessssssesssssssesssssssestesessesseeteees 15
7. Data collected and Sent Dy default... ccc cece cc ccescesssessessesssssssessssssevssessessssssessssssssassesssecsseaesestecsseren 15
8. Messenger applications data exfiltratiOn. no... ccccccccccecceccsessessescssessesssssssesssssssvssestessssestesssesssessseessestesseeaess 15
Q. Call 10g @xPiratiOn en... cccecccscsccsessesssevssssessssvssesvssussssussssusvssussssvssssvasssvssssvstesssessseissssessstasseesssseassteseees 16
10. SMS 10g @xfiltration en... cece ccccsscssssessssesesssssssvssusvssussssussssessssussssvssssussssvassssassesssssssssssasssssssssstessseesseeeae ees 16
11. Calendar events Qxfiltration.....cccccccccccccccccsscscssssesessssesssssevsssssssssvssssvssusvssessssusvssesssessssaseesessesssetecseesseeaeees 16
12. Address book @xfiltration......cccccccceccccccscscessssessssvssssvssssvssussssussssusssssssssussssvasssesssssassevssssssssevassssetsssssesseees sees 16
13. SIM information @Xfiltration no... cccccc cs ccscsescssesssessvsssesesssusvsssessvssssssvssusvasssssvsssssassessssssessssessssstsuseaseeseeess 17
14. LOCATION BACKING... .ccccccecccccccecccsccsessessesessessessssssssssusssssssesssssssvssessssvsssssssssesssssssssssesssssseessssssssssesssssstesteasseeseeaees 18

Se le ee

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

1. Overview

This report focuses on the analysis of the sample described below.

e File Name WIFI.apk

« Size 2.87MB
° MD5 79ba96848428337e685e10b06ccc1c89
¢« SHA 51b31827c1d961ced142a3c5 f3efa2b389f9Ic5ad

© SHA256 £854774a198db490alae9f06d5da5 fe6al f683bf3d7186e56776516f982d41ad3

For this analysis we use the following tools:

¢ Aether (https://defensive-lab.agency/en/products/aether/) to analyze CFG
¢ Javalang (https://github.com/c2nes/javalang) to parse the Java code

¢ Smalisca (https://github.com/U039b/smalisca) to analyze the Smali code

¢ Yara (https://virustotal.github.io/yara/) to detect FinSpy variants
¢ FinSpy tools (https://github.com/devio/FinSpy-Tools/) to parse the FinSpy configuration

We share the following Python scripts with the community:
¢ java parser.py to extract obfuscated from Java code
¢ string decoder.py to decode obfuscated strings

We share the following documents with the community:
e the report you are reading now

¢ table.ods containing TLV types and decoded strings
¢ FinSpy.yar Yararules detecting FinSpy variants

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

2. l|OC

Sample certificate

Sample file

FileName  (URTs)<

Subject CN='MITAS Ltd.’
Size 2.87MB Siielsreilecwveme rSassa pkcslv15
MD5 79ba96848428337e685e1 Ob06ccc1c89 WE teh celumemm 20 1 7-05-27 07

SHA1 51b31827c1d961ced1 42a3c5f3efa2b389f9c5ad Valid To 2023-05-26 07

854774a198db490a1 ae9f06d5da5febal f683bf3d

7186056776516f982d41ad3 Issuer CN='MITAS Ltd.

SHA256

Siem ese OXx4053ca56

Android application Hash Alg. sha256

wifi MD5 b99ac605872a55e609854176413e603c

org.xmlpush.v3 SHA1 7c6e4f2e84ebaa8d25040f63d840e14f6f822125

8052584eacfd1 99602b348ef60e20c246ec929d6

METawNedaieg Org.xmipush.v3.StartVersion SHA256 dbeSb85fd0e60ba3205b05a2

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

3. Asuspected new FinSpy version

FinSpy capabilities and technical aspects are widely documented online. In this section we focus on what
we suspect to be clues of a new version of FinSpy for Android.

To do so, we investigate on the following parameters:
¢ location of the FinSpy configuration
¢ — string obfuscation
¢ local socket address generation
¢ unknown TLV types

1. Configuration storage

As far as we know, FinSpy stores its configuration into APK metadata. It was well documented and
extraction tools are available online:

¢  https://github.com/devio/FinSpy-Tools
¢  https://github.com/SpiderLabs/malware-analysis/blob/master/Ruby/FinSpy/

The sample we investigate on shows that the FinSpy configuration is stored into the DEX file.

9654725 26 66 OC GO 05 OG 69 GG 5C OB 12 OG 69 OG 5D OB 12 OC 67 OG SE OB OE 0G 00 G3 Ol 00 08 00
9654752 01 : 9 96 5B FE 09 GS 5 09 AE : is - :
9654784 -° < 09 BE WE OC of ake 00 WE wt is We
9654816 El ; : 69 86 09 46 C y : 98 9 : B 4@ WIFI
9654845
9654889
9654912
9654944 Fes: S 0 2 66 G : FE 0© : 9084 WIFI? ea "
8654976 [ieee 38 2 88 ns 38 8 8G GC O ma

9655008 9 OA 66 09 G6 96 4 00 9 OA OG d 4 @¢ 3 00 aC 4 0€ B 6&4;
9655049 é 2 ee 9 09 06 q 00 O¢ 5 00 BON CEya
96550 7 2 ore \ fe JE) 510 ee Jt Ald A je 0 t) 5 jee IG]

9655104 9 66 09 6 : OL O¢ 20 62 60 © 96 eeace
9655136 Up . Vv U ¥ : : 0) 9 a °) G 2 5 00 66 a nr a
9655168 18 a a IG Am Ge : 2 33 45 80 OC Ie 5 F4E V ASE 9

9655209 13a > 2 OF 9 66 40 ¢ : 46 44 45 : CR G@E ,2@ 9 CDE o¥
9655232 bbe 2 : Y 3 00 O€ D : B 30 52 « .o© © OBE oOo ORE
6655269 EDR et a. BS 5 89 9e 5 SC Je , ac oe : 146 a EG@T \ aaT 9
9655296 8 09 € 9 OO OF 2 30 : Cc 66 : 08 06 0,9) Ota ©? @Fm (
9655328 | 2 ¢ 9 OC 9 00 ° : Oc 66 00 Sum OO Gym 3g
86553659 bee: ¢ ; 53 AG é 4 He! of F@S SAAS F

9655392 bys ‘ 9 56 2 eS § 09 36 Q ‘ FE 06 2 Oo 0Ce So GF |
0655424 ERC 9 05 2 66 § 09 OG : 3 98 FE Cum OO OVm
9655455 Se = c 86 9 € 16 ae b6 OC AO u FOU aeU s es)
9655488 | 5! 9 GO: : 9 20 56 ° 2 : 8 30 23 EV; aiV o CFV GO

96555209 be : 9 66 5 OC : 00 66
6655552 ae e ; IG as 3 30 BC BO BE
9655584 9 O90 G 9 OG OF 8 00 OG 3 42 2D 5@ 2

9655615 pines : 9 0 08 06 06 06 08 66
9655648 8A aa oA a6 09 G6 6A M8 Of BG OA AA OA of a6 a6

Figure 1: FinSpy configuration stored into the DEX

O$V OF @*Vv ?
ECM 4aew o Bn
Em B-P&=Yucs

SEASRL8

Even if existing extraction tools failed to extract the configuration from the DEX, parsing tools succeeded
to parse it. The structure of the configuration remains the same, only its storage location has changed.

We name this FinSpy variant DexDen.

2. String obfuscation

As far as we know, FinSpy strings defined in its code are not obfuscated. The sample we analyze is
different, all Java strings are obfuscated. Each Java class using strings implements the following 2 Java
methods:

Defensive Lab Agency — 31 avenue de Ségur — 75007 Paris




wc release

¢ String O000000iIoIIi0000111100(final int index) returning the obfuscated string as bytes at
the given index.

¢ byte[] ilI1LIil0111iil(final byte[] array, final byte[] array2) decoding an
obfuscated string.

(> CI

Strings are decoded by XORing of the obfuscated one with one of the two pads. The pad is selected

according to the index mod 2. Pads are the same for all Java classes using strings:
¢ 0123456789abcdef
e fedcba9876543210

We have developed a Python script parsing the entire Java code to retrieve obfuscated strings
java parser.py and one to decode them string decoder. py.

We denote this kind of string obfuscation TippyPad for short.

3. Local socket address generation

FinSpy uses Unix socket to communicate between threads. The local socket address is generated by
hashing the values of the following system properties:

e ro.product.model




Mic feleaSe

e ro.product.brand

e ro.product.name

e ro.product.device

e ro.product.manufacturer

e ro.build. fingerprint

An utility method meant to encode data and generate local socket address uses the timestamp
1540483477 corresponding to Thu 25 October 2018 16:04:37 UTC. Java method generating local
socket address is listed below.

We denote this kind of address generation TippyTime for short.




Public release

4. Unknown TLV types

After leaks about FinFisher and FinSpy,
community has reversed the different TLV values
used in data marshaling/unmarshaling to ensure
a common data format between C2s and
implants. These values are available online:

https://github.com/devio/FinSpy-Tools/blob/
master/Android/finspyCfgParse.py

The FinSpy version we analyze seems to be using
unknown TLV values. To get some meaning
about the different unknown TLV values, we
reversed existing values. We were able to detect
semantic groups based on the binary
representation of these values.

The Python script we developed recovers groups
based on existing values. Then parses the
Sample Smali code to extract unknown TLV
values. We used a patched version of Smalisca
(https://github.com/U039b/smalisca) to do so.

We have extracted the following suspected
unknown TLV values. The entire list of TLV and
groups is available in the GitHub repository.

To determine the group the TLV value belongs to
just mask that value with 0xFFFFF800.

—s

riira Bf: TIiVlarniin vEraatinn
Figure 6: |LV group extraction

Defensive Lab Agency — 3

Group 79 File system

v 161840

s,s N NO NON

x

Group 2112 SMS

¥

A
rae

A”naArn
/ +

A

4326768 ThTypeSMSbDirection

TlvTypeFSReadOnly
ThvTypeFSHidden
TlvTypeFSSystem
TlvTypeFSFileCreationTime
162944 TlvTypeFSFileLastAccessTime
163200 ThTypeFSFileLastWriteTime
TlvTypeFSFullPathM
163632 unknown

OZ JF SL

163 Ti

295709

>/ ) if
Wwlws SL

TlvTypeMobileSMSMetalinfo
TlvTypeMobileSMSData
TlvTypeSMSSenderNumber
Thy TypeSMSRecipientN umber
TlvTypeSMSinformation

SE

unknown

Group 4225

x

) > /
fF I J i.

installed reply mobile modules

TlvTypeMobileinstalledModulesReply

8652912 unknown

Group 8140 custom location config

v

x

x

16684848  TlvTypeConfigCustomLocationMode

16672080 unknown
16671792 unknown

Group 8146

v

16

we

6220

ThvTypeTargetType

MOVIL

TlvTypeDurationString

166833904 unknown
16684848 unknown

fC TI 4 I;

[— , Cr. . . . f :
i —raltnias| ‘ OVsroronanm ar MOMs | / \/se Tat 4)
Figure 9: Few suspected new /LV values

=

ee




5. Conclusion

Public release

c2ce202e6e08c4 1e8f7a0b 15e7d078170

DexDen Conf.inAPK TippyTime TippyPad Cert not before

VT submission Suspected build date

4e17#8ed52d1b2ad72122c29926436e  * v x x 2016/10/10 2017/07/27 ~2017/06/01
715182227663e6¢1 0202066730592350_* v v x 2owaio/21. 2019/10/12
6 7843C48061597505e08 1713186289 * v / x 2018/06/20 2019/08/24» > 2017/12/07
ea feBtieB dot 964 701 66866297678 * ” ” ~ 2017/05/29 2017/09/13 > 2017/05/29
ee ARIE eae Eee x v v x 2018/06/20 2019/03/24 > 2018/06/20
SE arya ee REIT * ~ v x 2017/11/16 2018/07/31 > 2017/11/16
854774a198db490al ae9f0 6d5da5fe6al f y 7 , y 9017/05/27 nso Fans

683bf3d71 865677651 6f982d41 ad3
Figure 7: FinSpy samples from CCC report & the sample we analyze (yellow row)

Our analysis based on 3 different parameters: configuration location, string obfuscation and local socket
address generation tends to demonstrate that the sample we have analyzed is (as far as we know) the
only known FinSpy for Android sample storing its configuration directly into the DEX file (DexDen).
Reports FinSpy Dokumentation by Thorsten Schroder & Linus Neumann - CCC (Jan. 2020), AccessNow:
FinFisher changes tactics to hooks critics by AccessNow (May 2018) and Hacking FinSpy by Sophos
(2015) explain how the FinSpy configuration is stored in the APK file metadata. A retro-hunt on VT has
found 0 samples (our sample excluded) storing the configuration the DEX. Changing the configuration
location is a strong structural change indicating a suspected new version of FinSpy for Android.

A trend emerges when we focus on how the local socket address is generated and how strings are
obfuscated. Old samples do not use a “magic” timestamp (TippyTime) in the generation algorithm nor
pad-obfuscated strings (TippyPad). By analyzing briefly samples shared by CCC, we observed that since
2017, FinSpy seems to use TippyTime. However, only one sample use TippyPad string obfuscation.

Regarding unknown or undocumented TLV types, we have no clue indicating they are new or not since we
have not analyzed other samples in deep and no unknown TLV types have ever been reported.

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

4. Sample behavioral analysis

The sample we analyze is heavily obfuscated:

¢ strings are encoded at the class level;

¢ Java methods are obfuscated (shortened);

¢ control flow graph is broken by the heavy use of threads and IPC;
¢ dummy calls are inserted between almost all the “useful” ones.

To analyze the sample, we firstly do a fast behavioral recon with Aether by extracting control flow graphs
in which:

¢ sinks are Java methods of interest;

* sources are detected entry-points (i.e. services, threads, activities, ...).

Secondly we extract TLV types involved in the different control flow graphs and then correlate the
meaning of TLV with the meaning of actions done on the OS.

1. Configuration parsing

Lorg/s m |pushy¥v3b/fs2:-> runt)

Largs |pushye34qi- bil accrcidjcantant;!cantext)

bongxen |pustyeadq: cll andraicyec eemtyCoetox ts)
Lorgporalpus hvu eet Landroeycunlenyocelesl: Lloweslany/Slrung:) Leorgyeyb;- 2 a(LanzroidsconlenConleal Level lory/SLring;)

Landroic/content/Certext:-> getPackageCcodePath |)

a) oe

Figure 8: CFG locating the DEX file

As we have seen before FinSpy stores its configuration into the DEX file. Thus, the first step for it is to
locate the DEX file. On Android, the Java method android. content. Context .getPackageSourceDir()
returns the location of the APK which contains the original DEX (not the optimized one).

Once located, the DEX file is copied at a randomly generated path into the cache directory. Once copied,
the DEX loaded (or self-loaded since it is loaded by itself) using the Java method
dalvik.system.DexClassLoader. loadClass().

Loratemice shyvivp: >atLardroid/conmtentyCortext: [8 Ldalvik/zystemDexClassLoacer: =loacClazzLiavafanasming:!

Ldalvikeystem DexClazeLeader. >-<irit>(Liavajlangetira: Lisvafsang Sting: Liavafargisting: UavaslaraclaceLoader:)

Figure 9: CFG loading the DEX file

Finally, FinSpy parses its configuration stored into the loaded DEX using a large switch-case statement.

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

Lorg/xm | pushjv J (Serv icssSa:-> rur!)

Lorg‘xm!|pushyv 3/h/c;-> a lLyava/io/FilelnputStrearm;)}

Figure 10: CFG parsing the
configuration

The configuration stored into the current sample looks like:

¢ TlvTypeMobileTargetID = "WIFI"
¢ TlvTypeMobileTargetHeartbeatInterval = 120
¢ TlvTypeMobileTargetPositioning = b\x82\x87\x86\x81\x83'
¢ TlvTypeConfigTargetProxy = "[redacted]"
¢ TlvTypeConfigTargetProxy = "[redacted]"
¢ TlvTypeConfigTargetPort = [redacted]
¢  TlvTypeConfigSMSPhoneNumber = "[redacted]"
¢ TlvTypeMobileTrojanID = "WIFI"
¢ TlvTypeMobileTrojanUID = b'\xfc\x1 4\xbO\r'
¢ TlvTypeUserID = 1000
¢ TlvTypeTrojanMaxInfections = 9
¢ TlvTypeConfigMobileAutoRemovalDateTime = Thu Jan 1 01:00:00 1970
¢ TlvTypeConfigAutoRemovalIfNoProxy = 168
¢ TlvTypeMobileTargetHeartbeatEvents = 1/3
¢ TlvTypeMobileTargetHeartbeatRestrictions = b\xd0\x00'
¢ TlvTypeMobileTrackingDistance = 1000
¢ TlvTypeMobileTrackingTimeInterval = 300
e TlvTypeInstalledModules =
© Logging: Off
o ©6Spy Call: Off
° Call Interception: Off
° SMS: On
© Address Book: On
o Tracking: On
© Phone Logs: On
Note: Trojan UID is the AES sub-key used to encrypt/decrypt payloads exchange with the C2.

2. Emergency reconfiguration

FinSpy can be reconfigured by SMS, the Java method org.xmlpush.v3.q.c.a() is dedicated to that.
FinSpy uses a lot of threads, probably not for performance purposes but to circumvent automatic reverse
engineering of CFG. The following CFG shows the break in the CFG.

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Lancrom/Lelevher y/SinsMesseya;-->yelPdul) Lardrcidlelaphuny/Sinshless 3 yej->geWMesssueBudy4) LardroAelephony/SinsMess aye;-=gelUseDala() Luru/xen! push /v3/c/a;->> a {1B}

Public release

Lorc/xmlpush/y 3/evantbasec/ReceivarSaryvica;-~onHanc/alrtant{(Lardreid/cortertintant;) Lorg!x ml pushyy 3/q/c)->run()

Lore/xmlpushjv 3/q/a:->a[) Lorg!xmlpushjv3/q/c)->al|Lyavafang/Starg;)

Y

Lorg/xerilpusliw3/yfei-2 <ul (LB)

44
J |
‘ ‘

: FinSpy reconfiguration

Figure

When an SMS corresponding to TlvTypeMobileTargetEmergencyConfig is received, FinSpy reconfigures
itself by parsing the SMS payload.

The following attributes can be reconfigured:

TlvTypeConfigtargetPort: port for C2 proxy

TlvTypeConfigSMSPhoneNumber: phone number for SMS based C2 communications
TlvTypeMobileTrojanID: unknown purpose

TlvTypeMobileTrojanUID: unknown purpose

TlvTypeUserID: unknown purpose

TlvTypeTrojanMaxInfections: unknown purpose
TlvTypeConfigMobileAutoRemovalDateTime: implant self-destruct past this date
TlvTypeConfigAutoRemovalIfNoProxy: implant self-destruct if C2 proxy is unavailable
TlvTypeMobileTargetHeartbeatRestrictions: conditions to avoid callbacks
TlvTypeMobileTargetHeartbeatEvents: events to trigger callbacks to the C2
TlvTypeMobileTargetLocationChangedRange: trigger updates based on location changes
TlvTypeInstalledModules: list of implant features and their configuration (SMS log, call log, etc.)
and other unknown parameters

3. Privilege escalation

Porgemtpusbyvagy; SRL andioisfosr nx contids)

|!

barat lpuskyagy; = oll areesidjcontentyt certs xt:) Largeemlaushyageh; >-all javasdang/string: 7) Lorgyxmol pushjy 2h; =alljavadarasstring; [I javajlandq/strirg:)
¥ |

!

lorgpeminushyy 344:->qt) Lorgqeemlpeshwsyjijz-"ht) Lorgpeml pushyy af fhj--all favafanySstring; | java/lang/Sstrirg: t javajlarqysticg: 4)

Lisva/larg/Runtime:-~exec!Ljavafang/String:)

Figure 12: Runtime command execution

FinSpy needs super user privileges to do things like access data of other applications. When started, the
implant checks if su is available and then check if the user id is 0. We found no evidence of vulnerability
exploitation (DirtyCow or SELinux abuse) like the ones mentioned in other publicly available reports. We
did not find ELF hidden into the APK, DEX or into natives libraries packaged in the APK.

Either we have missed something or this sample is tailored to be implanted after exploitation.

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

4. Communication with C2

Porcyxrilpiashiyy 3coylad: Seu Q

Lerefxm|pushv3/m)->alljavafang/Stirg, avafang/Stairg;!

Ljava/net/HttoUKLConnectior i-~sethaquestMethod(Liava/lang/string:! Liavamet/Htteu RLConnection:-~setRequastl rc perty!Ljava/larg/string: Ljava/larg/string:)

Figure 13: SMS based exfiltration

LOUIXTHOUSIWWaie: >r(Lowsionasoing:

- roan ai hil ae
¥ r vY

Lorgxm puch digiic- > eft Lorgixmlp. chy 3igbs->atLorg orn lrustyy aint: Qovedtanatctring: bavadangstonz)

‘ Ld Ld
Lormumipushwigit: >allvaylangetanga: Yovaylarq/Starg:! Loroyxenl pushy iad: =al povaylatg/S:nrag: Usvefanastrg:)

Figure 14: HTTP based exfiltration

The implant can use both SMS and HTTP requests to send collected data to the command and control
server. Both SMS and HTTP communications use the same marshaling schema based on TLV types
describing data. Payload are encrypted before being sent. The encryption mechanism is the same as the
one described in AccessNow: FinFisher changes tactics to hooks critics by AccessNow.

5. Self destruction capability

Lorem ipo tiv syServicests; Son)

boryem Ipushiva)jh-2all javano File) toryem ipushWadih-all javailangStirg; |! javaylarg/stnadq) LorgiemipushNw34)t all javajlangysinergq; 7) LorgiemipushW3qit all javalangSineg; | javaylargq/Stnoaq; | ava/lacq/sting: 7)

Figure 15: FinSpy self-destruct script generation

Since FinSpy has the ability to remove itself, it generates a shell script /system/etc/xrebuild. sh listed
below.

#!/system/bin/sh

mount -oO rw,remount /system

am force-stop <package name>

dd if=/dev/zero of=<apk path> bs=1024 count=8192

find <path> | while read Line; do dd if=/dev/zero of=$line bs=1024 count=8192; done

Then it makes the script executable and reboots the device.
The script writes zeros over the APK file and does the same for all files located into the application data

directory. FinSpy can be configured to remove itself at a given date and time, when the C2 is not
reachable for a given amount of time or when the implant receive a specific command. By filling all files

Defensive Lab Agency — 31 avenue de Ségur — 75007 Paris




Public release

with zeros, FinSpy prevents forensic investigation. The script generation takes in account the fact that the
implant can be a system application or a regular application.

6. Data collection mechanism

lary/xmipushjva/Sorviees; >cl)

LardroidjcontanticoantantResalver aregistarcententOhsarvartiandenidjnet ari; 7 | aneroid/datahase/Cententohserver:}

Figure 16: FinSpy content changes tracking

Java class org.xmlpush.v3.Services registers the following content observers on:

¢ changes on phone contact list
¢ changes on SIM contact list

¢ changes on SMS log

¢ changes on calendar

Java class org.xmlpush.v3.eventbased.ReceiverService listens to the following events:

¢ new outgoing phone call
¢ new data SMS received
¢ SlMcard has been changed

Numerous threads are started to periodically check device location and messenger applications files.
Every time a change occurs on observed data or an event occurs, FinSpy collects data related to that
change/event and sends it to the C2 either over HTTP or SMS.

7. Data collected and sent by default

The FinSpy code shows that all payloads sent to C2s contain at least:

¢ trojan UID

¢ phone number

e« timezone

* current date and time

¢ mobile operator name

¢ country code based on mobile network
¢ location area code

¢ mobile cell ID

8. Messenger applications data exfiltration

FinSpy is designed to exfiltrate contacts, messages, groups, location and files of the following
applications:

° com.viber.voip
° jp.naver.line.android

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

* com.skype. raider

e com.facebook.orca

¢ com.futurebits.instamessage. free
e jp.naver.line.android

e com.viber.voip

e com.skype. raider

* com.futurebits.instamessage.free
e com.bbm

e ch.threema.app

° org.telegram.messenger

FinSpy looks at the content of each application data directory (i.e.
/data/data/com. futurebits.instamessage.free/). This capability has already been documented in

many public reports.

9. Call log exfiltration

FinSpy exfiltrates the following information each time a call is placed:

¢ caller's phone number
¢ callee’s phone number
¢ callers name

¢ callees name

¢ call duration is seconds

10. SMS log exfiltration

FinSpy exfiltrates the following information each time a SMS received:

¢ date and time

¢ sender's phone number

* recipient's phone number
¢ SMS content

11. Calendar events exfiltration

FinSpy exfiltrates the following information each time a new event is added/edited:

¢* attendees’ names

¢« attendees’ emails

* event title

¢ event description

* event location

* event start and end date

12. Address book exfiltration

FinSpy exfiltrates the following information each time a modification is done on the address book:

¢ work phone number
¢ mobile phone number

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris




Public release

¢ home phone number

¢ all other available phone numbers
¢« display name

¢ location

* email addresses

¢ postal addresses

FinSpy collects contacts stored in the phone memory and in the SIM card.

13. SIM information exfiltration

Lortemi pis ANS snyls 3-2 curt}

Largemipustyosiok $heor.at)

¥ Y

langx mipushwsyFycnthasadservics; =onkdardieintcntt! anamicscantcntintcnt:) largixmipuntywak: =all javaslaraSstarcg:) laegtemipishNwsays: erat) largiemipastywafeverthaseds); =nurl}

ritses

Lora/xm |pushyyS/ofq: =bl]

|

Leeuferripestinayceg: Shh Lorgvanipushyesjury: S10

Lardreisptclephory/iclephoryMarazer: >gctsimSerialNumbed)}

Lal

LeryparilpusiyySiServiccese: sro) LeryarilpusiyeSikec: Srurtt

Lanceviditelepbor yy elephor yMerager-2 gelbevicel dl Lardrciditelegticery) telepticery Marie ger? getoubse iberidl!

Figu re 17° SIM information retrieval

Each time the SIM card is changed, FinSpy sends the following data to the C2:

¢* phone number

¢ SIM serial number
©  |MEI

¢ IMSI

¢ network operator name

ST |

Defensive Lab Agency — 31 avenue de Ségur — 75007 Paris




Public release

14. Location tracking

corversarvice.onHardiaintant) rurd) arg.xmipush.v3.EvantBasedSenaceonHandlelintent()

org.xmipush.w3.Servicessa.riatl arg.xmipush.vs.g

rit :

org. cinlpush.v2.eventbased a org.xinipush..3 cre ct) org.xmnlpusti.v3.0.1$2.runt) org.xmipushy2.oh$b.runtl
| Y

i ourg.zmipustivs.t | crpamigushvs.c pt : crgamipush.va.k pdt

onercad locaten.locotionMansgerrequestLocetionUpdates(String,|. + Pencingintent) omdrecid location. LoceticnMsrager getLastKrownLocationlstirig!

Figure 18: GPS based location tracking

=. sok elase ean a ae yp ot a |
rt
plot pankeic ‘ ceperbemivar ereariponees | Cpr pewtear “poo piel eygoripeihva an rere aaits wrais peter
¥
sep erdard ot at

Figure 19: Network based location tracking

FinSpy periodically collects and sends the device location. It collects both GPS based location and
network based location by using cells.

Defensive Lab Agency — 31 avenue de Segur — 75007 Paris