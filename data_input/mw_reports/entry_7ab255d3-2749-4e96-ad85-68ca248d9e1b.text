A deep dive into Phobos ransomware
blog.malwarebytes.com/threat-analysis/2019/07/a-deep-dive-into-phobos-ransomware/
hasherezade

July 24, 2019

Phobos ransomware appeared at the beginning of 2019. It has been noted that this new
strain of ransomware is strongly based on the previously known family: Dharma (a.k.a.
CrySis), and probably distributed by the same group as Dharma.
While attribution is by no means conclusive, you can read more about potential links
between Phobos and Dharma here, to include an intriguing connection with the XDedic
marketplace.
Phobos is one of the ransomware that are distributed via hacked Remote Desktop (RDP)
connections. This isn’t surprising, as hacked RDP servers are a cheap commodity on the
underground market, and can make for an attractive and cost efficient dissemination vector
for threat groups.
In this post we will take a look at the implementation of the mechanisms used in Phobos
ransomware, as well as at its internal similarity to Dharma.

Analyzed sample
a91491f45b851a07f91ba5a200967921bf796d38677786de51a4a8fe5ddeafd2

Behavioral analysis
1/26

This ransomware does not deploy any techniques of UAC bypass. When we try to run it
manually, the UAC confirmation pops up:

If we accept it, the main process deploys another copy of itself, with elevated privileges. It
also executes some commands via windows shell.

Ransom notes of two types are being dropped: .txt as well as .hta. After the encryption
process is finished, the ransom note in the .hta form is popped up:

Ransom note in the .hta version

2/26

Ransom note in the .txt version
Even after the initial ransom note is popped up, the malware still runs in the background, and
keeps encrypting newly created files.
All local disks, as well as network shares are attacked.
It also uses several persistence mechanisms: installs itself in %APPDATA% and in a Startup
folder, adding the registry keys to autostart its process when the system is restarted.

A view from Sysinternals’ Autoruns
Those mechanisms make Phobos ransomware very aggressive: the infection didn’t end on a
single run, but can be repeated multiple times. To prevent repeated infection, we should
remove all the persistence mechanisms as soon as we noticed that we got attacked by
Phobos.
The Encryption Process
The ransomware is able to encrypt files without an internet connection (at this point we can
guess that it comes with some hardcoded public key). Each file is encrypted with an
individual key or an initialization vector: the same plaintext generates a different ciphertext.
It encrypts a variety of files, including executables. The encrypted files have an e-mail of the
attacker added. The particular variant of Phobos also adds an extension ‘.acute’ – however
in different variants different extensions have been encountered. The general pattern is:
<original name>.id[<victim ID>-<version ID>][<attacker's e-mail>].<added
extention>

Visualization of the encrypted content does not display any recognizable patterns. It
suggests that either a stream cipher, or a cipher with chained blocks was used (possibly AES
in CBC mode). Example – a simple BMP before and after encryption:

3/26

When we look inside the encrypted file, we can see a particular block at the end. It is
separated from the encrypted content by ‘0’ bytes padding. The first 16 bytes of this block
are unique per each file (possible Initialization Vector). Then comes the block of 128 bytes
that is the same in each file from the same infection. That possibly means that this block
contains the encrypted key, that is uniquely generated each run. At the end we can find a 6character long keyword which is typical for this ransomware. In this case it is ‘LOCK96’,
however, different versions of Phobos have been observed with different keywords, i.e.
‘DAT260’.

In order to fully understand the encryption process, we will look inside the code.

Inside
In contrast to most of the malware that comes protected by some crypter, Phobos is not
packed or obfuscated. Although the lack of packing is not common in general population of
malware, it is common among malware that are distributed manually by the attackers.
The execution starts in WinMain function:

4/26

During its execution, Phobos starts several threads, responsible for its different actions, such
as: killing blacklisted processes, deploying commands from commandline, encrypting
accessible drives and network shares.
Used obfuscation
The code of the ransomware is not packed or obfuscated. However, some constants,
including strings, are protected by AES and decrypted on demand. A particular string can be
requested by its index, for example:

The AES key used for this purpose is hardcoded (in obfuscated form), and imported each
time when a chunk of data needs to be decrypted.

Decrypted content of the AES key
The Initialization Vector is set to 16 NULL bytes.
The code responsible for loading the AES key is given below. The function wraps the key
into a BLOBHEADER structure, which is then imported.

5/26

From the BLOBHEADER structure we can read the following information: 0x8 –
PLAINTEXTKEYBLOB, 0x2=CUR_BLOB_VERSION, 0x6610 – CALG_AES_256.
Example of a decrypted string:

Among the decrypted strings we can also see the list of the attacked extensions

We can also find a list of some keywords:
acute actin Acton actor Acuff Acuna acute adage Adair Adame banhu banjo
Banks Banta Barak Caleb Cales Caley calix Calle Calum Calvo deuce Dever
devil Devoe Devon Devos dewar eight eject eking Elbie elbow elder phobos
help blend bqux com mamba KARLOS DDoS phoenix PLUT karma bbc CAPITAL
6/26

These are a list of possible extensions used by this ransomware. They are (probably) used
to recognize and skip the files which already has been encrypted by a ransomware from this
family. The extension that will be used in the current encryption round is hardcoded.
One of the encrypted strings specifies the formula for the file extension, that is later filled with
the Victim ID:
UNICODE ".id[<unique ID>-1096].[lockhelp@qq.com].acute"

Killing processes
The ransomware comes with a list of processes that it kills before the encryption is deployed.
Just like other strings, the full list is decrypted on demand:
msftesql.exe sqlagent.exe sqlbrowser.exe sqlservr.exe sqlwriter.exe
oracle.exe ocssd.exe dbsnmp.exe synctime.exe agntsvc.exe
mydesktopqos.exe isqlplussvc.exe xfssvccon.exe mydesktopservice.exe
ocautoupds.exe agntsvc.exe agntsvc.exe agntsvc.exe encsvc.exe
firefoxconfig.exe tbirdconfig.exe ocomm.exe mysqld.exe mysqld-nt.exe
mysqld-opt.exe dbeng50.exe sqbcoreservice.exe excel.exe infopath.exe
msaccess.exe mspub.exe onenote.exe outlook.exe powerpnt.exe steam.exe
thebat.exe thebat64.exe thunderbird.exe visio.exe winword.exe
wordpad.exe

Those processes are killed so that they will not block access to the files that are going to be
encrypted.

7/26

a fragment of the function

enumerating and killing processes
Deployed commands
The ransomware deploys several commands from the commandline. Those commands are
supposed to prevent from recovering encrypted files from any backups.
Deleting the shadow copies:
vssadmin delete shadows /all /quiet
wmic shadowcopy delete

Changing Bcdedit options (preventing booting the system in a recovery mode):
bcdedit /set {default} bootstatuspolicy ignoreallfailures
bcdedit /set {default} recoveryenabled no

Deletes the backup catalog on the local computer:
wbadmin delete catalog -quiet

8/26

It also disables firewall:
netsh advfirewall set currentprofile state off
netsh firewall set opmode mode=disable
exit

Attacked targets
Before the Phobos starts its malicious actions, it checks system locale (using
GetLocaleInfoW options: LOCALE_SYSTEM_DEFAULT, LOCALE_FONTSIGNATURE ). It
terminates execution in case if the 9th bit of the output is cleared. The 9th bit represent Cyrlic
alphabets – so, the systems that have set it as default are not affected.

Both local drives and network shares are encrypted.
Before the encryption starts, Phobos lists all the files, and compare their names against the
hardcoded lists. The lists are stored inside the binary in AES encrypted form, strings are
separated by the delimiter ‘;’.

Fragment of the function

decrypting and parsing the hardcoded lists
Among those lists, we can find i.e. blacklist (those files will be skipped). Those files are
related to operating system, plus the info.txt, info.hta files are the names of the Phobos
ransom notes:
info.hta
info.txt
boot.ini
bootfont.bin
ntldr
ntdetect.com
io.sys

9/26

There is also a list of directories to be skipped – in the analyzed case it contains only one
directory: C:\Windows .
Among the skipped files are also the extensions that are used by Phobos variants, that were
mentioned before.
There is also a pretty long whitelist of extensions:
1cd 3ds 3fr 3g2 3gp 7z accda accdb accdc accde accdt accdw adb adp ai ai3
ai4 ai5 ai6 ai7 ai8 anim arw as asa asc ascx asm asmx asp aspx asr asx avi
avs backup bak bay bd bin bmp bz2 c cdr cer cf cfc cfm cfml cfu chm cin
class clx config cpp cr2 crt crw cs css csv cub dae dat db dbf dbx dc3 dcm
dcr der dib dic dif divx djvu dng doc docm docx dot dotm dotx dpx dqy dsn dt
dtd dwg dwt dx dxf edml efd elf emf emz epf eps epsf epsp erf exr f4v fido
flm flv frm fxg geo gif grs gz h hdr hpp hta htc htm html icb ics iff inc
indd ini iqy j2c j2k java jp2 jpc jpe jpeg jpf jpg jpx js jsf json jsp kdc
kmz kwm lasso lbi lgf lgp log m1v m4a m4v max md mda mdb mde mdf mdw mef mft
mfw mht mhtml mka mkidx mkv mos mov mp3 mp4 mpeg mpg mpv mrw msg mxl myd myi
nef nrw obj odb odc odm odp ods oft one onepkg onetoc2 opt oqy orf p12 p7b
p7c pam pbm pct pcx pdd pdf pdp pef pem pff pfm pfx pgm php php3 php4 php5
phtml pict pl pls pm png pnm pot potm potx ppa ppam ppm pps ppsm ppt pptm
pptx prn ps psb psd pst ptx pub pwm pxr py qt r3d raf rar raw rdf rgbe rle
rqy rss rtf rw2 rwl safe sct sdpx shtm shtml slk sln sql sr2 srf srw ssi st
stm svg svgz swf tab tar tbb tbi tbk tdi tga thmx tif tiff tld torrent tpl
txt u3d udl uxdc vb vbs vcs vda vdr vdw vdx vrp vsd vss vst vsw vsx vtm vtml
vtx wb2 wav wbm wbmp wim wmf wml wmv wpd wps x3f xl xla xlam xlk xlm xls
xlsb xlsm xlsx xlt xltm xltx xlw xml xps xsd xsf xsl xslt xsn xtp xtp2 xyze
xz zip

How does the encryption work
Phobos uses the WindowsCrypto API for encryption of files. There are several parallel
threads to deploy encryption on each accessible disk or a network share.

Deploying the encrypting thread

AES key is created prior to the encrypting thread being run, and it is passed in the thread
parameter.

10/26

Fragment of the key generation function:

Calling the

function generating the AES key (32 bytes)
Although the AES key is common to all the files that are encrypted in a single round, yet,
each file is encrypted with a different initialization vector. The initialization vector is 16 bytes
long, generated just before the file is open, and then passed to the encrypting function:

11/26

Calling the function generating the AES IV (16

bytes)
Underneath, the AES key and the Initialization Vector both are generated with the help of the
same function, that is a wrapper of CryptGenRandom (a strong random generator):

The AES IV is later appended to the content of the encryped file in a cleartext form. We can
see it on the following example:
Before the file encryption function is executed, the random IV is being generated:

The AES key, that was passed to the thread is being imported to the context
( CryptImportKey ), as well the IV is being set. We can see that the read file content is
encrypted:

12/26

After the content of the file is encrypted, it is being saved into the newly created file, with the
ransomware extension.

The ransomware creates a block with metadata, including checksums, and the original file
name. After this block, the random IV is being stored, and finally, the block containing the
encrypted AES key. The last element is the file marker: “LOCK96”:

Before being written to the file, the metadata block is being encrypted using the same AES
key and IV as the file content.

13/26

setting the AES

key before encrypting the metadata block
Encrypted metadata block:

Finally, the content is appended to the end of the newly created file:

14/26

Being a ransomware researcher, the common question that we want to answer is whether or
not the ransomware is decryptable – meaning, if it contains the weakness allowing to recover
the files without paying the ransom. The first thing to look at is how the encryption of the files
is implemented. Unfortunately, as we can see from the above analysis, the used encryption
algorithm is secure. It is AES, with a random key and initialization vector, both created by a
secure random generator. The used implementation is also valid: the authors decided to use
the Windows Crypto API.
Encrypting big files
Phobos uses a different algorithm to encrypt big files (above 0x180000 bytes long). The
algorithm explained above was used for encrypting files of typical size (in such case the full
file was encrypted, from the beginning to the end). In case of big files, the main algorithm is
similar, however only some parts of the content are selected for encryption.

15/26

We can see it on the following example. The file ‘test.bin’ was filled with 0xAA bytes. Its
original size was 0x77F87FF:

After being encrypted with Phobos, we see the following changes:

Some fragments of the file has been left unencrypted. Between of them, starting from the
beginning, some fragments are wiped. Some random-looking block of bytes has been
appended to the end of the file, after the original size. We can guess that this is the
16/26

encrypted content of the wiped fragments. At the very end of the file, we can see a block of
data typical for Phobos::

Looking inside we can see the reason of such an alignment. Only 3 chunks from the large file
are being read into a buffer. Each chunk is 0x40000 bytes long:

17/26

All read chunks are merged together into one buffer. After this content, usual metadata
(checksums, original file name) are added, and the full buffer is encrypted:

18/26

By this way, authors of Phobos tried to minimize the time taken for encryption of large files,
and at the same time maximize the damage done.
How is the AES key protected
The next element that we need to check in order to analyze decryptability is the way in which
the authors decided to store the generated key.
In case of Phobos, the AES key is encrypted just after being created. Its encrypted form is
later appended at the end of the attacked file (in the aforementioned block of 128 bytes).
Let’s take a closer look at the function responsible for encrypting the AES key.

The function generating and protecting the AES key is deployed before the each encrypting
thread is started. Looking inside, we can see that first several variables are decrypted, in the
same way as the aforementioned strings.

19/26

Decryption of the constants
One of the decrypted elements is the following buffer:

It turns out that the decrypted block of 128 bytes is a public RSA key of the attacker. This
buffer is then verified with the help of a checksum. A checksum of the RSA key is compared
with the hardcoded one. In case if both matches, the size that will be used for AES key
generation is set to 32. Otherwise, it is set to 4.

Then, a buffer of random bytes is generated for the AES key.
20/26

After being generated, the AES key is protected with the help of the hardcoded public key.
This time the authors decided to not use Windows Crypto API, but an external library.
Detailed analysis helped us to identify that it is the specific implementation of RSA algorithm
(special thanks to Mark Lechtik for the help).
The decrypted 128 bytes long RSA key is imported with the help of the function
RSA_pub_key_new . After that, the imported RSA key is used for encryption of the random
AES key:

Summing up, the AES key seems to be protected correctly, which is bad news for the victims
of this ransomware.
Attacking network shares
Phobos has a separate thread dedicated to attacking network shares.

Network shares are enumerated in a loop:

21/26

Comparison with Dharma
Previous sources references Phobos as strongly based on Dharma ransomware. However,
that comparison was based mostly on the outer look: a very similar ransom note, and the
naming convention used for the encrypted files. The real answer in to this question would lie
in the code. Let’s have a look at both, and compare them together. This comparison will be
based on the current sample of Phobos, with a Dharma sample
(d50f69f0d3a73c0a58d2ad08aedac1c8).
If we compare both with the help of BinDiff, we can see some similarities, but also a lot of
mismatching functions.

22/26

Fragment of code comparison: Phobos vs Dharma
In contrast to Phobos, Dharma loads the majority of its imports dynamically, making the code
a bit more difficult to analyze.

Dharma loads

mosts of its imports at the beginning of execution
Addresses of the imported functions are stored in an additional array, and every call takes an
additional jump to the value of this array. Example:

In contrast, Phobos has a typical, unobfuscated Import Table
Before the encryption routine is started, Dharma sets a mutex:
“Global\syncronize_<hardcoded ID>”.
Both, Phobos and Dharma use the same implementation of the RSA algorithm, from a static
library. Fragment of code from Dharma:

23/26

The fragment of the

function “bi_mod_power” from:
https://github.com/joyent/syslinux/blob/master/gpxe/src/crypto/axtls/bigint.c#L1371
File encryption is implemented similarly in both. However, while Dharma uses AES
implementation from the same static library, Phobos uses AES from Windows Crypto API.

24/26

Fragment of the AES implementation from Dharma ransomware
Looking at how the key is saved in the file, we can also see some similarities. The protected
AES key is stored in the block at the end of the encrypted file. At the beginning of this block
we can see some metadata that are similar like in Phobos, for example the original file name
(in Phobos this data is encrypted). Then there is a 6 character long identifier, selected from a
hardcoded pool.

The

block at the end of a file encrypted by Dharma
Such identifier occurs also in Phobos, but there it is stored at the very end of the block. In
case of Phobos this identifier is constant for a particular sample.

25/26

The

block at the end of a file encrypted by Phobos
Conclusion
Phobos is an average ransomware, by no means showing any novelty. Looking at its
internals, we can conclude that while it is not an exact rip-off Dharma, there are significant
similarities between both of them, suggesting the same authors. The overlaps are at the
conceptual level, as well as in the same RSA implementation used.
As with other threats, it is important to make sure your assets are secure to prevent such
compromises. In this particular case, businesses should review any machines where Remote
Desktop Procol (RDP) access has been enabled and either disable it if it is not needed, or
making sure the credentials are strong to prevent such things are brute-forcing.
Malwarebytes for business protects against Phobos ransomware via its Anti-Ransomware
protection module:

26/26