✨

XZB-1248/Spark:
Spark is a web-based, cross-platform
and full-featured Remote Administration Tool (RAT)
written in Go that allows you control all your devices
anywhere. Spark是一个Go编写的，网页UI、跨平台以及多功
能的远程控制和监控工具，你可以随时随地监控和控制所有设
备。
github.com/XZB-1248/Spark
XZB-1248

[English] [中文] [API Document] [API文档]

Spark
Spark is a free, safe, open-source, web-based, cross-platform and full-featured RAT
(Remote Administration Tool) that allow you to control all your devices via browser anywhere.
We won't collect any data, thus the server will never self-upgrade. Your clients will only
communicate with your server forever.

repo size 29.8 MB

downloads 4.1k

issues 16 open

issues 28 closed

downloads@latest 1.4k

Disclaimer
THIS PROJECT, ITS SOURCE CODE, AND ITS RELEASES SHOULD ONLY BE USED
FOR EDUCATIONAL PURPOSES.
ALL ILLEGAL USAGE IS PROHIBITED!
YOU SHALL USE THIS PROJECT AT YOUR OWN RISK.
THE AUTHORS AND DEVELOPERS ARE NOT RESPONSIBLE FOR ANY DAMAGE
CAUSED BY YOUR MISUSE OF THIS PROJECT.
YOUR DATA IS PRICELESS. THINK TWICE BEFORE YOU CLICK ANY BUTTON OR
ENTER ANY COMMAND.

Quick start
1/9

binary
Download executable from releases.
Following this to complete configuration.
Run executable and browse to http://IP:Port to access the web interface.
Generate a client and run it on your target device.
Enjoy!

Configuration
Configuration file config.json should be placed in the same directory as the executable file.
Example:
{
"listen": ":8000",
"salt": "123456abcdefg",
"auth": {
"username": "password"
},
"log": {
"level": "info",
"path": "./logs",
"days": 7
}
}

listen required, format: IP:Port
salt required, length <= 24

after modification, you need to re-generate all clients
auth optional, format: username:password
hashed-password is highly recommended
format: $algorithm$hashed-password, example: $sha256$123456abcdefg
supported algorithms: sha256, sha512, bcrypt
if you don't follow the format, password will be treated as plain-text
log optional
level optional, possible value: disable, fatal, error, warn, info, debug
path optional, default: ./logs
days optional, default: 7

Features

2/9

Feature/OS

Windows

Linux

MacOS

Process manager

✔

✔

✔

Kill process

✔

✔

✔

Network traffic

✔

✔

✔

File explorer

✔

✔

✔

File transfer

✔

✔

✔

File editor

✔

✔

✔

Delete file

✔

✔

✔

Code highlight

✔

✔

✔

Desktop monitor

✔

✔

✔

Screenshot

✔

✔

✔

OS info

✔

✔

✔

Terminal

✔

✔

✔

* Shutdown

✔

✔

✔

* Reboot

✔

✔

✔

* Log off

✔

* Sleep

✔

* Hibernate

✔

* Lock screen

✔

❌ ✔
❌ ✔
❌ ❌
❌ ❌

Blank cell means the situation is not tested yet.
The Star symbol means the function may need administration or root privilege.

Screenshots

3/9

4/9

5/9

6/9

Development
note
There are three components in this project, so you have to build them all.
Go to Quick start if you don't want to make yourself boring.
Client
Server
Front-end
If you want to make client support OS except linux and windows, you should install some
additional C compiler.
For example, to support android, you have to install Android NDK.

tutorial

7/9

# Clone this repository.
$ git clone https://github.com/XZB-1248/Spark
$ cd ./Spark

# Here we're going to build front-end pages.
$ cd ./web
# Install all dependencies and build.
$ npm install
$ npm run build-prod

# Embed all static resources into one single file by using statik.
$ cd ..
$ go install github.com/rakyll/statik
$ statik -m -src="./web/dist" -f -dest="./server/embed" -p web -ns web

# Now we should build client.
# When you're using unix-like OS, you can use this.
$ mkdir ./built
$ go mod tidy
$ go mod download
$ ./scripts/build.client.sh

# Finally we're compiling the server side.
$ mkdir ./releases
$ ./scripts/build.server.sh

Then create a new directory with a name you like.
Copy executable file inside releases to that directory.
Copy the whole built directory to that new directory.
Copy configuration file mentioned above to that new directory.
Finally, run the executable file in that directory.

Dependencies
Spark contains many third-party open-source projects.
Lists of dependencies can be found at go.mod and package.json.
Some major dependencies are listed below.

Back-end
Go (License)
gin-gonic/gin (MIT License)
8/9

imroc/req (MIT License)
kbinani/screenshot (MIT License)
shirou/gopsutil (License)
gorilla/websocket (BSD-2-Clause License)
orcaman/concurrent-map (MIT License)

Front-end
React (MIT License)
Ant-Design (MIT License)
axios (MIT License)
xterm.js (MIT License)
crypto-js (MIT License)

Acknowledgements
natpass (MIT License)
Image difference algorithm inspired by natpass.

Stargazers over time
rate limited, please try again later

License
BSD-2 License

9/9